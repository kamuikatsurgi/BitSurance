{
	"compilerInput": "{\"language\":\"Solidity\",\"sources\":{\"Bitsurance.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\r\\npragma solidity ^0.8.0;\\r\\n\\r\\nimport \\\"@openzeppelin/contracts/token/ERC721/ERC721.sol\\\";\\r\\nimport \\\"@openzeppelin/contracts/token/ERC721/extensions/ERC721Burnable.sol\\\";\\r\\n\\r\\n/**\\r\\n * @title Vault\\r\\n * @dev Vault contract that allows for storing balances associated with Token IDs.\\r\\n */\\r\\ncontract Vault {\\r\\n    address public NFTContract;\\r\\n    mapping(uint256 => uint256) public tokenBalances;\\r\\n    uint256 public minimumWithdrawTime;\\r\\n    uint256 public creationTime;\\r\\n    address public bitsurance;\\r\\n    address public admin;\\r\\n\\r\\n    // array to store all insured token ids\\r\\n    uint256[] public tokenIds;\\r\\n\\r\\n    modifier onlyBitsurance{\\r\\n        require(msg.sender == bitsurance, \\\"Only Bitsurance contract can call this function\\\");\\r\\n        _;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Contract constructor that sets initial values\\r\\n     * @param NFTContractAddress address of the NFT contract\\r\\n     * @param minTime minimum time before withdraw\\r\\n     * @param _admin admin address\\r\\n     */\\r\\n    constructor(address NFTContractAddress, uint256 minTime, address _admin) {\\r\\n        NFTContract = NFTContractAddress;\\r\\n        minimumWithdrawTime = minTime;\\r\\n        admin = _admin;\\r\\n        creationTime = block.timestamp;\\r\\n        bitsurance = msg.sender;\\r\\n    }\\r\\n\\r\\n    fallback() external payable{}\\r\\n    receive() external payable{}\\r\\n\\r\\n    /**\\r\\n     * @dev Function to add balance for a specific token ID\\r\\n     * @param _tokenID Token ID to which the balance is added\\r\\n     * @param amount Amount to add to the balance\\r\\n     */\\r\\n    function addBalance(uint256 _tokenID, uint256 amount) external onlyBitsurance {\\r\\n        if (tokenBalances[_tokenID] == 0) {\\r\\n            tokenIds.push(_tokenID);\\r\\n        }\\r\\n        tokenBalances[_tokenID] += amount;\\r\\n    }\\r\\n\\r\\n    function getTokenIds() public view returns(uint256[] memory) {\\r\\n        return tokenIds;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Function to claim funds from the vault\\r\\n     * @param recipient Recipient address to receive the funds\\r\\n     * @param _tokenID Token ID to claim\\r\\n     */\\r\\n    function claimFunds(address payable recipient, uint256 _tokenID) external payable onlyBitsurance {\\r\\n        require(tokenBalances[_tokenID] > 0, \\\"No balance for this tokenID\\\");\\r\\n        require(block.timestamp - creationTime >= minimumWithdrawTime, \\\"Cannot access function before the minimum time has passed\\\");\\r\\n        uint256 amount = tokenBalances[_tokenID];\\r\\n        tokenBalances[_tokenID] = 0;\\r\\n        recipient.transfer(amount);\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Function to withdraw funds from the vault\\r\\n     * @param recipient Recipient address to receive the funds\\r\\n     * @param _tokenIDs Array of Token IDs to withdraw\\r\\n     */\\r\\n    function withdraw(address payable recipient, uint256[] memory _tokenIDs) external payable onlyBitsurance {\\r\\n        require(block.timestamp - creationTime >= minimumWithdrawTime * 2, \\\"Cannot access function before the minimum time has passed\\\");\\r\\n        uint256 totalAmount = 0;\\r\\n        for (uint256 i = 0; i < _tokenIDs.length; i++) {\\r\\n            require(tokenBalances[_tokenIDs[i]] > 0, \\\"No balance for this tokenID\\\");\\r\\n            totalAmount += tokenBalances[_tokenIDs[i]];\\r\\n            tokenBalances[_tokenIDs[i]] = 0;\\r\\n        }\\r\\n        recipient.transfer(totalAmount);\\r\\n    }\\r\\n}\\r\\n/**\\r\\n * @title Bitsurance\\r\\n * @dev Bitsurance contract that interacts with Vaults and manages the creation and operations on them\\r\\n */\\r\\ncontract Bitsurance {\\r\\n\\r\\n    // An array of vaults\\r\\n    Vault[] private vaults;\\r\\n    \\r\\n    // Event to notify when a vault is created\\r\\n    event VaultCreated(uint256 date, address vaultAddress, address NFT_address);\\r\\n\\r\\n    // Mapping of NFT contract address to corresponding vault address\\r\\n    mapping(address => address) public vaultAddress;\\r\\n    \\r\\n    // Mapping of admins to NFT contracts\\r\\n    mapping(address => address) public admins;\\r\\n\\r\\n    /**\\r\\n     * @dev Function to create a new vault\\r\\n     * @param _NFTContractAddress address of the NFT contract\\r\\n     * @param _minTime minimum time before withdrawal\\r\\n     */\\r\\n    function createVault(address _NFTContractAddress, uint256 _minTime) public{\\r\\n        require(vaultAddress[_NFTContractAddress] == address(0), \\\"Vault already exists for this NFT contract\\\");\\r\\n        Vault vault = new Vault(_NFTContractAddress,_minTime, msg.sender);\\r\\n        vaults.push(vault);\\r\\n        vaultAddress[_NFTContractAddress]= address(vault);\\r\\n        admins[msg.sender] = _NFTContractAddress;\\r\\n        emit VaultCreated(block.timestamp,address(vault),_NFTContractAddress);\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Function to deposit funds into a vault\\r\\n     * @param NFTContractAddress address of the NFT contract\\r\\n     * @param _tokenIDs Array of Token IDs for deposit\\r\\n     * @param amounts Array of corresponding amounts for deposit\\r\\n     */\\r\\n    function depositFunds(address NFTContractAddress, uint256[] memory _tokenIDs, uint256[] memory amounts) public payable{\\r\\n        require(vaultAddress[NFTContractAddress] != address(0), \\\"Vault does not exists for this NFT contract\\\");\\r\\n\\r\\n        uint256 useramount = msg.value;\\r\\n        address payable vaultContract_address = payable(getContractAddress(NFTContractAddress));\\r\\n        require(_tokenIDs.length == amounts.length, \\\"Mismatched arrays\\\");\\r\\n        uint256 totalAmount = 0;\\r\\n        Vault vault = Vault(vaultContract_address);\\r\\n        require(vault.admin() == msg.sender, \\\"Only the person who created vault can deposit funds into it\\\");\\r\\n        for (uint256 i = 0; i < _tokenIDs.length; i++) {\\r\\n            totalAmount += amounts[i];\\r\\n        }\\r\\n        require(useramount == totalAmount, \\\"Mismatched total deposit amount\\\");\\r\\n        for (uint256 i = 0; i < _tokenIDs.length; i++) {\\r\\n            vault.addBalance(_tokenIDs[i], amounts[i]);\\r\\n        }\\r\\n        vaultContract_address.transfer(totalAmount);\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Function to withdraw funds from a vault\\r\\n     * @param NFTContractAddress address of the NFT contract\\r\\n     * @param tokenIDs Array of Token IDs for withdrawal\\r\\n     */\\r\\n    function withdrawFunds(address NFTContractAddress, uint256[] memory tokenIDs) public payable{\\r\\n        require(vaultAddress[NFTContractAddress] != address(0), \\\"Vault does not exists for this NFT contract\\\");\\r\\n        \\r\\n        address payable vaultContract_address = payable(getContractAddress(NFTContractAddress));\\r\\n        Vault vault = Vault(vaultContract_address);\\r\\n        require(vault.admin() == msg.sender, \\\"Only the person who created vault can withdraw funds\\\");\\r\\n        vault.withdraw(payable(msg.sender), tokenIDs);\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Function to claim a Token ID from a vault\\r\\n     * @param NFTContractAddress address of the NFT contract\\r\\n     * @param _tokenID Token ID to claim\\r\\n     */\\r\\n    function claim(address NFTContractAddress, uint256 _tokenID) public payable {\\r\\n        require(vaultAddress[NFTContractAddress] != address(0), \\\"Vault does not exists for this NFT contract\\\");\\r\\n\\r\\n        ERC721 token = ERC721(NFTContractAddress);\\r\\n        ERC721Burnable asset = ERC721Burnable(NFTContractAddress);\\r\\n\\r\\n        address payable vaultContract_address = payable(getContractAddress(NFTContractAddress));\\r\\n        address tokenOwner = token.ownerOf(_tokenID);\\r\\n        \\r\\n        require(tokenOwner == msg.sender, \\\"You are not the owner of this token!\\\");\\r\\n        require(token.getApproved(_tokenID) == address(this), \\\"Contract not approved to burn token\\\");\\r\\n\\r\\n        asset.burn(_tokenID);\\r\\n\\r\\n        address payable recipient = payable(msg.sender);\\r\\n        Vault vault = Vault(vaultContract_address);\\r\\n\\r\\n        vault.claimFunds(recipient, _tokenID);\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Function to get the contract address of the vault\\r\\n     * @param NFTContractAddress address of the NFT contract\\r\\n     * @return Address of the vault contract\\r\\n     */\\r\\n    function getContractAddress(address NFTContractAddress) public view returns(address){\\r\\n        return vaultAddress[NFTContractAddress];\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Function to get details of the vault associated with the caller\\r\\n     * @return A tuple containing the total balance of the vault, minimum time before withdraw, \\r\\n     * array of token ids insured, and the associated NFT contract address\\r\\n     */\\r\\n    function getMyVaultDetails() public view returns (uint256, uint256, uint256[] memory, address) {\\r\\n        address nftContractAddress = admins[msg.sender];\\r\\n        require(nftContractAddress != address(0), \\\"No NFT contract associated with caller\\\");\\r\\n\\r\\n        address vaultContractAddress = vaultAddress[nftContractAddress];\\r\\n        require(vaultContractAddress != address(0), \\\"No vault associated with caller's NFT contract\\\");\\r\\n\\r\\n        Vault vault = Vault(payable(vaultContractAddress));\\r\\n        uint256 totalBalance = address(vault).balance;\\r\\n        uint256 minimumWithdrawTime = vault.minimumWithdrawTime();\\r\\n        uint256[] memory insuredTokenIds = vault.getTokenIds();\\r\\n\\r\\n        return (totalBalance, minimumWithdrawTime, insuredTokenIds, nftContractAddress);\\r\\n    }\\r\\n}\"},\"@openzeppelin/contracts/token/ERC721/extensions/ERC721Burnable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.8.0) (token/ERC721/extensions/ERC721Burnable.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../ERC721.sol\\\";\\nimport \\\"../../../utils/Context.sol\\\";\\n\\n/**\\n * @title ERC721 Burnable Token\\n * @dev ERC721 Token that can be burned (destroyed).\\n */\\nabstract contract ERC721Burnable is Context, ERC721 {\\n    /**\\n     * @dev Burns `tokenId`. See {ERC721-_burn}.\\n     *\\n     * Requirements:\\n     *\\n     * - The caller must own `tokenId` or be an approved operator.\\n     */\\n    function burn(uint256 tokenId) public virtual {\\n        //solhint-disable-next-line max-line-length\\n        require(_isApprovedOrOwner(_msgSender(), tokenId), \\\"ERC721: caller is not token owner or approved\\\");\\n        _burn(tokenId);\\n    }\\n}\\n\"},\"@openzeppelin/contracts/token/ERC721/ERC721.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (token/ERC721/ERC721.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./IERC721.sol\\\";\\nimport \\\"./IERC721Receiver.sol\\\";\\nimport \\\"./extensions/IERC721Metadata.sol\\\";\\nimport \\\"../../utils/Address.sol\\\";\\nimport \\\"../../utils/Context.sol\\\";\\nimport \\\"../../utils/Strings.sol\\\";\\nimport \\\"../../utils/introspection/ERC165.sol\\\";\\n\\n/**\\n * @dev Implementation of https://eips.ethereum.org/EIPS/eip-721[ERC721] Non-Fungible Token Standard, including\\n * the Metadata extension, but not including the Enumerable extension, which is available separately as\\n * {ERC721Enumerable}.\\n */\\ncontract ERC721 is Context, ERC165, IERC721, IERC721Metadata {\\n    using Address for address;\\n    using Strings for uint256;\\n\\n    // Token name\\n    string private _name;\\n\\n    // Token symbol\\n    string private _symbol;\\n\\n    // Mapping from token ID to owner address\\n    mapping(uint256 => address) private _owners;\\n\\n    // Mapping owner address to token count\\n    mapping(address => uint256) private _balances;\\n\\n    // Mapping from token ID to approved address\\n    mapping(uint256 => address) private _tokenApprovals;\\n\\n    // Mapping from owner to operator approvals\\n    mapping(address => mapping(address => bool)) private _operatorApprovals;\\n\\n    /**\\n     * @dev Initializes the contract by setting a `name` and a `symbol` to the token collection.\\n     */\\n    constructor(string memory name_, string memory symbol_) {\\n        _name = name_;\\n        _symbol = symbol_;\\n    }\\n\\n    /**\\n     * @dev See {IERC165-supportsInterface}.\\n     */\\n    function supportsInterface(bytes4 interfaceId) public view virtual override(ERC165, IERC165) returns (bool) {\\n        return\\n            interfaceId == type(IERC721).interfaceId ||\\n            interfaceId == type(IERC721Metadata).interfaceId ||\\n            super.supportsInterface(interfaceId);\\n    }\\n\\n    /**\\n     * @dev See {IERC721-balanceOf}.\\n     */\\n    function balanceOf(address owner) public view virtual override returns (uint256) {\\n        require(owner != address(0), \\\"ERC721: address zero is not a valid owner\\\");\\n        return _balances[owner];\\n    }\\n\\n    /**\\n     * @dev See {IERC721-ownerOf}.\\n     */\\n    function ownerOf(uint256 tokenId) public view virtual override returns (address) {\\n        address owner = _ownerOf(tokenId);\\n        require(owner != address(0), \\\"ERC721: invalid token ID\\\");\\n        return owner;\\n    }\\n\\n    /**\\n     * @dev See {IERC721Metadata-name}.\\n     */\\n    function name() public view virtual override returns (string memory) {\\n        return _name;\\n    }\\n\\n    /**\\n     * @dev See {IERC721Metadata-symbol}.\\n     */\\n    function symbol() public view virtual override returns (string memory) {\\n        return _symbol;\\n    }\\n\\n    /**\\n     * @dev See {IERC721Metadata-tokenURI}.\\n     */\\n    function tokenURI(uint256 tokenId) public view virtual override returns (string memory) {\\n        _requireMinted(tokenId);\\n\\n        string memory baseURI = _baseURI();\\n        return bytes(baseURI).length > 0 ? string(abi.encodePacked(baseURI, tokenId.toString())) : \\\"\\\";\\n    }\\n\\n    /**\\n     * @dev Base URI for computing {tokenURI}. If set, the resulting URI for each\\n     * token will be the concatenation of the `baseURI` and the `tokenId`. Empty\\n     * by default, can be overridden in child contracts.\\n     */\\n    function _baseURI() internal view virtual returns (string memory) {\\n        return \\\"\\\";\\n    }\\n\\n    /**\\n     * @dev See {IERC721-approve}.\\n     */\\n    function approve(address to, uint256 tokenId) public virtual override {\\n        address owner = ERC721.ownerOf(tokenId);\\n        require(to != owner, \\\"ERC721: approval to current owner\\\");\\n\\n        require(\\n            _msgSender() == owner || isApprovedForAll(owner, _msgSender()),\\n            \\\"ERC721: approve caller is not token owner or approved for all\\\"\\n        );\\n\\n        _approve(to, tokenId);\\n    }\\n\\n    /**\\n     * @dev See {IERC721-getApproved}.\\n     */\\n    function getApproved(uint256 tokenId) public view virtual override returns (address) {\\n        _requireMinted(tokenId);\\n\\n        return _tokenApprovals[tokenId];\\n    }\\n\\n    /**\\n     * @dev See {IERC721-setApprovalForAll}.\\n     */\\n    function setApprovalForAll(address operator, bool approved) public virtual override {\\n        _setApprovalForAll(_msgSender(), operator, approved);\\n    }\\n\\n    /**\\n     * @dev See {IERC721-isApprovedForAll}.\\n     */\\n    function isApprovedForAll(address owner, address operator) public view virtual override returns (bool) {\\n        return _operatorApprovals[owner][operator];\\n    }\\n\\n    /**\\n     * @dev See {IERC721-transferFrom}.\\n     */\\n    function transferFrom(address from, address to, uint256 tokenId) public virtual override {\\n        //solhint-disable-next-line max-line-length\\n        require(_isApprovedOrOwner(_msgSender(), tokenId), \\\"ERC721: caller is not token owner or approved\\\");\\n\\n        _transfer(from, to, tokenId);\\n    }\\n\\n    /**\\n     * @dev See {IERC721-safeTransferFrom}.\\n     */\\n    function safeTransferFrom(address from, address to, uint256 tokenId) public virtual override {\\n        safeTransferFrom(from, to, tokenId, \\\"\\\");\\n    }\\n\\n    /**\\n     * @dev See {IERC721-safeTransferFrom}.\\n     */\\n    function safeTransferFrom(address from, address to, uint256 tokenId, bytes memory data) public virtual override {\\n        require(_isApprovedOrOwner(_msgSender(), tokenId), \\\"ERC721: caller is not token owner or approved\\\");\\n        _safeTransfer(from, to, tokenId, data);\\n    }\\n\\n    /**\\n     * @dev Safely transfers `tokenId` token from `from` to `to`, checking first that contract recipients\\n     * are aware of the ERC721 protocol to prevent tokens from being forever locked.\\n     *\\n     * `data` is additional data, it has no specified format and it is sent in call to `to`.\\n     *\\n     * This internal function is equivalent to {safeTransferFrom}, and can be used to e.g.\\n     * implement alternative mechanisms to perform token transfer, such as signature-based.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must exist and be owned by `from`.\\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function _safeTransfer(address from, address to, uint256 tokenId, bytes memory data) internal virtual {\\n        _transfer(from, to, tokenId);\\n        require(_checkOnERC721Received(from, to, tokenId, data), \\\"ERC721: transfer to non ERC721Receiver implementer\\\");\\n    }\\n\\n    /**\\n     * @dev Returns the owner of the `tokenId`. Does NOT revert if token doesn't exist\\n     */\\n    function _ownerOf(uint256 tokenId) internal view virtual returns (address) {\\n        return _owners[tokenId];\\n    }\\n\\n    /**\\n     * @dev Returns whether `tokenId` exists.\\n     *\\n     * Tokens can be managed by their owner or approved accounts via {approve} or {setApprovalForAll}.\\n     *\\n     * Tokens start existing when they are minted (`_mint`),\\n     * and stop existing when they are burned (`_burn`).\\n     */\\n    function _exists(uint256 tokenId) internal view virtual returns (bool) {\\n        return _ownerOf(tokenId) != address(0);\\n    }\\n\\n    /**\\n     * @dev Returns whether `spender` is allowed to manage `tokenId`.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must exist.\\n     */\\n    function _isApprovedOrOwner(address spender, uint256 tokenId) internal view virtual returns (bool) {\\n        address owner = ERC721.ownerOf(tokenId);\\n        return (spender == owner || isApprovedForAll(owner, spender) || getApproved(tokenId) == spender);\\n    }\\n\\n    /**\\n     * @dev Safely mints `tokenId` and transfers it to `to`.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must not exist.\\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function _safeMint(address to, uint256 tokenId) internal virtual {\\n        _safeMint(to, tokenId, \\\"\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-ERC721-_safeMint-address-uint256-}[`_safeMint`], with an additional `data` parameter which is\\n     * forwarded in {IERC721Receiver-onERC721Received} to contract recipients.\\n     */\\n    function _safeMint(address to, uint256 tokenId, bytes memory data) internal virtual {\\n        _mint(to, tokenId);\\n        require(\\n            _checkOnERC721Received(address(0), to, tokenId, data),\\n            \\\"ERC721: transfer to non ERC721Receiver implementer\\\"\\n        );\\n    }\\n\\n    /**\\n     * @dev Mints `tokenId` and transfers it to `to`.\\n     *\\n     * WARNING: Usage of this method is discouraged, use {_safeMint} whenever possible\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must not exist.\\n     * - `to` cannot be the zero address.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function _mint(address to, uint256 tokenId) internal virtual {\\n        require(to != address(0), \\\"ERC721: mint to the zero address\\\");\\n        require(!_exists(tokenId), \\\"ERC721: token already minted\\\");\\n\\n        _beforeTokenTransfer(address(0), to, tokenId, 1);\\n\\n        // Check that tokenId was not minted by `_beforeTokenTransfer` hook\\n        require(!_exists(tokenId), \\\"ERC721: token already minted\\\");\\n\\n        unchecked {\\n            // Will not overflow unless all 2**256 token ids are minted to the same owner.\\n            // Given that tokens are minted one by one, it is impossible in practice that\\n            // this ever happens. Might change if we allow batch minting.\\n            // The ERC fails to describe this case.\\n            _balances[to] += 1;\\n        }\\n\\n        _owners[tokenId] = to;\\n\\n        emit Transfer(address(0), to, tokenId);\\n\\n        _afterTokenTransfer(address(0), to, tokenId, 1);\\n    }\\n\\n    /**\\n     * @dev Destroys `tokenId`.\\n     * The approval is cleared when the token is burned.\\n     * This is an internal function that does not check if the sender is authorized to operate on the token.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must exist.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function _burn(uint256 tokenId) internal virtual {\\n        address owner = ERC721.ownerOf(tokenId);\\n\\n        _beforeTokenTransfer(owner, address(0), tokenId, 1);\\n\\n        // Update ownership in case tokenId was transferred by `_beforeTokenTransfer` hook\\n        owner = ERC721.ownerOf(tokenId);\\n\\n        // Clear approvals\\n        delete _tokenApprovals[tokenId];\\n\\n        unchecked {\\n            // Cannot overflow, as that would require more tokens to be burned/transferred\\n            // out than the owner initially received through minting and transferring in.\\n            _balances[owner] -= 1;\\n        }\\n        delete _owners[tokenId];\\n\\n        emit Transfer(owner, address(0), tokenId);\\n\\n        _afterTokenTransfer(owner, address(0), tokenId, 1);\\n    }\\n\\n    /**\\n     * @dev Transfers `tokenId` from `from` to `to`.\\n     *  As opposed to {transferFrom}, this imposes no restrictions on msg.sender.\\n     *\\n     * Requirements:\\n     *\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must be owned by `from`.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function _transfer(address from, address to, uint256 tokenId) internal virtual {\\n        require(ERC721.ownerOf(tokenId) == from, \\\"ERC721: transfer from incorrect owner\\\");\\n        require(to != address(0), \\\"ERC721: transfer to the zero address\\\");\\n\\n        _beforeTokenTransfer(from, to, tokenId, 1);\\n\\n        // Check that tokenId was not transferred by `_beforeTokenTransfer` hook\\n        require(ERC721.ownerOf(tokenId) == from, \\\"ERC721: transfer from incorrect owner\\\");\\n\\n        // Clear approvals from the previous owner\\n        delete _tokenApprovals[tokenId];\\n\\n        unchecked {\\n            // `_balances[from]` cannot overflow for the same reason as described in `_burn`:\\n            // `from`'s balance is the number of token held, which is at least one before the current\\n            // transfer.\\n            // `_balances[to]` could overflow in the conditions described in `_mint`. That would require\\n            // all 2**256 token ids to be minted, which in practice is impossible.\\n            _balances[from] -= 1;\\n            _balances[to] += 1;\\n        }\\n        _owners[tokenId] = to;\\n\\n        emit Transfer(from, to, tokenId);\\n\\n        _afterTokenTransfer(from, to, tokenId, 1);\\n    }\\n\\n    /**\\n     * @dev Approve `to` to operate on `tokenId`\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function _approve(address to, uint256 tokenId) internal virtual {\\n        _tokenApprovals[tokenId] = to;\\n        emit Approval(ERC721.ownerOf(tokenId), to, tokenId);\\n    }\\n\\n    /**\\n     * @dev Approve `operator` to operate on all of `owner` tokens\\n     *\\n     * Emits an {ApprovalForAll} event.\\n     */\\n    function _setApprovalForAll(address owner, address operator, bool approved) internal virtual {\\n        require(owner != operator, \\\"ERC721: approve to caller\\\");\\n        _operatorApprovals[owner][operator] = approved;\\n        emit ApprovalForAll(owner, operator, approved);\\n    }\\n\\n    /**\\n     * @dev Reverts if the `tokenId` has not been minted yet.\\n     */\\n    function _requireMinted(uint256 tokenId) internal view virtual {\\n        require(_exists(tokenId), \\\"ERC721: invalid token ID\\\");\\n    }\\n\\n    /**\\n     * @dev Internal function to invoke {IERC721Receiver-onERC721Received} on a target address.\\n     * The call is not executed if the target address is not a contract.\\n     *\\n     * @param from address representing the previous owner of the given token ID\\n     * @param to target address that will receive the tokens\\n     * @param tokenId uint256 ID of the token to be transferred\\n     * @param data bytes optional data to send along with the call\\n     * @return bool whether the call correctly returned the expected magic value\\n     */\\n    function _checkOnERC721Received(\\n        address from,\\n        address to,\\n        uint256 tokenId,\\n        bytes memory data\\n    ) private returns (bool) {\\n        if (to.isContract()) {\\n            try IERC721Receiver(to).onERC721Received(_msgSender(), from, tokenId, data) returns (bytes4 retval) {\\n                return retval == IERC721Receiver.onERC721Received.selector;\\n            } catch (bytes memory reason) {\\n                if (reason.length == 0) {\\n                    revert(\\\"ERC721: transfer to non ERC721Receiver implementer\\\");\\n                } else {\\n                    /// @solidity memory-safe-assembly\\n                    assembly {\\n                        revert(add(32, reason), mload(reason))\\n                    }\\n                }\\n            }\\n        } else {\\n            return true;\\n        }\\n    }\\n\\n    /**\\n     * @dev Hook that is called before any token transfer. This includes minting and burning. If {ERC721Consecutive} is\\n     * used, the hook may be called as part of a consecutive (batch) mint, as indicated by `batchSize` greater than 1.\\n     *\\n     * Calling conditions:\\n     *\\n     * - When `from` and `to` are both non-zero, ``from``'s tokens will be transferred to `to`.\\n     * - When `from` is zero, the tokens will be minted for `to`.\\n     * - When `to` is zero, ``from``'s tokens will be burned.\\n     * - `from` and `to` are never both zero.\\n     * - `batchSize` is non-zero.\\n     *\\n     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\\n     */\\n    function _beforeTokenTransfer(address from, address to, uint256 firstTokenId, uint256 batchSize) internal virtual {}\\n\\n    /**\\n     * @dev Hook that is called after any token transfer. This includes minting and burning. If {ERC721Consecutive} is\\n     * used, the hook may be called as part of a consecutive (batch) mint, as indicated by `batchSize` greater than 1.\\n     *\\n     * Calling conditions:\\n     *\\n     * - When `from` and `to` are both non-zero, ``from``'s tokens were transferred to `to`.\\n     * - When `from` is zero, the tokens were minted for `to`.\\n     * - When `to` is zero, ``from``'s tokens were burned.\\n     * - `from` and `to` are never both zero.\\n     * - `batchSize` is non-zero.\\n     *\\n     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\\n     */\\n    function _afterTokenTransfer(address from, address to, uint256 firstTokenId, uint256 batchSize) internal virtual {}\\n\\n    /**\\n     * @dev Unsafe write access to the balances, used by extensions that \\\"mint\\\" tokens using an {ownerOf} override.\\n     *\\n     * WARNING: Anyone calling this MUST ensure that the balances remain consistent with the ownership. The invariant\\n     * being that for any address `a` the value returned by `balanceOf(a)` must be equal to the number of tokens such\\n     * that `ownerOf(tokenId)` is `a`.\\n     */\\n    // solhint-disable-next-line func-name-mixedcase\\n    function __unsafe_increaseBalance(address account, uint256 amount) internal {\\n        _balances[account] += amount;\\n    }\\n}\\n\"},\"@openzeppelin/contracts/utils/Context.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/Context.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract Context {\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        return msg.data;\\n    }\\n}\\n\"},\"@openzeppelin/contracts/utils/introspection/ERC165.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/introspection/ERC165.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./IERC165.sol\\\";\\n\\n/**\\n * @dev Implementation of the {IERC165} interface.\\n *\\n * Contracts that want to implement ERC165 should inherit from this contract and override {supportsInterface} to check\\n * for the additional interface id that will be supported. For example:\\n *\\n * ```solidity\\n * function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\\n *     return interfaceId == type(MyInterface).interfaceId || super.supportsInterface(interfaceId);\\n * }\\n * ```\\n *\\n * Alternatively, {ERC165Storage} provides an easier to use but more expensive implementation.\\n */\\nabstract contract ERC165 is IERC165 {\\n    /**\\n     * @dev See {IERC165-supportsInterface}.\\n     */\\n    function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\\n        return interfaceId == type(IERC165).interfaceId;\\n    }\\n}\\n\"},\"@openzeppelin/contracts/utils/Strings.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (utils/Strings.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./math/Math.sol\\\";\\nimport \\\"./math/SignedMath.sol\\\";\\n\\n/**\\n * @dev String operations.\\n */\\nlibrary Strings {\\n    bytes16 private constant _SYMBOLS = \\\"0123456789abcdef\\\";\\n    uint8 private constant _ADDRESS_LENGTH = 20;\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` decimal representation.\\n     */\\n    function toString(uint256 value) internal pure returns (string memory) {\\n        unchecked {\\n            uint256 length = Math.log10(value) + 1;\\n            string memory buffer = new string(length);\\n            uint256 ptr;\\n            /// @solidity memory-safe-assembly\\n            assembly {\\n                ptr := add(buffer, add(32, length))\\n            }\\n            while (true) {\\n                ptr--;\\n                /// @solidity memory-safe-assembly\\n                assembly {\\n                    mstore8(ptr, byte(mod(value, 10), _SYMBOLS))\\n                }\\n                value /= 10;\\n                if (value == 0) break;\\n            }\\n            return buffer;\\n        }\\n    }\\n\\n    /**\\n     * @dev Converts a `int256` to its ASCII `string` decimal representation.\\n     */\\n    function toString(int256 value) internal pure returns (string memory) {\\n        return string(abi.encodePacked(value < 0 ? \\\"-\\\" : \\\"\\\", toString(SignedMath.abs(value))));\\n    }\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation.\\n     */\\n    function toHexString(uint256 value) internal pure returns (string memory) {\\n        unchecked {\\n            return toHexString(value, Math.log256(value) + 1);\\n        }\\n    }\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation with fixed length.\\n     */\\n    function toHexString(uint256 value, uint256 length) internal pure returns (string memory) {\\n        bytes memory buffer = new bytes(2 * length + 2);\\n        buffer[0] = \\\"0\\\";\\n        buffer[1] = \\\"x\\\";\\n        for (uint256 i = 2 * length + 1; i > 1; --i) {\\n            buffer[i] = _SYMBOLS[value & 0xf];\\n            value >>= 4;\\n        }\\n        require(value == 0, \\\"Strings: hex length insufficient\\\");\\n        return string(buffer);\\n    }\\n\\n    /**\\n     * @dev Converts an `address` with fixed length of 20 bytes to its not checksummed ASCII `string` hexadecimal representation.\\n     */\\n    function toHexString(address addr) internal pure returns (string memory) {\\n        return toHexString(uint256(uint160(addr)), _ADDRESS_LENGTH);\\n    }\\n\\n    /**\\n     * @dev Returns true if the two strings are equal.\\n     */\\n    function equal(string memory a, string memory b) internal pure returns (bool) {\\n        return keccak256(bytes(a)) == keccak256(bytes(b));\\n    }\\n}\\n\"},\"@openzeppelin/contracts/utils/Address.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (utils/Address.sol)\\n\\npragma solidity ^0.8.1;\\n\\n/**\\n * @dev Collection of functions related to the address type\\n */\\nlibrary Address {\\n    /**\\n     * @dev Returns true if `account` is a contract.\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * It is unsafe to assume that an address for which this function returns\\n     * false is an externally-owned account (EOA) and not a contract.\\n     *\\n     * Among others, `isContract` will return false for the following\\n     * types of addresses:\\n     *\\n     *  - an externally-owned account\\n     *  - a contract in construction\\n     *  - an address where a contract will be created\\n     *  - an address where a contract lived, but was destroyed\\n     *\\n     * Furthermore, `isContract` will also return true if the target contract within\\n     * the same transaction is already scheduled for destruction by `SELFDESTRUCT`,\\n     * which only has an effect at the end of a transaction.\\n     * ====\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * You shouldn't rely on `isContract` to protect against flash loan attacks!\\n     *\\n     * Preventing calls from contracts is highly discouraged. It breaks composability, breaks support for smart wallets\\n     * like Gnosis Safe, and does not provide security since it can be circumvented by calling from a contract\\n     * constructor.\\n     * ====\\n     */\\n    function isContract(address account) internal view returns (bool) {\\n        // This method relies on extcodesize/address.code.length, which returns 0\\n        // for contracts in construction, since the code is only stored at the end\\n        // of the constructor execution.\\n\\n        return account.code.length > 0;\\n    }\\n\\n    /**\\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\\n     * `recipient`, forwarding all available gas and reverting on errors.\\n     *\\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\\n     * imposed by `transfer`, making them unable to receive funds via\\n     * `transfer`. {sendValue} removes this limitation.\\n     *\\n     * https://consensys.net/diligence/blog/2019/09/stop-using-soliditys-transfer-now/[Learn more].\\n     *\\n     * IMPORTANT: because control is transferred to `recipient`, care must be\\n     * taken to not create reentrancy vulnerabilities. Consider using\\n     * {ReentrancyGuard} or the\\n     * https://solidity.readthedocs.io/en/v0.8.0/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\\n     */\\n    function sendValue(address payable recipient, uint256 amount) internal {\\n        require(address(this).balance >= amount, \\\"Address: insufficient balance\\\");\\n\\n        (bool success, ) = recipient.call{value: amount}(\\\"\\\");\\n        require(success, \\\"Address: unable to send value, recipient may have reverted\\\");\\n    }\\n\\n    /**\\n     * @dev Performs a Solidity function call using a low level `call`. A\\n     * plain `call` is an unsafe replacement for a function call: use this\\n     * function instead.\\n     *\\n     * If `target` reverts with a revert reason, it is bubbled up by this\\n     * function (like regular Solidity function calls).\\n     *\\n     * Returns the raw returned data. To convert to the expected return value,\\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\\n     *\\n     * Requirements:\\n     *\\n     * - `target` must be a contract.\\n     * - calling `target` with `data` must not revert.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, \\\"Address: low-level call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\\n     * `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but also transferring `value` wei to `target`.\\n     *\\n     * Requirements:\\n     *\\n     * - the calling contract must have an ETH balance of at least `value`.\\n     * - the called Solidity function must be `payable`.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(address target, bytes memory data, uint256 value) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, value, \\\"Address: low-level call with value failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(address(this).balance >= value, \\\"Address: insufficient balance for call\\\");\\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\\n        return functionStaticCall(target, data, \\\"Address: low-level static call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        (bool success, bytes memory returndata) = target.staticcall(data);\\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionDelegateCall(target, data, \\\"Address: low-level delegate call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        (bool success, bytes memory returndata) = target.delegatecall(data);\\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Tool to verify that a low level call to smart-contract was successful, and revert (either by bubbling\\n     * the revert reason or using the provided one) in case of unsuccessful call or if target was not a contract.\\n     *\\n     * _Available since v4.8._\\n     */\\n    function verifyCallResultFromTarget(\\n        address target,\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        if (success) {\\n            if (returndata.length == 0) {\\n                // only check isContract if the call was successful and the return data is empty\\n                // otherwise we already know that it was a contract\\n                require(isContract(target), \\\"Address: call to non-contract\\\");\\n            }\\n            return returndata;\\n        } else {\\n            _revert(returndata, errorMessage);\\n        }\\n    }\\n\\n    /**\\n     * @dev Tool to verify that a low level call was successful, and revert if it wasn't, either by bubbling the\\n     * revert reason or using the provided one.\\n     *\\n     * _Available since v4.3._\\n     */\\n    function verifyCallResult(\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal pure returns (bytes memory) {\\n        if (success) {\\n            return returndata;\\n        } else {\\n            _revert(returndata, errorMessage);\\n        }\\n    }\\n\\n    function _revert(bytes memory returndata, string memory errorMessage) private pure {\\n        // Look for revert reason and bubble it up if present\\n        if (returndata.length > 0) {\\n            // The easiest way to bubble the revert reason is using memory via assembly\\n            /// @solidity memory-safe-assembly\\n            assembly {\\n                let returndata_size := mload(returndata)\\n                revert(add(32, returndata), returndata_size)\\n            }\\n        } else {\\n            revert(errorMessage);\\n        }\\n    }\\n}\\n\"},\"@openzeppelin/contracts/token/ERC721/extensions/IERC721Metadata.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (token/ERC721/extensions/IERC721Metadata.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../IERC721.sol\\\";\\n\\n/**\\n * @title ERC-721 Non-Fungible Token Standard, optional metadata extension\\n * @dev See https://eips.ethereum.org/EIPS/eip-721\\n */\\ninterface IERC721Metadata is IERC721 {\\n    /**\\n     * @dev Returns the token collection name.\\n     */\\n    function name() external view returns (string memory);\\n\\n    /**\\n     * @dev Returns the token collection symbol.\\n     */\\n    function symbol() external view returns (string memory);\\n\\n    /**\\n     * @dev Returns the Uniform Resource Identifier (URI) for `tokenId` token.\\n     */\\n    function tokenURI(uint256 tokenId) external view returns (string memory);\\n}\\n\"},\"@openzeppelin/contracts/token/ERC721/IERC721Receiver.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.6.0) (token/ERC721/IERC721Receiver.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @title ERC721 token receiver interface\\n * @dev Interface for any contract that wants to support safeTransfers\\n * from ERC721 asset contracts.\\n */\\ninterface IERC721Receiver {\\n    /**\\n     * @dev Whenever an {IERC721} `tokenId` token is transferred to this contract via {IERC721-safeTransferFrom}\\n     * by `operator` from `from`, this function is called.\\n     *\\n     * It must return its Solidity selector to confirm the token transfer.\\n     * If any other value is returned or the interface is not implemented by the recipient, the transfer will be reverted.\\n     *\\n     * The selector can be obtained in Solidity with `IERC721Receiver.onERC721Received.selector`.\\n     */\\n    function onERC721Received(\\n        address operator,\\n        address from,\\n        uint256 tokenId,\\n        bytes calldata data\\n    ) external returns (bytes4);\\n}\\n\"},\"@openzeppelin/contracts/token/ERC721/IERC721.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (token/ERC721/IERC721.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../../utils/introspection/IERC165.sol\\\";\\n\\n/**\\n * @dev Required interface of an ERC721 compliant contract.\\n */\\ninterface IERC721 is IERC165 {\\n    /**\\n     * @dev Emitted when `tokenId` token is transferred from `from` to `to`.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 indexed tokenId);\\n\\n    /**\\n     * @dev Emitted when `owner` enables `approved` to manage the `tokenId` token.\\n     */\\n    event Approval(address indexed owner, address indexed approved, uint256 indexed tokenId);\\n\\n    /**\\n     * @dev Emitted when `owner` enables or disables (`approved`) `operator` to manage all of its assets.\\n     */\\n    event ApprovalForAll(address indexed owner, address indexed operator, bool approved);\\n\\n    /**\\n     * @dev Returns the number of tokens in ``owner``'s account.\\n     */\\n    function balanceOf(address owner) external view returns (uint256 balance);\\n\\n    /**\\n     * @dev Returns the owner of the `tokenId` token.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must exist.\\n     */\\n    function ownerOf(uint256 tokenId) external view returns (address owner);\\n\\n    /**\\n     * @dev Safely transfers `tokenId` token from `from` to `to`.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must exist and be owned by `from`.\\n     * - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}.\\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function safeTransferFrom(address from, address to, uint256 tokenId, bytes calldata data) external;\\n\\n    /**\\n     * @dev Safely transfers `tokenId` token from `from` to `to`, checking first that contract recipients\\n     * are aware of the ERC721 protocol to prevent tokens from being forever locked.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must exist and be owned by `from`.\\n     * - If the caller is not `from`, it must have been allowed to move this token by either {approve} or {setApprovalForAll}.\\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function safeTransferFrom(address from, address to, uint256 tokenId) external;\\n\\n    /**\\n     * @dev Transfers `tokenId` token from `from` to `to`.\\n     *\\n     * WARNING: Note that the caller is responsible to confirm that the recipient is capable of receiving ERC721\\n     * or else they may be permanently lost. Usage of {safeTransferFrom} prevents loss, though the caller must\\n     * understand this adds an external call which potentially creates a reentrancy vulnerability.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must be owned by `from`.\\n     * - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(address from, address to, uint256 tokenId) external;\\n\\n    /**\\n     * @dev Gives permission to `to` to transfer `tokenId` token to another account.\\n     * The approval is cleared when the token is transferred.\\n     *\\n     * Only a single account can be approved at a time, so approving the zero address clears previous approvals.\\n     *\\n     * Requirements:\\n     *\\n     * - The caller must own the token or be an approved operator.\\n     * - `tokenId` must exist.\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address to, uint256 tokenId) external;\\n\\n    /**\\n     * @dev Approve or remove `operator` as an operator for the caller.\\n     * Operators can call {transferFrom} or {safeTransferFrom} for any token owned by the caller.\\n     *\\n     * Requirements:\\n     *\\n     * - The `operator` cannot be the caller.\\n     *\\n     * Emits an {ApprovalForAll} event.\\n     */\\n    function setApprovalForAll(address operator, bool approved) external;\\n\\n    /**\\n     * @dev Returns the account approved for `tokenId` token.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must exist.\\n     */\\n    function getApproved(uint256 tokenId) external view returns (address operator);\\n\\n    /**\\n     * @dev Returns if the `operator` is allowed to manage all of the assets of `owner`.\\n     *\\n     * See {setApprovalForAll}\\n     */\\n    function isApprovedForAll(address owner, address operator) external view returns (bool);\\n}\\n\"},\"@openzeppelin/contracts/utils/introspection/IERC165.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/introspection/IERC165.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC165 standard, as defined in the\\n * https://eips.ethereum.org/EIPS/eip-165[EIP].\\n *\\n * Implementers can declare support of contract interfaces, which can then be\\n * queried by others ({ERC165Checker}).\\n *\\n * For an implementation, see {ERC165}.\\n */\\ninterface IERC165 {\\n    /**\\n     * @dev Returns true if this contract implements the interface defined by\\n     * `interfaceId`. See the corresponding\\n     * https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[EIP section]\\n     * to learn more about how these ids are created.\\n     *\\n     * This function call must use less than 30 000 gas.\\n     */\\n    function supportsInterface(bytes4 interfaceId) external view returns (bool);\\n}\\n\"},\"@openzeppelin/contracts/utils/math/SignedMath.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.8.0) (utils/math/SignedMath.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Standard signed math utilities missing in the Solidity language.\\n */\\nlibrary SignedMath {\\n    /**\\n     * @dev Returns the largest of two signed numbers.\\n     */\\n    function max(int256 a, int256 b) internal pure returns (int256) {\\n        return a > b ? a : b;\\n    }\\n\\n    /**\\n     * @dev Returns the smallest of two signed numbers.\\n     */\\n    function min(int256 a, int256 b) internal pure returns (int256) {\\n        return a < b ? a : b;\\n    }\\n\\n    /**\\n     * @dev Returns the average of two signed numbers without overflow.\\n     * The result is rounded towards zero.\\n     */\\n    function average(int256 a, int256 b) internal pure returns (int256) {\\n        // Formula from the book \\\"Hacker's Delight\\\"\\n        int256 x = (a & b) + ((a ^ b) >> 1);\\n        return x + (int256(uint256(x) >> 255) & (a ^ b));\\n    }\\n\\n    /**\\n     * @dev Returns the absolute unsigned value of a signed value.\\n     */\\n    function abs(int256 n) internal pure returns (uint256) {\\n        unchecked {\\n            // must be unchecked in order to support `n = type(int256).min`\\n            return uint256(n >= 0 ? n : -n);\\n        }\\n    }\\n}\\n\"},\"@openzeppelin/contracts/utils/math/Math.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (utils/math/Math.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Standard math utilities missing in the Solidity language.\\n */\\nlibrary Math {\\n    enum Rounding {\\n        Down, // Toward negative infinity\\n        Up, // Toward infinity\\n        Zero // Toward zero\\n    }\\n\\n    /**\\n     * @dev Returns the largest of two numbers.\\n     */\\n    function max(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a > b ? a : b;\\n    }\\n\\n    /**\\n     * @dev Returns the smallest of two numbers.\\n     */\\n    function min(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a < b ? a : b;\\n    }\\n\\n    /**\\n     * @dev Returns the average of two numbers. The result is rounded towards\\n     * zero.\\n     */\\n    function average(uint256 a, uint256 b) internal pure returns (uint256) {\\n        // (a + b) / 2 can overflow.\\n        return (a & b) + (a ^ b) / 2;\\n    }\\n\\n    /**\\n     * @dev Returns the ceiling of the division of two numbers.\\n     *\\n     * This differs from standard division with `/` in that it rounds up instead\\n     * of rounding down.\\n     */\\n    function ceilDiv(uint256 a, uint256 b) internal pure returns (uint256) {\\n        // (a + b - 1) / b can overflow on addition, so we distribute.\\n        return a == 0 ? 0 : (a - 1) / b + 1;\\n    }\\n\\n    /**\\n     * @notice Calculates floor(x * y / denominator) with full precision. Throws if result overflows a uint256 or denominator == 0\\n     * @dev Original credit to Remco Bloemen under MIT license (https://xn--2-umb.com/21/muldiv)\\n     * with further edits by Uniswap Labs also under MIT license.\\n     */\\n    function mulDiv(uint256 x, uint256 y, uint256 denominator) internal pure returns (uint256 result) {\\n        unchecked {\\n            // 512-bit multiply [prod1 prod0] = x * y. Compute the product mod 2^256 and mod 2^256 - 1, then use\\n            // use the Chinese Remainder Theorem to reconstruct the 512 bit result. The result is stored in two 256\\n            // variables such that product = prod1 * 2^256 + prod0.\\n            uint256 prod0; // Least significant 256 bits of the product\\n            uint256 prod1; // Most significant 256 bits of the product\\n            assembly {\\n                let mm := mulmod(x, y, not(0))\\n                prod0 := mul(x, y)\\n                prod1 := sub(sub(mm, prod0), lt(mm, prod0))\\n            }\\n\\n            // Handle non-overflow cases, 256 by 256 division.\\n            if (prod1 == 0) {\\n                // Solidity will revert if denominator == 0, unlike the div opcode on its own.\\n                // The surrounding unchecked block does not change this fact.\\n                // See https://docs.soliditylang.org/en/latest/control-structures.html#checked-or-unchecked-arithmetic.\\n                return prod0 / denominator;\\n            }\\n\\n            // Make sure the result is less than 2^256. Also prevents denominator == 0.\\n            require(denominator > prod1, \\\"Math: mulDiv overflow\\\");\\n\\n            ///////////////////////////////////////////////\\n            // 512 by 256 division.\\n            ///////////////////////////////////////////////\\n\\n            // Make division exact by subtracting the remainder from [prod1 prod0].\\n            uint256 remainder;\\n            assembly {\\n                // Compute remainder using mulmod.\\n                remainder := mulmod(x, y, denominator)\\n\\n                // Subtract 256 bit number from 512 bit number.\\n                prod1 := sub(prod1, gt(remainder, prod0))\\n                prod0 := sub(prod0, remainder)\\n            }\\n\\n            // Factor powers of two out of denominator and compute largest power of two divisor of denominator. Always >= 1.\\n            // See https://cs.stackexchange.com/q/138556/92363.\\n\\n            // Does not overflow because the denominator cannot be zero at this stage in the function.\\n            uint256 twos = denominator & (~denominator + 1);\\n            assembly {\\n                // Divide denominator by twos.\\n                denominator := div(denominator, twos)\\n\\n                // Divide [prod1 prod0] by twos.\\n                prod0 := div(prod0, twos)\\n\\n                // Flip twos such that it is 2^256 / twos. If twos is zero, then it becomes one.\\n                twos := add(div(sub(0, twos), twos), 1)\\n            }\\n\\n            // Shift in bits from prod1 into prod0.\\n            prod0 |= prod1 * twos;\\n\\n            // Invert denominator mod 2^256. Now that denominator is an odd number, it has an inverse modulo 2^256 such\\n            // that denominator * inv = 1 mod 2^256. Compute the inverse by starting with a seed that is correct for\\n            // four bits. That is, denominator * inv = 1 mod 2^4.\\n            uint256 inverse = (3 * denominator) ^ 2;\\n\\n            // Use the Newton-Raphson iteration to improve the precision. Thanks to Hensel's lifting lemma, this also works\\n            // in modular arithmetic, doubling the correct bits in each step.\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^8\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^16\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^32\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^64\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^128\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^256\\n\\n            // Because the division is now exact we can divide by multiplying with the modular inverse of denominator.\\n            // This will give us the correct result modulo 2^256. Since the preconditions guarantee that the outcome is\\n            // less than 2^256, this is the final result. We don't need to compute the high bits of the result and prod1\\n            // is no longer required.\\n            result = prod0 * inverse;\\n            return result;\\n        }\\n    }\\n\\n    /**\\n     * @notice Calculates x * y / denominator with full precision, following the selected rounding direction.\\n     */\\n    function mulDiv(uint256 x, uint256 y, uint256 denominator, Rounding rounding) internal pure returns (uint256) {\\n        uint256 result = mulDiv(x, y, denominator);\\n        if (rounding == Rounding.Up && mulmod(x, y, denominator) > 0) {\\n            result += 1;\\n        }\\n        return result;\\n    }\\n\\n    /**\\n     * @dev Returns the square root of a number. If the number is not a perfect square, the value is rounded down.\\n     *\\n     * Inspired by Henry S. Warren, Jr.'s \\\"Hacker's Delight\\\" (Chapter 11).\\n     */\\n    function sqrt(uint256 a) internal pure returns (uint256) {\\n        if (a == 0) {\\n            return 0;\\n        }\\n\\n        // For our first guess, we get the biggest power of 2 which is smaller than the square root of the target.\\n        //\\n        // We know that the \\\"msb\\\" (most significant bit) of our target number `a` is a power of 2 such that we have\\n        // `msb(a) <= a < 2*msb(a)`. This value can be written `msb(a)=2**k` with `k=log2(a)`.\\n        //\\n        // This can be rewritten `2**log2(a) <= a < 2**(log2(a) + 1)`\\n        // → `sqrt(2**k) <= sqrt(a) < sqrt(2**(k+1))`\\n        // → `2**(k/2) <= sqrt(a) < 2**((k+1)/2) <= 2**(k/2 + 1)`\\n        //\\n        // Consequently, `2**(log2(a) / 2)` is a good first approximation of `sqrt(a)` with at least 1 correct bit.\\n        uint256 result = 1 << (log2(a) >> 1);\\n\\n        // At this point `result` is an estimation with one bit of precision. We know the true value is a uint128,\\n        // since it is the square root of a uint256. Newton's method converges quadratically (precision doubles at\\n        // every iteration). We thus need at most 7 iteration to turn our partial result with one bit of precision\\n        // into the expected uint128 result.\\n        unchecked {\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            return min(result, a / result);\\n        }\\n    }\\n\\n    /**\\n     * @notice Calculates sqrt(a), following the selected rounding direction.\\n     */\\n    function sqrt(uint256 a, Rounding rounding) internal pure returns (uint256) {\\n        unchecked {\\n            uint256 result = sqrt(a);\\n            return result + (rounding == Rounding.Up && result * result < a ? 1 : 0);\\n        }\\n    }\\n\\n    /**\\n     * @dev Return the log in base 2, rounded down, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log2(uint256 value) internal pure returns (uint256) {\\n        uint256 result = 0;\\n        unchecked {\\n            if (value >> 128 > 0) {\\n                value >>= 128;\\n                result += 128;\\n            }\\n            if (value >> 64 > 0) {\\n                value >>= 64;\\n                result += 64;\\n            }\\n            if (value >> 32 > 0) {\\n                value >>= 32;\\n                result += 32;\\n            }\\n            if (value >> 16 > 0) {\\n                value >>= 16;\\n                result += 16;\\n            }\\n            if (value >> 8 > 0) {\\n                value >>= 8;\\n                result += 8;\\n            }\\n            if (value >> 4 > 0) {\\n                value >>= 4;\\n                result += 4;\\n            }\\n            if (value >> 2 > 0) {\\n                value >>= 2;\\n                result += 2;\\n            }\\n            if (value >> 1 > 0) {\\n                result += 1;\\n            }\\n        }\\n        return result;\\n    }\\n\\n    /**\\n     * @dev Return the log in base 2, following the selected rounding direction, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log2(uint256 value, Rounding rounding) internal pure returns (uint256) {\\n        unchecked {\\n            uint256 result = log2(value);\\n            return result + (rounding == Rounding.Up && 1 << result < value ? 1 : 0);\\n        }\\n    }\\n\\n    /**\\n     * @dev Return the log in base 10, rounded down, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log10(uint256 value) internal pure returns (uint256) {\\n        uint256 result = 0;\\n        unchecked {\\n            if (value >= 10 ** 64) {\\n                value /= 10 ** 64;\\n                result += 64;\\n            }\\n            if (value >= 10 ** 32) {\\n                value /= 10 ** 32;\\n                result += 32;\\n            }\\n            if (value >= 10 ** 16) {\\n                value /= 10 ** 16;\\n                result += 16;\\n            }\\n            if (value >= 10 ** 8) {\\n                value /= 10 ** 8;\\n                result += 8;\\n            }\\n            if (value >= 10 ** 4) {\\n                value /= 10 ** 4;\\n                result += 4;\\n            }\\n            if (value >= 10 ** 2) {\\n                value /= 10 ** 2;\\n                result += 2;\\n            }\\n            if (value >= 10 ** 1) {\\n                result += 1;\\n            }\\n        }\\n        return result;\\n    }\\n\\n    /**\\n     * @dev Return the log in base 10, following the selected rounding direction, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log10(uint256 value, Rounding rounding) internal pure returns (uint256) {\\n        unchecked {\\n            uint256 result = log10(value);\\n            return result + (rounding == Rounding.Up && 10 ** result < value ? 1 : 0);\\n        }\\n    }\\n\\n    /**\\n     * @dev Return the log in base 256, rounded down, of a positive value.\\n     * Returns 0 if given 0.\\n     *\\n     * Adding one to the result gives the number of pairs of hex symbols needed to represent `value` as a hex string.\\n     */\\n    function log256(uint256 value) internal pure returns (uint256) {\\n        uint256 result = 0;\\n        unchecked {\\n            if (value >> 128 > 0) {\\n                value >>= 128;\\n                result += 16;\\n            }\\n            if (value >> 64 > 0) {\\n                value >>= 64;\\n                result += 8;\\n            }\\n            if (value >> 32 > 0) {\\n                value >>= 32;\\n                result += 4;\\n            }\\n            if (value >> 16 > 0) {\\n                value >>= 16;\\n                result += 2;\\n            }\\n            if (value >> 8 > 0) {\\n                result += 1;\\n            }\\n        }\\n        return result;\\n    }\\n\\n    /**\\n     * @dev Return the log in base 256, following the selected rounding direction, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log256(uint256 value, Rounding rounding) internal pure returns (uint256) {\\n        unchecked {\\n            uint256 result = log256(value);\\n            return result + (rounding == Rounding.Up && 1 << (result << 3) < value ? 1 : 0);\\n        }\\n    }\\n}\\n\"}},\"settings\":{\"optimizer\":{\"enabled\":false,\"runs\":200},\"outputSelection\":{\"*\":{\"\":[\"ast\"],\"*\":[\"abi\",\"metadata\",\"devdoc\",\"userdoc\",\"storageLayout\",\"evm.legacyAssembly\",\"evm.bytecode\",\"evm.deployedBytecode\",\"evm.methodIdentifiers\",\"evm.gasEstimates\",\"evm.assembly\"]}}}}",
	"name": "Bitsurance",
	"metadata": "{\"compiler\":{\"version\":\"0.8.18+commit.87f61d96\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"date\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"vaultAddress\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"NFT_address\",\"type\":\"address\"}],\"name\":\"VaultCreated\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"admins\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"NFTContractAddress\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_tokenID\",\"type\":\"uint256\"}],\"name\":\"claim\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_NFTContractAddress\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_minTime\",\"type\":\"uint256\"}],\"name\":\"createVault\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"NFTContractAddress\",\"type\":\"address\"},{\"internalType\":\"uint256[]\",\"name\":\"_tokenIDs\",\"type\":\"uint256[]\"},{\"internalType\":\"uint256[]\",\"name\":\"amounts\",\"type\":\"uint256[]\"}],\"name\":\"depositFunds\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"NFTContractAddress\",\"type\":\"address\"}],\"name\":\"getContractAddress\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getMyVaultDetails\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"uint256[]\",\"name\":\"\",\"type\":\"uint256[]\"},{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"vaultAddress\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"NFTContractAddress\",\"type\":\"address\"},{\"internalType\":\"uint256[]\",\"name\":\"tokenIDs\",\"type\":\"uint256[]\"}],\"name\":\"withdrawFunds\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"}],\"devdoc\":{\"details\":\"Bitsurance contract that interacts with Vaults and manages the creation and operations on them\",\"kind\":\"dev\",\"methods\":{\"claim(address,uint256)\":{\"details\":\"Function to claim a Token ID from a vault\",\"params\":{\"NFTContractAddress\":\"address of the NFT contract\",\"_tokenID\":\"Token ID to claim\"}},\"createVault(address,uint256)\":{\"details\":\"Function to create a new vault\",\"params\":{\"_NFTContractAddress\":\"address of the NFT contract\",\"_minTime\":\"minimum time before withdrawal\"}},\"depositFunds(address,uint256[],uint256[])\":{\"details\":\"Function to deposit funds into a vault\",\"params\":{\"NFTContractAddress\":\"address of the NFT contract\",\"_tokenIDs\":\"Array of Token IDs for deposit\",\"amounts\":\"Array of corresponding amounts for deposit\"}},\"getContractAddress(address)\":{\"details\":\"Function to get the contract address of the vault\",\"params\":{\"NFTContractAddress\":\"address of the NFT contract\"},\"returns\":{\"_0\":\"Address of the vault contract\"}},\"getMyVaultDetails()\":{\"details\":\"Function to get details of the vault associated with the caller\",\"returns\":{\"_0\":\"A tuple containing the total balance of the vault, minimum time before withdraw,  array of token ids insured, and the associated NFT contract address\"}},\"withdrawFunds(address,uint256[])\":{\"details\":\"Function to withdraw funds from a vault\",\"params\":{\"NFTContractAddress\":\"address of the NFT contract\",\"tokenIDs\":\"Array of Token IDs for withdrawal\"}}},\"title\":\"Bitsurance\",\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"Bitsurance.sol\":\"Bitsurance\"},\"evmVersion\":\"paris\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\"},\"optimizer\":{\"enabled\":false,\"runs\":200},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts/token/ERC721/ERC721.sol\":{\"keccak256\":\"0x2c309e7df9e05e6ce15bedfe74f3c61b467fc37e0fae9eab496acf5ea0bbd7ff\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://7063b5c98711a98018ba4635ac74cee1c1cfa2ea01099498e062699ed9530005\",\"dweb:/ipfs/QmeJ8rGXkcv7RrqLdAW8PCXPAykxVsddfYY6g5NaTwmRFE\"]},\"@openzeppelin/contracts/token/ERC721/IERC721.sol\":{\"keccak256\":\"0x5bce51e11f7d194b79ea59fe00c9e8de9fa2c5530124960f29a24d4c740a3266\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://7e66dfde185df46104c11bc89d08fa0760737aa59a2b8546a656473d810a8ea4\",\"dweb:/ipfs/QmXvyqtXPaPss2PD7eqPoSao5Szm2n6UMoiG8TZZDjmChR\"]},\"@openzeppelin/contracts/token/ERC721/IERC721Receiver.sol\":{\"keccak256\":\"0xa82b58eca1ee256be466e536706850163d2ec7821945abd6b4778cfb3bee37da\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://6e75cf83beb757b8855791088546b8337e9d4684e169400c20d44a515353b708\",\"dweb:/ipfs/QmYvPafLfoquiDMEj7CKHtvbgHu7TJNPSVPSCjrtjV8HjV\"]},\"@openzeppelin/contracts/token/ERC721/extensions/ERC721Burnable.sol\":{\"keccak256\":\"0x52da94e59d870f54ca0eb4f485c3d9602011f668ba34d72c88124a1496ebaab1\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://09656a37963a61e79df0b718ad0ec323cd29d409d6ead33dbb91d0770ff87fa4\",\"dweb:/ipfs/QmXLWCYoMpZ4SecK4kVaL53LZWXZNbQG8gUzACmZ6A64rE\"]},\"@openzeppelin/contracts/token/ERC721/extensions/IERC721Metadata.sol\":{\"keccak256\":\"0x75b829ff2f26c14355d1cba20e16fe7b29ca58eb5fef665ede48bc0f9c6c74b9\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://a0a107160525724f9e1bbbab031defc2f298296dd9e331f16a6f7130cec32146\",\"dweb:/ipfs/QmemujxSd7gX8A9M8UwmNbz4Ms3U9FG9QfudUgxwvTmPWf\"]},\"@openzeppelin/contracts/utils/Address.sol\":{\"keccak256\":\"0x006dd67219697fe68d7fbfdea512e7c4cb64a43565ed86171d67e844982da6fa\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://2455248c8ddd9cc6a7af76a13973cddf222072427e7b0e2a7d1aff345145e931\",\"dweb:/ipfs/QmfYjnjRbWqYpuxurqveE6HtzsY1Xx323J428AKQgtBJZm\"]},\"@openzeppelin/contracts/utils/Context.sol\":{\"keccak256\":\"0xe2e337e6dde9ef6b680e07338c493ebea1b5fd09b43424112868e9cc1706bca7\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://6df0ddf21ce9f58271bdfaa85cde98b200ef242a05a3f85c2bc10a8294800a92\",\"dweb:/ipfs/QmRK2Y5Yc6BK7tGKkgsgn3aJEQGi5aakeSPZvS65PV8Xp3\"]},\"@openzeppelin/contracts/utils/Strings.sol\":{\"keccak256\":\"0x3088eb2868e8d13d89d16670b5f8612c4ab9ff8956272837d8e90106c59c14a0\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://b81d9ff6559ea5c47fc573e17ece6d9ba5d6839e213e6ebc3b4c5c8fe4199d7f\",\"dweb:/ipfs/QmPCW1bFisUzJkyjroY3yipwfism9RRCigCcK1hbXtVM8n\"]},\"@openzeppelin/contracts/utils/introspection/ERC165.sol\":{\"keccak256\":\"0xd10975de010d89fd1c78dc5e8a9a7e7f496198085c151648f20cba166b32582b\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://fb0048dee081f6fffa5f74afc3fb328483c2a30504e94a0ddd2a5114d731ec4d\",\"dweb:/ipfs/QmZptt1nmYoA5SgjwnSgWqgUSDgm4q52Yos3xhnMv3MV43\"]},\"@openzeppelin/contracts/utils/introspection/IERC165.sol\":{\"keccak256\":\"0x447a5f3ddc18419d41ff92b3773fb86471b1db25773e07f877f548918a185bf1\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://be161e54f24e5c6fae81a12db1a8ae87bc5ae1b0ddc805d82a1440a68455088f\",\"dweb:/ipfs/QmP7C3CHdY9urF4dEMb9wmsp1wMxHF6nhA2yQE5SKiPAdy\"]},\"@openzeppelin/contracts/utils/math/Math.sol\":{\"keccak256\":\"0xe4455ac1eb7fc497bb7402579e7b4d64d928b846fce7d2b6fde06d366f21c2b3\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://cc8841b3cd48ad125e2f46323c8bad3aa0e88e399ec62acb9e57efa7e7c8058c\",\"dweb:/ipfs/QmSqE4mXHA2BXW58deDbXE8MTcsL5JSKNDbm23sVQxRLPS\"]},\"@openzeppelin/contracts/utils/math/SignedMath.sol\":{\"keccak256\":\"0xf92515413956f529d95977adc9b0567d583c6203fc31ab1c23824c35187e3ddc\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://c50fcc459e49a9858b6d8ad5f911295cb7c9ab57567845a250bf0153f84a95c7\",\"dweb:/ipfs/QmcEW85JRzvDkQggxiBBLVAasXWdkhEysqypj9EaB6H2g6\"]},\"Bitsurance.sol\":{\"keccak256\":\"0xd0b59cbcc920b8545f6f96922706415d53b701c70175d43a4bb75c4cad5d3455\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://1ec6102a333519443fd56b3555942c51cd84ed99f3a1d64f53fd8d13405a5b0c\",\"dweb:/ipfs/QmSdF4WFVAnakKU8GpohkUfCZd4STB1roD2ofyqp4XR4qb\"]}},\"version\":1}",
	"bytecode": {
		"functionDebugData": {},
		"generatedSources": [],
		"linkReferences": {},
		"object": "608060405234801561001057600080fd5b50613313806100206000396000f3fe608060405260043610620000865760003560e01c8063622bc90e1162000055578063622bc90e14620001745780637f30952314620001b8578063a3648ec014620001d8578063aad3ec9614620001f85762000086565b80630db6f34d146200008b5780631cb3d31414620000be578063429b62e514620001025780635f76dfc01462000146575b600080fd5b3480156200009857600080fd5b50620000a362000218565b604051620000b594939291906200137b565b60405180910390f35b348015620000cb57600080fd5b50620000ea6004803603810190620000e4919062001414565b620004f4565b604051620000f9919062001446565b60405180910390f35b3480156200010f57600080fd5b506200012e600480360381019062000128919062001414565b62000527565b6040516200013d919062001446565b60405180910390f35b3480156200015357600080fd5b506200017260048036038101906200016c919062001494565b6200055a565b005b3480156200018157600080fd5b50620001a060048036038101906200019a919062001414565b6200080d565b604051620001af919062001446565b60405180910390f35b620001d66004803603810190620001d0919062001650565b62000876565b005b620001f66004803603810190620001f09190620016ea565b62000c40565b005b62000216600480360381019062000210919062001494565b62000e7e565b005b6000806060600080600260003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff169050600073ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff1603620002f4576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401620002eb90620017d7565b60405180910390fd5b6000600160008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff169050600073ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff1603620003ca576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401620003c1906200186f565b60405180910390fd5b600081905060008173ffffffffffffffffffffffffffffffffffffffff1631905060008273ffffffffffffffffffffffffffffffffffffffff16638fd251656040518163ffffffff1660e01b8152600401602060405180830381865afa15801562000439573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906200045f9190620018a8565b905060008373ffffffffffffffffffffffffffffffffffffffff166367f718a96040518163ffffffff1660e01b8152600401600060405180830381865afa158015620004af573d6000803e3d6000fd5b505050506040513d6000823e3d601f19601f82011682018060405250810190620004da919062001981565b905082828288995099509950995050505050505090919293565b60016020528060005260406000206000915054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b60026020528060005260406000206000915054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b600073ffffffffffffffffffffffffffffffffffffffff16600160008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16146200062b576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401620006229062001a48565b60405180910390fd5b60008282336040516200063e906200123f565b6200064c9392919062001a6a565b604051809103906000f08015801562000669573d6000803e3d6000fd5b5090506000819080600181540180825580915050600190039060005260206000200160009091909190916101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555080600160008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555082600260003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055507fa8596cc4a052ecc7656e9ca0fb7a10472573699e3aa34ac5659bc37c1b0a44fc428285604051620008009392919062001aa7565b60405180910390a1505050565b6000600160008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff169050919050565b600073ffffffffffffffffffffffffffffffffffffffff16600160008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff160362000947576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016200093e9062001b5a565b60405180910390fd5b6000349050600062000959856200080d565b90508251845114620009a2576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401620009999062001bcc565b60405180910390fd5b6000808290503373ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff1663f851a4406040518163ffffffff1660e01b8152600401602060405180830381865afa15801562000a0b573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019062000a31919062001c05565b73ffffffffffffffffffffffffffffffffffffffff161462000a8a576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040162000a819062001cad565b60405180910390fd5b60005b865181101562000ada5785818151811062000aad5762000aac62001ccf565b5b60200260200101518362000ac2919062001d2d565b9250808062000ad19062001d68565b91505062000a8d565b5081841462000b20576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040162000b179062001e05565b60405180910390fd5b60005b865181101562000bee578173ffffffffffffffffffffffffffffffffffffffff1663a40398a688838151811062000b5f5762000b5e62001ccf565b5b602002602001015188848151811062000b7d5762000b7c62001ccf565b5b60200260200101516040518363ffffffff1660e01b815260040162000ba492919062001e27565b600060405180830381600087803b15801562000bbf57600080fd5b505af115801562000bd4573d6000803e3d6000fd5b50505050808062000be59062001d68565b91505062000b23565b508273ffffffffffffffffffffffffffffffffffffffff166108fc839081150290604051600060405180830381858888f1935050505015801562000c36573d6000803e3d6000fd5b5050505050505050565b600073ffffffffffffffffffffffffffffffffffffffff16600160008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff160362000d11576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040162000d089062001b5a565b60405180910390fd5b600062000d1e836200080d565b905060008190503373ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff1663f851a4406040518163ffffffff1660e01b8152600401602060405180830381865afa15801562000d88573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019062000dae919062001c05565b73ffffffffffffffffffffffffffffffffffffffff161462000e07576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040162000dfe9062001eca565b60405180910390fd5b8073ffffffffffffffffffffffffffffffffffffffff16638293744b33856040518363ffffffff1660e01b815260040162000e4492919062001f11565b600060405180830381600087803b15801562000e5f57600080fd5b505af115801562000e74573d6000803e3d6000fd5b5050505050505050565b600073ffffffffffffffffffffffffffffffffffffffff16600160008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff160362000f4f576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040162000f469062001b5a565b60405180910390fd5b60008290506000839050600062000f66856200080d565b905060008373ffffffffffffffffffffffffffffffffffffffff16636352211e866040518263ffffffff1660e01b815260040162000fa5919062001f45565b602060405180830381865afa15801562000fc3573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019062000fe9919062001c05565b90503373ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff16146200105c576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401620010539062001fd8565b60405180910390fd5b3073ffffffffffffffffffffffffffffffffffffffff168473ffffffffffffffffffffffffffffffffffffffff1663081812fc876040518263ffffffff1660e01b8152600401620010ae919062001f45565b602060405180830381865afa158015620010cc573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190620010f2919062001c05565b73ffffffffffffffffffffffffffffffffffffffff16146200114b576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401620011429062002070565b60405180910390fd5b8273ffffffffffffffffffffffffffffffffffffffff166342966c68866040518263ffffffff1660e01b815260040162001186919062001f45565b600060405180830381600087803b158015620011a157600080fd5b505af1158015620011b6573d6000803e3d6000fd5b50505050600033905060008390508073ffffffffffffffffffffffffffffffffffffffff1663ed2b40ea83896040518363ffffffff1660e01b81526004016200120192919062002092565b600060405180830381600087803b1580156200121c57600080fd5b505af115801562001231573d6000803e3d6000fd5b505050505050505050505050565b61121e80620020c083390190565b6000819050919050565b62001262816200124d565b82525050565b600081519050919050565b600082825260208201905092915050565b6000819050602082019050919050565b6200129f816200124d565b82525050565b6000620012b3838362001294565b60208301905092915050565b6000602082019050919050565b6000620012d98262001268565b620012e5818562001273565b9350620012f28362001284565b8060005b83811015620013295781516200130d8882620012a5565b97506200131a83620012bf565b925050600181019050620012f6565b5085935050505092915050565b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b6000620013638262001336565b9050919050565b620013758162001356565b82525050565b600060808201905062001392600083018762001257565b620013a1602083018662001257565b8181036040830152620013b58185620012cc565b9050620013c660608301846200136a565b95945050505050565b6000604051905090565b600080fd5b600080fd5b620013ee8162001356565b8114620013fa57600080fd5b50565b6000813590506200140e81620013e3565b92915050565b6000602082840312156200142d576200142c620013d9565b5b60006200143d84828501620013fd565b91505092915050565b60006020820190506200145d60008301846200136a565b92915050565b6200146e816200124d565b81146200147a57600080fd5b50565b6000813590506200148e8162001463565b92915050565b60008060408385031215620014ae57620014ad620013d9565b5b6000620014be85828601620013fd565b9250506020620014d1858286016200147d565b9150509250929050565b600080fd5b6000601f19601f8301169050919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b6200152b82620014e0565b810181811067ffffffffffffffff821117156200154d576200154c620014f1565b5b80604052505050565b600062001562620013cf565b905062001570828262001520565b919050565b600067ffffffffffffffff821115620015935762001592620014f1565b5b602082029050602081019050919050565b600080fd5b6000620015c0620015ba8462001575565b62001556565b90508083825260208201905060208402830185811115620015e657620015e5620015a4565b5b835b81811015620016135780620015fe88826200147d565b845260208401935050602081019050620015e8565b5050509392505050565b600082601f830112620016355762001634620014db565b5b813562001647848260208601620015a9565b91505092915050565b6000806000606084860312156200166c576200166b620013d9565b5b60006200167c86828701620013fd565b935050602084013567ffffffffffffffff811115620016a0576200169f620013de565b5b620016ae868287016200161d565b925050604084013567ffffffffffffffff811115620016d257620016d1620013de565b5b620016e0868287016200161d565b9150509250925092565b60008060408385031215620017045762001703620013d9565b5b60006200171485828601620013fd565b925050602083013567ffffffffffffffff811115620017385762001737620013de565b5b62001746858286016200161d565b9150509250929050565b600082825260208201905092915050565b7f4e6f204e465420636f6e7472616374206173736f63696174656420776974682060008201527f63616c6c65720000000000000000000000000000000000000000000000000000602082015250565b6000620017bf60268362001750565b9150620017cc8262001761565b604082019050919050565b60006020820190508181036000830152620017f281620017b0565b9050919050565b7f4e6f207661756c74206173736f63696174656420776974682063616c6c65722760008201527f73204e465420636f6e7472616374000000000000000000000000000000000000602082015250565b600062001857602e8362001750565b91506200186482620017f9565b604082019050919050565b600060208201905081810360008301526200188a8162001848565b9050919050565b600081519050620018a28162001463565b92915050565b600060208284031215620018c157620018c0620013d9565b5b6000620018d18482850162001891565b91505092915050565b6000620018f1620018eb8462001575565b62001556565b90508083825260208201905060208402830185811115620019175762001916620015a4565b5b835b818110156200194457806200192f888262001891565b84526020840193505060208101905062001919565b5050509392505050565b600082601f830112620019665762001965620014db565b5b815162001978848260208601620018da565b91505092915050565b6000602082840312156200199a5762001999620013d9565b5b600082015167ffffffffffffffff811115620019bb57620019ba620013de565b5b620019c9848285016200194e565b91505092915050565b7f5661756c7420616c72656164792065786973747320666f722074686973204e4660008201527f5420636f6e747261637400000000000000000000000000000000000000000000602082015250565b600062001a30602a8362001750565b915062001a3d82620019d2565b604082019050919050565b6000602082019050818103600083015262001a638162001a21565b9050919050565b600060608201905062001a8160008301866200136a565b62001a90602083018562001257565b62001a9f60408301846200136a565b949350505050565b600060608201905062001abe600083018662001257565b62001acd60208301856200136a565b62001adc60408301846200136a565b949350505050565b7f5661756c7420646f6573206e6f742065786973747320666f722074686973204e60008201527f465420636f6e7472616374000000000000000000000000000000000000000000602082015250565b600062001b42602b8362001750565b915062001b4f8262001ae4565b604082019050919050565b6000602082019050818103600083015262001b758162001b33565b9050919050565b7f4d69736d61746368656420617272617973000000000000000000000000000000600082015250565b600062001bb460118362001750565b915062001bc18262001b7c565b602082019050919050565b6000602082019050818103600083015262001be78162001ba5565b9050919050565b60008151905062001bff81620013e3565b92915050565b60006020828403121562001c1e5762001c1d620013d9565b5b600062001c2e8482850162001bee565b91505092915050565b7f4f6e6c792074686520706572736f6e2077686f2063726561746564207661756c60008201527f742063616e206465706f7369742066756e647320696e746f2069740000000000602082015250565b600062001c95603b8362001750565b915062001ca28262001c37565b604082019050919050565b6000602082019050818103600083015262001cc88162001c86565b9050919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b600062001d3a826200124d565b915062001d47836200124d565b925082820190508082111562001d625762001d6162001cfe565b5b92915050565b600062001d75826200124d565b91507fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff820362001daa5762001da962001cfe565b5b600182019050919050565b7f4d69736d61746368656420746f74616c206465706f73697420616d6f756e7400600082015250565b600062001ded601f8362001750565b915062001dfa8262001db5565b602082019050919050565b6000602082019050818103600083015262001e208162001dde565b9050919050565b600060408201905062001e3e600083018562001257565b62001e4d602083018462001257565b9392505050565b7f4f6e6c792074686520706572736f6e2077686f2063726561746564207661756c60008201527f742063616e2077697468647261772066756e6473000000000000000000000000602082015250565b600062001eb260348362001750565b915062001ebf8262001e54565b604082019050919050565b6000602082019050818103600083015262001ee58162001ea3565b9050919050565b600062001ef98262001336565b9050919050565b62001f0b8162001eec565b82525050565b600060408201905062001f28600083018562001f00565b818103602083015262001f3c8184620012cc565b90509392505050565b600060208201905062001f5c600083018462001257565b92915050565b7f596f7520617265206e6f7420746865206f776e6572206f66207468697320746f60008201527f6b656e2100000000000000000000000000000000000000000000000000000000602082015250565b600062001fc060248362001750565b915062001fcd8262001f62565b604082019050919050565b6000602082019050818103600083015262001ff38162001fb1565b9050919050565b7f436f6e7472616374206e6f7420617070726f76656420746f206275726e20746f60008201527f6b656e0000000000000000000000000000000000000000000000000000000000602082015250565b60006200205860238362001750565b9150620020658262001ffa565b604082019050919050565b600060208201905081810360008301526200208b8162002049565b9050919050565b6000604082019050620020a9600083018562001f00565b620020b8602083018462001257565b939250505056fe60806040523480156200001157600080fd5b506040516200121e3803806200121e8339818101604052810190620000379190620001b5565b826000806101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055508160028190555080600560006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055504260038190555033600460006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555050505062000211565b600080fd5b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b6000620001428262000115565b9050919050565b620001548162000135565b81146200016057600080fd5b50565b600081519050620001748162000149565b92915050565b6000819050919050565b6200018f816200017a565b81146200019b57600080fd5b50565b600081519050620001af8162000184565b92915050565b600080600060608486031215620001d157620001d062000110565b5b6000620001e18682870162000163565b9350506020620001f4868287016200019e565b9250506040620002078682870162000163565b9150509250925092565b610ffd80620002216000396000f3fe6080604052600436106100a05760003560e01c80638fd25165116100645780638fd2516514610183578063a40398a6146101ae578063d58778d6146101d7578063d8270dce14610214578063ed2b40ea1461023f578063f851a4401461025b576100a7565b806331c2273b146100a9578063505658d9146100d45780635e4f6cab146100ff57806367f718a91461013c5780638293744b14610167576100a7565b366100a757005b005b3480156100b557600080fd5b506100be610286565b6040516100cb91906108c7565b60405180910390f35b3480156100e057600080fd5b506100e96102aa565b6040516100f691906108c7565b60405180910390f35b34801561010b57600080fd5b506101266004803603810190610121919061092c565b6102d0565b6040516101339190610968565b60405180910390f35b34801561014857600080fd5b506101516102e8565b60405161015e9190610a41565b60405180910390f35b610181600480360381019061017c9190610bfa565b610340565b005b34801561018f57600080fd5b50610198610578565b6040516101a59190610968565b60405180910390f35b3480156101ba57600080fd5b506101d560048036038101906101d09190610c56565b61057e565b005b3480156101e357600080fd5b506101fe60048036038101906101f9919061092c565b610681565b60405161020b9190610968565b60405180910390f35b34801561022057600080fd5b506102296106a5565b6040516102369190610968565b60405180910390f35b61025960048036038101906102549190610c96565b6106ab565b005b34801561026757600080fd5b50610270610860565b60405161027d91906108c7565b60405180910390f35b60008054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b600460009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b60016020528060005260406000206000915090505481565b6060600680548060200260200160405190810160405280929190818152602001828054801561033657602002820191906000526020600020905b815481526020019060010190808311610322575b5050505050905090565b600460009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff16146103d0576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016103c790610d59565b60405180910390fd5b600280546103de9190610da8565b600354426103ec9190610dea565b101561042d576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161042490610e90565b60405180910390fd5b6000805b825181101561052b5760006001600085848151811061045357610452610eb0565b5b6020026020010151815260200190815260200160002054116104aa576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016104a190610f2b565b60405180910390fd5b600160008483815181106104c1576104c0610eb0565b5b6020026020010151815260200190815260200160002054826104e39190610f4b565b91506000600160008584815181106104fe576104fd610eb0565b5b6020026020010151815260200190815260200160002081905550808061052390610f7f565b915050610431565b508273ffffffffffffffffffffffffffffffffffffffff166108fc829081150290604051600060405180830381858888f19350505050158015610572573d6000803e3d6000fd5b50505050565b60025481565b600460009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff161461060e576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161060590610d59565b60405180910390fd5b60006001600084815260200190815260200160002054036106535760068290806001815401808255809150506001900390600052602060002001600090919091909150555b806001600084815260200190815260200160002060008282546106769190610f4b565b925050819055505050565b6006818154811061069157600080fd5b906000526020600020016000915090505481565b60035481565b600460009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff161461073b576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161073290610d59565b60405180910390fd5b6000600160008381526020019081526020016000205411610791576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161078890610f2b565b60405180910390fd5b600254600354426107a29190610dea565b10156107e3576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016107da90610e90565b60405180910390fd5b600060016000838152602001908152602001600020549050600060016000848152602001908152602001600020819055508273ffffffffffffffffffffffffffffffffffffffff166108fc829081150290604051600060405180830381858888f1935050505015801561085a573d6000803e3d6000fd5b50505050565b600560009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b60006108b182610886565b9050919050565b6108c1816108a6565b82525050565b60006020820190506108dc60008301846108b8565b92915050565b6000604051905090565b600080fd5b600080fd5b6000819050919050565b610909816108f6565b811461091457600080fd5b50565b60008135905061092681610900565b92915050565b600060208284031215610942576109416108ec565b5b600061095084828501610917565b91505092915050565b610962816108f6565b82525050565b600060208201905061097d6000830184610959565b92915050565b600081519050919050565b600082825260208201905092915050565b6000819050602082019050919050565b6109b8816108f6565b82525050565b60006109ca83836109af565b60208301905092915050565b6000602082019050919050565b60006109ee82610983565b6109f8818561098e565b9350610a038361099f565b8060005b83811015610a34578151610a1b88826109be565b9750610a26836109d6565b925050600181019050610a07565b5085935050505092915050565b60006020820190508181036000830152610a5b81846109e3565b905092915050565b6000610a6e82610886565b9050919050565b610a7e81610a63565b8114610a8957600080fd5b50565b600081359050610a9b81610a75565b92915050565b600080fd5b6000601f19601f8301169050919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b610aef82610aa6565b810181811067ffffffffffffffff82111715610b0e57610b0d610ab7565b5b80604052505050565b6000610b216108e2565b9050610b2d8282610ae6565b919050565b600067ffffffffffffffff821115610b4d57610b4c610ab7565b5b602082029050602081019050919050565b600080fd5b6000610b76610b7184610b32565b610b17565b90508083825260208201905060208402830185811115610b9957610b98610b5e565b5b835b81811015610bc25780610bae8882610917565b845260208401935050602081019050610b9b565b5050509392505050565b600082601f830112610be157610be0610aa1565b5b8135610bf1848260208601610b63565b91505092915050565b60008060408385031215610c1157610c106108ec565b5b6000610c1f85828601610a8c565b925050602083013567ffffffffffffffff811115610c4057610c3f6108f1565b5b610c4c85828601610bcc565b9150509250929050565b60008060408385031215610c6d57610c6c6108ec565b5b6000610c7b85828601610917565b9250506020610c8c85828601610917565b9150509250929050565b60008060408385031215610cad57610cac6108ec565b5b6000610cbb85828601610a8c565b9250506020610ccc85828601610917565b9150509250929050565b600082825260208201905092915050565b7f4f6e6c7920426974737572616e636520636f6e74726163742063616e2063616c60008201527f6c20746869732066756e6374696f6e0000000000000000000000000000000000602082015250565b6000610d43602f83610cd6565b9150610d4e82610ce7565b604082019050919050565b60006020820190508181036000830152610d7281610d36565b9050919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b6000610db3826108f6565b9150610dbe836108f6565b9250828202610dcc816108f6565b91508282048414831517610de357610de2610d79565b5b5092915050565b6000610df5826108f6565b9150610e00836108f6565b9250828203905081811115610e1857610e17610d79565b5b92915050565b7f43616e6e6f74206163636573732066756e6374696f6e206265666f726520746860008201527f65206d696e696d756d2074696d65206861732070617373656400000000000000602082015250565b6000610e7a603983610cd6565b9150610e8582610e1e565b604082019050919050565b60006020820190508181036000830152610ea981610e6d565b9050919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b7f4e6f2062616c616e636520666f72207468697320746f6b656e49440000000000600082015250565b6000610f15601b83610cd6565b9150610f2082610edf565b602082019050919050565b60006020820190508181036000830152610f4481610f08565b9050919050565b6000610f56826108f6565b9150610f61836108f6565b9250828201905080821115610f7957610f78610d79565b5b92915050565b6000610f8a826108f6565b91507fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff8203610fbc57610fbb610d79565b5b60018201905091905056fea26469706673582212206b9b96cb8730c8a6f1babf870770a66b17a6b9760fd6ef1c71ba328de2e6083c64736f6c63430008120033a2646970667358221220989f0457d23eca59953258acf1c2677a4f2c18e1599e6bffc5c50e780412dae364736f6c63430008120033",
		"opcodes": "PUSH1 0x80 PUSH1 0x40 MSTORE CALLVALUE DUP1 ISZERO PUSH2 0x10 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x3313 DUP1 PUSH2 0x20 PUSH1 0x0 CODECOPY PUSH1 0x0 RETURN INVALID PUSH1 0x80 PUSH1 0x40 MSTORE PUSH1 0x4 CALLDATASIZE LT PUSH3 0x86 JUMPI PUSH1 0x0 CALLDATALOAD PUSH1 0xE0 SHR DUP1 PUSH4 0x622BC90E GT PUSH3 0x55 JUMPI DUP1 PUSH4 0x622BC90E EQ PUSH3 0x174 JUMPI DUP1 PUSH4 0x7F309523 EQ PUSH3 0x1B8 JUMPI DUP1 PUSH4 0xA3648EC0 EQ PUSH3 0x1D8 JUMPI DUP1 PUSH4 0xAAD3EC96 EQ PUSH3 0x1F8 JUMPI PUSH3 0x86 JUMP JUMPDEST DUP1 PUSH4 0xDB6F34D EQ PUSH3 0x8B JUMPI DUP1 PUSH4 0x1CB3D314 EQ PUSH3 0xBE JUMPI DUP1 PUSH4 0x429B62E5 EQ PUSH3 0x102 JUMPI DUP1 PUSH4 0x5F76DFC0 EQ PUSH3 0x146 JUMPI JUMPDEST PUSH1 0x0 DUP1 REVERT JUMPDEST CALLVALUE DUP1 ISZERO PUSH3 0x98 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH3 0xA3 PUSH3 0x218 JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH3 0xB5 SWAP5 SWAP4 SWAP3 SWAP2 SWAP1 PUSH3 0x137B JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 RETURN JUMPDEST CALLVALUE DUP1 ISZERO PUSH3 0xCB JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH3 0xEA PUSH1 0x4 DUP1 CALLDATASIZE SUB DUP2 ADD SWAP1 PUSH3 0xE4 SWAP2 SWAP1 PUSH3 0x1414 JUMP JUMPDEST PUSH3 0x4F4 JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH3 0xF9 SWAP2 SWAP1 PUSH3 0x1446 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 RETURN JUMPDEST CALLVALUE DUP1 ISZERO PUSH3 0x10F JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH3 0x12E PUSH1 0x4 DUP1 CALLDATASIZE SUB DUP2 ADD SWAP1 PUSH3 0x128 SWAP2 SWAP1 PUSH3 0x1414 JUMP JUMPDEST PUSH3 0x527 JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH3 0x13D SWAP2 SWAP1 PUSH3 0x1446 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 RETURN JUMPDEST CALLVALUE DUP1 ISZERO PUSH3 0x153 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH3 0x172 PUSH1 0x4 DUP1 CALLDATASIZE SUB DUP2 ADD SWAP1 PUSH3 0x16C SWAP2 SWAP1 PUSH3 0x1494 JUMP JUMPDEST PUSH3 0x55A JUMP JUMPDEST STOP JUMPDEST CALLVALUE DUP1 ISZERO PUSH3 0x181 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH3 0x1A0 PUSH1 0x4 DUP1 CALLDATASIZE SUB DUP2 ADD SWAP1 PUSH3 0x19A SWAP2 SWAP1 PUSH3 0x1414 JUMP JUMPDEST PUSH3 0x80D JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH3 0x1AF SWAP2 SWAP1 PUSH3 0x1446 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 RETURN JUMPDEST PUSH3 0x1D6 PUSH1 0x4 DUP1 CALLDATASIZE SUB DUP2 ADD SWAP1 PUSH3 0x1D0 SWAP2 SWAP1 PUSH3 0x1650 JUMP JUMPDEST PUSH3 0x876 JUMP JUMPDEST STOP JUMPDEST PUSH3 0x1F6 PUSH1 0x4 DUP1 CALLDATASIZE SUB DUP2 ADD SWAP1 PUSH3 0x1F0 SWAP2 SWAP1 PUSH3 0x16EA JUMP JUMPDEST PUSH3 0xC40 JUMP JUMPDEST STOP JUMPDEST PUSH3 0x216 PUSH1 0x4 DUP1 CALLDATASIZE SUB DUP2 ADD SWAP1 PUSH3 0x210 SWAP2 SWAP1 PUSH3 0x1494 JUMP JUMPDEST PUSH3 0xE7E JUMP JUMPDEST STOP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x60 PUSH1 0x0 DUP1 PUSH1 0x2 PUSH1 0x0 CALLER PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP2 MSTORE PUSH1 0x20 ADD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 KECCAK256 PUSH1 0x0 SWAP1 SLOAD SWAP1 PUSH2 0x100 EXP SWAP1 DIV PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND SWAP1 POP PUSH1 0x0 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP2 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND SUB PUSH3 0x2F4 JUMPI PUSH1 0x40 MLOAD PUSH32 0x8C379A000000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD PUSH3 0x2EB SWAP1 PUSH3 0x17D7 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST PUSH1 0x0 PUSH1 0x1 PUSH1 0x0 DUP4 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP2 MSTORE PUSH1 0x20 ADD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 KECCAK256 PUSH1 0x0 SWAP1 SLOAD SWAP1 PUSH2 0x100 EXP SWAP1 DIV PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND SWAP1 POP PUSH1 0x0 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP2 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND SUB PUSH3 0x3CA JUMPI PUSH1 0x40 MLOAD PUSH32 0x8C379A000000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD PUSH3 0x3C1 SWAP1 PUSH3 0x186F JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST PUSH1 0x0 DUP2 SWAP1 POP PUSH1 0x0 DUP2 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND BALANCE SWAP1 POP PUSH1 0x0 DUP3 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH4 0x8FD25165 PUSH1 0x40 MLOAD DUP2 PUSH4 0xFFFFFFFF AND PUSH1 0xE0 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH1 0x20 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 DUP7 GAS STATICCALL ISZERO DUP1 ISZERO PUSH3 0x439 JUMPI RETURNDATASIZE PUSH1 0x0 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH1 0x0 REVERT JUMPDEST POP POP POP POP PUSH1 0x40 MLOAD RETURNDATASIZE PUSH1 0x1F NOT PUSH1 0x1F DUP3 ADD AND DUP3 ADD DUP1 PUSH1 0x40 MSTORE POP DUP2 ADD SWAP1 PUSH3 0x45F SWAP2 SWAP1 PUSH3 0x18A8 JUMP JUMPDEST SWAP1 POP PUSH1 0x0 DUP4 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH4 0x67F718A9 PUSH1 0x40 MLOAD DUP2 PUSH4 0xFFFFFFFF AND PUSH1 0xE0 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH1 0x0 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 DUP7 GAS STATICCALL ISZERO DUP1 ISZERO PUSH3 0x4AF JUMPI RETURNDATASIZE PUSH1 0x0 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH1 0x0 REVERT JUMPDEST POP POP POP POP PUSH1 0x40 MLOAD RETURNDATASIZE PUSH1 0x0 DUP3 RETURNDATACOPY RETURNDATASIZE PUSH1 0x1F NOT PUSH1 0x1F DUP3 ADD AND DUP3 ADD DUP1 PUSH1 0x40 MSTORE POP DUP2 ADD SWAP1 PUSH3 0x4DA SWAP2 SWAP1 PUSH3 0x1981 JUMP JUMPDEST SWAP1 POP DUP3 DUP3 DUP3 DUP9 SWAP10 POP SWAP10 POP SWAP10 POP SWAP10 POP POP POP POP POP POP POP SWAP1 SWAP2 SWAP3 SWAP4 JUMP JUMPDEST PUSH1 0x1 PUSH1 0x20 MSTORE DUP1 PUSH1 0x0 MSTORE PUSH1 0x40 PUSH1 0x0 KECCAK256 PUSH1 0x0 SWAP2 POP SLOAD SWAP1 PUSH2 0x100 EXP SWAP1 DIV PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP2 JUMP JUMPDEST PUSH1 0x2 PUSH1 0x20 MSTORE DUP1 PUSH1 0x0 MSTORE PUSH1 0x40 PUSH1 0x0 KECCAK256 PUSH1 0x0 SWAP2 POP SLOAD SWAP1 PUSH2 0x100 EXP SWAP1 DIV PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP2 JUMP JUMPDEST PUSH1 0x0 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH1 0x1 PUSH1 0x0 DUP5 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP2 MSTORE PUSH1 0x20 ADD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 KECCAK256 PUSH1 0x0 SWAP1 SLOAD SWAP1 PUSH2 0x100 EXP SWAP1 DIV PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND EQ PUSH3 0x62B JUMPI PUSH1 0x40 MLOAD PUSH32 0x8C379A000000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD PUSH3 0x622 SWAP1 PUSH3 0x1A48 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST PUSH1 0x0 DUP3 DUP3 CALLER PUSH1 0x40 MLOAD PUSH3 0x63E SWAP1 PUSH3 0x123F JUMP JUMPDEST PUSH3 0x64C SWAP4 SWAP3 SWAP2 SWAP1 PUSH3 0x1A6A JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 PUSH1 0x0 CREATE DUP1 ISZERO DUP1 ISZERO PUSH3 0x669 JUMPI RETURNDATASIZE PUSH1 0x0 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH1 0x0 REVERT JUMPDEST POP SWAP1 POP PUSH1 0x0 DUP2 SWAP1 DUP1 PUSH1 0x1 DUP2 SLOAD ADD DUP1 DUP3 SSTORE DUP1 SWAP2 POP POP PUSH1 0x1 SWAP1 SUB SWAP1 PUSH1 0x0 MSTORE PUSH1 0x20 PUSH1 0x0 KECCAK256 ADD PUSH1 0x0 SWAP1 SWAP2 SWAP1 SWAP2 SWAP1 SWAP2 PUSH2 0x100 EXP DUP2 SLOAD DUP2 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF MUL NOT AND SWAP1 DUP4 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND MUL OR SWAP1 SSTORE POP DUP1 PUSH1 0x1 PUSH1 0x0 DUP6 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP2 MSTORE PUSH1 0x20 ADD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 KECCAK256 PUSH1 0x0 PUSH2 0x100 EXP DUP2 SLOAD DUP2 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF MUL NOT AND SWAP1 DUP4 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND MUL OR SWAP1 SSTORE POP DUP3 PUSH1 0x2 PUSH1 0x0 CALLER PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP2 MSTORE PUSH1 0x20 ADD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 KECCAK256 PUSH1 0x0 PUSH2 0x100 EXP DUP2 SLOAD DUP2 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF MUL NOT AND SWAP1 DUP4 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND MUL OR SWAP1 SSTORE POP PUSH32 0xA8596CC4A052ECC7656E9CA0FB7A10472573699E3AA34AC5659BC37C1B0A44FC TIMESTAMP DUP3 DUP6 PUSH1 0x40 MLOAD PUSH3 0x800 SWAP4 SWAP3 SWAP2 SWAP1 PUSH3 0x1AA7 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 LOG1 POP POP POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x1 PUSH1 0x0 DUP4 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP2 MSTORE PUSH1 0x20 ADD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 KECCAK256 PUSH1 0x0 SWAP1 SLOAD SWAP1 PUSH2 0x100 EXP SWAP1 DIV PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH1 0x1 PUSH1 0x0 DUP6 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP2 MSTORE PUSH1 0x20 ADD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 KECCAK256 PUSH1 0x0 SWAP1 SLOAD SWAP1 PUSH2 0x100 EXP SWAP1 DIV PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND SUB PUSH3 0x947 JUMPI PUSH1 0x40 MLOAD PUSH32 0x8C379A000000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD PUSH3 0x93E SWAP1 PUSH3 0x1B5A JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST PUSH1 0x0 CALLVALUE SWAP1 POP PUSH1 0x0 PUSH3 0x959 DUP6 PUSH3 0x80D JUMP JUMPDEST SWAP1 POP DUP3 MLOAD DUP5 MLOAD EQ PUSH3 0x9A2 JUMPI PUSH1 0x40 MLOAD PUSH32 0x8C379A000000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD PUSH3 0x999 SWAP1 PUSH3 0x1BCC JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST PUSH1 0x0 DUP1 DUP3 SWAP1 POP CALLER PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP2 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH4 0xF851A440 PUSH1 0x40 MLOAD DUP2 PUSH4 0xFFFFFFFF AND PUSH1 0xE0 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH1 0x20 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 DUP7 GAS STATICCALL ISZERO DUP1 ISZERO PUSH3 0xA0B JUMPI RETURNDATASIZE PUSH1 0x0 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH1 0x0 REVERT JUMPDEST POP POP POP POP PUSH1 0x40 MLOAD RETURNDATASIZE PUSH1 0x1F NOT PUSH1 0x1F DUP3 ADD AND DUP3 ADD DUP1 PUSH1 0x40 MSTORE POP DUP2 ADD SWAP1 PUSH3 0xA31 SWAP2 SWAP1 PUSH3 0x1C05 JUMP JUMPDEST PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND EQ PUSH3 0xA8A JUMPI PUSH1 0x40 MLOAD PUSH32 0x8C379A000000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD PUSH3 0xA81 SWAP1 PUSH3 0x1CAD JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST PUSH1 0x0 JUMPDEST DUP7 MLOAD DUP2 LT ISZERO PUSH3 0xADA JUMPI DUP6 DUP2 DUP2 MLOAD DUP2 LT PUSH3 0xAAD JUMPI PUSH3 0xAAC PUSH3 0x1CCF JUMP JUMPDEST JUMPDEST PUSH1 0x20 MUL PUSH1 0x20 ADD ADD MLOAD DUP4 PUSH3 0xAC2 SWAP2 SWAP1 PUSH3 0x1D2D JUMP JUMPDEST SWAP3 POP DUP1 DUP1 PUSH3 0xAD1 SWAP1 PUSH3 0x1D68 JUMP JUMPDEST SWAP2 POP POP PUSH3 0xA8D JUMP JUMPDEST POP DUP2 DUP5 EQ PUSH3 0xB20 JUMPI PUSH1 0x40 MLOAD PUSH32 0x8C379A000000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD PUSH3 0xB17 SWAP1 PUSH3 0x1E05 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST PUSH1 0x0 JUMPDEST DUP7 MLOAD DUP2 LT ISZERO PUSH3 0xBEE JUMPI DUP2 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH4 0xA40398A6 DUP9 DUP4 DUP2 MLOAD DUP2 LT PUSH3 0xB5F JUMPI PUSH3 0xB5E PUSH3 0x1CCF JUMP JUMPDEST JUMPDEST PUSH1 0x20 MUL PUSH1 0x20 ADD ADD MLOAD DUP9 DUP5 DUP2 MLOAD DUP2 LT PUSH3 0xB7D JUMPI PUSH3 0xB7C PUSH3 0x1CCF JUMP JUMPDEST JUMPDEST PUSH1 0x20 MUL PUSH1 0x20 ADD ADD MLOAD PUSH1 0x40 MLOAD DUP4 PUSH4 0xFFFFFFFF AND PUSH1 0xE0 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH3 0xBA4 SWAP3 SWAP2 SWAP1 PUSH3 0x1E27 JUMP JUMPDEST PUSH1 0x0 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 PUSH1 0x0 DUP8 DUP1 EXTCODESIZE ISZERO DUP1 ISZERO PUSH3 0xBBF JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP GAS CALL ISZERO DUP1 ISZERO PUSH3 0xBD4 JUMPI RETURNDATASIZE PUSH1 0x0 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH1 0x0 REVERT JUMPDEST POP POP POP POP DUP1 DUP1 PUSH3 0xBE5 SWAP1 PUSH3 0x1D68 JUMP JUMPDEST SWAP2 POP POP PUSH3 0xB23 JUMP JUMPDEST POP DUP3 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH2 0x8FC DUP4 SWAP1 DUP2 ISZERO MUL SWAP1 PUSH1 0x40 MLOAD PUSH1 0x0 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 DUP6 DUP9 DUP9 CALL SWAP4 POP POP POP POP ISZERO DUP1 ISZERO PUSH3 0xC36 JUMPI RETURNDATASIZE PUSH1 0x0 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH1 0x0 REVERT JUMPDEST POP POP POP POP POP POP POP POP JUMP JUMPDEST PUSH1 0x0 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH1 0x1 PUSH1 0x0 DUP5 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP2 MSTORE PUSH1 0x20 ADD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 KECCAK256 PUSH1 0x0 SWAP1 SLOAD SWAP1 PUSH2 0x100 EXP SWAP1 DIV PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND SUB PUSH3 0xD11 JUMPI PUSH1 0x40 MLOAD PUSH32 0x8C379A000000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD PUSH3 0xD08 SWAP1 PUSH3 0x1B5A JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST PUSH1 0x0 PUSH3 0xD1E DUP4 PUSH3 0x80D JUMP JUMPDEST SWAP1 POP PUSH1 0x0 DUP2 SWAP1 POP CALLER PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP2 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH4 0xF851A440 PUSH1 0x40 MLOAD DUP2 PUSH4 0xFFFFFFFF AND PUSH1 0xE0 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH1 0x20 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 DUP7 GAS STATICCALL ISZERO DUP1 ISZERO PUSH3 0xD88 JUMPI RETURNDATASIZE PUSH1 0x0 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH1 0x0 REVERT JUMPDEST POP POP POP POP PUSH1 0x40 MLOAD RETURNDATASIZE PUSH1 0x1F NOT PUSH1 0x1F DUP3 ADD AND DUP3 ADD DUP1 PUSH1 0x40 MSTORE POP DUP2 ADD SWAP1 PUSH3 0xDAE SWAP2 SWAP1 PUSH3 0x1C05 JUMP JUMPDEST PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND EQ PUSH3 0xE07 JUMPI PUSH1 0x40 MLOAD PUSH32 0x8C379A000000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD PUSH3 0xDFE SWAP1 PUSH3 0x1ECA JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST DUP1 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH4 0x8293744B CALLER DUP6 PUSH1 0x40 MLOAD DUP4 PUSH4 0xFFFFFFFF AND PUSH1 0xE0 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH3 0xE44 SWAP3 SWAP2 SWAP1 PUSH3 0x1F11 JUMP JUMPDEST PUSH1 0x0 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 PUSH1 0x0 DUP8 DUP1 EXTCODESIZE ISZERO DUP1 ISZERO PUSH3 0xE5F JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP GAS CALL ISZERO DUP1 ISZERO PUSH3 0xE74 JUMPI RETURNDATASIZE PUSH1 0x0 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH1 0x0 REVERT JUMPDEST POP POP POP POP POP POP POP POP JUMP JUMPDEST PUSH1 0x0 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH1 0x1 PUSH1 0x0 DUP5 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP2 MSTORE PUSH1 0x20 ADD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 KECCAK256 PUSH1 0x0 SWAP1 SLOAD SWAP1 PUSH2 0x100 EXP SWAP1 DIV PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND SUB PUSH3 0xF4F JUMPI PUSH1 0x40 MLOAD PUSH32 0x8C379A000000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD PUSH3 0xF46 SWAP1 PUSH3 0x1B5A JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST PUSH1 0x0 DUP3 SWAP1 POP PUSH1 0x0 DUP4 SWAP1 POP PUSH1 0x0 PUSH3 0xF66 DUP6 PUSH3 0x80D JUMP JUMPDEST SWAP1 POP PUSH1 0x0 DUP4 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH4 0x6352211E DUP7 PUSH1 0x40 MLOAD DUP3 PUSH4 0xFFFFFFFF AND PUSH1 0xE0 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH3 0xFA5 SWAP2 SWAP1 PUSH3 0x1F45 JUMP JUMPDEST PUSH1 0x20 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 DUP7 GAS STATICCALL ISZERO DUP1 ISZERO PUSH3 0xFC3 JUMPI RETURNDATASIZE PUSH1 0x0 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH1 0x0 REVERT JUMPDEST POP POP POP POP PUSH1 0x40 MLOAD RETURNDATASIZE PUSH1 0x1F NOT PUSH1 0x1F DUP3 ADD AND DUP3 ADD DUP1 PUSH1 0x40 MSTORE POP DUP2 ADD SWAP1 PUSH3 0xFE9 SWAP2 SWAP1 PUSH3 0x1C05 JUMP JUMPDEST SWAP1 POP CALLER PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP2 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND EQ PUSH3 0x105C JUMPI PUSH1 0x40 MLOAD PUSH32 0x8C379A000000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD PUSH3 0x1053 SWAP1 PUSH3 0x1FD8 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST ADDRESS PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP5 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH4 0x81812FC DUP8 PUSH1 0x40 MLOAD DUP3 PUSH4 0xFFFFFFFF AND PUSH1 0xE0 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH3 0x10AE SWAP2 SWAP1 PUSH3 0x1F45 JUMP JUMPDEST PUSH1 0x20 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 DUP7 GAS STATICCALL ISZERO DUP1 ISZERO PUSH3 0x10CC JUMPI RETURNDATASIZE PUSH1 0x0 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH1 0x0 REVERT JUMPDEST POP POP POP POP PUSH1 0x40 MLOAD RETURNDATASIZE PUSH1 0x1F NOT PUSH1 0x1F DUP3 ADD AND DUP3 ADD DUP1 PUSH1 0x40 MSTORE POP DUP2 ADD SWAP1 PUSH3 0x10F2 SWAP2 SWAP1 PUSH3 0x1C05 JUMP JUMPDEST PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND EQ PUSH3 0x114B JUMPI PUSH1 0x40 MLOAD PUSH32 0x8C379A000000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD PUSH3 0x1142 SWAP1 PUSH3 0x2070 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST DUP3 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH4 0x42966C68 DUP7 PUSH1 0x40 MLOAD DUP3 PUSH4 0xFFFFFFFF AND PUSH1 0xE0 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH3 0x1186 SWAP2 SWAP1 PUSH3 0x1F45 JUMP JUMPDEST PUSH1 0x0 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 PUSH1 0x0 DUP8 DUP1 EXTCODESIZE ISZERO DUP1 ISZERO PUSH3 0x11A1 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP GAS CALL ISZERO DUP1 ISZERO PUSH3 0x11B6 JUMPI RETURNDATASIZE PUSH1 0x0 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH1 0x0 REVERT JUMPDEST POP POP POP POP PUSH1 0x0 CALLER SWAP1 POP PUSH1 0x0 DUP4 SWAP1 POP DUP1 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH4 0xED2B40EA DUP4 DUP10 PUSH1 0x40 MLOAD DUP4 PUSH4 0xFFFFFFFF AND PUSH1 0xE0 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH3 0x1201 SWAP3 SWAP2 SWAP1 PUSH3 0x2092 JUMP JUMPDEST PUSH1 0x0 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 PUSH1 0x0 DUP8 DUP1 EXTCODESIZE ISZERO DUP1 ISZERO PUSH3 0x121C JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP GAS CALL ISZERO DUP1 ISZERO PUSH3 0x1231 JUMPI RETURNDATASIZE PUSH1 0x0 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH1 0x0 REVERT JUMPDEST POP POP POP POP POP POP POP POP POP POP POP POP JUMP JUMPDEST PUSH2 0x121E DUP1 PUSH3 0x20C0 DUP4 CODECOPY ADD SWAP1 JUMP JUMPDEST PUSH1 0x0 DUP2 SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH3 0x1262 DUP2 PUSH3 0x124D JUMP JUMPDEST DUP3 MSTORE POP POP JUMP JUMPDEST PUSH1 0x0 DUP2 MLOAD SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 DUP3 DUP3 MSTORE PUSH1 0x20 DUP3 ADD SWAP1 POP SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 DUP2 SWAP1 POP PUSH1 0x20 DUP3 ADD SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH3 0x129F DUP2 PUSH3 0x124D JUMP JUMPDEST DUP3 MSTORE POP POP JUMP JUMPDEST PUSH1 0x0 PUSH3 0x12B3 DUP4 DUP4 PUSH3 0x1294 JUMP JUMPDEST PUSH1 0x20 DUP4 ADD SWAP1 POP SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 ADD SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 PUSH3 0x12D9 DUP3 PUSH3 0x1268 JUMP JUMPDEST PUSH3 0x12E5 DUP2 DUP6 PUSH3 0x1273 JUMP JUMPDEST SWAP4 POP PUSH3 0x12F2 DUP4 PUSH3 0x1284 JUMP JUMPDEST DUP1 PUSH1 0x0 JUMPDEST DUP4 DUP2 LT ISZERO PUSH3 0x1329 JUMPI DUP2 MLOAD PUSH3 0x130D DUP9 DUP3 PUSH3 0x12A5 JUMP JUMPDEST SWAP8 POP PUSH3 0x131A DUP4 PUSH3 0x12BF JUMP JUMPDEST SWAP3 POP POP PUSH1 0x1 DUP2 ADD SWAP1 POP PUSH3 0x12F6 JUMP JUMPDEST POP DUP6 SWAP4 POP POP POP POP SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF DUP3 AND SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 PUSH3 0x1363 DUP3 PUSH3 0x1336 JUMP JUMPDEST SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH3 0x1375 DUP2 PUSH3 0x1356 JUMP JUMPDEST DUP3 MSTORE POP POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x80 DUP3 ADD SWAP1 POP PUSH3 0x1392 PUSH1 0x0 DUP4 ADD DUP8 PUSH3 0x1257 JUMP JUMPDEST PUSH3 0x13A1 PUSH1 0x20 DUP4 ADD DUP7 PUSH3 0x1257 JUMP JUMPDEST DUP2 DUP2 SUB PUSH1 0x40 DUP4 ADD MSTORE PUSH3 0x13B5 DUP2 DUP6 PUSH3 0x12CC JUMP JUMPDEST SWAP1 POP PUSH3 0x13C6 PUSH1 0x60 DUP4 ADD DUP5 PUSH3 0x136A JUMP JUMPDEST SWAP6 SWAP5 POP POP POP POP POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x40 MLOAD SWAP1 POP SWAP1 JUMP JUMPDEST PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH3 0x13EE DUP2 PUSH3 0x1356 JUMP JUMPDEST DUP2 EQ PUSH3 0x13FA JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP JUMP JUMPDEST PUSH1 0x0 DUP2 CALLDATALOAD SWAP1 POP PUSH3 0x140E DUP2 PUSH3 0x13E3 JUMP JUMPDEST SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 DUP5 SUB SLT ISZERO PUSH3 0x142D JUMPI PUSH3 0x142C PUSH3 0x13D9 JUMP JUMPDEST JUMPDEST PUSH1 0x0 PUSH3 0x143D DUP5 DUP3 DUP6 ADD PUSH3 0x13FD JUMP JUMPDEST SWAP2 POP POP SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 ADD SWAP1 POP PUSH3 0x145D PUSH1 0x0 DUP4 ADD DUP5 PUSH3 0x136A JUMP JUMPDEST SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH3 0x146E DUP2 PUSH3 0x124D JUMP JUMPDEST DUP2 EQ PUSH3 0x147A JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP JUMP JUMPDEST PUSH1 0x0 DUP2 CALLDATALOAD SWAP1 POP PUSH3 0x148E DUP2 PUSH3 0x1463 JUMP JUMPDEST SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x40 DUP4 DUP6 SUB SLT ISZERO PUSH3 0x14AE JUMPI PUSH3 0x14AD PUSH3 0x13D9 JUMP JUMPDEST JUMPDEST PUSH1 0x0 PUSH3 0x14BE DUP6 DUP3 DUP7 ADD PUSH3 0x13FD JUMP JUMPDEST SWAP3 POP POP PUSH1 0x20 PUSH3 0x14D1 DUP6 DUP3 DUP7 ADD PUSH3 0x147D JUMP JUMPDEST SWAP2 POP POP SWAP3 POP SWAP3 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH1 0x0 PUSH1 0x1F NOT PUSH1 0x1F DUP4 ADD AND SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH32 0x4E487B7100000000000000000000000000000000000000000000000000000000 PUSH1 0x0 MSTORE PUSH1 0x41 PUSH1 0x4 MSTORE PUSH1 0x24 PUSH1 0x0 REVERT JUMPDEST PUSH3 0x152B DUP3 PUSH3 0x14E0 JUMP JUMPDEST DUP2 ADD DUP2 DUP2 LT PUSH8 0xFFFFFFFFFFFFFFFF DUP3 GT OR ISZERO PUSH3 0x154D JUMPI PUSH3 0x154C PUSH3 0x14F1 JUMP JUMPDEST JUMPDEST DUP1 PUSH1 0x40 MSTORE POP POP POP JUMP JUMPDEST PUSH1 0x0 PUSH3 0x1562 PUSH3 0x13CF JUMP JUMPDEST SWAP1 POP PUSH3 0x1570 DUP3 DUP3 PUSH3 0x1520 JUMP JUMPDEST SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 PUSH8 0xFFFFFFFFFFFFFFFF DUP3 GT ISZERO PUSH3 0x1593 JUMPI PUSH3 0x1592 PUSH3 0x14F1 JUMP JUMPDEST JUMPDEST PUSH1 0x20 DUP3 MUL SWAP1 POP PUSH1 0x20 DUP2 ADD SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH1 0x0 PUSH3 0x15C0 PUSH3 0x15BA DUP5 PUSH3 0x1575 JUMP JUMPDEST PUSH3 0x1556 JUMP JUMPDEST SWAP1 POP DUP1 DUP4 DUP3 MSTORE PUSH1 0x20 DUP3 ADD SWAP1 POP PUSH1 0x20 DUP5 MUL DUP4 ADD DUP6 DUP2 GT ISZERO PUSH3 0x15E6 JUMPI PUSH3 0x15E5 PUSH3 0x15A4 JUMP JUMPDEST JUMPDEST DUP4 JUMPDEST DUP2 DUP2 LT ISZERO PUSH3 0x1613 JUMPI DUP1 PUSH3 0x15FE DUP9 DUP3 PUSH3 0x147D JUMP JUMPDEST DUP5 MSTORE PUSH1 0x20 DUP5 ADD SWAP4 POP POP PUSH1 0x20 DUP2 ADD SWAP1 POP PUSH3 0x15E8 JUMP JUMPDEST POP POP POP SWAP4 SWAP3 POP POP POP JUMP JUMPDEST PUSH1 0x0 DUP3 PUSH1 0x1F DUP4 ADD SLT PUSH3 0x1635 JUMPI PUSH3 0x1634 PUSH3 0x14DB JUMP JUMPDEST JUMPDEST DUP2 CALLDATALOAD PUSH3 0x1647 DUP5 DUP3 PUSH1 0x20 DUP7 ADD PUSH3 0x15A9 JUMP JUMPDEST SWAP2 POP POP SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x0 PUSH1 0x60 DUP5 DUP7 SUB SLT ISZERO PUSH3 0x166C JUMPI PUSH3 0x166B PUSH3 0x13D9 JUMP JUMPDEST JUMPDEST PUSH1 0x0 PUSH3 0x167C DUP7 DUP3 DUP8 ADD PUSH3 0x13FD JUMP JUMPDEST SWAP4 POP POP PUSH1 0x20 DUP5 ADD CALLDATALOAD PUSH8 0xFFFFFFFFFFFFFFFF DUP2 GT ISZERO PUSH3 0x16A0 JUMPI PUSH3 0x169F PUSH3 0x13DE JUMP JUMPDEST JUMPDEST PUSH3 0x16AE DUP7 DUP3 DUP8 ADD PUSH3 0x161D JUMP JUMPDEST SWAP3 POP POP PUSH1 0x40 DUP5 ADD CALLDATALOAD PUSH8 0xFFFFFFFFFFFFFFFF DUP2 GT ISZERO PUSH3 0x16D2 JUMPI PUSH3 0x16D1 PUSH3 0x13DE JUMP JUMPDEST JUMPDEST PUSH3 0x16E0 DUP7 DUP3 DUP8 ADD PUSH3 0x161D JUMP JUMPDEST SWAP2 POP POP SWAP3 POP SWAP3 POP SWAP3 JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x40 DUP4 DUP6 SUB SLT ISZERO PUSH3 0x1704 JUMPI PUSH3 0x1703 PUSH3 0x13D9 JUMP JUMPDEST JUMPDEST PUSH1 0x0 PUSH3 0x1714 DUP6 DUP3 DUP7 ADD PUSH3 0x13FD JUMP JUMPDEST SWAP3 POP POP PUSH1 0x20 DUP4 ADD CALLDATALOAD PUSH8 0xFFFFFFFFFFFFFFFF DUP2 GT ISZERO PUSH3 0x1738 JUMPI PUSH3 0x1737 PUSH3 0x13DE JUMP JUMPDEST JUMPDEST PUSH3 0x1746 DUP6 DUP3 DUP7 ADD PUSH3 0x161D JUMP JUMPDEST SWAP2 POP POP SWAP3 POP SWAP3 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 DUP3 DUP3 MSTORE PUSH1 0x20 DUP3 ADD SWAP1 POP SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH32 0x4E6F204E465420636F6E7472616374206173736F636961746564207769746820 PUSH1 0x0 DUP3 ADD MSTORE PUSH32 0x63616C6C65720000000000000000000000000000000000000000000000000000 PUSH1 0x20 DUP3 ADD MSTORE POP JUMP JUMPDEST PUSH1 0x0 PUSH3 0x17BF PUSH1 0x26 DUP4 PUSH3 0x1750 JUMP JUMPDEST SWAP2 POP PUSH3 0x17CC DUP3 PUSH3 0x1761 JUMP JUMPDEST PUSH1 0x40 DUP3 ADD SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 ADD SWAP1 POP DUP2 DUP2 SUB PUSH1 0x0 DUP4 ADD MSTORE PUSH3 0x17F2 DUP2 PUSH3 0x17B0 JUMP JUMPDEST SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH32 0x4E6F207661756C74206173736F63696174656420776974682063616C6C657227 PUSH1 0x0 DUP3 ADD MSTORE PUSH32 0x73204E465420636F6E7472616374000000000000000000000000000000000000 PUSH1 0x20 DUP3 ADD MSTORE POP JUMP JUMPDEST PUSH1 0x0 PUSH3 0x1857 PUSH1 0x2E DUP4 PUSH3 0x1750 JUMP JUMPDEST SWAP2 POP PUSH3 0x1864 DUP3 PUSH3 0x17F9 JUMP JUMPDEST PUSH1 0x40 DUP3 ADD SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 ADD SWAP1 POP DUP2 DUP2 SUB PUSH1 0x0 DUP4 ADD MSTORE PUSH3 0x188A DUP2 PUSH3 0x1848 JUMP JUMPDEST SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 DUP2 MLOAD SWAP1 POP PUSH3 0x18A2 DUP2 PUSH3 0x1463 JUMP JUMPDEST SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 DUP5 SUB SLT ISZERO PUSH3 0x18C1 JUMPI PUSH3 0x18C0 PUSH3 0x13D9 JUMP JUMPDEST JUMPDEST PUSH1 0x0 PUSH3 0x18D1 DUP5 DUP3 DUP6 ADD PUSH3 0x1891 JUMP JUMPDEST SWAP2 POP POP SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 PUSH3 0x18F1 PUSH3 0x18EB DUP5 PUSH3 0x1575 JUMP JUMPDEST PUSH3 0x1556 JUMP JUMPDEST SWAP1 POP DUP1 DUP4 DUP3 MSTORE PUSH1 0x20 DUP3 ADD SWAP1 POP PUSH1 0x20 DUP5 MUL DUP4 ADD DUP6 DUP2 GT ISZERO PUSH3 0x1917 JUMPI PUSH3 0x1916 PUSH3 0x15A4 JUMP JUMPDEST JUMPDEST DUP4 JUMPDEST DUP2 DUP2 LT ISZERO PUSH3 0x1944 JUMPI DUP1 PUSH3 0x192F DUP9 DUP3 PUSH3 0x1891 JUMP JUMPDEST DUP5 MSTORE PUSH1 0x20 DUP5 ADD SWAP4 POP POP PUSH1 0x20 DUP2 ADD SWAP1 POP PUSH3 0x1919 JUMP JUMPDEST POP POP POP SWAP4 SWAP3 POP POP POP JUMP JUMPDEST PUSH1 0x0 DUP3 PUSH1 0x1F DUP4 ADD SLT PUSH3 0x1966 JUMPI PUSH3 0x1965 PUSH3 0x14DB JUMP JUMPDEST JUMPDEST DUP2 MLOAD PUSH3 0x1978 DUP5 DUP3 PUSH1 0x20 DUP7 ADD PUSH3 0x18DA JUMP JUMPDEST SWAP2 POP POP SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 DUP5 SUB SLT ISZERO PUSH3 0x199A JUMPI PUSH3 0x1999 PUSH3 0x13D9 JUMP JUMPDEST JUMPDEST PUSH1 0x0 DUP3 ADD MLOAD PUSH8 0xFFFFFFFFFFFFFFFF DUP2 GT ISZERO PUSH3 0x19BB JUMPI PUSH3 0x19BA PUSH3 0x13DE JUMP JUMPDEST JUMPDEST PUSH3 0x19C9 DUP5 DUP3 DUP6 ADD PUSH3 0x194E JUMP JUMPDEST SWAP2 POP POP SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH32 0x5661756C7420616C72656164792065786973747320666F722074686973204E46 PUSH1 0x0 DUP3 ADD MSTORE PUSH32 0x5420636F6E747261637400000000000000000000000000000000000000000000 PUSH1 0x20 DUP3 ADD MSTORE POP JUMP JUMPDEST PUSH1 0x0 PUSH3 0x1A30 PUSH1 0x2A DUP4 PUSH3 0x1750 JUMP JUMPDEST SWAP2 POP PUSH3 0x1A3D DUP3 PUSH3 0x19D2 JUMP JUMPDEST PUSH1 0x40 DUP3 ADD SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 ADD SWAP1 POP DUP2 DUP2 SUB PUSH1 0x0 DUP4 ADD MSTORE PUSH3 0x1A63 DUP2 PUSH3 0x1A21 JUMP JUMPDEST SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x60 DUP3 ADD SWAP1 POP PUSH3 0x1A81 PUSH1 0x0 DUP4 ADD DUP7 PUSH3 0x136A JUMP JUMPDEST PUSH3 0x1A90 PUSH1 0x20 DUP4 ADD DUP6 PUSH3 0x1257 JUMP JUMPDEST PUSH3 0x1A9F PUSH1 0x40 DUP4 ADD DUP5 PUSH3 0x136A JUMP JUMPDEST SWAP5 SWAP4 POP POP POP POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x60 DUP3 ADD SWAP1 POP PUSH3 0x1ABE PUSH1 0x0 DUP4 ADD DUP7 PUSH3 0x1257 JUMP JUMPDEST PUSH3 0x1ACD PUSH1 0x20 DUP4 ADD DUP6 PUSH3 0x136A JUMP JUMPDEST PUSH3 0x1ADC PUSH1 0x40 DUP4 ADD DUP5 PUSH3 0x136A JUMP JUMPDEST SWAP5 SWAP4 POP POP POP POP JUMP JUMPDEST PUSH32 0x5661756C7420646F6573206E6F742065786973747320666F722074686973204E PUSH1 0x0 DUP3 ADD MSTORE PUSH32 0x465420636F6E7472616374000000000000000000000000000000000000000000 PUSH1 0x20 DUP3 ADD MSTORE POP JUMP JUMPDEST PUSH1 0x0 PUSH3 0x1B42 PUSH1 0x2B DUP4 PUSH3 0x1750 JUMP JUMPDEST SWAP2 POP PUSH3 0x1B4F DUP3 PUSH3 0x1AE4 JUMP JUMPDEST PUSH1 0x40 DUP3 ADD SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 ADD SWAP1 POP DUP2 DUP2 SUB PUSH1 0x0 DUP4 ADD MSTORE PUSH3 0x1B75 DUP2 PUSH3 0x1B33 JUMP JUMPDEST SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH32 0x4D69736D61746368656420617272617973000000000000000000000000000000 PUSH1 0x0 DUP3 ADD MSTORE POP JUMP JUMPDEST PUSH1 0x0 PUSH3 0x1BB4 PUSH1 0x11 DUP4 PUSH3 0x1750 JUMP JUMPDEST SWAP2 POP PUSH3 0x1BC1 DUP3 PUSH3 0x1B7C JUMP JUMPDEST PUSH1 0x20 DUP3 ADD SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 ADD SWAP1 POP DUP2 DUP2 SUB PUSH1 0x0 DUP4 ADD MSTORE PUSH3 0x1BE7 DUP2 PUSH3 0x1BA5 JUMP JUMPDEST SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 DUP2 MLOAD SWAP1 POP PUSH3 0x1BFF DUP2 PUSH3 0x13E3 JUMP JUMPDEST SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 DUP5 SUB SLT ISZERO PUSH3 0x1C1E JUMPI PUSH3 0x1C1D PUSH3 0x13D9 JUMP JUMPDEST JUMPDEST PUSH1 0x0 PUSH3 0x1C2E DUP5 DUP3 DUP6 ADD PUSH3 0x1BEE JUMP JUMPDEST SWAP2 POP POP SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH32 0x4F6E6C792074686520706572736F6E2077686F2063726561746564207661756C PUSH1 0x0 DUP3 ADD MSTORE PUSH32 0x742063616E206465706F7369742066756E647320696E746F2069740000000000 PUSH1 0x20 DUP3 ADD MSTORE POP JUMP JUMPDEST PUSH1 0x0 PUSH3 0x1C95 PUSH1 0x3B DUP4 PUSH3 0x1750 JUMP JUMPDEST SWAP2 POP PUSH3 0x1CA2 DUP3 PUSH3 0x1C37 JUMP JUMPDEST PUSH1 0x40 DUP3 ADD SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 ADD SWAP1 POP DUP2 DUP2 SUB PUSH1 0x0 DUP4 ADD MSTORE PUSH3 0x1CC8 DUP2 PUSH3 0x1C86 JUMP JUMPDEST SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH32 0x4E487B7100000000000000000000000000000000000000000000000000000000 PUSH1 0x0 MSTORE PUSH1 0x32 PUSH1 0x4 MSTORE PUSH1 0x24 PUSH1 0x0 REVERT JUMPDEST PUSH32 0x4E487B7100000000000000000000000000000000000000000000000000000000 PUSH1 0x0 MSTORE PUSH1 0x11 PUSH1 0x4 MSTORE PUSH1 0x24 PUSH1 0x0 REVERT JUMPDEST PUSH1 0x0 PUSH3 0x1D3A DUP3 PUSH3 0x124D JUMP JUMPDEST SWAP2 POP PUSH3 0x1D47 DUP4 PUSH3 0x124D JUMP JUMPDEST SWAP3 POP DUP3 DUP3 ADD SWAP1 POP DUP1 DUP3 GT ISZERO PUSH3 0x1D62 JUMPI PUSH3 0x1D61 PUSH3 0x1CFE JUMP JUMPDEST JUMPDEST SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 PUSH3 0x1D75 DUP3 PUSH3 0x124D JUMP JUMPDEST SWAP2 POP PUSH32 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF DUP3 SUB PUSH3 0x1DAA JUMPI PUSH3 0x1DA9 PUSH3 0x1CFE JUMP JUMPDEST JUMPDEST PUSH1 0x1 DUP3 ADD SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH32 0x4D69736D61746368656420746F74616C206465706F73697420616D6F756E7400 PUSH1 0x0 DUP3 ADD MSTORE POP JUMP JUMPDEST PUSH1 0x0 PUSH3 0x1DED PUSH1 0x1F DUP4 PUSH3 0x1750 JUMP JUMPDEST SWAP2 POP PUSH3 0x1DFA DUP3 PUSH3 0x1DB5 JUMP JUMPDEST PUSH1 0x20 DUP3 ADD SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 ADD SWAP1 POP DUP2 DUP2 SUB PUSH1 0x0 DUP4 ADD MSTORE PUSH3 0x1E20 DUP2 PUSH3 0x1DDE JUMP JUMPDEST SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x40 DUP3 ADD SWAP1 POP PUSH3 0x1E3E PUSH1 0x0 DUP4 ADD DUP6 PUSH3 0x1257 JUMP JUMPDEST PUSH3 0x1E4D PUSH1 0x20 DUP4 ADD DUP5 PUSH3 0x1257 JUMP JUMPDEST SWAP4 SWAP3 POP POP POP JUMP JUMPDEST PUSH32 0x4F6E6C792074686520706572736F6E2077686F2063726561746564207661756C PUSH1 0x0 DUP3 ADD MSTORE PUSH32 0x742063616E2077697468647261772066756E6473000000000000000000000000 PUSH1 0x20 DUP3 ADD MSTORE POP JUMP JUMPDEST PUSH1 0x0 PUSH3 0x1EB2 PUSH1 0x34 DUP4 PUSH3 0x1750 JUMP JUMPDEST SWAP2 POP PUSH3 0x1EBF DUP3 PUSH3 0x1E54 JUMP JUMPDEST PUSH1 0x40 DUP3 ADD SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 ADD SWAP1 POP DUP2 DUP2 SUB PUSH1 0x0 DUP4 ADD MSTORE PUSH3 0x1EE5 DUP2 PUSH3 0x1EA3 JUMP JUMPDEST SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 PUSH3 0x1EF9 DUP3 PUSH3 0x1336 JUMP JUMPDEST SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH3 0x1F0B DUP2 PUSH3 0x1EEC JUMP JUMPDEST DUP3 MSTORE POP POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x40 DUP3 ADD SWAP1 POP PUSH3 0x1F28 PUSH1 0x0 DUP4 ADD DUP6 PUSH3 0x1F00 JUMP JUMPDEST DUP2 DUP2 SUB PUSH1 0x20 DUP4 ADD MSTORE PUSH3 0x1F3C DUP2 DUP5 PUSH3 0x12CC JUMP JUMPDEST SWAP1 POP SWAP4 SWAP3 POP POP POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 ADD SWAP1 POP PUSH3 0x1F5C PUSH1 0x0 DUP4 ADD DUP5 PUSH3 0x1257 JUMP JUMPDEST SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH32 0x596F7520617265206E6F7420746865206F776E6572206F66207468697320746F PUSH1 0x0 DUP3 ADD MSTORE PUSH32 0x6B656E2100000000000000000000000000000000000000000000000000000000 PUSH1 0x20 DUP3 ADD MSTORE POP JUMP JUMPDEST PUSH1 0x0 PUSH3 0x1FC0 PUSH1 0x24 DUP4 PUSH3 0x1750 JUMP JUMPDEST SWAP2 POP PUSH3 0x1FCD DUP3 PUSH3 0x1F62 JUMP JUMPDEST PUSH1 0x40 DUP3 ADD SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 ADD SWAP1 POP DUP2 DUP2 SUB PUSH1 0x0 DUP4 ADD MSTORE PUSH3 0x1FF3 DUP2 PUSH3 0x1FB1 JUMP JUMPDEST SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH32 0x436F6E7472616374206E6F7420617070726F76656420746F206275726E20746F PUSH1 0x0 DUP3 ADD MSTORE PUSH32 0x6B656E0000000000000000000000000000000000000000000000000000000000 PUSH1 0x20 DUP3 ADD MSTORE POP JUMP JUMPDEST PUSH1 0x0 PUSH3 0x2058 PUSH1 0x23 DUP4 PUSH3 0x1750 JUMP JUMPDEST SWAP2 POP PUSH3 0x2065 DUP3 PUSH3 0x1FFA JUMP JUMPDEST PUSH1 0x40 DUP3 ADD SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 ADD SWAP1 POP DUP2 DUP2 SUB PUSH1 0x0 DUP4 ADD MSTORE PUSH3 0x208B DUP2 PUSH3 0x2049 JUMP JUMPDEST SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x40 DUP3 ADD SWAP1 POP PUSH3 0x20A9 PUSH1 0x0 DUP4 ADD DUP6 PUSH3 0x1F00 JUMP JUMPDEST PUSH3 0x20B8 PUSH1 0x20 DUP4 ADD DUP5 PUSH3 0x1257 JUMP JUMPDEST SWAP4 SWAP3 POP POP POP JUMP INVALID PUSH1 0x80 PUSH1 0x40 MSTORE CALLVALUE DUP1 ISZERO PUSH3 0x11 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH1 0x40 MLOAD PUSH3 0x121E CODESIZE SUB DUP1 PUSH3 0x121E DUP4 CODECOPY DUP2 DUP2 ADD PUSH1 0x40 MSTORE DUP2 ADD SWAP1 PUSH3 0x37 SWAP2 SWAP1 PUSH3 0x1B5 JUMP JUMPDEST DUP3 PUSH1 0x0 DUP1 PUSH2 0x100 EXP DUP2 SLOAD DUP2 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF MUL NOT AND SWAP1 DUP4 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND MUL OR SWAP1 SSTORE POP DUP2 PUSH1 0x2 DUP2 SWAP1 SSTORE POP DUP1 PUSH1 0x5 PUSH1 0x0 PUSH2 0x100 EXP DUP2 SLOAD DUP2 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF MUL NOT AND SWAP1 DUP4 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND MUL OR SWAP1 SSTORE POP TIMESTAMP PUSH1 0x3 DUP2 SWAP1 SSTORE POP CALLER PUSH1 0x4 PUSH1 0x0 PUSH2 0x100 EXP DUP2 SLOAD DUP2 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF MUL NOT AND SWAP1 DUP4 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND MUL OR SWAP1 SSTORE POP POP POP POP PUSH3 0x211 JUMP JUMPDEST PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH1 0x0 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF DUP3 AND SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 PUSH3 0x142 DUP3 PUSH3 0x115 JUMP JUMPDEST SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH3 0x154 DUP2 PUSH3 0x135 JUMP JUMPDEST DUP2 EQ PUSH3 0x160 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP JUMP JUMPDEST PUSH1 0x0 DUP2 MLOAD SWAP1 POP PUSH3 0x174 DUP2 PUSH3 0x149 JUMP JUMPDEST SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 DUP2 SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH3 0x18F DUP2 PUSH3 0x17A JUMP JUMPDEST DUP2 EQ PUSH3 0x19B JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP JUMP JUMPDEST PUSH1 0x0 DUP2 MLOAD SWAP1 POP PUSH3 0x1AF DUP2 PUSH3 0x184 JUMP JUMPDEST SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x0 PUSH1 0x60 DUP5 DUP7 SUB SLT ISZERO PUSH3 0x1D1 JUMPI PUSH3 0x1D0 PUSH3 0x110 JUMP JUMPDEST JUMPDEST PUSH1 0x0 PUSH3 0x1E1 DUP7 DUP3 DUP8 ADD PUSH3 0x163 JUMP JUMPDEST SWAP4 POP POP PUSH1 0x20 PUSH3 0x1F4 DUP7 DUP3 DUP8 ADD PUSH3 0x19E JUMP JUMPDEST SWAP3 POP POP PUSH1 0x40 PUSH3 0x207 DUP7 DUP3 DUP8 ADD PUSH3 0x163 JUMP JUMPDEST SWAP2 POP POP SWAP3 POP SWAP3 POP SWAP3 JUMP JUMPDEST PUSH2 0xFFD DUP1 PUSH3 0x221 PUSH1 0x0 CODECOPY PUSH1 0x0 RETURN INVALID PUSH1 0x80 PUSH1 0x40 MSTORE PUSH1 0x4 CALLDATASIZE LT PUSH2 0xA0 JUMPI PUSH1 0x0 CALLDATALOAD PUSH1 0xE0 SHR DUP1 PUSH4 0x8FD25165 GT PUSH2 0x64 JUMPI DUP1 PUSH4 0x8FD25165 EQ PUSH2 0x183 JUMPI DUP1 PUSH4 0xA40398A6 EQ PUSH2 0x1AE JUMPI DUP1 PUSH4 0xD58778D6 EQ PUSH2 0x1D7 JUMPI DUP1 PUSH4 0xD8270DCE EQ PUSH2 0x214 JUMPI DUP1 PUSH4 0xED2B40EA EQ PUSH2 0x23F JUMPI DUP1 PUSH4 0xF851A440 EQ PUSH2 0x25B JUMPI PUSH2 0xA7 JUMP JUMPDEST DUP1 PUSH4 0x31C2273B EQ PUSH2 0xA9 JUMPI DUP1 PUSH4 0x505658D9 EQ PUSH2 0xD4 JUMPI DUP1 PUSH4 0x5E4F6CAB EQ PUSH2 0xFF JUMPI DUP1 PUSH4 0x67F718A9 EQ PUSH2 0x13C JUMPI DUP1 PUSH4 0x8293744B EQ PUSH2 0x167 JUMPI PUSH2 0xA7 JUMP JUMPDEST CALLDATASIZE PUSH2 0xA7 JUMPI STOP JUMPDEST STOP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0xB5 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0xBE PUSH2 0x286 JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH2 0xCB SWAP2 SWAP1 PUSH2 0x8C7 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 RETURN JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0xE0 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0xE9 PUSH2 0x2AA JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH2 0xF6 SWAP2 SWAP1 PUSH2 0x8C7 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 RETURN JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x10B JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x126 PUSH1 0x4 DUP1 CALLDATASIZE SUB DUP2 ADD SWAP1 PUSH2 0x121 SWAP2 SWAP1 PUSH2 0x92C JUMP JUMPDEST PUSH2 0x2D0 JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH2 0x133 SWAP2 SWAP1 PUSH2 0x968 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 RETURN JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x148 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x151 PUSH2 0x2E8 JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH2 0x15E SWAP2 SWAP1 PUSH2 0xA41 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 RETURN JUMPDEST PUSH2 0x181 PUSH1 0x4 DUP1 CALLDATASIZE SUB DUP2 ADD SWAP1 PUSH2 0x17C SWAP2 SWAP1 PUSH2 0xBFA JUMP JUMPDEST PUSH2 0x340 JUMP JUMPDEST STOP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x18F JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x198 PUSH2 0x578 JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH2 0x1A5 SWAP2 SWAP1 PUSH2 0x968 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 RETURN JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x1BA JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x1D5 PUSH1 0x4 DUP1 CALLDATASIZE SUB DUP2 ADD SWAP1 PUSH2 0x1D0 SWAP2 SWAP1 PUSH2 0xC56 JUMP JUMPDEST PUSH2 0x57E JUMP JUMPDEST STOP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x1E3 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x1FE PUSH1 0x4 DUP1 CALLDATASIZE SUB DUP2 ADD SWAP1 PUSH2 0x1F9 SWAP2 SWAP1 PUSH2 0x92C JUMP JUMPDEST PUSH2 0x681 JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH2 0x20B SWAP2 SWAP1 PUSH2 0x968 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 RETURN JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x220 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x229 PUSH2 0x6A5 JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH2 0x236 SWAP2 SWAP1 PUSH2 0x968 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 RETURN JUMPDEST PUSH2 0x259 PUSH1 0x4 DUP1 CALLDATASIZE SUB DUP2 ADD SWAP1 PUSH2 0x254 SWAP2 SWAP1 PUSH2 0xC96 JUMP JUMPDEST PUSH2 0x6AB JUMP JUMPDEST STOP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x267 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x270 PUSH2 0x860 JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH2 0x27D SWAP2 SWAP1 PUSH2 0x8C7 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 RETURN JUMPDEST PUSH1 0x0 DUP1 SLOAD SWAP1 PUSH2 0x100 EXP SWAP1 DIV PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP2 JUMP JUMPDEST PUSH1 0x4 PUSH1 0x0 SWAP1 SLOAD SWAP1 PUSH2 0x100 EXP SWAP1 DIV PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP2 JUMP JUMPDEST PUSH1 0x1 PUSH1 0x20 MSTORE DUP1 PUSH1 0x0 MSTORE PUSH1 0x40 PUSH1 0x0 KECCAK256 PUSH1 0x0 SWAP2 POP SWAP1 POP SLOAD DUP2 JUMP JUMPDEST PUSH1 0x60 PUSH1 0x6 DUP1 SLOAD DUP1 PUSH1 0x20 MUL PUSH1 0x20 ADD PUSH1 0x40 MLOAD SWAP1 DUP2 ADD PUSH1 0x40 MSTORE DUP1 SWAP3 SWAP2 SWAP1 DUP2 DUP2 MSTORE PUSH1 0x20 ADD DUP3 DUP1 SLOAD DUP1 ISZERO PUSH2 0x336 JUMPI PUSH1 0x20 MUL DUP3 ADD SWAP2 SWAP1 PUSH1 0x0 MSTORE PUSH1 0x20 PUSH1 0x0 KECCAK256 SWAP1 JUMPDEST DUP2 SLOAD DUP2 MSTORE PUSH1 0x20 ADD SWAP1 PUSH1 0x1 ADD SWAP1 DUP1 DUP4 GT PUSH2 0x322 JUMPI JUMPDEST POP POP POP POP POP SWAP1 POP SWAP1 JUMP JUMPDEST PUSH1 0x4 PUSH1 0x0 SWAP1 SLOAD SWAP1 PUSH2 0x100 EXP SWAP1 DIV PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND CALLER PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND EQ PUSH2 0x3D0 JUMPI PUSH1 0x40 MLOAD PUSH32 0x8C379A000000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x3C7 SWAP1 PUSH2 0xD59 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST PUSH1 0x2 DUP1 SLOAD PUSH2 0x3DE SWAP2 SWAP1 PUSH2 0xDA8 JUMP JUMPDEST PUSH1 0x3 SLOAD TIMESTAMP PUSH2 0x3EC SWAP2 SWAP1 PUSH2 0xDEA JUMP JUMPDEST LT ISZERO PUSH2 0x42D JUMPI PUSH1 0x40 MLOAD PUSH32 0x8C379A000000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x424 SWAP1 PUSH2 0xE90 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST PUSH1 0x0 DUP1 JUMPDEST DUP3 MLOAD DUP2 LT ISZERO PUSH2 0x52B JUMPI PUSH1 0x0 PUSH1 0x1 PUSH1 0x0 DUP6 DUP5 DUP2 MLOAD DUP2 LT PUSH2 0x453 JUMPI PUSH2 0x452 PUSH2 0xEB0 JUMP JUMPDEST JUMPDEST PUSH1 0x20 MUL PUSH1 0x20 ADD ADD MLOAD DUP2 MSTORE PUSH1 0x20 ADD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 KECCAK256 SLOAD GT PUSH2 0x4AA JUMPI PUSH1 0x40 MLOAD PUSH32 0x8C379A000000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x4A1 SWAP1 PUSH2 0xF2B JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST PUSH1 0x1 PUSH1 0x0 DUP5 DUP4 DUP2 MLOAD DUP2 LT PUSH2 0x4C1 JUMPI PUSH2 0x4C0 PUSH2 0xEB0 JUMP JUMPDEST JUMPDEST PUSH1 0x20 MUL PUSH1 0x20 ADD ADD MLOAD DUP2 MSTORE PUSH1 0x20 ADD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 KECCAK256 SLOAD DUP3 PUSH2 0x4E3 SWAP2 SWAP1 PUSH2 0xF4B JUMP JUMPDEST SWAP2 POP PUSH1 0x0 PUSH1 0x1 PUSH1 0x0 DUP6 DUP5 DUP2 MLOAD DUP2 LT PUSH2 0x4FE JUMPI PUSH2 0x4FD PUSH2 0xEB0 JUMP JUMPDEST JUMPDEST PUSH1 0x20 MUL PUSH1 0x20 ADD ADD MLOAD DUP2 MSTORE PUSH1 0x20 ADD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 KECCAK256 DUP2 SWAP1 SSTORE POP DUP1 DUP1 PUSH2 0x523 SWAP1 PUSH2 0xF7F JUMP JUMPDEST SWAP2 POP POP PUSH2 0x431 JUMP JUMPDEST POP DUP3 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH2 0x8FC DUP3 SWAP1 DUP2 ISZERO MUL SWAP1 PUSH1 0x40 MLOAD PUSH1 0x0 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 DUP6 DUP9 DUP9 CALL SWAP4 POP POP POP POP ISZERO DUP1 ISZERO PUSH2 0x572 JUMPI RETURNDATASIZE PUSH1 0x0 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH1 0x0 REVERT JUMPDEST POP POP POP POP JUMP JUMPDEST PUSH1 0x2 SLOAD DUP2 JUMP JUMPDEST PUSH1 0x4 PUSH1 0x0 SWAP1 SLOAD SWAP1 PUSH2 0x100 EXP SWAP1 DIV PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND CALLER PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND EQ PUSH2 0x60E JUMPI PUSH1 0x40 MLOAD PUSH32 0x8C379A000000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x605 SWAP1 PUSH2 0xD59 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST PUSH1 0x0 PUSH1 0x1 PUSH1 0x0 DUP5 DUP2 MSTORE PUSH1 0x20 ADD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 KECCAK256 SLOAD SUB PUSH2 0x653 JUMPI PUSH1 0x6 DUP3 SWAP1 DUP1 PUSH1 0x1 DUP2 SLOAD ADD DUP1 DUP3 SSTORE DUP1 SWAP2 POP POP PUSH1 0x1 SWAP1 SUB SWAP1 PUSH1 0x0 MSTORE PUSH1 0x20 PUSH1 0x0 KECCAK256 ADD PUSH1 0x0 SWAP1 SWAP2 SWAP1 SWAP2 SWAP1 SWAP2 POP SSTORE JUMPDEST DUP1 PUSH1 0x1 PUSH1 0x0 DUP5 DUP2 MSTORE PUSH1 0x20 ADD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 KECCAK256 PUSH1 0x0 DUP3 DUP3 SLOAD PUSH2 0x676 SWAP2 SWAP1 PUSH2 0xF4B JUMP JUMPDEST SWAP3 POP POP DUP2 SWAP1 SSTORE POP POP POP JUMP JUMPDEST PUSH1 0x6 DUP2 DUP2 SLOAD DUP2 LT PUSH2 0x691 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST SWAP1 PUSH1 0x0 MSTORE PUSH1 0x20 PUSH1 0x0 KECCAK256 ADD PUSH1 0x0 SWAP2 POP SWAP1 POP SLOAD DUP2 JUMP JUMPDEST PUSH1 0x3 SLOAD DUP2 JUMP JUMPDEST PUSH1 0x4 PUSH1 0x0 SWAP1 SLOAD SWAP1 PUSH2 0x100 EXP SWAP1 DIV PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND CALLER PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND EQ PUSH2 0x73B JUMPI PUSH1 0x40 MLOAD PUSH32 0x8C379A000000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x732 SWAP1 PUSH2 0xD59 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST PUSH1 0x0 PUSH1 0x1 PUSH1 0x0 DUP4 DUP2 MSTORE PUSH1 0x20 ADD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 KECCAK256 SLOAD GT PUSH2 0x791 JUMPI PUSH1 0x40 MLOAD PUSH32 0x8C379A000000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x788 SWAP1 PUSH2 0xF2B JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST PUSH1 0x2 SLOAD PUSH1 0x3 SLOAD TIMESTAMP PUSH2 0x7A2 SWAP2 SWAP1 PUSH2 0xDEA JUMP JUMPDEST LT ISZERO PUSH2 0x7E3 JUMPI PUSH1 0x40 MLOAD PUSH32 0x8C379A000000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x7DA SWAP1 PUSH2 0xE90 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST PUSH1 0x0 PUSH1 0x1 PUSH1 0x0 DUP4 DUP2 MSTORE PUSH1 0x20 ADD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 KECCAK256 SLOAD SWAP1 POP PUSH1 0x0 PUSH1 0x1 PUSH1 0x0 DUP5 DUP2 MSTORE PUSH1 0x20 ADD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 KECCAK256 DUP2 SWAP1 SSTORE POP DUP3 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH2 0x8FC DUP3 SWAP1 DUP2 ISZERO MUL SWAP1 PUSH1 0x40 MLOAD PUSH1 0x0 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 DUP6 DUP9 DUP9 CALL SWAP4 POP POP POP POP ISZERO DUP1 ISZERO PUSH2 0x85A JUMPI RETURNDATASIZE PUSH1 0x0 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH1 0x0 REVERT JUMPDEST POP POP POP POP JUMP JUMPDEST PUSH1 0x5 PUSH1 0x0 SWAP1 SLOAD SWAP1 PUSH2 0x100 EXP SWAP1 DIV PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP2 JUMP JUMPDEST PUSH1 0x0 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF DUP3 AND SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0x8B1 DUP3 PUSH2 0x886 JUMP JUMPDEST SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH2 0x8C1 DUP2 PUSH2 0x8A6 JUMP JUMPDEST DUP3 MSTORE POP POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 ADD SWAP1 POP PUSH2 0x8DC PUSH1 0x0 DUP4 ADD DUP5 PUSH2 0x8B8 JUMP JUMPDEST SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x40 MLOAD SWAP1 POP SWAP1 JUMP JUMPDEST PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH1 0x0 DUP2 SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH2 0x909 DUP2 PUSH2 0x8F6 JUMP JUMPDEST DUP2 EQ PUSH2 0x914 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP JUMP JUMPDEST PUSH1 0x0 DUP2 CALLDATALOAD SWAP1 POP PUSH2 0x926 DUP2 PUSH2 0x900 JUMP JUMPDEST SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 DUP5 SUB SLT ISZERO PUSH2 0x942 JUMPI PUSH2 0x941 PUSH2 0x8EC JUMP JUMPDEST JUMPDEST PUSH1 0x0 PUSH2 0x950 DUP5 DUP3 DUP6 ADD PUSH2 0x917 JUMP JUMPDEST SWAP2 POP POP SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH2 0x962 DUP2 PUSH2 0x8F6 JUMP JUMPDEST DUP3 MSTORE POP POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 ADD SWAP1 POP PUSH2 0x97D PUSH1 0x0 DUP4 ADD DUP5 PUSH2 0x959 JUMP JUMPDEST SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 DUP2 MLOAD SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 DUP3 DUP3 MSTORE PUSH1 0x20 DUP3 ADD SWAP1 POP SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 DUP2 SWAP1 POP PUSH1 0x20 DUP3 ADD SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH2 0x9B8 DUP2 PUSH2 0x8F6 JUMP JUMPDEST DUP3 MSTORE POP POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0x9CA DUP4 DUP4 PUSH2 0x9AF JUMP JUMPDEST PUSH1 0x20 DUP4 ADD SWAP1 POP SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 ADD SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0x9EE DUP3 PUSH2 0x983 JUMP JUMPDEST PUSH2 0x9F8 DUP2 DUP6 PUSH2 0x98E JUMP JUMPDEST SWAP4 POP PUSH2 0xA03 DUP4 PUSH2 0x99F JUMP JUMPDEST DUP1 PUSH1 0x0 JUMPDEST DUP4 DUP2 LT ISZERO PUSH2 0xA34 JUMPI DUP2 MLOAD PUSH2 0xA1B DUP9 DUP3 PUSH2 0x9BE JUMP JUMPDEST SWAP8 POP PUSH2 0xA26 DUP4 PUSH2 0x9D6 JUMP JUMPDEST SWAP3 POP POP PUSH1 0x1 DUP2 ADD SWAP1 POP PUSH2 0xA07 JUMP JUMPDEST POP DUP6 SWAP4 POP POP POP POP SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 ADD SWAP1 POP DUP2 DUP2 SUB PUSH1 0x0 DUP4 ADD MSTORE PUSH2 0xA5B DUP2 DUP5 PUSH2 0x9E3 JUMP JUMPDEST SWAP1 POP SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0xA6E DUP3 PUSH2 0x886 JUMP JUMPDEST SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH2 0xA7E DUP2 PUSH2 0xA63 JUMP JUMPDEST DUP2 EQ PUSH2 0xA89 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP JUMP JUMPDEST PUSH1 0x0 DUP2 CALLDATALOAD SWAP1 POP PUSH2 0xA9B DUP2 PUSH2 0xA75 JUMP JUMPDEST SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH1 0x0 PUSH1 0x1F NOT PUSH1 0x1F DUP4 ADD AND SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH32 0x4E487B7100000000000000000000000000000000000000000000000000000000 PUSH1 0x0 MSTORE PUSH1 0x41 PUSH1 0x4 MSTORE PUSH1 0x24 PUSH1 0x0 REVERT JUMPDEST PUSH2 0xAEF DUP3 PUSH2 0xAA6 JUMP JUMPDEST DUP2 ADD DUP2 DUP2 LT PUSH8 0xFFFFFFFFFFFFFFFF DUP3 GT OR ISZERO PUSH2 0xB0E JUMPI PUSH2 0xB0D PUSH2 0xAB7 JUMP JUMPDEST JUMPDEST DUP1 PUSH1 0x40 MSTORE POP POP POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0xB21 PUSH2 0x8E2 JUMP JUMPDEST SWAP1 POP PUSH2 0xB2D DUP3 DUP3 PUSH2 0xAE6 JUMP JUMPDEST SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 PUSH8 0xFFFFFFFFFFFFFFFF DUP3 GT ISZERO PUSH2 0xB4D JUMPI PUSH2 0xB4C PUSH2 0xAB7 JUMP JUMPDEST JUMPDEST PUSH1 0x20 DUP3 MUL SWAP1 POP PUSH1 0x20 DUP2 ADD SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH1 0x0 PUSH2 0xB76 PUSH2 0xB71 DUP5 PUSH2 0xB32 JUMP JUMPDEST PUSH2 0xB17 JUMP JUMPDEST SWAP1 POP DUP1 DUP4 DUP3 MSTORE PUSH1 0x20 DUP3 ADD SWAP1 POP PUSH1 0x20 DUP5 MUL DUP4 ADD DUP6 DUP2 GT ISZERO PUSH2 0xB99 JUMPI PUSH2 0xB98 PUSH2 0xB5E JUMP JUMPDEST JUMPDEST DUP4 JUMPDEST DUP2 DUP2 LT ISZERO PUSH2 0xBC2 JUMPI DUP1 PUSH2 0xBAE DUP9 DUP3 PUSH2 0x917 JUMP JUMPDEST DUP5 MSTORE PUSH1 0x20 DUP5 ADD SWAP4 POP POP PUSH1 0x20 DUP2 ADD SWAP1 POP PUSH2 0xB9B JUMP JUMPDEST POP POP POP SWAP4 SWAP3 POP POP POP JUMP JUMPDEST PUSH1 0x0 DUP3 PUSH1 0x1F DUP4 ADD SLT PUSH2 0xBE1 JUMPI PUSH2 0xBE0 PUSH2 0xAA1 JUMP JUMPDEST JUMPDEST DUP2 CALLDATALOAD PUSH2 0xBF1 DUP5 DUP3 PUSH1 0x20 DUP7 ADD PUSH2 0xB63 JUMP JUMPDEST SWAP2 POP POP SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x40 DUP4 DUP6 SUB SLT ISZERO PUSH2 0xC11 JUMPI PUSH2 0xC10 PUSH2 0x8EC JUMP JUMPDEST JUMPDEST PUSH1 0x0 PUSH2 0xC1F DUP6 DUP3 DUP7 ADD PUSH2 0xA8C JUMP JUMPDEST SWAP3 POP POP PUSH1 0x20 DUP4 ADD CALLDATALOAD PUSH8 0xFFFFFFFFFFFFFFFF DUP2 GT ISZERO PUSH2 0xC40 JUMPI PUSH2 0xC3F PUSH2 0x8F1 JUMP JUMPDEST JUMPDEST PUSH2 0xC4C DUP6 DUP3 DUP7 ADD PUSH2 0xBCC JUMP JUMPDEST SWAP2 POP POP SWAP3 POP SWAP3 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x40 DUP4 DUP6 SUB SLT ISZERO PUSH2 0xC6D JUMPI PUSH2 0xC6C PUSH2 0x8EC JUMP JUMPDEST JUMPDEST PUSH1 0x0 PUSH2 0xC7B DUP6 DUP3 DUP7 ADD PUSH2 0x917 JUMP JUMPDEST SWAP3 POP POP PUSH1 0x20 PUSH2 0xC8C DUP6 DUP3 DUP7 ADD PUSH2 0x917 JUMP JUMPDEST SWAP2 POP POP SWAP3 POP SWAP3 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x40 DUP4 DUP6 SUB SLT ISZERO PUSH2 0xCAD JUMPI PUSH2 0xCAC PUSH2 0x8EC JUMP JUMPDEST JUMPDEST PUSH1 0x0 PUSH2 0xCBB DUP6 DUP3 DUP7 ADD PUSH2 0xA8C JUMP JUMPDEST SWAP3 POP POP PUSH1 0x20 PUSH2 0xCCC DUP6 DUP3 DUP7 ADD PUSH2 0x917 JUMP JUMPDEST SWAP2 POP POP SWAP3 POP SWAP3 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 DUP3 DUP3 MSTORE PUSH1 0x20 DUP3 ADD SWAP1 POP SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH32 0x4F6E6C7920426974737572616E636520636F6E74726163742063616E2063616C PUSH1 0x0 DUP3 ADD MSTORE PUSH32 0x6C20746869732066756E6374696F6E0000000000000000000000000000000000 PUSH1 0x20 DUP3 ADD MSTORE POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0xD43 PUSH1 0x2F DUP4 PUSH2 0xCD6 JUMP JUMPDEST SWAP2 POP PUSH2 0xD4E DUP3 PUSH2 0xCE7 JUMP JUMPDEST PUSH1 0x40 DUP3 ADD SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 ADD SWAP1 POP DUP2 DUP2 SUB PUSH1 0x0 DUP4 ADD MSTORE PUSH2 0xD72 DUP2 PUSH2 0xD36 JUMP JUMPDEST SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH32 0x4E487B7100000000000000000000000000000000000000000000000000000000 PUSH1 0x0 MSTORE PUSH1 0x11 PUSH1 0x4 MSTORE PUSH1 0x24 PUSH1 0x0 REVERT JUMPDEST PUSH1 0x0 PUSH2 0xDB3 DUP3 PUSH2 0x8F6 JUMP JUMPDEST SWAP2 POP PUSH2 0xDBE DUP4 PUSH2 0x8F6 JUMP JUMPDEST SWAP3 POP DUP3 DUP3 MUL PUSH2 0xDCC DUP2 PUSH2 0x8F6 JUMP JUMPDEST SWAP2 POP DUP3 DUP3 DIV DUP5 EQ DUP4 ISZERO OR PUSH2 0xDE3 JUMPI PUSH2 0xDE2 PUSH2 0xD79 JUMP JUMPDEST JUMPDEST POP SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0xDF5 DUP3 PUSH2 0x8F6 JUMP JUMPDEST SWAP2 POP PUSH2 0xE00 DUP4 PUSH2 0x8F6 JUMP JUMPDEST SWAP3 POP DUP3 DUP3 SUB SWAP1 POP DUP2 DUP2 GT ISZERO PUSH2 0xE18 JUMPI PUSH2 0xE17 PUSH2 0xD79 JUMP JUMPDEST JUMPDEST SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH32 0x43616E6E6F74206163636573732066756E6374696F6E206265666F7265207468 PUSH1 0x0 DUP3 ADD MSTORE PUSH32 0x65206D696E696D756D2074696D65206861732070617373656400000000000000 PUSH1 0x20 DUP3 ADD MSTORE POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0xE7A PUSH1 0x39 DUP4 PUSH2 0xCD6 JUMP JUMPDEST SWAP2 POP PUSH2 0xE85 DUP3 PUSH2 0xE1E JUMP JUMPDEST PUSH1 0x40 DUP3 ADD SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 ADD SWAP1 POP DUP2 DUP2 SUB PUSH1 0x0 DUP4 ADD MSTORE PUSH2 0xEA9 DUP2 PUSH2 0xE6D JUMP JUMPDEST SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH32 0x4E487B7100000000000000000000000000000000000000000000000000000000 PUSH1 0x0 MSTORE PUSH1 0x32 PUSH1 0x4 MSTORE PUSH1 0x24 PUSH1 0x0 REVERT JUMPDEST PUSH32 0x4E6F2062616C616E636520666F72207468697320746F6B656E49440000000000 PUSH1 0x0 DUP3 ADD MSTORE POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0xF15 PUSH1 0x1B DUP4 PUSH2 0xCD6 JUMP JUMPDEST SWAP2 POP PUSH2 0xF20 DUP3 PUSH2 0xEDF JUMP JUMPDEST PUSH1 0x20 DUP3 ADD SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 ADD SWAP1 POP DUP2 DUP2 SUB PUSH1 0x0 DUP4 ADD MSTORE PUSH2 0xF44 DUP2 PUSH2 0xF08 JUMP JUMPDEST SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0xF56 DUP3 PUSH2 0x8F6 JUMP JUMPDEST SWAP2 POP PUSH2 0xF61 DUP4 PUSH2 0x8F6 JUMP JUMPDEST SWAP3 POP DUP3 DUP3 ADD SWAP1 POP DUP1 DUP3 GT ISZERO PUSH2 0xF79 JUMPI PUSH2 0xF78 PUSH2 0xD79 JUMP JUMPDEST JUMPDEST SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0xF8A DUP3 PUSH2 0x8F6 JUMP JUMPDEST SWAP2 POP PUSH32 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF DUP3 SUB PUSH2 0xFBC JUMPI PUSH2 0xFBB PUSH2 0xD79 JUMP JUMPDEST JUMPDEST PUSH1 0x1 DUP3 ADD SWAP1 POP SWAP2 SWAP1 POP JUMP INVALID LOG2 PUSH5 0x6970667358 0x22 SLT KECCAK256 PUSH12 0x9B96CB8730C8A6F1BABF8707 PUSH17 0xA66B17A6B9760FD6EF1C71BA328DE2E608 EXTCODECOPY PUSH5 0x736F6C6343 STOP ADDMOD SLT STOP CALLER LOG2 PUSH5 0x6970667358 0x22 SLT KECCAK256 SWAP9 SWAP16 DIV JUMPI 0xD2 RETURNDATACOPY 0xCA MSIZE SWAP6 ORIGIN PC 0xAC CALL 0xC2 PUSH8 0x7A4F2C18E1599E6B SELFDESTRUCT 0xC5 0xC5 0xE PUSH25 0x412DAE364736F6C6343000812003300000000000000000000 ",
		"sourceMap": "3425:5583:12:-:0;;;;;;;;;;;;;;;;;;;"
	},
	"abi": [
		{
			"anonymous": false,
			"inputs": [
				{
					"indexed": false,
					"internalType": "uint256",
					"name": "date",
					"type": "uint256"
				},
				{
					"indexed": false,
					"internalType": "address",
					"name": "vaultAddress",
					"type": "address"
				},
				{
					"indexed": false,
					"internalType": "address",
					"name": "NFT_address",
					"type": "address"
				}
			],
			"name": "VaultCreated",
			"type": "event"
		},
		{
			"inputs": [
				{
					"internalType": "address",
					"name": "",
					"type": "address"
				}
			],
			"name": "admins",
			"outputs": [
				{
					"internalType": "address",
					"name": "",
					"type": "address"
				}
			],
			"stateMutability": "view",
			"type": "function"
		},
		{
			"inputs": [
				{
					"internalType": "address",
					"name": "NFTContractAddress",
					"type": "address"
				},
				{
					"internalType": "uint256",
					"name": "_tokenID",
					"type": "uint256"
				}
			],
			"name": "claim",
			"outputs": [],
			"stateMutability": "payable",
			"type": "function"
		},
		{
			"inputs": [
				{
					"internalType": "address",
					"name": "_NFTContractAddress",
					"type": "address"
				},
				{
					"internalType": "uint256",
					"name": "_minTime",
					"type": "uint256"
				}
			],
			"name": "createVault",
			"outputs": [],
			"stateMutability": "nonpayable",
			"type": "function"
		},
		{
			"inputs": [
				{
					"internalType": "address",
					"name": "NFTContractAddress",
					"type": "address"
				},
				{
					"internalType": "uint256[]",
					"name": "_tokenIDs",
					"type": "uint256[]"
				},
				{
					"internalType": "uint256[]",
					"name": "amounts",
					"type": "uint256[]"
				}
			],
			"name": "depositFunds",
			"outputs": [],
			"stateMutability": "payable",
			"type": "function"
		},
		{
			"inputs": [
				{
					"internalType": "address",
					"name": "NFTContractAddress",
					"type": "address"
				}
			],
			"name": "getContractAddress",
			"outputs": [
				{
					"internalType": "address",
					"name": "",
					"type": "address"
				}
			],
			"stateMutability": "view",
			"type": "function"
		},
		{
			"inputs": [],
			"name": "getMyVaultDetails",
			"outputs": [
				{
					"internalType": "uint256",
					"name": "",
					"type": "uint256"
				},
				{
					"internalType": "uint256",
					"name": "",
					"type": "uint256"
				},
				{
					"internalType": "uint256[]",
					"name": "",
					"type": "uint256[]"
				},
				{
					"internalType": "address",
					"name": "",
					"type": "address"
				}
			],
			"stateMutability": "view",
			"type": "function"
		},
		{
			"inputs": [
				{
					"internalType": "address",
					"name": "",
					"type": "address"
				}
			],
			"name": "vaultAddress",
			"outputs": [
				{
					"internalType": "address",
					"name": "",
					"type": "address"
				}
			],
			"stateMutability": "view",
			"type": "function"
		},
		{
			"inputs": [
				{
					"internalType": "address",
					"name": "NFTContractAddress",
					"type": "address"
				},
				{
					"internalType": "uint256[]",
					"name": "tokenIDs",
					"type": "uint256[]"
				}
			],
			"name": "withdrawFunds",
			"outputs": [],
			"stateMutability": "payable",
			"type": "function"
		}
	],
	"storageLayout": {
		"storage": [
			{
				"astId": 2947,
				"contract": "Bitsurance.sol:Bitsurance",
				"label": "vaults",
				"offset": 0,
				"slot": "0",
				"type": "t_array(t_contract(Vault)2942)dyn_storage"
			},
			{
				"astId": 2959,
				"contract": "Bitsurance.sol:Bitsurance",
				"label": "vaultAddress",
				"offset": 0,
				"slot": "1",
				"type": "t_mapping(t_address,t_address)"
			},
			{
				"astId": 2963,
				"contract": "Bitsurance.sol:Bitsurance",
				"label": "admins",
				"offset": 0,
				"slot": "2",
				"type": "t_mapping(t_address,t_address)"
			}
		],
		"types": {
			"t_address": {
				"encoding": "inplace",
				"label": "address",
				"numberOfBytes": "20"
			},
			"t_array(t_contract(Vault)2942)dyn_storage": {
				"base": "t_contract(Vault)2942",
				"encoding": "dynamic_array",
				"label": "contract Vault[]",
				"numberOfBytes": "32"
			},
			"t_contract(Vault)2942": {
				"encoding": "inplace",
				"label": "contract Vault",
				"numberOfBytes": "20"
			},
			"t_mapping(t_address,t_address)": {
				"encoding": "mapping",
				"key": "t_address",
				"label": "mapping(address => address)",
				"numberOfBytes": "32",
				"value": "t_address"
			}
		}
	},
	"web3Deploy": "var bitsuranceContract = new web3.eth.Contract([{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"date\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"vaultAddress\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"NFT_address\",\"type\":\"address\"}],\"name\":\"VaultCreated\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"admins\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"NFTContractAddress\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_tokenID\",\"type\":\"uint256\"}],\"name\":\"claim\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_NFTContractAddress\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_minTime\",\"type\":\"uint256\"}],\"name\":\"createVault\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"NFTContractAddress\",\"type\":\"address\"},{\"internalType\":\"uint256[]\",\"name\":\"_tokenIDs\",\"type\":\"uint256[]\"},{\"internalType\":\"uint256[]\",\"name\":\"amounts\",\"type\":\"uint256[]\"}],\"name\":\"depositFunds\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"NFTContractAddress\",\"type\":\"address\"}],\"name\":\"getContractAddress\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getMyVaultDetails\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"uint256[]\",\"name\":\"\",\"type\":\"uint256[]\"},{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"vaultAddress\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"NFTContractAddress\",\"type\":\"address\"},{\"internalType\":\"uint256[]\",\"name\":\"tokenIDs\",\"type\":\"uint256[]\"}],\"name\":\"withdrawFunds\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"}]);\nvar bitsurance = bitsuranceContract.deploy({\n     data: '0x608060405234801561001057600080fd5b50613313806100206000396000f3fe608060405260043610620000865760003560e01c8063622bc90e1162000055578063622bc90e14620001745780637f30952314620001b8578063a3648ec014620001d8578063aad3ec9614620001f85762000086565b80630db6f34d146200008b5780631cb3d31414620000be578063429b62e514620001025780635f76dfc01462000146575b600080fd5b3480156200009857600080fd5b50620000a362000218565b604051620000b594939291906200137b565b60405180910390f35b348015620000cb57600080fd5b50620000ea6004803603810190620000e4919062001414565b620004f4565b604051620000f9919062001446565b60405180910390f35b3480156200010f57600080fd5b506200012e600480360381019062000128919062001414565b62000527565b6040516200013d919062001446565b60405180910390f35b3480156200015357600080fd5b506200017260048036038101906200016c919062001494565b6200055a565b005b3480156200018157600080fd5b50620001a060048036038101906200019a919062001414565b6200080d565b604051620001af919062001446565b60405180910390f35b620001d66004803603810190620001d0919062001650565b62000876565b005b620001f66004803603810190620001f09190620016ea565b62000c40565b005b62000216600480360381019062000210919062001494565b62000e7e565b005b6000806060600080600260003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff169050600073ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff1603620002f4576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401620002eb90620017d7565b60405180910390fd5b6000600160008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff169050600073ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff1603620003ca576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401620003c1906200186f565b60405180910390fd5b600081905060008173ffffffffffffffffffffffffffffffffffffffff1631905060008273ffffffffffffffffffffffffffffffffffffffff16638fd251656040518163ffffffff1660e01b8152600401602060405180830381865afa15801562000439573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906200045f9190620018a8565b905060008373ffffffffffffffffffffffffffffffffffffffff166367f718a96040518163ffffffff1660e01b8152600401600060405180830381865afa158015620004af573d6000803e3d6000fd5b505050506040513d6000823e3d601f19601f82011682018060405250810190620004da919062001981565b905082828288995099509950995050505050505090919293565b60016020528060005260406000206000915054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b60026020528060005260406000206000915054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b600073ffffffffffffffffffffffffffffffffffffffff16600160008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16146200062b576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401620006229062001a48565b60405180910390fd5b60008282336040516200063e906200123f565b6200064c9392919062001a6a565b604051809103906000f08015801562000669573d6000803e3d6000fd5b5090506000819080600181540180825580915050600190039060005260206000200160009091909190916101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555080600160008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555082600260003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055507fa8596cc4a052ecc7656e9ca0fb7a10472573699e3aa34ac5659bc37c1b0a44fc428285604051620008009392919062001aa7565b60405180910390a1505050565b6000600160008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff169050919050565b600073ffffffffffffffffffffffffffffffffffffffff16600160008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff160362000947576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016200093e9062001b5a565b60405180910390fd5b6000349050600062000959856200080d565b90508251845114620009a2576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401620009999062001bcc565b60405180910390fd5b6000808290503373ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff1663f851a4406040518163ffffffff1660e01b8152600401602060405180830381865afa15801562000a0b573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019062000a31919062001c05565b73ffffffffffffffffffffffffffffffffffffffff161462000a8a576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040162000a819062001cad565b60405180910390fd5b60005b865181101562000ada5785818151811062000aad5762000aac62001ccf565b5b60200260200101518362000ac2919062001d2d565b9250808062000ad19062001d68565b91505062000a8d565b5081841462000b20576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040162000b179062001e05565b60405180910390fd5b60005b865181101562000bee578173ffffffffffffffffffffffffffffffffffffffff1663a40398a688838151811062000b5f5762000b5e62001ccf565b5b602002602001015188848151811062000b7d5762000b7c62001ccf565b5b60200260200101516040518363ffffffff1660e01b815260040162000ba492919062001e27565b600060405180830381600087803b15801562000bbf57600080fd5b505af115801562000bd4573d6000803e3d6000fd5b50505050808062000be59062001d68565b91505062000b23565b508273ffffffffffffffffffffffffffffffffffffffff166108fc839081150290604051600060405180830381858888f1935050505015801562000c36573d6000803e3d6000fd5b5050505050505050565b600073ffffffffffffffffffffffffffffffffffffffff16600160008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff160362000d11576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040162000d089062001b5a565b60405180910390fd5b600062000d1e836200080d565b905060008190503373ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff1663f851a4406040518163ffffffff1660e01b8152600401602060405180830381865afa15801562000d88573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019062000dae919062001c05565b73ffffffffffffffffffffffffffffffffffffffff161462000e07576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040162000dfe9062001eca565b60405180910390fd5b8073ffffffffffffffffffffffffffffffffffffffff16638293744b33856040518363ffffffff1660e01b815260040162000e4492919062001f11565b600060405180830381600087803b15801562000e5f57600080fd5b505af115801562000e74573d6000803e3d6000fd5b5050505050505050565b600073ffffffffffffffffffffffffffffffffffffffff16600160008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff160362000f4f576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040162000f469062001b5a565b60405180910390fd5b60008290506000839050600062000f66856200080d565b905060008373ffffffffffffffffffffffffffffffffffffffff16636352211e866040518263ffffffff1660e01b815260040162000fa5919062001f45565b602060405180830381865afa15801562000fc3573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019062000fe9919062001c05565b90503373ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff16146200105c576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401620010539062001fd8565b60405180910390fd5b3073ffffffffffffffffffffffffffffffffffffffff168473ffffffffffffffffffffffffffffffffffffffff1663081812fc876040518263ffffffff1660e01b8152600401620010ae919062001f45565b602060405180830381865afa158015620010cc573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190620010f2919062001c05565b73ffffffffffffffffffffffffffffffffffffffff16146200114b576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401620011429062002070565b60405180910390fd5b8273ffffffffffffffffffffffffffffffffffffffff166342966c68866040518263ffffffff1660e01b815260040162001186919062001f45565b600060405180830381600087803b158015620011a157600080fd5b505af1158015620011b6573d6000803e3d6000fd5b50505050600033905060008390508073ffffffffffffffffffffffffffffffffffffffff1663ed2b40ea83896040518363ffffffff1660e01b81526004016200120192919062002092565b600060405180830381600087803b1580156200121c57600080fd5b505af115801562001231573d6000803e3d6000fd5b505050505050505050505050565b61121e80620020c083390190565b6000819050919050565b62001262816200124d565b82525050565b600081519050919050565b600082825260208201905092915050565b6000819050602082019050919050565b6200129f816200124d565b82525050565b6000620012b3838362001294565b60208301905092915050565b6000602082019050919050565b6000620012d98262001268565b620012e5818562001273565b9350620012f28362001284565b8060005b83811015620013295781516200130d8882620012a5565b97506200131a83620012bf565b925050600181019050620012f6565b5085935050505092915050565b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b6000620013638262001336565b9050919050565b620013758162001356565b82525050565b600060808201905062001392600083018762001257565b620013a1602083018662001257565b8181036040830152620013b58185620012cc565b9050620013c660608301846200136a565b95945050505050565b6000604051905090565b600080fd5b600080fd5b620013ee8162001356565b8114620013fa57600080fd5b50565b6000813590506200140e81620013e3565b92915050565b6000602082840312156200142d576200142c620013d9565b5b60006200143d84828501620013fd565b91505092915050565b60006020820190506200145d60008301846200136a565b92915050565b6200146e816200124d565b81146200147a57600080fd5b50565b6000813590506200148e8162001463565b92915050565b60008060408385031215620014ae57620014ad620013d9565b5b6000620014be85828601620013fd565b9250506020620014d1858286016200147d565b9150509250929050565b600080fd5b6000601f19601f8301169050919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b6200152b82620014e0565b810181811067ffffffffffffffff821117156200154d576200154c620014f1565b5b80604052505050565b600062001562620013cf565b905062001570828262001520565b919050565b600067ffffffffffffffff821115620015935762001592620014f1565b5b602082029050602081019050919050565b600080fd5b6000620015c0620015ba8462001575565b62001556565b90508083825260208201905060208402830185811115620015e657620015e5620015a4565b5b835b81811015620016135780620015fe88826200147d565b845260208401935050602081019050620015e8565b5050509392505050565b600082601f830112620016355762001634620014db565b5b813562001647848260208601620015a9565b91505092915050565b6000806000606084860312156200166c576200166b620013d9565b5b60006200167c86828701620013fd565b935050602084013567ffffffffffffffff811115620016a0576200169f620013de565b5b620016ae868287016200161d565b925050604084013567ffffffffffffffff811115620016d257620016d1620013de565b5b620016e0868287016200161d565b9150509250925092565b60008060408385031215620017045762001703620013d9565b5b60006200171485828601620013fd565b925050602083013567ffffffffffffffff811115620017385762001737620013de565b5b62001746858286016200161d565b9150509250929050565b600082825260208201905092915050565b7f4e6f204e465420636f6e7472616374206173736f63696174656420776974682060008201527f63616c6c65720000000000000000000000000000000000000000000000000000602082015250565b6000620017bf60268362001750565b9150620017cc8262001761565b604082019050919050565b60006020820190508181036000830152620017f281620017b0565b9050919050565b7f4e6f207661756c74206173736f63696174656420776974682063616c6c65722760008201527f73204e465420636f6e7472616374000000000000000000000000000000000000602082015250565b600062001857602e8362001750565b91506200186482620017f9565b604082019050919050565b600060208201905081810360008301526200188a8162001848565b9050919050565b600081519050620018a28162001463565b92915050565b600060208284031215620018c157620018c0620013d9565b5b6000620018d18482850162001891565b91505092915050565b6000620018f1620018eb8462001575565b62001556565b90508083825260208201905060208402830185811115620019175762001916620015a4565b5b835b818110156200194457806200192f888262001891565b84526020840193505060208101905062001919565b5050509392505050565b600082601f830112620019665762001965620014db565b5b815162001978848260208601620018da565b91505092915050565b6000602082840312156200199a5762001999620013d9565b5b600082015167ffffffffffffffff811115620019bb57620019ba620013de565b5b620019c9848285016200194e565b91505092915050565b7f5661756c7420616c72656164792065786973747320666f722074686973204e4660008201527f5420636f6e747261637400000000000000000000000000000000000000000000602082015250565b600062001a30602a8362001750565b915062001a3d82620019d2565b604082019050919050565b6000602082019050818103600083015262001a638162001a21565b9050919050565b600060608201905062001a8160008301866200136a565b62001a90602083018562001257565b62001a9f60408301846200136a565b949350505050565b600060608201905062001abe600083018662001257565b62001acd60208301856200136a565b62001adc60408301846200136a565b949350505050565b7f5661756c7420646f6573206e6f742065786973747320666f722074686973204e60008201527f465420636f6e7472616374000000000000000000000000000000000000000000602082015250565b600062001b42602b8362001750565b915062001b4f8262001ae4565b604082019050919050565b6000602082019050818103600083015262001b758162001b33565b9050919050565b7f4d69736d61746368656420617272617973000000000000000000000000000000600082015250565b600062001bb460118362001750565b915062001bc18262001b7c565b602082019050919050565b6000602082019050818103600083015262001be78162001ba5565b9050919050565b60008151905062001bff81620013e3565b92915050565b60006020828403121562001c1e5762001c1d620013d9565b5b600062001c2e8482850162001bee565b91505092915050565b7f4f6e6c792074686520706572736f6e2077686f2063726561746564207661756c60008201527f742063616e206465706f7369742066756e647320696e746f2069740000000000602082015250565b600062001c95603b8362001750565b915062001ca28262001c37565b604082019050919050565b6000602082019050818103600083015262001cc88162001c86565b9050919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b600062001d3a826200124d565b915062001d47836200124d565b925082820190508082111562001d625762001d6162001cfe565b5b92915050565b600062001d75826200124d565b91507fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff820362001daa5762001da962001cfe565b5b600182019050919050565b7f4d69736d61746368656420746f74616c206465706f73697420616d6f756e7400600082015250565b600062001ded601f8362001750565b915062001dfa8262001db5565b602082019050919050565b6000602082019050818103600083015262001e208162001dde565b9050919050565b600060408201905062001e3e600083018562001257565b62001e4d602083018462001257565b9392505050565b7f4f6e6c792074686520706572736f6e2077686f2063726561746564207661756c60008201527f742063616e2077697468647261772066756e6473000000000000000000000000602082015250565b600062001eb260348362001750565b915062001ebf8262001e54565b604082019050919050565b6000602082019050818103600083015262001ee58162001ea3565b9050919050565b600062001ef98262001336565b9050919050565b62001f0b8162001eec565b82525050565b600060408201905062001f28600083018562001f00565b818103602083015262001f3c8184620012cc565b90509392505050565b600060208201905062001f5c600083018462001257565b92915050565b7f596f7520617265206e6f7420746865206f776e6572206f66207468697320746f60008201527f6b656e2100000000000000000000000000000000000000000000000000000000602082015250565b600062001fc060248362001750565b915062001fcd8262001f62565b604082019050919050565b6000602082019050818103600083015262001ff38162001fb1565b9050919050565b7f436f6e7472616374206e6f7420617070726f76656420746f206275726e20746f60008201527f6b656e0000000000000000000000000000000000000000000000000000000000602082015250565b60006200205860238362001750565b9150620020658262001ffa565b604082019050919050565b600060208201905081810360008301526200208b8162002049565b9050919050565b6000604082019050620020a9600083018562001f00565b620020b8602083018462001257565b939250505056fe60806040523480156200001157600080fd5b506040516200121e3803806200121e8339818101604052810190620000379190620001b5565b826000806101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055508160028190555080600560006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055504260038190555033600460006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555050505062000211565b600080fd5b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b6000620001428262000115565b9050919050565b620001548162000135565b81146200016057600080fd5b50565b600081519050620001748162000149565b92915050565b6000819050919050565b6200018f816200017a565b81146200019b57600080fd5b50565b600081519050620001af8162000184565b92915050565b600080600060608486031215620001d157620001d062000110565b5b6000620001e18682870162000163565b9350506020620001f4868287016200019e565b9250506040620002078682870162000163565b9150509250925092565b610ffd80620002216000396000f3fe6080604052600436106100a05760003560e01c80638fd25165116100645780638fd2516514610183578063a40398a6146101ae578063d58778d6146101d7578063d8270dce14610214578063ed2b40ea1461023f578063f851a4401461025b576100a7565b806331c2273b146100a9578063505658d9146100d45780635e4f6cab146100ff57806367f718a91461013c5780638293744b14610167576100a7565b366100a757005b005b3480156100b557600080fd5b506100be610286565b6040516100cb91906108c7565b60405180910390f35b3480156100e057600080fd5b506100e96102aa565b6040516100f691906108c7565b60405180910390f35b34801561010b57600080fd5b506101266004803603810190610121919061092c565b6102d0565b6040516101339190610968565b60405180910390f35b34801561014857600080fd5b506101516102e8565b60405161015e9190610a41565b60405180910390f35b610181600480360381019061017c9190610bfa565b610340565b005b34801561018f57600080fd5b50610198610578565b6040516101a59190610968565b60405180910390f35b3480156101ba57600080fd5b506101d560048036038101906101d09190610c56565b61057e565b005b3480156101e357600080fd5b506101fe60048036038101906101f9919061092c565b610681565b60405161020b9190610968565b60405180910390f35b34801561022057600080fd5b506102296106a5565b6040516102369190610968565b60405180910390f35b61025960048036038101906102549190610c96565b6106ab565b005b34801561026757600080fd5b50610270610860565b60405161027d91906108c7565b60405180910390f35b60008054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b600460009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b60016020528060005260406000206000915090505481565b6060600680548060200260200160405190810160405280929190818152602001828054801561033657602002820191906000526020600020905b815481526020019060010190808311610322575b5050505050905090565b600460009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff16146103d0576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016103c790610d59565b60405180910390fd5b600280546103de9190610da8565b600354426103ec9190610dea565b101561042d576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161042490610e90565b60405180910390fd5b6000805b825181101561052b5760006001600085848151811061045357610452610eb0565b5b6020026020010151815260200190815260200160002054116104aa576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016104a190610f2b565b60405180910390fd5b600160008483815181106104c1576104c0610eb0565b5b6020026020010151815260200190815260200160002054826104e39190610f4b565b91506000600160008584815181106104fe576104fd610eb0565b5b6020026020010151815260200190815260200160002081905550808061052390610f7f565b915050610431565b508273ffffffffffffffffffffffffffffffffffffffff166108fc829081150290604051600060405180830381858888f19350505050158015610572573d6000803e3d6000fd5b50505050565b60025481565b600460009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff161461060e576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161060590610d59565b60405180910390fd5b60006001600084815260200190815260200160002054036106535760068290806001815401808255809150506001900390600052602060002001600090919091909150555b806001600084815260200190815260200160002060008282546106769190610f4b565b925050819055505050565b6006818154811061069157600080fd5b906000526020600020016000915090505481565b60035481565b600460009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff161461073b576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161073290610d59565b60405180910390fd5b6000600160008381526020019081526020016000205411610791576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161078890610f2b565b60405180910390fd5b600254600354426107a29190610dea565b10156107e3576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016107da90610e90565b60405180910390fd5b600060016000838152602001908152602001600020549050600060016000848152602001908152602001600020819055508273ffffffffffffffffffffffffffffffffffffffff166108fc829081150290604051600060405180830381858888f1935050505015801561085a573d6000803e3d6000fd5b50505050565b600560009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b60006108b182610886565b9050919050565b6108c1816108a6565b82525050565b60006020820190506108dc60008301846108b8565b92915050565b6000604051905090565b600080fd5b600080fd5b6000819050919050565b610909816108f6565b811461091457600080fd5b50565b60008135905061092681610900565b92915050565b600060208284031215610942576109416108ec565b5b600061095084828501610917565b91505092915050565b610962816108f6565b82525050565b600060208201905061097d6000830184610959565b92915050565b600081519050919050565b600082825260208201905092915050565b6000819050602082019050919050565b6109b8816108f6565b82525050565b60006109ca83836109af565b60208301905092915050565b6000602082019050919050565b60006109ee82610983565b6109f8818561098e565b9350610a038361099f565b8060005b83811015610a34578151610a1b88826109be565b9750610a26836109d6565b925050600181019050610a07565b5085935050505092915050565b60006020820190508181036000830152610a5b81846109e3565b905092915050565b6000610a6e82610886565b9050919050565b610a7e81610a63565b8114610a8957600080fd5b50565b600081359050610a9b81610a75565b92915050565b600080fd5b6000601f19601f8301169050919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b610aef82610aa6565b810181811067ffffffffffffffff82111715610b0e57610b0d610ab7565b5b80604052505050565b6000610b216108e2565b9050610b2d8282610ae6565b919050565b600067ffffffffffffffff821115610b4d57610b4c610ab7565b5b602082029050602081019050919050565b600080fd5b6000610b76610b7184610b32565b610b17565b90508083825260208201905060208402830185811115610b9957610b98610b5e565b5b835b81811015610bc25780610bae8882610917565b845260208401935050602081019050610b9b565b5050509392505050565b600082601f830112610be157610be0610aa1565b5b8135610bf1848260208601610b63565b91505092915050565b60008060408385031215610c1157610c106108ec565b5b6000610c1f85828601610a8c565b925050602083013567ffffffffffffffff811115610c4057610c3f6108f1565b5b610c4c85828601610bcc565b9150509250929050565b60008060408385031215610c6d57610c6c6108ec565b5b6000610c7b85828601610917565b9250506020610c8c85828601610917565b9150509250929050565b60008060408385031215610cad57610cac6108ec565b5b6000610cbb85828601610a8c565b9250506020610ccc85828601610917565b9150509250929050565b600082825260208201905092915050565b7f4f6e6c7920426974737572616e636520636f6e74726163742063616e2063616c60008201527f6c20746869732066756e6374696f6e0000000000000000000000000000000000602082015250565b6000610d43602f83610cd6565b9150610d4e82610ce7565b604082019050919050565b60006020820190508181036000830152610d7281610d36565b9050919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b6000610db3826108f6565b9150610dbe836108f6565b9250828202610dcc816108f6565b91508282048414831517610de357610de2610d79565b5b5092915050565b6000610df5826108f6565b9150610e00836108f6565b9250828203905081811115610e1857610e17610d79565b5b92915050565b7f43616e6e6f74206163636573732066756e6374696f6e206265666f726520746860008201527f65206d696e696d756d2074696d65206861732070617373656400000000000000602082015250565b6000610e7a603983610cd6565b9150610e8582610e1e565b604082019050919050565b60006020820190508181036000830152610ea981610e6d565b9050919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b7f4e6f2062616c616e636520666f72207468697320746f6b656e49440000000000600082015250565b6000610f15601b83610cd6565b9150610f2082610edf565b602082019050919050565b60006020820190508181036000830152610f4481610f08565b9050919050565b6000610f56826108f6565b9150610f61836108f6565b9250828201905080821115610f7957610f78610d79565b5b92915050565b6000610f8a826108f6565b91507fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff8203610fbc57610fbb610d79565b5b60018201905091905056fea26469706673582212206b9b96cb8730c8a6f1babf870770a66b17a6b9760fd6ef1c71ba328de2e6083c64736f6c63430008120033a2646970667358221220989f0457d23eca59953258acf1c2677a4f2c18e1599e6bffc5c50e780412dae364736f6c63430008120033', \n     arguments: [\n     ]\n}).send({\n     from: web3.eth.accounts[0], \n     gas: '4700000'\n   }, function (e, contract){\n    console.log(e, contract);\n    if (typeof contract.address !== 'undefined') {\n         console.log('Contract mined! address: ' + contract.address + ' transactionHash: ' + contract.transactionHash);\n    }\n })",
	"functionHashes": {
		"429b62e5": "admins(address)",
		"aad3ec96": "claim(address,uint256)",
		"5f76dfc0": "createVault(address,uint256)",
		"7f309523": "depositFunds(address,uint256[],uint256[])",
		"622bc90e": "getContractAddress(address)",
		"0db6f34d": "getMyVaultDetails()",
		"1cb3d314": "vaultAddress(address)",
		"a3648ec0": "withdrawFunds(address,uint256[])"
	},
	"gasEstimates": {
		"Creation": {
			"codeDepositCost": "2615000",
			"executionCost": "2831",
			"totalCost": "2617831"
		},
		"External": {
			"admins(address)": "infinite",
			"claim(address,uint256)": "infinite",
			"createVault(address,uint256)": "infinite",
			"depositFunds(address,uint256[],uint256[])": "infinite",
			"getContractAddress(address)": "infinite",
			"getMyVaultDetails()": "infinite",
			"vaultAddress(address)": "infinite",
			"withdrawFunds(address,uint256[])": "infinite"
		}
	},
	"devdoc": {
		"details": "Bitsurance contract that interacts with Vaults and manages the creation and operations on them",
		"kind": "dev",
		"methods": {
			"claim(address,uint256)": {
				"details": "Function to claim a Token ID from a vault",
				"params": {
					"NFTContractAddress": "address of the NFT contract",
					"_tokenID": "Token ID to claim"
				}
			},
			"createVault(address,uint256)": {
				"details": "Function to create a new vault",
				"params": {
					"_NFTContractAddress": "address of the NFT contract",
					"_minTime": "minimum time before withdrawal"
				}
			},
			"depositFunds(address,uint256[],uint256[])": {
				"details": "Function to deposit funds into a vault",
				"params": {
					"NFTContractAddress": "address of the NFT contract",
					"_tokenIDs": "Array of Token IDs for deposit",
					"amounts": "Array of corresponding amounts for deposit"
				}
			},
			"getContractAddress(address)": {
				"details": "Function to get the contract address of the vault",
				"params": {
					"NFTContractAddress": "address of the NFT contract"
				},
				"returns": {
					"_0": "Address of the vault contract"
				}
			},
			"getMyVaultDetails()": {
				"details": "Function to get details of the vault associated with the caller",
				"returns": {
					"_0": "A tuple containing the total balance of the vault, minimum time before withdraw,  array of token ids insured, and the associated NFT contract address"
				}
			},
			"withdrawFunds(address,uint256[])": {
				"details": "Function to withdraw funds from a vault",
				"params": {
					"NFTContractAddress": "address of the NFT contract",
					"tokenIDs": "Array of Token IDs for withdrawal"
				}
			}
		},
		"title": "Bitsurance",
		"version": 1
	},
	"userdoc": {
		"kind": "user",
		"methods": {},
		"version": 1
	},
	"Runtime Bytecode": {
		"functionDebugData": {
			"@admins_2963": {
				"entryPoint": 1319,
				"id": 2963,
				"parameterSlots": 0,
				"returnSlots": 0
			},
			"@claim_3312": {
				"entryPoint": 3710,
				"id": 3312,
				"parameterSlots": 2,
				"returnSlots": 0
			},
			"@createVault_3028": {
				"entryPoint": 1370,
				"id": 3028,
				"parameterSlots": 2,
				"returnSlots": 0
			},
			"@depositFunds_3153": {
				"entryPoint": 2166,
				"id": 3153,
				"parameterSlots": 3,
				"returnSlots": 0
			},
			"@getContractAddress_3325": {
				"entryPoint": 2061,
				"id": 3325,
				"parameterSlots": 1,
				"returnSlots": 1
			},
			"@getMyVaultDetails_3411": {
				"entryPoint": 536,
				"id": 3411,
				"parameterSlots": 0,
				"returnSlots": 4
			},
			"@vaultAddress_2959": {
				"entryPoint": 1268,
				"id": 2959,
				"parameterSlots": 0,
				"returnSlots": 0
			},
			"@withdrawFunds_3212": {
				"entryPoint": 3136,
				"id": 3212,
				"parameterSlots": 2,
				"returnSlots": 0
			},
			"abi_decode_available_length_t_array$_t_uint256_$dyn_memory_ptr": {
				"entryPoint": 5545,
				"id": null,
				"parameterSlots": 3,
				"returnSlots": 1
			},
			"abi_decode_available_length_t_array$_t_uint256_$dyn_memory_ptr_fromMemory": {
				"entryPoint": 6362,
				"id": null,
				"parameterSlots": 3,
				"returnSlots": 1
			},
			"abi_decode_t_address": {
				"entryPoint": 5117,
				"id": null,
				"parameterSlots": 2,
				"returnSlots": 1
			},
			"abi_decode_t_address_fromMemory": {
				"entryPoint": 7150,
				"id": null,
				"parameterSlots": 2,
				"returnSlots": 1
			},
			"abi_decode_t_array$_t_uint256_$dyn_memory_ptr": {
				"entryPoint": 5661,
				"id": null,
				"parameterSlots": 2,
				"returnSlots": 1
			},
			"abi_decode_t_array$_t_uint256_$dyn_memory_ptr_fromMemory": {
				"entryPoint": 6478,
				"id": null,
				"parameterSlots": 2,
				"returnSlots": 1
			},
			"abi_decode_t_uint256": {
				"entryPoint": 5245,
				"id": null,
				"parameterSlots": 2,
				"returnSlots": 1
			},
			"abi_decode_t_uint256_fromMemory": {
				"entryPoint": 6289,
				"id": null,
				"parameterSlots": 2,
				"returnSlots": 1
			},
			"abi_decode_tuple_t_address": {
				"entryPoint": 5140,
				"id": null,
				"parameterSlots": 2,
				"returnSlots": 1
			},
			"abi_decode_tuple_t_address_fromMemory": {
				"entryPoint": 7173,
				"id": null,
				"parameterSlots": 2,
				"returnSlots": 1
			},
			"abi_decode_tuple_t_addresst_array$_t_uint256_$dyn_memory_ptr": {
				"entryPoint": 5866,
				"id": null,
				"parameterSlots": 2,
				"returnSlots": 2
			},
			"abi_decode_tuple_t_addresst_array$_t_uint256_$dyn_memory_ptrt_array$_t_uint256_$dyn_memory_ptr": {
				"entryPoint": 5712,
				"id": null,
				"parameterSlots": 2,
				"returnSlots": 3
			},
			"abi_decode_tuple_t_addresst_uint256": {
				"entryPoint": 5268,
				"id": null,
				"parameterSlots": 2,
				"returnSlots": 2
			},
			"abi_decode_tuple_t_array$_t_uint256_$dyn_memory_ptr_fromMemory": {
				"entryPoint": 6529,
				"id": null,
				"parameterSlots": 2,
				"returnSlots": 1
			},
			"abi_decode_tuple_t_uint256_fromMemory": {
				"entryPoint": 6312,
				"id": null,
				"parameterSlots": 2,
				"returnSlots": 1
			},
			"abi_encodeUpdatedPos_t_uint256_to_t_uint256": {
				"entryPoint": 4773,
				"id": null,
				"parameterSlots": 2,
				"returnSlots": 1
			},
			"abi_encode_t_address_payable_to_t_address_payable_fromStack": {
				"entryPoint": 7936,
				"id": null,
				"parameterSlots": 2,
				"returnSlots": 0
			},
			"abi_encode_t_address_to_t_address_fromStack": {
				"entryPoint": 4970,
				"id": null,
				"parameterSlots": 2,
				"returnSlots": 0
			},
			"abi_encode_t_array$_t_uint256_$dyn_memory_ptr_to_t_array$_t_uint256_$dyn_memory_ptr_fromStack": {
				"entryPoint": 4812,
				"id": null,
				"parameterSlots": 2,
				"returnSlots": 1
			},
			"abi_encode_t_stringliteral_02b8c2fb88814cea156c3111f16cfd94d03e5ad66e454c7339e3ad4f3d17e3e7_to_t_string_memory_ptr_fromStack": {
				"entryPoint": 7843,
				"id": null,
				"parameterSlots": 1,
				"returnSlots": 1
			},
			"abi_encode_t_stringliteral_4f4fa40674b63d9f789043d4550fa5f5291b0482fc45cbbc7ace27126a67c59b_to_t_string_memory_ptr_fromStack": {
				"entryPoint": 8265,
				"id": null,
				"parameterSlots": 1,
				"returnSlots": 1
			},
			"abi_encode_t_stringliteral_4fa02d1b88050f6a6a5d285d3489cc4bb24e4d1924dee6d5a2f903a871e4e481_to_t_string_memory_ptr_fromStack": {
				"entryPoint": 7077,
				"id": null,
				"parameterSlots": 1,
				"returnSlots": 1
			},
			"abi_encode_t_stringliteral_5824732942b65793939b349ae446a33529c5efa78f9adc0aff8550635fa44b27_to_t_string_memory_ptr_fromStack": {
				"entryPoint": 6689,
				"id": null,
				"parameterSlots": 1,
				"returnSlots": 1
			},
			"abi_encode_t_stringliteral_8d454e2a084014abe0cb8b0220b87e9c52084abcf0f285c0683d2b62cc95c4d5_to_t_string_memory_ptr_fromStack": {
				"entryPoint": 7302,
				"id": null,
				"parameterSlots": 1,
				"returnSlots": 1
			},
			"abi_encode_t_stringliteral_8f0021d44dc3c6a184f0ca9bb2b581abde8876c7afea5879ec72cd3feb6a7120_to_t_string_memory_ptr_fromStack": {
				"entryPoint": 8113,
				"id": null,
				"parameterSlots": 1,
				"returnSlots": 1
			},
			"abi_encode_t_stringliteral_9761939be34d52ad729f4e4e7fb4f36a053f0fee36a4e99216ff07d0c9de5bfd_to_t_string_memory_ptr_fromStack": {
				"entryPoint": 6064,
				"id": null,
				"parameterSlots": 1,
				"returnSlots": 1
			},
			"abi_encode_t_stringliteral_a5e89270b3c56d4b9d1cf0a951d175d259ba209e17765637f05d1ed5391db802_to_t_string_memory_ptr_fromStack": {
				"entryPoint": 7646,
				"id": null,
				"parameterSlots": 1,
				"returnSlots": 1
			},
			"abi_encode_t_stringliteral_af09f6db30e4867e53cba9916b467b745c1bb0ff7604dcbe2aeb26f6c0c4cbab_to_t_string_memory_ptr_fromStack": {
				"entryPoint": 6963,
				"id": null,
				"parameterSlots": 1,
				"returnSlots": 1
			},
			"abi_encode_t_stringliteral_f9557d505c8bd41bfb57feb435c00f2fd7e4e4f41b7d53b93742c0a537d5aa0f_to_t_string_memory_ptr_fromStack": {
				"entryPoint": 6216,
				"id": null,
				"parameterSlots": 1,
				"returnSlots": 1
			},
			"abi_encode_t_uint256_to_t_uint256": {
				"entryPoint": 4756,
				"id": null,
				"parameterSlots": 2,
				"returnSlots": 0
			},
			"abi_encode_t_uint256_to_t_uint256_fromStack": {
				"entryPoint": 4695,
				"id": null,
				"parameterSlots": 2,
				"returnSlots": 0
			},
			"abi_encode_tuple_t_address__to_t_address__fromStack_reversed": {
				"entryPoint": 5190,
				"id": null,
				"parameterSlots": 2,
				"returnSlots": 1
			},
			"abi_encode_tuple_t_address_payable_t_array$_t_uint256_$dyn_memory_ptr__to_t_address_payable_t_array$_t_uint256_$dyn_memory_ptr__fromStack_reversed": {
				"entryPoint": 7953,
				"id": null,
				"parameterSlots": 3,
				"returnSlots": 1
			},
			"abi_encode_tuple_t_address_payable_t_uint256__to_t_address_payable_t_uint256__fromStack_reversed": {
				"entryPoint": 8338,
				"id": null,
				"parameterSlots": 3,
				"returnSlots": 1
			},
			"abi_encode_tuple_t_address_t_uint256_t_address__to_t_address_t_uint256_t_address__fromStack_reversed": {
				"entryPoint": 6762,
				"id": null,
				"parameterSlots": 4,
				"returnSlots": 1
			},
			"abi_encode_tuple_t_stringliteral_02b8c2fb88814cea156c3111f16cfd94d03e5ad66e454c7339e3ad4f3d17e3e7__to_t_string_memory_ptr__fromStack_reversed": {
				"entryPoint": 7882,
				"id": null,
				"parameterSlots": 1,
				"returnSlots": 1
			},
			"abi_encode_tuple_t_stringliteral_4f4fa40674b63d9f789043d4550fa5f5291b0482fc45cbbc7ace27126a67c59b__to_t_string_memory_ptr__fromStack_reversed": {
				"entryPoint": 8304,
				"id": null,
				"parameterSlots": 1,
				"returnSlots": 1
			},
			"abi_encode_tuple_t_stringliteral_4fa02d1b88050f6a6a5d285d3489cc4bb24e4d1924dee6d5a2f903a871e4e481__to_t_string_memory_ptr__fromStack_reversed": {
				"entryPoint": 7116,
				"id": null,
				"parameterSlots": 1,
				"returnSlots": 1
			},
			"abi_encode_tuple_t_stringliteral_5824732942b65793939b349ae446a33529c5efa78f9adc0aff8550635fa44b27__to_t_string_memory_ptr__fromStack_reversed": {
				"entryPoint": 6728,
				"id": null,
				"parameterSlots": 1,
				"returnSlots": 1
			},
			"abi_encode_tuple_t_stringliteral_8d454e2a084014abe0cb8b0220b87e9c52084abcf0f285c0683d2b62cc95c4d5__to_t_string_memory_ptr__fromStack_reversed": {
				"entryPoint": 7341,
				"id": null,
				"parameterSlots": 1,
				"returnSlots": 1
			},
			"abi_encode_tuple_t_stringliteral_8f0021d44dc3c6a184f0ca9bb2b581abde8876c7afea5879ec72cd3feb6a7120__to_t_string_memory_ptr__fromStack_reversed": {
				"entryPoint": 8152,
				"id": null,
				"parameterSlots": 1,
				"returnSlots": 1
			},
			"abi_encode_tuple_t_stringliteral_9761939be34d52ad729f4e4e7fb4f36a053f0fee36a4e99216ff07d0c9de5bfd__to_t_string_memory_ptr__fromStack_reversed": {
				"entryPoint": 6103,
				"id": null,
				"parameterSlots": 1,
				"returnSlots": 1
			},
			"abi_encode_tuple_t_stringliteral_a5e89270b3c56d4b9d1cf0a951d175d259ba209e17765637f05d1ed5391db802__to_t_string_memory_ptr__fromStack_reversed": {
				"entryPoint": 7685,
				"id": null,
				"parameterSlots": 1,
				"returnSlots": 1
			},
			"abi_encode_tuple_t_stringliteral_af09f6db30e4867e53cba9916b467b745c1bb0ff7604dcbe2aeb26f6c0c4cbab__to_t_string_memory_ptr__fromStack_reversed": {
				"entryPoint": 7002,
				"id": null,
				"parameterSlots": 1,
				"returnSlots": 1
			},
			"abi_encode_tuple_t_stringliteral_f9557d505c8bd41bfb57feb435c00f2fd7e4e4f41b7d53b93742c0a537d5aa0f__to_t_string_memory_ptr__fromStack_reversed": {
				"entryPoint": 6255,
				"id": null,
				"parameterSlots": 1,
				"returnSlots": 1
			},
			"abi_encode_tuple_t_uint256__to_t_uint256__fromStack_reversed": {
				"entryPoint": 8005,
				"id": null,
				"parameterSlots": 2,
				"returnSlots": 1
			},
			"abi_encode_tuple_t_uint256_t_address_t_address__to_t_uint256_t_address_t_address__fromStack_reversed": {
				"entryPoint": 6823,
				"id": null,
				"parameterSlots": 4,
				"returnSlots": 1
			},
			"abi_encode_tuple_t_uint256_t_uint256__to_t_uint256_t_uint256__fromStack_reversed": {
				"entryPoint": 7719,
				"id": null,
				"parameterSlots": 3,
				"returnSlots": 1
			},
			"abi_encode_tuple_t_uint256_t_uint256_t_array$_t_uint256_$dyn_memory_ptr_t_address__to_t_uint256_t_uint256_t_array$_t_uint256_$dyn_memory_ptr_t_address__fromStack_reversed": {
				"entryPoint": 4987,
				"id": null,
				"parameterSlots": 5,
				"returnSlots": 1
			},
			"allocate_memory": {
				"entryPoint": 5462,
				"id": null,
				"parameterSlots": 1,
				"returnSlots": 1
			},
			"allocate_unbounded": {
				"entryPoint": 5071,
				"id": null,
				"parameterSlots": 0,
				"returnSlots": 1
			},
			"array_allocation_size_t_array$_t_uint256_$dyn_memory_ptr": {
				"entryPoint": 5493,
				"id": null,
				"parameterSlots": 1,
				"returnSlots": 1
			},
			"array_dataslot_t_array$_t_uint256_$dyn_memory_ptr": {
				"entryPoint": 4740,
				"id": null,
				"parameterSlots": 1,
				"returnSlots": 1
			},
			"array_length_t_array$_t_uint256_$dyn_memory_ptr": {
				"entryPoint": 4712,
				"id": null,
				"parameterSlots": 1,
				"returnSlots": 1
			},
			"array_nextElement_t_array$_t_uint256_$dyn_memory_ptr": {
				"entryPoint": 4799,
				"id": null,
				"parameterSlots": 1,
				"returnSlots": 1
			},
			"array_storeLengthForEncoding_t_array$_t_uint256_$dyn_memory_ptr_fromStack": {
				"entryPoint": 4723,
				"id": null,
				"parameterSlots": 2,
				"returnSlots": 1
			},
			"array_storeLengthForEncoding_t_string_memory_ptr_fromStack": {
				"entryPoint": 5968,
				"id": null,
				"parameterSlots": 2,
				"returnSlots": 1
			},
			"checked_add_t_uint256": {
				"entryPoint": 7469,
				"id": null,
				"parameterSlots": 2,
				"returnSlots": 1
			},
			"cleanup_t_address": {
				"entryPoint": 4950,
				"id": null,
				"parameterSlots": 1,
				"returnSlots": 1
			},
			"cleanup_t_address_payable": {
				"entryPoint": 7916,
				"id": null,
				"parameterSlots": 1,
				"returnSlots": 1
			},
			"cleanup_t_uint160": {
				"entryPoint": 4918,
				"id": null,
				"parameterSlots": 1,
				"returnSlots": 1
			},
			"cleanup_t_uint256": {
				"entryPoint": 4685,
				"id": null,
				"parameterSlots": 1,
				"returnSlots": 1
			},
			"finalize_allocation": {
				"entryPoint": 5408,
				"id": null,
				"parameterSlots": 2,
				"returnSlots": 0
			},
			"increment_t_uint256": {
				"entryPoint": 7528,
				"id": null,
				"parameterSlots": 1,
				"returnSlots": 1
			},
			"panic_error_0x11": {
				"entryPoint": 7422,
				"id": null,
				"parameterSlots": 0,
				"returnSlots": 0
			},
			"panic_error_0x32": {
				"entryPoint": 7375,
				"id": null,
				"parameterSlots": 0,
				"returnSlots": 0
			},
			"panic_error_0x41": {
				"entryPoint": 5361,
				"id": null,
				"parameterSlots": 0,
				"returnSlots": 0
			},
			"revert_error_1b9f4a0a5773e33b91aa01db23bf8c55fce1411167c872835e7fa00a4f17d46d": {
				"entryPoint": 5339,
				"id": null,
				"parameterSlots": 0,
				"returnSlots": 0
			},
			"revert_error_81385d8c0b31fffe14be1da910c8bd3a80be4cfa248e04f42ec0faea3132a8ef": {
				"entryPoint": 5540,
				"id": null,
				"parameterSlots": 0,
				"returnSlots": 0
			},
			"revert_error_c1322bf8034eace5e0b5c7295db60986aa89aae5e0ea0873e4689e076861a5db": {
				"entryPoint": 5086,
				"id": null,
				"parameterSlots": 0,
				"returnSlots": 0
			},
			"revert_error_dbdddcbe895c83990c08b3492a0e83918d802a52331272ac6fdb6a7c4aea3b1b": {
				"entryPoint": 5081,
				"id": null,
				"parameterSlots": 0,
				"returnSlots": 0
			},
			"round_up_to_mul_of_32": {
				"entryPoint": 5344,
				"id": null,
				"parameterSlots": 1,
				"returnSlots": 1
			},
			"store_literal_in_memory_02b8c2fb88814cea156c3111f16cfd94d03e5ad66e454c7339e3ad4f3d17e3e7": {
				"entryPoint": 7764,
				"id": null,
				"parameterSlots": 1,
				"returnSlots": 0
			},
			"store_literal_in_memory_4f4fa40674b63d9f789043d4550fa5f5291b0482fc45cbbc7ace27126a67c59b": {
				"entryPoint": 8186,
				"id": null,
				"parameterSlots": 1,
				"returnSlots": 0
			},
			"store_literal_in_memory_4fa02d1b88050f6a6a5d285d3489cc4bb24e4d1924dee6d5a2f903a871e4e481": {
				"entryPoint": 7036,
				"id": null,
				"parameterSlots": 1,
				"returnSlots": 0
			},
			"store_literal_in_memory_5824732942b65793939b349ae446a33529c5efa78f9adc0aff8550635fa44b27": {
				"entryPoint": 6610,
				"id": null,
				"parameterSlots": 1,
				"returnSlots": 0
			},
			"store_literal_in_memory_8d454e2a084014abe0cb8b0220b87e9c52084abcf0f285c0683d2b62cc95c4d5": {
				"entryPoint": 7223,
				"id": null,
				"parameterSlots": 1,
				"returnSlots": 0
			},
			"store_literal_in_memory_8f0021d44dc3c6a184f0ca9bb2b581abde8876c7afea5879ec72cd3feb6a7120": {
				"entryPoint": 8034,
				"id": null,
				"parameterSlots": 1,
				"returnSlots": 0
			},
			"store_literal_in_memory_9761939be34d52ad729f4e4e7fb4f36a053f0fee36a4e99216ff07d0c9de5bfd": {
				"entryPoint": 5985,
				"id": null,
				"parameterSlots": 1,
				"returnSlots": 0
			},
			"store_literal_in_memory_a5e89270b3c56d4b9d1cf0a951d175d259ba209e17765637f05d1ed5391db802": {
				"entryPoint": 7605,
				"id": null,
				"parameterSlots": 1,
				"returnSlots": 0
			},
			"store_literal_in_memory_af09f6db30e4867e53cba9916b467b745c1bb0ff7604dcbe2aeb26f6c0c4cbab": {
				"entryPoint": 6884,
				"id": null,
				"parameterSlots": 1,
				"returnSlots": 0
			},
			"store_literal_in_memory_f9557d505c8bd41bfb57feb435c00f2fd7e4e4f41b7d53b93742c0a537d5aa0f": {
				"entryPoint": 6137,
				"id": null,
				"parameterSlots": 1,
				"returnSlots": 0
			},
			"validator_revert_t_address": {
				"entryPoint": 5091,
				"id": null,
				"parameterSlots": 1,
				"returnSlots": 0
			},
			"validator_revert_t_uint256": {
				"entryPoint": 5219,
				"id": null,
				"parameterSlots": 1,
				"returnSlots": 0
			}
		},
		"generatedSources": [
			{
				"ast": {
					"nodeType": "YulBlock",
					"src": "0:25523:13",
					"statements": [
						{
							"body": {
								"nodeType": "YulBlock",
								"src": "52:32:13",
								"statements": [
									{
										"nodeType": "YulAssignment",
										"src": "62:16:13",
										"value": {
											"name": "value",
											"nodeType": "YulIdentifier",
											"src": "73:5:13"
										},
										"variableNames": [
											{
												"name": "cleaned",
												"nodeType": "YulIdentifier",
												"src": "62:7:13"
											}
										]
									}
								]
							},
							"name": "cleanup_t_uint256",
							"nodeType": "YulFunctionDefinition",
							"parameters": [
								{
									"name": "value",
									"nodeType": "YulTypedName",
									"src": "34:5:13",
									"type": ""
								}
							],
							"returnVariables": [
								{
									"name": "cleaned",
									"nodeType": "YulTypedName",
									"src": "44:7:13",
									"type": ""
								}
							],
							"src": "7:77:13"
						},
						{
							"body": {
								"nodeType": "YulBlock",
								"src": "155:53:13",
								"statements": [
									{
										"expression": {
											"arguments": [
												{
													"name": "pos",
													"nodeType": "YulIdentifier",
													"src": "172:3:13"
												},
												{
													"arguments": [
														{
															"name": "value",
															"nodeType": "YulIdentifier",
															"src": "195:5:13"
														}
													],
													"functionName": {
														"name": "cleanup_t_uint256",
														"nodeType": "YulIdentifier",
														"src": "177:17:13"
													},
													"nodeType": "YulFunctionCall",
													"src": "177:24:13"
												}
											],
											"functionName": {
												"name": "mstore",
												"nodeType": "YulIdentifier",
												"src": "165:6:13"
											},
											"nodeType": "YulFunctionCall",
											"src": "165:37:13"
										},
										"nodeType": "YulExpressionStatement",
										"src": "165:37:13"
									}
								]
							},
							"name": "abi_encode_t_uint256_to_t_uint256_fromStack",
							"nodeType": "YulFunctionDefinition",
							"parameters": [
								{
									"name": "value",
									"nodeType": "YulTypedName",
									"src": "143:5:13",
									"type": ""
								},
								{
									"name": "pos",
									"nodeType": "YulTypedName",
									"src": "150:3:13",
									"type": ""
								}
							],
							"src": "90:118:13"
						},
						{
							"body": {
								"nodeType": "YulBlock",
								"src": "288:40:13",
								"statements": [
									{
										"nodeType": "YulAssignment",
										"src": "299:22:13",
										"value": {
											"arguments": [
												{
													"name": "value",
													"nodeType": "YulIdentifier",
													"src": "315:5:13"
												}
											],
											"functionName": {
												"name": "mload",
												"nodeType": "YulIdentifier",
												"src": "309:5:13"
											},
											"nodeType": "YulFunctionCall",
											"src": "309:12:13"
										},
										"variableNames": [
											{
												"name": "length",
												"nodeType": "YulIdentifier",
												"src": "299:6:13"
											}
										]
									}
								]
							},
							"name": "array_length_t_array$_t_uint256_$dyn_memory_ptr",
							"nodeType": "YulFunctionDefinition",
							"parameters": [
								{
									"name": "value",
									"nodeType": "YulTypedName",
									"src": "271:5:13",
									"type": ""
								}
							],
							"returnVariables": [
								{
									"name": "length",
									"nodeType": "YulTypedName",
									"src": "281:6:13",
									"type": ""
								}
							],
							"src": "214:114:13"
						},
						{
							"body": {
								"nodeType": "YulBlock",
								"src": "445:73:13",
								"statements": [
									{
										"expression": {
											"arguments": [
												{
													"name": "pos",
													"nodeType": "YulIdentifier",
													"src": "462:3:13"
												},
												{
													"name": "length",
													"nodeType": "YulIdentifier",
													"src": "467:6:13"
												}
											],
											"functionName": {
												"name": "mstore",
												"nodeType": "YulIdentifier",
												"src": "455:6:13"
											},
											"nodeType": "YulFunctionCall",
											"src": "455:19:13"
										},
										"nodeType": "YulExpressionStatement",
										"src": "455:19:13"
									},
									{
										"nodeType": "YulAssignment",
										"src": "483:29:13",
										"value": {
											"arguments": [
												{
													"name": "pos",
													"nodeType": "YulIdentifier",
													"src": "502:3:13"
												},
												{
													"kind": "number",
													"nodeType": "YulLiteral",
													"src": "507:4:13",
													"type": "",
													"value": "0x20"
												}
											],
											"functionName": {
												"name": "add",
												"nodeType": "YulIdentifier",
												"src": "498:3:13"
											},
											"nodeType": "YulFunctionCall",
											"src": "498:14:13"
										},
										"variableNames": [
											{
												"name": "updated_pos",
												"nodeType": "YulIdentifier",
												"src": "483:11:13"
											}
										]
									}
								]
							},
							"name": "array_storeLengthForEncoding_t_array$_t_uint256_$dyn_memory_ptr_fromStack",
							"nodeType": "YulFunctionDefinition",
							"parameters": [
								{
									"name": "pos",
									"nodeType": "YulTypedName",
									"src": "417:3:13",
									"type": ""
								},
								{
									"name": "length",
									"nodeType": "YulTypedName",
									"src": "422:6:13",
									"type": ""
								}
							],
							"returnVariables": [
								{
									"name": "updated_pos",
									"nodeType": "YulTypedName",
									"src": "433:11:13",
									"type": ""
								}
							],
							"src": "334:184:13"
						},
						{
							"body": {
								"nodeType": "YulBlock",
								"src": "596:60:13",
								"statements": [
									{
										"nodeType": "YulAssignment",
										"src": "606:11:13",
										"value": {
											"name": "ptr",
											"nodeType": "YulIdentifier",
											"src": "614:3:13"
										},
										"variableNames": [
											{
												"name": "data",
												"nodeType": "YulIdentifier",
												"src": "606:4:13"
											}
										]
									},
									{
										"nodeType": "YulAssignment",
										"src": "627:22:13",
										"value": {
											"arguments": [
												{
													"name": "ptr",
													"nodeType": "YulIdentifier",
													"src": "639:3:13"
												},
												{
													"kind": "number",
													"nodeType": "YulLiteral",
													"src": "644:4:13",
													"type": "",
													"value": "0x20"
												}
											],
											"functionName": {
												"name": "add",
												"nodeType": "YulIdentifier",
												"src": "635:3:13"
											},
											"nodeType": "YulFunctionCall",
											"src": "635:14:13"
										},
										"variableNames": [
											{
												"name": "data",
												"nodeType": "YulIdentifier",
												"src": "627:4:13"
											}
										]
									}
								]
							},
							"name": "array_dataslot_t_array$_t_uint256_$dyn_memory_ptr",
							"nodeType": "YulFunctionDefinition",
							"parameters": [
								{
									"name": "ptr",
									"nodeType": "YulTypedName",
									"src": "583:3:13",
									"type": ""
								}
							],
							"returnVariables": [
								{
									"name": "data",
									"nodeType": "YulTypedName",
									"src": "591:4:13",
									"type": ""
								}
							],
							"src": "524:132:13"
						},
						{
							"body": {
								"nodeType": "YulBlock",
								"src": "717:53:13",
								"statements": [
									{
										"expression": {
											"arguments": [
												{
													"name": "pos",
													"nodeType": "YulIdentifier",
													"src": "734:3:13"
												},
												{
													"arguments": [
														{
															"name": "value",
															"nodeType": "YulIdentifier",
															"src": "757:5:13"
														}
													],
													"functionName": {
														"name": "cleanup_t_uint256",
														"nodeType": "YulIdentifier",
														"src": "739:17:13"
													},
													"nodeType": "YulFunctionCall",
													"src": "739:24:13"
												}
											],
											"functionName": {
												"name": "mstore",
												"nodeType": "YulIdentifier",
												"src": "727:6:13"
											},
											"nodeType": "YulFunctionCall",
											"src": "727:37:13"
										},
										"nodeType": "YulExpressionStatement",
										"src": "727:37:13"
									}
								]
							},
							"name": "abi_encode_t_uint256_to_t_uint256",
							"nodeType": "YulFunctionDefinition",
							"parameters": [
								{
									"name": "value",
									"nodeType": "YulTypedName",
									"src": "705:5:13",
									"type": ""
								},
								{
									"name": "pos",
									"nodeType": "YulTypedName",
									"src": "712:3:13",
									"type": ""
								}
							],
							"src": "662:108:13"
						},
						{
							"body": {
								"nodeType": "YulBlock",
								"src": "856:99:13",
								"statements": [
									{
										"expression": {
											"arguments": [
												{
													"name": "value0",
													"nodeType": "YulIdentifier",
													"src": "900:6:13"
												},
												{
													"name": "pos",
													"nodeType": "YulIdentifier",
													"src": "908:3:13"
												}
											],
											"functionName": {
												"name": "abi_encode_t_uint256_to_t_uint256",
												"nodeType": "YulIdentifier",
												"src": "866:33:13"
											},
											"nodeType": "YulFunctionCall",
											"src": "866:46:13"
										},
										"nodeType": "YulExpressionStatement",
										"src": "866:46:13"
									},
									{
										"nodeType": "YulAssignment",
										"src": "921:28:13",
										"value": {
											"arguments": [
												{
													"name": "pos",
													"nodeType": "YulIdentifier",
													"src": "939:3:13"
												},
												{
													"kind": "number",
													"nodeType": "YulLiteral",
													"src": "944:4:13",
													"type": "",
													"value": "0x20"
												}
											],
											"functionName": {
												"name": "add",
												"nodeType": "YulIdentifier",
												"src": "935:3:13"
											},
											"nodeType": "YulFunctionCall",
											"src": "935:14:13"
										},
										"variableNames": [
											{
												"name": "updatedPos",
												"nodeType": "YulIdentifier",
												"src": "921:10:13"
											}
										]
									}
								]
							},
							"name": "abi_encodeUpdatedPos_t_uint256_to_t_uint256",
							"nodeType": "YulFunctionDefinition",
							"parameters": [
								{
									"name": "value0",
									"nodeType": "YulTypedName",
									"src": "829:6:13",
									"type": ""
								},
								{
									"name": "pos",
									"nodeType": "YulTypedName",
									"src": "837:3:13",
									"type": ""
								}
							],
							"returnVariables": [
								{
									"name": "updatedPos",
									"nodeType": "YulTypedName",
									"src": "845:10:13",
									"type": ""
								}
							],
							"src": "776:179:13"
						},
						{
							"body": {
								"nodeType": "YulBlock",
								"src": "1036:38:13",
								"statements": [
									{
										"nodeType": "YulAssignment",
										"src": "1046:22:13",
										"value": {
											"arguments": [
												{
													"name": "ptr",
													"nodeType": "YulIdentifier",
													"src": "1058:3:13"
												},
												{
													"kind": "number",
													"nodeType": "YulLiteral",
													"src": "1063:4:13",
													"type": "",
													"value": "0x20"
												}
											],
											"functionName": {
												"name": "add",
												"nodeType": "YulIdentifier",
												"src": "1054:3:13"
											},
											"nodeType": "YulFunctionCall",
											"src": "1054:14:13"
										},
										"variableNames": [
											{
												"name": "next",
												"nodeType": "YulIdentifier",
												"src": "1046:4:13"
											}
										]
									}
								]
							},
							"name": "array_nextElement_t_array$_t_uint256_$dyn_memory_ptr",
							"nodeType": "YulFunctionDefinition",
							"parameters": [
								{
									"name": "ptr",
									"nodeType": "YulTypedName",
									"src": "1023:3:13",
									"type": ""
								}
							],
							"returnVariables": [
								{
									"name": "next",
									"nodeType": "YulTypedName",
									"src": "1031:4:13",
									"type": ""
								}
							],
							"src": "961:113:13"
						},
						{
							"body": {
								"nodeType": "YulBlock",
								"src": "1234:608:13",
								"statements": [
									{
										"nodeType": "YulVariableDeclaration",
										"src": "1244:68:13",
										"value": {
											"arguments": [
												{
													"name": "value",
													"nodeType": "YulIdentifier",
													"src": "1306:5:13"
												}
											],
											"functionName": {
												"name": "array_length_t_array$_t_uint256_$dyn_memory_ptr",
												"nodeType": "YulIdentifier",
												"src": "1258:47:13"
											},
											"nodeType": "YulFunctionCall",
											"src": "1258:54:13"
										},
										"variables": [
											{
												"name": "length",
												"nodeType": "YulTypedName",
												"src": "1248:6:13",
												"type": ""
											}
										]
									},
									{
										"nodeType": "YulAssignment",
										"src": "1321:93:13",
										"value": {
											"arguments": [
												{
													"name": "pos",
													"nodeType": "YulIdentifier",
													"src": "1402:3:13"
												},
												{
													"name": "length",
													"nodeType": "YulIdentifier",
													"src": "1407:6:13"
												}
											],
											"functionName": {
												"name": "array_storeLengthForEncoding_t_array$_t_uint256_$dyn_memory_ptr_fromStack",
												"nodeType": "YulIdentifier",
												"src": "1328:73:13"
											},
											"nodeType": "YulFunctionCall",
											"src": "1328:86:13"
										},
										"variableNames": [
											{
												"name": "pos",
												"nodeType": "YulIdentifier",
												"src": "1321:3:13"
											}
										]
									},
									{
										"nodeType": "YulVariableDeclaration",
										"src": "1423:71:13",
										"value": {
											"arguments": [
												{
													"name": "value",
													"nodeType": "YulIdentifier",
													"src": "1488:5:13"
												}
											],
											"functionName": {
												"name": "array_dataslot_t_array$_t_uint256_$dyn_memory_ptr",
												"nodeType": "YulIdentifier",
												"src": "1438:49:13"
											},
											"nodeType": "YulFunctionCall",
											"src": "1438:56:13"
										},
										"variables": [
											{
												"name": "baseRef",
												"nodeType": "YulTypedName",
												"src": "1427:7:13",
												"type": ""
											}
										]
									},
									{
										"nodeType": "YulVariableDeclaration",
										"src": "1503:21:13",
										"value": {
											"name": "baseRef",
											"nodeType": "YulIdentifier",
											"src": "1517:7:13"
										},
										"variables": [
											{
												"name": "srcPtr",
												"nodeType": "YulTypedName",
												"src": "1507:6:13",
												"type": ""
											}
										]
									},
									{
										"body": {
											"nodeType": "YulBlock",
											"src": "1593:224:13",
											"statements": [
												{
													"nodeType": "YulVariableDeclaration",
													"src": "1607:34:13",
													"value": {
														"arguments": [
															{
																"name": "srcPtr",
																"nodeType": "YulIdentifier",
																"src": "1634:6:13"
															}
														],
														"functionName": {
															"name": "mload",
															"nodeType": "YulIdentifier",
															"src": "1628:5:13"
														},
														"nodeType": "YulFunctionCall",
														"src": "1628:13:13"
													},
													"variables": [
														{
															"name": "elementValue0",
															"nodeType": "YulTypedName",
															"src": "1611:13:13",
															"type": ""
														}
													]
												},
												{
													"nodeType": "YulAssignment",
													"src": "1654:70:13",
													"value": {
														"arguments": [
															{
																"name": "elementValue0",
																"nodeType": "YulIdentifier",
																"src": "1705:13:13"
															},
															{
																"name": "pos",
																"nodeType": "YulIdentifier",
																"src": "1720:3:13"
															}
														],
														"functionName": {
															"name": "abi_encodeUpdatedPos_t_uint256_to_t_uint256",
															"nodeType": "YulIdentifier",
															"src": "1661:43:13"
														},
														"nodeType": "YulFunctionCall",
														"src": "1661:63:13"
													},
													"variableNames": [
														{
															"name": "pos",
															"nodeType": "YulIdentifier",
															"src": "1654:3:13"
														}
													]
												},
												{
													"nodeType": "YulAssignment",
													"src": "1737:70:13",
													"value": {
														"arguments": [
															{
																"name": "srcPtr",
																"nodeType": "YulIdentifier",
																"src": "1800:6:13"
															}
														],
														"functionName": {
															"name": "array_nextElement_t_array$_t_uint256_$dyn_memory_ptr",
															"nodeType": "YulIdentifier",
															"src": "1747:52:13"
														},
														"nodeType": "YulFunctionCall",
														"src": "1747:60:13"
													},
													"variableNames": [
														{
															"name": "srcPtr",
															"nodeType": "YulIdentifier",
															"src": "1737:6:13"
														}
													]
												}
											]
										},
										"condition": {
											"arguments": [
												{
													"name": "i",
													"nodeType": "YulIdentifier",
													"src": "1555:1:13"
												},
												{
													"name": "length",
													"nodeType": "YulIdentifier",
													"src": "1558:6:13"
												}
											],
											"functionName": {
												"name": "lt",
												"nodeType": "YulIdentifier",
												"src": "1552:2:13"
											},
											"nodeType": "YulFunctionCall",
											"src": "1552:13:13"
										},
										"nodeType": "YulForLoop",
										"post": {
											"nodeType": "YulBlock",
											"src": "1566:18:13",
											"statements": [
												{
													"nodeType": "YulAssignment",
													"src": "1568:14:13",
													"value": {
														"arguments": [
															{
																"name": "i",
																"nodeType": "YulIdentifier",
																"src": "1577:1:13"
															},
															{
																"kind": "number",
																"nodeType": "YulLiteral",
																"src": "1580:1:13",
																"type": "",
																"value": "1"
															}
														],
														"functionName": {
															"name": "add",
															"nodeType": "YulIdentifier",
															"src": "1573:3:13"
														},
														"nodeType": "YulFunctionCall",
														"src": "1573:9:13"
													},
													"variableNames": [
														{
															"name": "i",
															"nodeType": "YulIdentifier",
															"src": "1568:1:13"
														}
													]
												}
											]
										},
										"pre": {
											"nodeType": "YulBlock",
											"src": "1537:14:13",
											"statements": [
												{
													"nodeType": "YulVariableDeclaration",
													"src": "1539:10:13",
													"value": {
														"kind": "number",
														"nodeType": "YulLiteral",
														"src": "1548:1:13",
														"type": "",
														"value": "0"
													},
													"variables": [
														{
															"name": "i",
															"nodeType": "YulTypedName",
															"src": "1543:1:13",
															"type": ""
														}
													]
												}
											]
										},
										"src": "1533:284:13"
									},
									{
										"nodeType": "YulAssignment",
										"src": "1826:10:13",
										"value": {
											"name": "pos",
											"nodeType": "YulIdentifier",
											"src": "1833:3:13"
										},
										"variableNames": [
											{
												"name": "end",
												"nodeType": "YulIdentifier",
												"src": "1826:3:13"
											}
										]
									}
								]
							},
							"name": "abi_encode_t_array$_t_uint256_$dyn_memory_ptr_to_t_array$_t_uint256_$dyn_memory_ptr_fromStack",
							"nodeType": "YulFunctionDefinition",
							"parameters": [
								{
									"name": "value",
									"nodeType": "YulTypedName",
									"src": "1213:5:13",
									"type": ""
								},
								{
									"name": "pos",
									"nodeType": "YulTypedName",
									"src": "1220:3:13",
									"type": ""
								}
							],
							"returnVariables": [
								{
									"name": "end",
									"nodeType": "YulTypedName",
									"src": "1229:3:13",
									"type": ""
								}
							],
							"src": "1110:732:13"
						},
						{
							"body": {
								"nodeType": "YulBlock",
								"src": "1893:81:13",
								"statements": [
									{
										"nodeType": "YulAssignment",
										"src": "1903:65:13",
										"value": {
											"arguments": [
												{
													"name": "value",
													"nodeType": "YulIdentifier",
													"src": "1918:5:13"
												},
												{
													"kind": "number",
													"nodeType": "YulLiteral",
													"src": "1925:42:13",
													"type": "",
													"value": "0xffffffffffffffffffffffffffffffffffffffff"
												}
											],
											"functionName": {
												"name": "and",
												"nodeType": "YulIdentifier",
												"src": "1914:3:13"
											},
											"nodeType": "YulFunctionCall",
											"src": "1914:54:13"
										},
										"variableNames": [
											{
												"name": "cleaned",
												"nodeType": "YulIdentifier",
												"src": "1903:7:13"
											}
										]
									}
								]
							},
							"name": "cleanup_t_uint160",
							"nodeType": "YulFunctionDefinition",
							"parameters": [
								{
									"name": "value",
									"nodeType": "YulTypedName",
									"src": "1875:5:13",
									"type": ""
								}
							],
							"returnVariables": [
								{
									"name": "cleaned",
									"nodeType": "YulTypedName",
									"src": "1885:7:13",
									"type": ""
								}
							],
							"src": "1848:126:13"
						},
						{
							"body": {
								"nodeType": "YulBlock",
								"src": "2025:51:13",
								"statements": [
									{
										"nodeType": "YulAssignment",
										"src": "2035:35:13",
										"value": {
											"arguments": [
												{
													"name": "value",
													"nodeType": "YulIdentifier",
													"src": "2064:5:13"
												}
											],
											"functionName": {
												"name": "cleanup_t_uint160",
												"nodeType": "YulIdentifier",
												"src": "2046:17:13"
											},
											"nodeType": "YulFunctionCall",
											"src": "2046:24:13"
										},
										"variableNames": [
											{
												"name": "cleaned",
												"nodeType": "YulIdentifier",
												"src": "2035:7:13"
											}
										]
									}
								]
							},
							"name": "cleanup_t_address",
							"nodeType": "YulFunctionDefinition",
							"parameters": [
								{
									"name": "value",
									"nodeType": "YulTypedName",
									"src": "2007:5:13",
									"type": ""
								}
							],
							"returnVariables": [
								{
									"name": "cleaned",
									"nodeType": "YulTypedName",
									"src": "2017:7:13",
									"type": ""
								}
							],
							"src": "1980:96:13"
						},
						{
							"body": {
								"nodeType": "YulBlock",
								"src": "2147:53:13",
								"statements": [
									{
										"expression": {
											"arguments": [
												{
													"name": "pos",
													"nodeType": "YulIdentifier",
													"src": "2164:3:13"
												},
												{
													"arguments": [
														{
															"name": "value",
															"nodeType": "YulIdentifier",
															"src": "2187:5:13"
														}
													],
													"functionName": {
														"name": "cleanup_t_address",
														"nodeType": "YulIdentifier",
														"src": "2169:17:13"
													},
													"nodeType": "YulFunctionCall",
													"src": "2169:24:13"
												}
											],
											"functionName": {
												"name": "mstore",
												"nodeType": "YulIdentifier",
												"src": "2157:6:13"
											},
											"nodeType": "YulFunctionCall",
											"src": "2157:37:13"
										},
										"nodeType": "YulExpressionStatement",
										"src": "2157:37:13"
									}
								]
							},
							"name": "abi_encode_t_address_to_t_address_fromStack",
							"nodeType": "YulFunctionDefinition",
							"parameters": [
								{
									"name": "value",
									"nodeType": "YulTypedName",
									"src": "2135:5:13",
									"type": ""
								},
								{
									"name": "pos",
									"nodeType": "YulTypedName",
									"src": "2142:3:13",
									"type": ""
								}
							],
							"src": "2082:118:13"
						},
						{
							"body": {
								"nodeType": "YulBlock",
								"src": "2438:472:13",
								"statements": [
									{
										"nodeType": "YulAssignment",
										"src": "2448:27:13",
										"value": {
											"arguments": [
												{
													"name": "headStart",
													"nodeType": "YulIdentifier",
													"src": "2460:9:13"
												},
												{
													"kind": "number",
													"nodeType": "YulLiteral",
													"src": "2471:3:13",
													"type": "",
													"value": "128"
												}
											],
											"functionName": {
												"name": "add",
												"nodeType": "YulIdentifier",
												"src": "2456:3:13"
											},
											"nodeType": "YulFunctionCall",
											"src": "2456:19:13"
										},
										"variableNames": [
											{
												"name": "tail",
												"nodeType": "YulIdentifier",
												"src": "2448:4:13"
											}
										]
									},
									{
										"expression": {
											"arguments": [
												{
													"name": "value0",
													"nodeType": "YulIdentifier",
													"src": "2529:6:13"
												},
												{
													"arguments": [
														{
															"name": "headStart",
															"nodeType": "YulIdentifier",
															"src": "2542:9:13"
														},
														{
															"kind": "number",
															"nodeType": "YulLiteral",
															"src": "2553:1:13",
															"type": "",
															"value": "0"
														}
													],
													"functionName": {
														"name": "add",
														"nodeType": "YulIdentifier",
														"src": "2538:3:13"
													},
													"nodeType": "YulFunctionCall",
													"src": "2538:17:13"
												}
											],
											"functionName": {
												"name": "abi_encode_t_uint256_to_t_uint256_fromStack",
												"nodeType": "YulIdentifier",
												"src": "2485:43:13"
											},
											"nodeType": "YulFunctionCall",
											"src": "2485:71:13"
										},
										"nodeType": "YulExpressionStatement",
										"src": "2485:71:13"
									},
									{
										"expression": {
											"arguments": [
												{
													"name": "value1",
													"nodeType": "YulIdentifier",
													"src": "2610:6:13"
												},
												{
													"arguments": [
														{
															"name": "headStart",
															"nodeType": "YulIdentifier",
															"src": "2623:9:13"
														},
														{
															"kind": "number",
															"nodeType": "YulLiteral",
															"src": "2634:2:13",
															"type": "",
															"value": "32"
														}
													],
													"functionName": {
														"name": "add",
														"nodeType": "YulIdentifier",
														"src": "2619:3:13"
													},
													"nodeType": "YulFunctionCall",
													"src": "2619:18:13"
												}
											],
											"functionName": {
												"name": "abi_encode_t_uint256_to_t_uint256_fromStack",
												"nodeType": "YulIdentifier",
												"src": "2566:43:13"
											},
											"nodeType": "YulFunctionCall",
											"src": "2566:72:13"
										},
										"nodeType": "YulExpressionStatement",
										"src": "2566:72:13"
									},
									{
										"expression": {
											"arguments": [
												{
													"arguments": [
														{
															"name": "headStart",
															"nodeType": "YulIdentifier",
															"src": "2659:9:13"
														},
														{
															"kind": "number",
															"nodeType": "YulLiteral",
															"src": "2670:2:13",
															"type": "",
															"value": "64"
														}
													],
													"functionName": {
														"name": "add",
														"nodeType": "YulIdentifier",
														"src": "2655:3:13"
													},
													"nodeType": "YulFunctionCall",
													"src": "2655:18:13"
												},
												{
													"arguments": [
														{
															"name": "tail",
															"nodeType": "YulIdentifier",
															"src": "2679:4:13"
														},
														{
															"name": "headStart",
															"nodeType": "YulIdentifier",
															"src": "2685:9:13"
														}
													],
													"functionName": {
														"name": "sub",
														"nodeType": "YulIdentifier",
														"src": "2675:3:13"
													},
													"nodeType": "YulFunctionCall",
													"src": "2675:20:13"
												}
											],
											"functionName": {
												"name": "mstore",
												"nodeType": "YulIdentifier",
												"src": "2648:6:13"
											},
											"nodeType": "YulFunctionCall",
											"src": "2648:48:13"
										},
										"nodeType": "YulExpressionStatement",
										"src": "2648:48:13"
									},
									{
										"nodeType": "YulAssignment",
										"src": "2705:116:13",
										"value": {
											"arguments": [
												{
													"name": "value2",
													"nodeType": "YulIdentifier",
													"src": "2807:6:13"
												},
												{
													"name": "tail",
													"nodeType": "YulIdentifier",
													"src": "2816:4:13"
												}
											],
											"functionName": {
												"name": "abi_encode_t_array$_t_uint256_$dyn_memory_ptr_to_t_array$_t_uint256_$dyn_memory_ptr_fromStack",
												"nodeType": "YulIdentifier",
												"src": "2713:93:13"
											},
											"nodeType": "YulFunctionCall",
											"src": "2713:108:13"
										},
										"variableNames": [
											{
												"name": "tail",
												"nodeType": "YulIdentifier",
												"src": "2705:4:13"
											}
										]
									},
									{
										"expression": {
											"arguments": [
												{
													"name": "value3",
													"nodeType": "YulIdentifier",
													"src": "2875:6:13"
												},
												{
													"arguments": [
														{
															"name": "headStart",
															"nodeType": "YulIdentifier",
															"src": "2888:9:13"
														},
														{
															"kind": "number",
															"nodeType": "YulLiteral",
															"src": "2899:2:13",
															"type": "",
															"value": "96"
														}
													],
													"functionName": {
														"name": "add",
														"nodeType": "YulIdentifier",
														"src": "2884:3:13"
													},
													"nodeType": "YulFunctionCall",
													"src": "2884:18:13"
												}
											],
											"functionName": {
												"name": "abi_encode_t_address_to_t_address_fromStack",
												"nodeType": "YulIdentifier",
												"src": "2831:43:13"
											},
											"nodeType": "YulFunctionCall",
											"src": "2831:72:13"
										},
										"nodeType": "YulExpressionStatement",
										"src": "2831:72:13"
									}
								]
							},
							"name": "abi_encode_tuple_t_uint256_t_uint256_t_array$_t_uint256_$dyn_memory_ptr_t_address__to_t_uint256_t_uint256_t_array$_t_uint256_$dyn_memory_ptr_t_address__fromStack_reversed",
							"nodeType": "YulFunctionDefinition",
							"parameters": [
								{
									"name": "headStart",
									"nodeType": "YulTypedName",
									"src": "2386:9:13",
									"type": ""
								},
								{
									"name": "value3",
									"nodeType": "YulTypedName",
									"src": "2398:6:13",
									"type": ""
								},
								{
									"name": "value2",
									"nodeType": "YulTypedName",
									"src": "2406:6:13",
									"type": ""
								},
								{
									"name": "value1",
									"nodeType": "YulTypedName",
									"src": "2414:6:13",
									"type": ""
								},
								{
									"name": "value0",
									"nodeType": "YulTypedName",
									"src": "2422:6:13",
									"type": ""
								}
							],
							"returnVariables": [
								{
									"name": "tail",
									"nodeType": "YulTypedName",
									"src": "2433:4:13",
									"type": ""
								}
							],
							"src": "2206:704:13"
						},
						{
							"body": {
								"nodeType": "YulBlock",
								"src": "2956:35:13",
								"statements": [
									{
										"nodeType": "YulAssignment",
										"src": "2966:19:13",
										"value": {
											"arguments": [
												{
													"kind": "number",
													"nodeType": "YulLiteral",
													"src": "2982:2:13",
													"type": "",
													"value": "64"
												}
											],
											"functionName": {
												"name": "mload",
												"nodeType": "YulIdentifier",
												"src": "2976:5:13"
											},
											"nodeType": "YulFunctionCall",
											"src": "2976:9:13"
										},
										"variableNames": [
											{
												"name": "memPtr",
												"nodeType": "YulIdentifier",
												"src": "2966:6:13"
											}
										]
									}
								]
							},
							"name": "allocate_unbounded",
							"nodeType": "YulFunctionDefinition",
							"returnVariables": [
								{
									"name": "memPtr",
									"nodeType": "YulTypedName",
									"src": "2949:6:13",
									"type": ""
								}
							],
							"src": "2916:75:13"
						},
						{
							"body": {
								"nodeType": "YulBlock",
								"src": "3086:28:13",
								"statements": [
									{
										"expression": {
											"arguments": [
												{
													"kind": "number",
													"nodeType": "YulLiteral",
													"src": "3103:1:13",
													"type": "",
													"value": "0"
												},
												{
													"kind": "number",
													"nodeType": "YulLiteral",
													"src": "3106:1:13",
													"type": "",
													"value": "0"
												}
											],
											"functionName": {
												"name": "revert",
												"nodeType": "YulIdentifier",
												"src": "3096:6:13"
											},
											"nodeType": "YulFunctionCall",
											"src": "3096:12:13"
										},
										"nodeType": "YulExpressionStatement",
										"src": "3096:12:13"
									}
								]
							},
							"name": "revert_error_dbdddcbe895c83990c08b3492a0e83918d802a52331272ac6fdb6a7c4aea3b1b",
							"nodeType": "YulFunctionDefinition",
							"src": "2997:117:13"
						},
						{
							"body": {
								"nodeType": "YulBlock",
								"src": "3209:28:13",
								"statements": [
									{
										"expression": {
											"arguments": [
												{
													"kind": "number",
													"nodeType": "YulLiteral",
													"src": "3226:1:13",
													"type": "",
													"value": "0"
												},
												{
													"kind": "number",
													"nodeType": "YulLiteral",
													"src": "3229:1:13",
													"type": "",
													"value": "0"
												}
											],
											"functionName": {
												"name": "revert",
												"nodeType": "YulIdentifier",
												"src": "3219:6:13"
											},
											"nodeType": "YulFunctionCall",
											"src": "3219:12:13"
										},
										"nodeType": "YulExpressionStatement",
										"src": "3219:12:13"
									}
								]
							},
							"name": "revert_error_c1322bf8034eace5e0b5c7295db60986aa89aae5e0ea0873e4689e076861a5db",
							"nodeType": "YulFunctionDefinition",
							"src": "3120:117:13"
						},
						{
							"body": {
								"nodeType": "YulBlock",
								"src": "3286:79:13",
								"statements": [
									{
										"body": {
											"nodeType": "YulBlock",
											"src": "3343:16:13",
											"statements": [
												{
													"expression": {
														"arguments": [
															{
																"kind": "number",
																"nodeType": "YulLiteral",
																"src": "3352:1:13",
																"type": "",
																"value": "0"
															},
															{
																"kind": "number",
																"nodeType": "YulLiteral",
																"src": "3355:1:13",
																"type": "",
																"value": "0"
															}
														],
														"functionName": {
															"name": "revert",
															"nodeType": "YulIdentifier",
															"src": "3345:6:13"
														},
														"nodeType": "YulFunctionCall",
														"src": "3345:12:13"
													},
													"nodeType": "YulExpressionStatement",
													"src": "3345:12:13"
												}
											]
										},
										"condition": {
											"arguments": [
												{
													"arguments": [
														{
															"name": "value",
															"nodeType": "YulIdentifier",
															"src": "3309:5:13"
														},
														{
															"arguments": [
																{
																	"name": "value",
																	"nodeType": "YulIdentifier",
																	"src": "3334:5:13"
																}
															],
															"functionName": {
																"name": "cleanup_t_address",
																"nodeType": "YulIdentifier",
																"src": "3316:17:13"
															},
															"nodeType": "YulFunctionCall",
															"src": "3316:24:13"
														}
													],
													"functionName": {
														"name": "eq",
														"nodeType": "YulIdentifier",
														"src": "3306:2:13"
													},
													"nodeType": "YulFunctionCall",
													"src": "3306:35:13"
												}
											],
											"functionName": {
												"name": "iszero",
												"nodeType": "YulIdentifier",
												"src": "3299:6:13"
											},
											"nodeType": "YulFunctionCall",
											"src": "3299:43:13"
										},
										"nodeType": "YulIf",
										"src": "3296:63:13"
									}
								]
							},
							"name": "validator_revert_t_address",
							"nodeType": "YulFunctionDefinition",
							"parameters": [
								{
									"name": "value",
									"nodeType": "YulTypedName",
									"src": "3279:5:13",
									"type": ""
								}
							],
							"src": "3243:122:13"
						},
						{
							"body": {
								"nodeType": "YulBlock",
								"src": "3423:87:13",
								"statements": [
									{
										"nodeType": "YulAssignment",
										"src": "3433:29:13",
										"value": {
											"arguments": [
												{
													"name": "offset",
													"nodeType": "YulIdentifier",
													"src": "3455:6:13"
												}
											],
											"functionName": {
												"name": "calldataload",
												"nodeType": "YulIdentifier",
												"src": "3442:12:13"
											},
											"nodeType": "YulFunctionCall",
											"src": "3442:20:13"
										},
										"variableNames": [
											{
												"name": "value",
												"nodeType": "YulIdentifier",
												"src": "3433:5:13"
											}
										]
									},
									{
										"expression": {
											"arguments": [
												{
													"name": "value",
													"nodeType": "YulIdentifier",
													"src": "3498:5:13"
												}
											],
											"functionName": {
												"name": "validator_revert_t_address",
												"nodeType": "YulIdentifier",
												"src": "3471:26:13"
											},
											"nodeType": "YulFunctionCall",
											"src": "3471:33:13"
										},
										"nodeType": "YulExpressionStatement",
										"src": "3471:33:13"
									}
								]
							},
							"name": "abi_decode_t_address",
							"nodeType": "YulFunctionDefinition",
							"parameters": [
								{
									"name": "offset",
									"nodeType": "YulTypedName",
									"src": "3401:6:13",
									"type": ""
								},
								{
									"name": "end",
									"nodeType": "YulTypedName",
									"src": "3409:3:13",
									"type": ""
								}
							],
							"returnVariables": [
								{
									"name": "value",
									"nodeType": "YulTypedName",
									"src": "3417:5:13",
									"type": ""
								}
							],
							"src": "3371:139:13"
						},
						{
							"body": {
								"nodeType": "YulBlock",
								"src": "3582:263:13",
								"statements": [
									{
										"body": {
											"nodeType": "YulBlock",
											"src": "3628:83:13",
											"statements": [
												{
													"expression": {
														"arguments": [],
														"functionName": {
															"name": "revert_error_dbdddcbe895c83990c08b3492a0e83918d802a52331272ac6fdb6a7c4aea3b1b",
															"nodeType": "YulIdentifier",
															"src": "3630:77:13"
														},
														"nodeType": "YulFunctionCall",
														"src": "3630:79:13"
													},
													"nodeType": "YulExpressionStatement",
													"src": "3630:79:13"
												}
											]
										},
										"condition": {
											"arguments": [
												{
													"arguments": [
														{
															"name": "dataEnd",
															"nodeType": "YulIdentifier",
															"src": "3603:7:13"
														},
														{
															"name": "headStart",
															"nodeType": "YulIdentifier",
															"src": "3612:9:13"
														}
													],
													"functionName": {
														"name": "sub",
														"nodeType": "YulIdentifier",
														"src": "3599:3:13"
													},
													"nodeType": "YulFunctionCall",
													"src": "3599:23:13"
												},
												{
													"kind": "number",
													"nodeType": "YulLiteral",
													"src": "3624:2:13",
													"type": "",
													"value": "32"
												}
											],
											"functionName": {
												"name": "slt",
												"nodeType": "YulIdentifier",
												"src": "3595:3:13"
											},
											"nodeType": "YulFunctionCall",
											"src": "3595:32:13"
										},
										"nodeType": "YulIf",
										"src": "3592:119:13"
									},
									{
										"nodeType": "YulBlock",
										"src": "3721:117:13",
										"statements": [
											{
												"nodeType": "YulVariableDeclaration",
												"src": "3736:15:13",
												"value": {
													"kind": "number",
													"nodeType": "YulLiteral",
													"src": "3750:1:13",
													"type": "",
													"value": "0"
												},
												"variables": [
													{
														"name": "offset",
														"nodeType": "YulTypedName",
														"src": "3740:6:13",
														"type": ""
													}
												]
											},
											{
												"nodeType": "YulAssignment",
												"src": "3765:63:13",
												"value": {
													"arguments": [
														{
															"arguments": [
																{
																	"name": "headStart",
																	"nodeType": "YulIdentifier",
																	"src": "3800:9:13"
																},
																{
																	"name": "offset",
																	"nodeType": "YulIdentifier",
																	"src": "3811:6:13"
																}
															],
															"functionName": {
																"name": "add",
																"nodeType": "YulIdentifier",
																"src": "3796:3:13"
															},
															"nodeType": "YulFunctionCall",
															"src": "3796:22:13"
														},
														{
															"name": "dataEnd",
															"nodeType": "YulIdentifier",
															"src": "3820:7:13"
														}
													],
													"functionName": {
														"name": "abi_decode_t_address",
														"nodeType": "YulIdentifier",
														"src": "3775:20:13"
													},
													"nodeType": "YulFunctionCall",
													"src": "3775:53:13"
												},
												"variableNames": [
													{
														"name": "value0",
														"nodeType": "YulIdentifier",
														"src": "3765:6:13"
													}
												]
											}
										]
									}
								]
							},
							"name": "abi_decode_tuple_t_address",
							"nodeType": "YulFunctionDefinition",
							"parameters": [
								{
									"name": "headStart",
									"nodeType": "YulTypedName",
									"src": "3552:9:13",
									"type": ""
								},
								{
									"name": "dataEnd",
									"nodeType": "YulTypedName",
									"src": "3563:7:13",
									"type": ""
								}
							],
							"returnVariables": [
								{
									"name": "value0",
									"nodeType": "YulTypedName",
									"src": "3575:6:13",
									"type": ""
								}
							],
							"src": "3516:329:13"
						},
						{
							"body": {
								"nodeType": "YulBlock",
								"src": "3949:124:13",
								"statements": [
									{
										"nodeType": "YulAssignment",
										"src": "3959:26:13",
										"value": {
											"arguments": [
												{
													"name": "headStart",
													"nodeType": "YulIdentifier",
													"src": "3971:9:13"
												},
												{
													"kind": "number",
													"nodeType": "YulLiteral",
													"src": "3982:2:13",
													"type": "",
													"value": "32"
												}
											],
											"functionName": {
												"name": "add",
												"nodeType": "YulIdentifier",
												"src": "3967:3:13"
											},
											"nodeType": "YulFunctionCall",
											"src": "3967:18:13"
										},
										"variableNames": [
											{
												"name": "tail",
												"nodeType": "YulIdentifier",
												"src": "3959:4:13"
											}
										]
									},
									{
										"expression": {
											"arguments": [
												{
													"name": "value0",
													"nodeType": "YulIdentifier",
													"src": "4039:6:13"
												},
												{
													"arguments": [
														{
															"name": "headStart",
															"nodeType": "YulIdentifier",
															"src": "4052:9:13"
														},
														{
															"kind": "number",
															"nodeType": "YulLiteral",
															"src": "4063:1:13",
															"type": "",
															"value": "0"
														}
													],
													"functionName": {
														"name": "add",
														"nodeType": "YulIdentifier",
														"src": "4048:3:13"
													},
													"nodeType": "YulFunctionCall",
													"src": "4048:17:13"
												}
											],
											"functionName": {
												"name": "abi_encode_t_address_to_t_address_fromStack",
												"nodeType": "YulIdentifier",
												"src": "3995:43:13"
											},
											"nodeType": "YulFunctionCall",
											"src": "3995:71:13"
										},
										"nodeType": "YulExpressionStatement",
										"src": "3995:71:13"
									}
								]
							},
							"name": "abi_encode_tuple_t_address__to_t_address__fromStack_reversed",
							"nodeType": "YulFunctionDefinition",
							"parameters": [
								{
									"name": "headStart",
									"nodeType": "YulTypedName",
									"src": "3921:9:13",
									"type": ""
								},
								{
									"name": "value0",
									"nodeType": "YulTypedName",
									"src": "3933:6:13",
									"type": ""
								}
							],
							"returnVariables": [
								{
									"name": "tail",
									"nodeType": "YulTypedName",
									"src": "3944:4:13",
									"type": ""
								}
							],
							"src": "3851:222:13"
						},
						{
							"body": {
								"nodeType": "YulBlock",
								"src": "4122:79:13",
								"statements": [
									{
										"body": {
											"nodeType": "YulBlock",
											"src": "4179:16:13",
											"statements": [
												{
													"expression": {
														"arguments": [
															{
																"kind": "number",
																"nodeType": "YulLiteral",
																"src": "4188:1:13",
																"type": "",
																"value": "0"
															},
															{
																"kind": "number",
																"nodeType": "YulLiteral",
																"src": "4191:1:13",
																"type": "",
																"value": "0"
															}
														],
														"functionName": {
															"name": "revert",
															"nodeType": "YulIdentifier",
															"src": "4181:6:13"
														},
														"nodeType": "YulFunctionCall",
														"src": "4181:12:13"
													},
													"nodeType": "YulExpressionStatement",
													"src": "4181:12:13"
												}
											]
										},
										"condition": {
											"arguments": [
												{
													"arguments": [
														{
															"name": "value",
															"nodeType": "YulIdentifier",
															"src": "4145:5:13"
														},
														{
															"arguments": [
																{
																	"name": "value",
																	"nodeType": "YulIdentifier",
																	"src": "4170:5:13"
																}
															],
															"functionName": {
																"name": "cleanup_t_uint256",
																"nodeType": "YulIdentifier",
																"src": "4152:17:13"
															},
															"nodeType": "YulFunctionCall",
															"src": "4152:24:13"
														}
													],
													"functionName": {
														"name": "eq",
														"nodeType": "YulIdentifier",
														"src": "4142:2:13"
													},
													"nodeType": "YulFunctionCall",
													"src": "4142:35:13"
												}
											],
											"functionName": {
												"name": "iszero",
												"nodeType": "YulIdentifier",
												"src": "4135:6:13"
											},
											"nodeType": "YulFunctionCall",
											"src": "4135:43:13"
										},
										"nodeType": "YulIf",
										"src": "4132:63:13"
									}
								]
							},
							"name": "validator_revert_t_uint256",
							"nodeType": "YulFunctionDefinition",
							"parameters": [
								{
									"name": "value",
									"nodeType": "YulTypedName",
									"src": "4115:5:13",
									"type": ""
								}
							],
							"src": "4079:122:13"
						},
						{
							"body": {
								"nodeType": "YulBlock",
								"src": "4259:87:13",
								"statements": [
									{
										"nodeType": "YulAssignment",
										"src": "4269:29:13",
										"value": {
											"arguments": [
												{
													"name": "offset",
													"nodeType": "YulIdentifier",
													"src": "4291:6:13"
												}
											],
											"functionName": {
												"name": "calldataload",
												"nodeType": "YulIdentifier",
												"src": "4278:12:13"
											},
											"nodeType": "YulFunctionCall",
											"src": "4278:20:13"
										},
										"variableNames": [
											{
												"name": "value",
												"nodeType": "YulIdentifier",
												"src": "4269:5:13"
											}
										]
									},
									{
										"expression": {
											"arguments": [
												{
													"name": "value",
													"nodeType": "YulIdentifier",
													"src": "4334:5:13"
												}
											],
											"functionName": {
												"name": "validator_revert_t_uint256",
												"nodeType": "YulIdentifier",
												"src": "4307:26:13"
											},
											"nodeType": "YulFunctionCall",
											"src": "4307:33:13"
										},
										"nodeType": "YulExpressionStatement",
										"src": "4307:33:13"
									}
								]
							},
							"name": "abi_decode_t_uint256",
							"nodeType": "YulFunctionDefinition",
							"parameters": [
								{
									"name": "offset",
									"nodeType": "YulTypedName",
									"src": "4237:6:13",
									"type": ""
								},
								{
									"name": "end",
									"nodeType": "YulTypedName",
									"src": "4245:3:13",
									"type": ""
								}
							],
							"returnVariables": [
								{
									"name": "value",
									"nodeType": "YulTypedName",
									"src": "4253:5:13",
									"type": ""
								}
							],
							"src": "4207:139:13"
						},
						{
							"body": {
								"nodeType": "YulBlock",
								"src": "4435:391:13",
								"statements": [
									{
										"body": {
											"nodeType": "YulBlock",
											"src": "4481:83:13",
											"statements": [
												{
													"expression": {
														"arguments": [],
														"functionName": {
															"name": "revert_error_dbdddcbe895c83990c08b3492a0e83918d802a52331272ac6fdb6a7c4aea3b1b",
															"nodeType": "YulIdentifier",
															"src": "4483:77:13"
														},
														"nodeType": "YulFunctionCall",
														"src": "4483:79:13"
													},
													"nodeType": "YulExpressionStatement",
													"src": "4483:79:13"
												}
											]
										},
										"condition": {
											"arguments": [
												{
													"arguments": [
														{
															"name": "dataEnd",
															"nodeType": "YulIdentifier",
															"src": "4456:7:13"
														},
														{
															"name": "headStart",
															"nodeType": "YulIdentifier",
															"src": "4465:9:13"
														}
													],
													"functionName": {
														"name": "sub",
														"nodeType": "YulIdentifier",
														"src": "4452:3:13"
													},
													"nodeType": "YulFunctionCall",
													"src": "4452:23:13"
												},
												{
													"kind": "number",
													"nodeType": "YulLiteral",
													"src": "4477:2:13",
													"type": "",
													"value": "64"
												}
											],
											"functionName": {
												"name": "slt",
												"nodeType": "YulIdentifier",
												"src": "4448:3:13"
											},
											"nodeType": "YulFunctionCall",
											"src": "4448:32:13"
										},
										"nodeType": "YulIf",
										"src": "4445:119:13"
									},
									{
										"nodeType": "YulBlock",
										"src": "4574:117:13",
										"statements": [
											{
												"nodeType": "YulVariableDeclaration",
												"src": "4589:15:13",
												"value": {
													"kind": "number",
													"nodeType": "YulLiteral",
													"src": "4603:1:13",
													"type": "",
													"value": "0"
												},
												"variables": [
													{
														"name": "offset",
														"nodeType": "YulTypedName",
														"src": "4593:6:13",
														"type": ""
													}
												]
											},
											{
												"nodeType": "YulAssignment",
												"src": "4618:63:13",
												"value": {
													"arguments": [
														{
															"arguments": [
																{
																	"name": "headStart",
																	"nodeType": "YulIdentifier",
																	"src": "4653:9:13"
																},
																{
																	"name": "offset",
																	"nodeType": "YulIdentifier",
																	"src": "4664:6:13"
																}
															],
															"functionName": {
																"name": "add",
																"nodeType": "YulIdentifier",
																"src": "4649:3:13"
															},
															"nodeType": "YulFunctionCall",
															"src": "4649:22:13"
														},
														{
															"name": "dataEnd",
															"nodeType": "YulIdentifier",
															"src": "4673:7:13"
														}
													],
													"functionName": {
														"name": "abi_decode_t_address",
														"nodeType": "YulIdentifier",
														"src": "4628:20:13"
													},
													"nodeType": "YulFunctionCall",
													"src": "4628:53:13"
												},
												"variableNames": [
													{
														"name": "value0",
														"nodeType": "YulIdentifier",
														"src": "4618:6:13"
													}
												]
											}
										]
									},
									{
										"nodeType": "YulBlock",
										"src": "4701:118:13",
										"statements": [
											{
												"nodeType": "YulVariableDeclaration",
												"src": "4716:16:13",
												"value": {
													"kind": "number",
													"nodeType": "YulLiteral",
													"src": "4730:2:13",
													"type": "",
													"value": "32"
												},
												"variables": [
													{
														"name": "offset",
														"nodeType": "YulTypedName",
														"src": "4720:6:13",
														"type": ""
													}
												]
											},
											{
												"nodeType": "YulAssignment",
												"src": "4746:63:13",
												"value": {
													"arguments": [
														{
															"arguments": [
																{
																	"name": "headStart",
																	"nodeType": "YulIdentifier",
																	"src": "4781:9:13"
																},
																{
																	"name": "offset",
																	"nodeType": "YulIdentifier",
																	"src": "4792:6:13"
																}
															],
															"functionName": {
																"name": "add",
																"nodeType": "YulIdentifier",
																"src": "4777:3:13"
															},
															"nodeType": "YulFunctionCall",
															"src": "4777:22:13"
														},
														{
															"name": "dataEnd",
															"nodeType": "YulIdentifier",
															"src": "4801:7:13"
														}
													],
													"functionName": {
														"name": "abi_decode_t_uint256",
														"nodeType": "YulIdentifier",
														"src": "4756:20:13"
													},
													"nodeType": "YulFunctionCall",
													"src": "4756:53:13"
												},
												"variableNames": [
													{
														"name": "value1",
														"nodeType": "YulIdentifier",
														"src": "4746:6:13"
													}
												]
											}
										]
									}
								]
							},
							"name": "abi_decode_tuple_t_addresst_uint256",
							"nodeType": "YulFunctionDefinition",
							"parameters": [
								{
									"name": "headStart",
									"nodeType": "YulTypedName",
									"src": "4397:9:13",
									"type": ""
								},
								{
									"name": "dataEnd",
									"nodeType": "YulTypedName",
									"src": "4408:7:13",
									"type": ""
								}
							],
							"returnVariables": [
								{
									"name": "value0",
									"nodeType": "YulTypedName",
									"src": "4420:6:13",
									"type": ""
								},
								{
									"name": "value1",
									"nodeType": "YulTypedName",
									"src": "4428:6:13",
									"type": ""
								}
							],
							"src": "4352:474:13"
						},
						{
							"body": {
								"nodeType": "YulBlock",
								"src": "4921:28:13",
								"statements": [
									{
										"expression": {
											"arguments": [
												{
													"kind": "number",
													"nodeType": "YulLiteral",
													"src": "4938:1:13",
													"type": "",
													"value": "0"
												},
												{
													"kind": "number",
													"nodeType": "YulLiteral",
													"src": "4941:1:13",
													"type": "",
													"value": "0"
												}
											],
											"functionName": {
												"name": "revert",
												"nodeType": "YulIdentifier",
												"src": "4931:6:13"
											},
											"nodeType": "YulFunctionCall",
											"src": "4931:12:13"
										},
										"nodeType": "YulExpressionStatement",
										"src": "4931:12:13"
									}
								]
							},
							"name": "revert_error_1b9f4a0a5773e33b91aa01db23bf8c55fce1411167c872835e7fa00a4f17d46d",
							"nodeType": "YulFunctionDefinition",
							"src": "4832:117:13"
						},
						{
							"body": {
								"nodeType": "YulBlock",
								"src": "5003:54:13",
								"statements": [
									{
										"nodeType": "YulAssignment",
										"src": "5013:38:13",
										"value": {
											"arguments": [
												{
													"arguments": [
														{
															"name": "value",
															"nodeType": "YulIdentifier",
															"src": "5031:5:13"
														},
														{
															"kind": "number",
															"nodeType": "YulLiteral",
															"src": "5038:2:13",
															"type": "",
															"value": "31"
														}
													],
													"functionName": {
														"name": "add",
														"nodeType": "YulIdentifier",
														"src": "5027:3:13"
													},
													"nodeType": "YulFunctionCall",
													"src": "5027:14:13"
												},
												{
													"arguments": [
														{
															"kind": "number",
															"nodeType": "YulLiteral",
															"src": "5047:2:13",
															"type": "",
															"value": "31"
														}
													],
													"functionName": {
														"name": "not",
														"nodeType": "YulIdentifier",
														"src": "5043:3:13"
													},
													"nodeType": "YulFunctionCall",
													"src": "5043:7:13"
												}
											],
											"functionName": {
												"name": "and",
												"nodeType": "YulIdentifier",
												"src": "5023:3:13"
											},
											"nodeType": "YulFunctionCall",
											"src": "5023:28:13"
										},
										"variableNames": [
											{
												"name": "result",
												"nodeType": "YulIdentifier",
												"src": "5013:6:13"
											}
										]
									}
								]
							},
							"name": "round_up_to_mul_of_32",
							"nodeType": "YulFunctionDefinition",
							"parameters": [
								{
									"name": "value",
									"nodeType": "YulTypedName",
									"src": "4986:5:13",
									"type": ""
								}
							],
							"returnVariables": [
								{
									"name": "result",
									"nodeType": "YulTypedName",
									"src": "4996:6:13",
									"type": ""
								}
							],
							"src": "4955:102:13"
						},
						{
							"body": {
								"nodeType": "YulBlock",
								"src": "5091:152:13",
								"statements": [
									{
										"expression": {
											"arguments": [
												{
													"kind": "number",
													"nodeType": "YulLiteral",
													"src": "5108:1:13",
													"type": "",
													"value": "0"
												},
												{
													"kind": "number",
													"nodeType": "YulLiteral",
													"src": "5111:77:13",
													"type": "",
													"value": "35408467139433450592217433187231851964531694900788300625387963629091585785856"
												}
											],
											"functionName": {
												"name": "mstore",
												"nodeType": "YulIdentifier",
												"src": "5101:6:13"
											},
											"nodeType": "YulFunctionCall",
											"src": "5101:88:13"
										},
										"nodeType": "YulExpressionStatement",
										"src": "5101:88:13"
									},
									{
										"expression": {
											"arguments": [
												{
													"kind": "number",
													"nodeType": "YulLiteral",
													"src": "5205:1:13",
													"type": "",
													"value": "4"
												},
												{
													"kind": "number",
													"nodeType": "YulLiteral",
													"src": "5208:4:13",
													"type": "",
													"value": "0x41"
												}
											],
											"functionName": {
												"name": "mstore",
												"nodeType": "YulIdentifier",
												"src": "5198:6:13"
											},
											"nodeType": "YulFunctionCall",
											"src": "5198:15:13"
										},
										"nodeType": "YulExpressionStatement",
										"src": "5198:15:13"
									},
									{
										"expression": {
											"arguments": [
												{
													"kind": "number",
													"nodeType": "YulLiteral",
													"src": "5229:1:13",
													"type": "",
													"value": "0"
												},
												{
													"kind": "number",
													"nodeType": "YulLiteral",
													"src": "5232:4:13",
													"type": "",
													"value": "0x24"
												}
											],
											"functionName": {
												"name": "revert",
												"nodeType": "YulIdentifier",
												"src": "5222:6:13"
											},
											"nodeType": "YulFunctionCall",
											"src": "5222:15:13"
										},
										"nodeType": "YulExpressionStatement",
										"src": "5222:15:13"
									}
								]
							},
							"name": "panic_error_0x41",
							"nodeType": "YulFunctionDefinition",
							"src": "5063:180:13"
						},
						{
							"body": {
								"nodeType": "YulBlock",
								"src": "5292:238:13",
								"statements": [
									{
										"nodeType": "YulVariableDeclaration",
										"src": "5302:58:13",
										"value": {
											"arguments": [
												{
													"name": "memPtr",
													"nodeType": "YulIdentifier",
													"src": "5324:6:13"
												},
												{
													"arguments": [
														{
															"name": "size",
															"nodeType": "YulIdentifier",
															"src": "5354:4:13"
														}
													],
													"functionName": {
														"name": "round_up_to_mul_of_32",
														"nodeType": "YulIdentifier",
														"src": "5332:21:13"
													},
													"nodeType": "YulFunctionCall",
													"src": "5332:27:13"
												}
											],
											"functionName": {
												"name": "add",
												"nodeType": "YulIdentifier",
												"src": "5320:3:13"
											},
											"nodeType": "YulFunctionCall",
											"src": "5320:40:13"
										},
										"variables": [
											{
												"name": "newFreePtr",
												"nodeType": "YulTypedName",
												"src": "5306:10:13",
												"type": ""
											}
										]
									},
									{
										"body": {
											"nodeType": "YulBlock",
											"src": "5471:22:13",
											"statements": [
												{
													"expression": {
														"arguments": [],
														"functionName": {
															"name": "panic_error_0x41",
															"nodeType": "YulIdentifier",
															"src": "5473:16:13"
														},
														"nodeType": "YulFunctionCall",
														"src": "5473:18:13"
													},
													"nodeType": "YulExpressionStatement",
													"src": "5473:18:13"
												}
											]
										},
										"condition": {
											"arguments": [
												{
													"arguments": [
														{
															"name": "newFreePtr",
															"nodeType": "YulIdentifier",
															"src": "5414:10:13"
														},
														{
															"kind": "number",
															"nodeType": "YulLiteral",
															"src": "5426:18:13",
															"type": "",
															"value": "0xffffffffffffffff"
														}
													],
													"functionName": {
														"name": "gt",
														"nodeType": "YulIdentifier",
														"src": "5411:2:13"
													},
													"nodeType": "YulFunctionCall",
													"src": "5411:34:13"
												},
												{
													"arguments": [
														{
															"name": "newFreePtr",
															"nodeType": "YulIdentifier",
															"src": "5450:10:13"
														},
														{
															"name": "memPtr",
															"nodeType": "YulIdentifier",
															"src": "5462:6:13"
														}
													],
													"functionName": {
														"name": "lt",
														"nodeType": "YulIdentifier",
														"src": "5447:2:13"
													},
													"nodeType": "YulFunctionCall",
													"src": "5447:22:13"
												}
											],
											"functionName": {
												"name": "or",
												"nodeType": "YulIdentifier",
												"src": "5408:2:13"
											},
											"nodeType": "YulFunctionCall",
											"src": "5408:62:13"
										},
										"nodeType": "YulIf",
										"src": "5405:88:13"
									},
									{
										"expression": {
											"arguments": [
												{
													"kind": "number",
													"nodeType": "YulLiteral",
													"src": "5509:2:13",
													"type": "",
													"value": "64"
												},
												{
													"name": "newFreePtr",
													"nodeType": "YulIdentifier",
													"src": "5513:10:13"
												}
											],
											"functionName": {
												"name": "mstore",
												"nodeType": "YulIdentifier",
												"src": "5502:6:13"
											},
											"nodeType": "YulFunctionCall",
											"src": "5502:22:13"
										},
										"nodeType": "YulExpressionStatement",
										"src": "5502:22:13"
									}
								]
							},
							"name": "finalize_allocation",
							"nodeType": "YulFunctionDefinition",
							"parameters": [
								{
									"name": "memPtr",
									"nodeType": "YulTypedName",
									"src": "5278:6:13",
									"type": ""
								},
								{
									"name": "size",
									"nodeType": "YulTypedName",
									"src": "5286:4:13",
									"type": ""
								}
							],
							"src": "5249:281:13"
						},
						{
							"body": {
								"nodeType": "YulBlock",
								"src": "5577:88:13",
								"statements": [
									{
										"nodeType": "YulAssignment",
										"src": "5587:30:13",
										"value": {
											"arguments": [],
											"functionName": {
												"name": "allocate_unbounded",
												"nodeType": "YulIdentifier",
												"src": "5597:18:13"
											},
											"nodeType": "YulFunctionCall",
											"src": "5597:20:13"
										},
										"variableNames": [
											{
												"name": "memPtr",
												"nodeType": "YulIdentifier",
												"src": "5587:6:13"
											}
										]
									},
									{
										"expression": {
											"arguments": [
												{
													"name": "memPtr",
													"nodeType": "YulIdentifier",
													"src": "5646:6:13"
												},
												{
													"name": "size",
													"nodeType": "YulIdentifier",
													"src": "5654:4:13"
												}
											],
											"functionName": {
												"name": "finalize_allocation",
												"nodeType": "YulIdentifier",
												"src": "5626:19:13"
											},
											"nodeType": "YulFunctionCall",
											"src": "5626:33:13"
										},
										"nodeType": "YulExpressionStatement",
										"src": "5626:33:13"
									}
								]
							},
							"name": "allocate_memory",
							"nodeType": "YulFunctionDefinition",
							"parameters": [
								{
									"name": "size",
									"nodeType": "YulTypedName",
									"src": "5561:4:13",
									"type": ""
								}
							],
							"returnVariables": [
								{
									"name": "memPtr",
									"nodeType": "YulTypedName",
									"src": "5570:6:13",
									"type": ""
								}
							],
							"src": "5536:129:13"
						},
						{
							"body": {
								"nodeType": "YulBlock",
								"src": "5753:229:13",
								"statements": [
									{
										"body": {
											"nodeType": "YulBlock",
											"src": "5858:22:13",
											"statements": [
												{
													"expression": {
														"arguments": [],
														"functionName": {
															"name": "panic_error_0x41",
															"nodeType": "YulIdentifier",
															"src": "5860:16:13"
														},
														"nodeType": "YulFunctionCall",
														"src": "5860:18:13"
													},
													"nodeType": "YulExpressionStatement",
													"src": "5860:18:13"
												}
											]
										},
										"condition": {
											"arguments": [
												{
													"name": "length",
													"nodeType": "YulIdentifier",
													"src": "5830:6:13"
												},
												{
													"kind": "number",
													"nodeType": "YulLiteral",
													"src": "5838:18:13",
													"type": "",
													"value": "0xffffffffffffffff"
												}
											],
											"functionName": {
												"name": "gt",
												"nodeType": "YulIdentifier",
												"src": "5827:2:13"
											},
											"nodeType": "YulFunctionCall",
											"src": "5827:30:13"
										},
										"nodeType": "YulIf",
										"src": "5824:56:13"
									},
									{
										"nodeType": "YulAssignment",
										"src": "5890:25:13",
										"value": {
											"arguments": [
												{
													"name": "length",
													"nodeType": "YulIdentifier",
													"src": "5902:6:13"
												},
												{
													"kind": "number",
													"nodeType": "YulLiteral",
													"src": "5910:4:13",
													"type": "",
													"value": "0x20"
												}
											],
											"functionName": {
												"name": "mul",
												"nodeType": "YulIdentifier",
												"src": "5898:3:13"
											},
											"nodeType": "YulFunctionCall",
											"src": "5898:17:13"
										},
										"variableNames": [
											{
												"name": "size",
												"nodeType": "YulIdentifier",
												"src": "5890:4:13"
											}
										]
									},
									{
										"nodeType": "YulAssignment",
										"src": "5952:23:13",
										"value": {
											"arguments": [
												{
													"name": "size",
													"nodeType": "YulIdentifier",
													"src": "5964:4:13"
												},
												{
													"kind": "number",
													"nodeType": "YulLiteral",
													"src": "5970:4:13",
													"type": "",
													"value": "0x20"
												}
											],
											"functionName": {
												"name": "add",
												"nodeType": "YulIdentifier",
												"src": "5960:3:13"
											},
											"nodeType": "YulFunctionCall",
											"src": "5960:15:13"
										},
										"variableNames": [
											{
												"name": "size",
												"nodeType": "YulIdentifier",
												"src": "5952:4:13"
											}
										]
									}
								]
							},
							"name": "array_allocation_size_t_array$_t_uint256_$dyn_memory_ptr",
							"nodeType": "YulFunctionDefinition",
							"parameters": [
								{
									"name": "length",
									"nodeType": "YulTypedName",
									"src": "5737:6:13",
									"type": ""
								}
							],
							"returnVariables": [
								{
									"name": "size",
									"nodeType": "YulTypedName",
									"src": "5748:4:13",
									"type": ""
								}
							],
							"src": "5671:311:13"
						},
						{
							"body": {
								"nodeType": "YulBlock",
								"src": "6077:28:13",
								"statements": [
									{
										"expression": {
											"arguments": [
												{
													"kind": "number",
													"nodeType": "YulLiteral",
													"src": "6094:1:13",
													"type": "",
													"value": "0"
												},
												{
													"kind": "number",
													"nodeType": "YulLiteral",
													"src": "6097:1:13",
													"type": "",
													"value": "0"
												}
											],
											"functionName": {
												"name": "revert",
												"nodeType": "YulIdentifier",
												"src": "6087:6:13"
											},
											"nodeType": "YulFunctionCall",
											"src": "6087:12:13"
										},
										"nodeType": "YulExpressionStatement",
										"src": "6087:12:13"
									}
								]
							},
							"name": "revert_error_81385d8c0b31fffe14be1da910c8bd3a80be4cfa248e04f42ec0faea3132a8ef",
							"nodeType": "YulFunctionDefinition",
							"src": "5988:117:13"
						},
						{
							"body": {
								"nodeType": "YulBlock",
								"src": "6230:608:13",
								"statements": [
									{
										"nodeType": "YulAssignment",
										"src": "6240:90:13",
										"value": {
											"arguments": [
												{
													"arguments": [
														{
															"name": "length",
															"nodeType": "YulIdentifier",
															"src": "6322:6:13"
														}
													],
													"functionName": {
														"name": "array_allocation_size_t_array$_t_uint256_$dyn_memory_ptr",
														"nodeType": "YulIdentifier",
														"src": "6265:56:13"
													},
													"nodeType": "YulFunctionCall",
													"src": "6265:64:13"
												}
											],
											"functionName": {
												"name": "allocate_memory",
												"nodeType": "YulIdentifier",
												"src": "6249:15:13"
											},
											"nodeType": "YulFunctionCall",
											"src": "6249:81:13"
										},
										"variableNames": [
											{
												"name": "array",
												"nodeType": "YulIdentifier",
												"src": "6240:5:13"
											}
										]
									},
									{
										"nodeType": "YulVariableDeclaration",
										"src": "6339:16:13",
										"value": {
											"name": "array",
											"nodeType": "YulIdentifier",
											"src": "6350:5:13"
										},
										"variables": [
											{
												"name": "dst",
												"nodeType": "YulTypedName",
												"src": "6343:3:13",
												"type": ""
											}
										]
									},
									{
										"expression": {
											"arguments": [
												{
													"name": "array",
													"nodeType": "YulIdentifier",
													"src": "6372:5:13"
												},
												{
													"name": "length",
													"nodeType": "YulIdentifier",
													"src": "6379:6:13"
												}
											],
											"functionName": {
												"name": "mstore",
												"nodeType": "YulIdentifier",
												"src": "6365:6:13"
											},
											"nodeType": "YulFunctionCall",
											"src": "6365:21:13"
										},
										"nodeType": "YulExpressionStatement",
										"src": "6365:21:13"
									},
									{
										"nodeType": "YulAssignment",
										"src": "6395:23:13",
										"value": {
											"arguments": [
												{
													"name": "array",
													"nodeType": "YulIdentifier",
													"src": "6406:5:13"
												},
												{
													"kind": "number",
													"nodeType": "YulLiteral",
													"src": "6413:4:13",
													"type": "",
													"value": "0x20"
												}
											],
											"functionName": {
												"name": "add",
												"nodeType": "YulIdentifier",
												"src": "6402:3:13"
											},
											"nodeType": "YulFunctionCall",
											"src": "6402:16:13"
										},
										"variableNames": [
											{
												"name": "dst",
												"nodeType": "YulIdentifier",
												"src": "6395:3:13"
											}
										]
									},
									{
										"nodeType": "YulVariableDeclaration",
										"src": "6428:44:13",
										"value": {
											"arguments": [
												{
													"name": "offset",
													"nodeType": "YulIdentifier",
													"src": "6446:6:13"
												},
												{
													"arguments": [
														{
															"name": "length",
															"nodeType": "YulIdentifier",
															"src": "6458:6:13"
														},
														{
															"kind": "number",
															"nodeType": "YulLiteral",
															"src": "6466:4:13",
															"type": "",
															"value": "0x20"
														}
													],
													"functionName": {
														"name": "mul",
														"nodeType": "YulIdentifier",
														"src": "6454:3:13"
													},
													"nodeType": "YulFunctionCall",
													"src": "6454:17:13"
												}
											],
											"functionName": {
												"name": "add",
												"nodeType": "YulIdentifier",
												"src": "6442:3:13"
											},
											"nodeType": "YulFunctionCall",
											"src": "6442:30:13"
										},
										"variables": [
											{
												"name": "srcEnd",
												"nodeType": "YulTypedName",
												"src": "6432:6:13",
												"type": ""
											}
										]
									},
									{
										"body": {
											"nodeType": "YulBlock",
											"src": "6500:103:13",
											"statements": [
												{
													"expression": {
														"arguments": [],
														"functionName": {
															"name": "revert_error_81385d8c0b31fffe14be1da910c8bd3a80be4cfa248e04f42ec0faea3132a8ef",
															"nodeType": "YulIdentifier",
															"src": "6514:77:13"
														},
														"nodeType": "YulFunctionCall",
														"src": "6514:79:13"
													},
													"nodeType": "YulExpressionStatement",
													"src": "6514:79:13"
												}
											]
										},
										"condition": {
											"arguments": [
												{
													"name": "srcEnd",
													"nodeType": "YulIdentifier",
													"src": "6487:6:13"
												},
												{
													"name": "end",
													"nodeType": "YulIdentifier",
													"src": "6495:3:13"
												}
											],
											"functionName": {
												"name": "gt",
												"nodeType": "YulIdentifier",
												"src": "6484:2:13"
											},
											"nodeType": "YulFunctionCall",
											"src": "6484:15:13"
										},
										"nodeType": "YulIf",
										"src": "6481:122:13"
									},
									{
										"body": {
											"nodeType": "YulBlock",
											"src": "6688:144:13",
											"statements": [
												{
													"nodeType": "YulVariableDeclaration",
													"src": "6703:21:13",
													"value": {
														"name": "src",
														"nodeType": "YulIdentifier",
														"src": "6721:3:13"
													},
													"variables": [
														{
															"name": "elementPos",
															"nodeType": "YulTypedName",
															"src": "6707:10:13",
															"type": ""
														}
													]
												},
												{
													"expression": {
														"arguments": [
															{
																"name": "dst",
																"nodeType": "YulIdentifier",
																"src": "6745:3:13"
															},
															{
																"arguments": [
																	{
																		"name": "elementPos",
																		"nodeType": "YulIdentifier",
																		"src": "6771:10:13"
																	},
																	{
																		"name": "end",
																		"nodeType": "YulIdentifier",
																		"src": "6783:3:13"
																	}
																],
																"functionName": {
																	"name": "abi_decode_t_uint256",
																	"nodeType": "YulIdentifier",
																	"src": "6750:20:13"
																},
																"nodeType": "YulFunctionCall",
																"src": "6750:37:13"
															}
														],
														"functionName": {
															"name": "mstore",
															"nodeType": "YulIdentifier",
															"src": "6738:6:13"
														},
														"nodeType": "YulFunctionCall",
														"src": "6738:50:13"
													},
													"nodeType": "YulExpressionStatement",
													"src": "6738:50:13"
												},
												{
													"nodeType": "YulAssignment",
													"src": "6801:21:13",
													"value": {
														"arguments": [
															{
																"name": "dst",
																"nodeType": "YulIdentifier",
																"src": "6812:3:13"
															},
															{
																"kind": "number",
																"nodeType": "YulLiteral",
																"src": "6817:4:13",
																"type": "",
																"value": "0x20"
															}
														],
														"functionName": {
															"name": "add",
															"nodeType": "YulIdentifier",
															"src": "6808:3:13"
														},
														"nodeType": "YulFunctionCall",
														"src": "6808:14:13"
													},
													"variableNames": [
														{
															"name": "dst",
															"nodeType": "YulIdentifier",
															"src": "6801:3:13"
														}
													]
												}
											]
										},
										"condition": {
											"arguments": [
												{
													"name": "src",
													"nodeType": "YulIdentifier",
													"src": "6641:3:13"
												},
												{
													"name": "srcEnd",
													"nodeType": "YulIdentifier",
													"src": "6646:6:13"
												}
											],
											"functionName": {
												"name": "lt",
												"nodeType": "YulIdentifier",
												"src": "6638:2:13"
											},
											"nodeType": "YulFunctionCall",
											"src": "6638:15:13"
										},
										"nodeType": "YulForLoop",
										"post": {
											"nodeType": "YulBlock",
											"src": "6654:25:13",
											"statements": [
												{
													"nodeType": "YulAssignment",
													"src": "6656:21:13",
													"value": {
														"arguments": [
															{
																"name": "src",
																"nodeType": "YulIdentifier",
																"src": "6667:3:13"
															},
															{
																"kind": "number",
																"nodeType": "YulLiteral",
																"src": "6672:4:13",
																"type": "",
																"value": "0x20"
															}
														],
														"functionName": {
															"name": "add",
															"nodeType": "YulIdentifier",
															"src": "6663:3:13"
														},
														"nodeType": "YulFunctionCall",
														"src": "6663:14:13"
													},
													"variableNames": [
														{
															"name": "src",
															"nodeType": "YulIdentifier",
															"src": "6656:3:13"
														}
													]
												}
											]
										},
										"pre": {
											"nodeType": "YulBlock",
											"src": "6616:21:13",
											"statements": [
												{
													"nodeType": "YulVariableDeclaration",
													"src": "6618:17:13",
													"value": {
														"name": "offset",
														"nodeType": "YulIdentifier",
														"src": "6629:6:13"
													},
													"variables": [
														{
															"name": "src",
															"nodeType": "YulTypedName",
															"src": "6622:3:13",
															"type": ""
														}
													]
												}
											]
										},
										"src": "6612:220:13"
									}
								]
							},
							"name": "abi_decode_available_length_t_array$_t_uint256_$dyn_memory_ptr",
							"nodeType": "YulFunctionDefinition",
							"parameters": [
								{
									"name": "offset",
									"nodeType": "YulTypedName",
									"src": "6200:6:13",
									"type": ""
								},
								{
									"name": "length",
									"nodeType": "YulTypedName",
									"src": "6208:6:13",
									"type": ""
								},
								{
									"name": "end",
									"nodeType": "YulTypedName",
									"src": "6216:3:13",
									"type": ""
								}
							],
							"returnVariables": [
								{
									"name": "array",
									"nodeType": "YulTypedName",
									"src": "6224:5:13",
									"type": ""
								}
							],
							"src": "6128:710:13"
						},
						{
							"body": {
								"nodeType": "YulBlock",
								"src": "6938:293:13",
								"statements": [
									{
										"body": {
											"nodeType": "YulBlock",
											"src": "6987:83:13",
											"statements": [
												{
													"expression": {
														"arguments": [],
														"functionName": {
															"name": "revert_error_1b9f4a0a5773e33b91aa01db23bf8c55fce1411167c872835e7fa00a4f17d46d",
															"nodeType": "YulIdentifier",
															"src": "6989:77:13"
														},
														"nodeType": "YulFunctionCall",
														"src": "6989:79:13"
													},
													"nodeType": "YulExpressionStatement",
													"src": "6989:79:13"
												}
											]
										},
										"condition": {
											"arguments": [
												{
													"arguments": [
														{
															"arguments": [
																{
																	"name": "offset",
																	"nodeType": "YulIdentifier",
																	"src": "6966:6:13"
																},
																{
																	"kind": "number",
																	"nodeType": "YulLiteral",
																	"src": "6974:4:13",
																	"type": "",
																	"value": "0x1f"
																}
															],
															"functionName": {
																"name": "add",
																"nodeType": "YulIdentifier",
																"src": "6962:3:13"
															},
															"nodeType": "YulFunctionCall",
															"src": "6962:17:13"
														},
														{
															"name": "end",
															"nodeType": "YulIdentifier",
															"src": "6981:3:13"
														}
													],
													"functionName": {
														"name": "slt",
														"nodeType": "YulIdentifier",
														"src": "6958:3:13"
													},
													"nodeType": "YulFunctionCall",
													"src": "6958:27:13"
												}
											],
											"functionName": {
												"name": "iszero",
												"nodeType": "YulIdentifier",
												"src": "6951:6:13"
											},
											"nodeType": "YulFunctionCall",
											"src": "6951:35:13"
										},
										"nodeType": "YulIf",
										"src": "6948:122:13"
									},
									{
										"nodeType": "YulVariableDeclaration",
										"src": "7079:34:13",
										"value": {
											"arguments": [
												{
													"name": "offset",
													"nodeType": "YulIdentifier",
													"src": "7106:6:13"
												}
											],
											"functionName": {
												"name": "calldataload",
												"nodeType": "YulIdentifier",
												"src": "7093:12:13"
											},
											"nodeType": "YulFunctionCall",
											"src": "7093:20:13"
										},
										"variables": [
											{
												"name": "length",
												"nodeType": "YulTypedName",
												"src": "7083:6:13",
												"type": ""
											}
										]
									},
									{
										"nodeType": "YulAssignment",
										"src": "7122:103:13",
										"value": {
											"arguments": [
												{
													"arguments": [
														{
															"name": "offset",
															"nodeType": "YulIdentifier",
															"src": "7198:6:13"
														},
														{
															"kind": "number",
															"nodeType": "YulLiteral",
															"src": "7206:4:13",
															"type": "",
															"value": "0x20"
														}
													],
													"functionName": {
														"name": "add",
														"nodeType": "YulIdentifier",
														"src": "7194:3:13"
													},
													"nodeType": "YulFunctionCall",
													"src": "7194:17:13"
												},
												{
													"name": "length",
													"nodeType": "YulIdentifier",
													"src": "7213:6:13"
												},
												{
													"name": "end",
													"nodeType": "YulIdentifier",
													"src": "7221:3:13"
												}
											],
											"functionName": {
												"name": "abi_decode_available_length_t_array$_t_uint256_$dyn_memory_ptr",
												"nodeType": "YulIdentifier",
												"src": "7131:62:13"
											},
											"nodeType": "YulFunctionCall",
											"src": "7131:94:13"
										},
										"variableNames": [
											{
												"name": "array",
												"nodeType": "YulIdentifier",
												"src": "7122:5:13"
											}
										]
									}
								]
							},
							"name": "abi_decode_t_array$_t_uint256_$dyn_memory_ptr",
							"nodeType": "YulFunctionDefinition",
							"parameters": [
								{
									"name": "offset",
									"nodeType": "YulTypedName",
									"src": "6916:6:13",
									"type": ""
								},
								{
									"name": "end",
									"nodeType": "YulTypedName",
									"src": "6924:3:13",
									"type": ""
								}
							],
							"returnVariables": [
								{
									"name": "array",
									"nodeType": "YulTypedName",
									"src": "6932:5:13",
									"type": ""
								}
							],
							"src": "6861:370:13"
						},
						{
							"body": {
								"nodeType": "YulBlock",
								"src": "7387:889:13",
								"statements": [
									{
										"body": {
											"nodeType": "YulBlock",
											"src": "7433:83:13",
											"statements": [
												{
													"expression": {
														"arguments": [],
														"functionName": {
															"name": "revert_error_dbdddcbe895c83990c08b3492a0e83918d802a52331272ac6fdb6a7c4aea3b1b",
															"nodeType": "YulIdentifier",
															"src": "7435:77:13"
														},
														"nodeType": "YulFunctionCall",
														"src": "7435:79:13"
													},
													"nodeType": "YulExpressionStatement",
													"src": "7435:79:13"
												}
											]
										},
										"condition": {
											"arguments": [
												{
													"arguments": [
														{
															"name": "dataEnd",
															"nodeType": "YulIdentifier",
															"src": "7408:7:13"
														},
														{
															"name": "headStart",
															"nodeType": "YulIdentifier",
															"src": "7417:9:13"
														}
													],
													"functionName": {
														"name": "sub",
														"nodeType": "YulIdentifier",
														"src": "7404:3:13"
													},
													"nodeType": "YulFunctionCall",
													"src": "7404:23:13"
												},
												{
													"kind": "number",
													"nodeType": "YulLiteral",
													"src": "7429:2:13",
													"type": "",
													"value": "96"
												}
											],
											"functionName": {
												"name": "slt",
												"nodeType": "YulIdentifier",
												"src": "7400:3:13"
											},
											"nodeType": "YulFunctionCall",
											"src": "7400:32:13"
										},
										"nodeType": "YulIf",
										"src": "7397:119:13"
									},
									{
										"nodeType": "YulBlock",
										"src": "7526:117:13",
										"statements": [
											{
												"nodeType": "YulVariableDeclaration",
												"src": "7541:15:13",
												"value": {
													"kind": "number",
													"nodeType": "YulLiteral",
													"src": "7555:1:13",
													"type": "",
													"value": "0"
												},
												"variables": [
													{
														"name": "offset",
														"nodeType": "YulTypedName",
														"src": "7545:6:13",
														"type": ""
													}
												]
											},
											{
												"nodeType": "YulAssignment",
												"src": "7570:63:13",
												"value": {
													"arguments": [
														{
															"arguments": [
																{
																	"name": "headStart",
																	"nodeType": "YulIdentifier",
																	"src": "7605:9:13"
																},
																{
																	"name": "offset",
																	"nodeType": "YulIdentifier",
																	"src": "7616:6:13"
																}
															],
															"functionName": {
																"name": "add",
																"nodeType": "YulIdentifier",
																"src": "7601:3:13"
															},
															"nodeType": "YulFunctionCall",
															"src": "7601:22:13"
														},
														{
															"name": "dataEnd",
															"nodeType": "YulIdentifier",
															"src": "7625:7:13"
														}
													],
													"functionName": {
														"name": "abi_decode_t_address",
														"nodeType": "YulIdentifier",
														"src": "7580:20:13"
													},
													"nodeType": "YulFunctionCall",
													"src": "7580:53:13"
												},
												"variableNames": [
													{
														"name": "value0",
														"nodeType": "YulIdentifier",
														"src": "7570:6:13"
													}
												]
											}
										]
									},
									{
										"nodeType": "YulBlock",
										"src": "7653:303:13",
										"statements": [
											{
												"nodeType": "YulVariableDeclaration",
												"src": "7668:46:13",
												"value": {
													"arguments": [
														{
															"arguments": [
																{
																	"name": "headStart",
																	"nodeType": "YulIdentifier",
																	"src": "7699:9:13"
																},
																{
																	"kind": "number",
																	"nodeType": "YulLiteral",
																	"src": "7710:2:13",
																	"type": "",
																	"value": "32"
																}
															],
															"functionName": {
																"name": "add",
																"nodeType": "YulIdentifier",
																"src": "7695:3:13"
															},
															"nodeType": "YulFunctionCall",
															"src": "7695:18:13"
														}
													],
													"functionName": {
														"name": "calldataload",
														"nodeType": "YulIdentifier",
														"src": "7682:12:13"
													},
													"nodeType": "YulFunctionCall",
													"src": "7682:32:13"
												},
												"variables": [
													{
														"name": "offset",
														"nodeType": "YulTypedName",
														"src": "7672:6:13",
														"type": ""
													}
												]
											},
											{
												"body": {
													"nodeType": "YulBlock",
													"src": "7761:83:13",
													"statements": [
														{
															"expression": {
																"arguments": [],
																"functionName": {
																	"name": "revert_error_c1322bf8034eace5e0b5c7295db60986aa89aae5e0ea0873e4689e076861a5db",
																	"nodeType": "YulIdentifier",
																	"src": "7763:77:13"
																},
																"nodeType": "YulFunctionCall",
																"src": "7763:79:13"
															},
															"nodeType": "YulExpressionStatement",
															"src": "7763:79:13"
														}
													]
												},
												"condition": {
													"arguments": [
														{
															"name": "offset",
															"nodeType": "YulIdentifier",
															"src": "7733:6:13"
														},
														{
															"kind": "number",
															"nodeType": "YulLiteral",
															"src": "7741:18:13",
															"type": "",
															"value": "0xffffffffffffffff"
														}
													],
													"functionName": {
														"name": "gt",
														"nodeType": "YulIdentifier",
														"src": "7730:2:13"
													},
													"nodeType": "YulFunctionCall",
													"src": "7730:30:13"
												},
												"nodeType": "YulIf",
												"src": "7727:117:13"
											},
											{
												"nodeType": "YulAssignment",
												"src": "7858:88:13",
												"value": {
													"arguments": [
														{
															"arguments": [
																{
																	"name": "headStart",
																	"nodeType": "YulIdentifier",
																	"src": "7918:9:13"
																},
																{
																	"name": "offset",
																	"nodeType": "YulIdentifier",
																	"src": "7929:6:13"
																}
															],
															"functionName": {
																"name": "add",
																"nodeType": "YulIdentifier",
																"src": "7914:3:13"
															},
															"nodeType": "YulFunctionCall",
															"src": "7914:22:13"
														},
														{
															"name": "dataEnd",
															"nodeType": "YulIdentifier",
															"src": "7938:7:13"
														}
													],
													"functionName": {
														"name": "abi_decode_t_array$_t_uint256_$dyn_memory_ptr",
														"nodeType": "YulIdentifier",
														"src": "7868:45:13"
													},
													"nodeType": "YulFunctionCall",
													"src": "7868:78:13"
												},
												"variableNames": [
													{
														"name": "value1",
														"nodeType": "YulIdentifier",
														"src": "7858:6:13"
													}
												]
											}
										]
									},
									{
										"nodeType": "YulBlock",
										"src": "7966:303:13",
										"statements": [
											{
												"nodeType": "YulVariableDeclaration",
												"src": "7981:46:13",
												"value": {
													"arguments": [
														{
															"arguments": [
																{
																	"name": "headStart",
																	"nodeType": "YulIdentifier",
																	"src": "8012:9:13"
																},
																{
																	"kind": "number",
																	"nodeType": "YulLiteral",
																	"src": "8023:2:13",
																	"type": "",
																	"value": "64"
																}
															],
															"functionName": {
																"name": "add",
																"nodeType": "YulIdentifier",
																"src": "8008:3:13"
															},
															"nodeType": "YulFunctionCall",
															"src": "8008:18:13"
														}
													],
													"functionName": {
														"name": "calldataload",
														"nodeType": "YulIdentifier",
														"src": "7995:12:13"
													},
													"nodeType": "YulFunctionCall",
													"src": "7995:32:13"
												},
												"variables": [
													{
														"name": "offset",
														"nodeType": "YulTypedName",
														"src": "7985:6:13",
														"type": ""
													}
												]
											},
											{
												"body": {
													"nodeType": "YulBlock",
													"src": "8074:83:13",
													"statements": [
														{
															"expression": {
																"arguments": [],
																"functionName": {
																	"name": "revert_error_c1322bf8034eace5e0b5c7295db60986aa89aae5e0ea0873e4689e076861a5db",
																	"nodeType": "YulIdentifier",
																	"src": "8076:77:13"
																},
																"nodeType": "YulFunctionCall",
																"src": "8076:79:13"
															},
															"nodeType": "YulExpressionStatement",
															"src": "8076:79:13"
														}
													]
												},
												"condition": {
													"arguments": [
														{
															"name": "offset",
															"nodeType": "YulIdentifier",
															"src": "8046:6:13"
														},
														{
															"kind": "number",
															"nodeType": "YulLiteral",
															"src": "8054:18:13",
															"type": "",
															"value": "0xffffffffffffffff"
														}
													],
													"functionName": {
														"name": "gt",
														"nodeType": "YulIdentifier",
														"src": "8043:2:13"
													},
													"nodeType": "YulFunctionCall",
													"src": "8043:30:13"
												},
												"nodeType": "YulIf",
												"src": "8040:117:13"
											},
											{
												"nodeType": "YulAssignment",
												"src": "8171:88:13",
												"value": {
													"arguments": [
														{
															"arguments": [
																{
																	"name": "headStart",
																	"nodeType": "YulIdentifier",
																	"src": "8231:9:13"
																},
																{
																	"name": "offset",
																	"nodeType": "YulIdentifier",
																	"src": "8242:6:13"
																}
															],
															"functionName": {
																"name": "add",
																"nodeType": "YulIdentifier",
																"src": "8227:3:13"
															},
															"nodeType": "YulFunctionCall",
															"src": "8227:22:13"
														},
														{
															"name": "dataEnd",
															"nodeType": "YulIdentifier",
															"src": "8251:7:13"
														}
													],
													"functionName": {
														"name": "abi_decode_t_array$_t_uint256_$dyn_memory_ptr",
														"nodeType": "YulIdentifier",
														"src": "8181:45:13"
													},
													"nodeType": "YulFunctionCall",
													"src": "8181:78:13"
												},
												"variableNames": [
													{
														"name": "value2",
														"nodeType": "YulIdentifier",
														"src": "8171:6:13"
													}
												]
											}
										]
									}
								]
							},
							"name": "abi_decode_tuple_t_addresst_array$_t_uint256_$dyn_memory_ptrt_array$_t_uint256_$dyn_memory_ptr",
							"nodeType": "YulFunctionDefinition",
							"parameters": [
								{
									"name": "headStart",
									"nodeType": "YulTypedName",
									"src": "7341:9:13",
									"type": ""
								},
								{
									"name": "dataEnd",
									"nodeType": "YulTypedName",
									"src": "7352:7:13",
									"type": ""
								}
							],
							"returnVariables": [
								{
									"name": "value0",
									"nodeType": "YulTypedName",
									"src": "7364:6:13",
									"type": ""
								},
								{
									"name": "value1",
									"nodeType": "YulTypedName",
									"src": "7372:6:13",
									"type": ""
								},
								{
									"name": "value2",
									"nodeType": "YulTypedName",
									"src": "7380:6:13",
									"type": ""
								}
							],
							"src": "7237:1039:13"
						},
						{
							"body": {
								"nodeType": "YulBlock",
								"src": "8390:576:13",
								"statements": [
									{
										"body": {
											"nodeType": "YulBlock",
											"src": "8436:83:13",
											"statements": [
												{
													"expression": {
														"arguments": [],
														"functionName": {
															"name": "revert_error_dbdddcbe895c83990c08b3492a0e83918d802a52331272ac6fdb6a7c4aea3b1b",
															"nodeType": "YulIdentifier",
															"src": "8438:77:13"
														},
														"nodeType": "YulFunctionCall",
														"src": "8438:79:13"
													},
													"nodeType": "YulExpressionStatement",
													"src": "8438:79:13"
												}
											]
										},
										"condition": {
											"arguments": [
												{
													"arguments": [
														{
															"name": "dataEnd",
															"nodeType": "YulIdentifier",
															"src": "8411:7:13"
														},
														{
															"name": "headStart",
															"nodeType": "YulIdentifier",
															"src": "8420:9:13"
														}
													],
													"functionName": {
														"name": "sub",
														"nodeType": "YulIdentifier",
														"src": "8407:3:13"
													},
													"nodeType": "YulFunctionCall",
													"src": "8407:23:13"
												},
												{
													"kind": "number",
													"nodeType": "YulLiteral",
													"src": "8432:2:13",
													"type": "",
													"value": "64"
												}
											],
											"functionName": {
												"name": "slt",
												"nodeType": "YulIdentifier",
												"src": "8403:3:13"
											},
											"nodeType": "YulFunctionCall",
											"src": "8403:32:13"
										},
										"nodeType": "YulIf",
										"src": "8400:119:13"
									},
									{
										"nodeType": "YulBlock",
										"src": "8529:117:13",
										"statements": [
											{
												"nodeType": "YulVariableDeclaration",
												"src": "8544:15:13",
												"value": {
													"kind": "number",
													"nodeType": "YulLiteral",
													"src": "8558:1:13",
													"type": "",
													"value": "0"
												},
												"variables": [
													{
														"name": "offset",
														"nodeType": "YulTypedName",
														"src": "8548:6:13",
														"type": ""
													}
												]
											},
											{
												"nodeType": "YulAssignment",
												"src": "8573:63:13",
												"value": {
													"arguments": [
														{
															"arguments": [
																{
																	"name": "headStart",
																	"nodeType": "YulIdentifier",
																	"src": "8608:9:13"
																},
																{
																	"name": "offset",
																	"nodeType": "YulIdentifier",
																	"src": "8619:6:13"
																}
															],
															"functionName": {
																"name": "add",
																"nodeType": "YulIdentifier",
																"src": "8604:3:13"
															},
															"nodeType": "YulFunctionCall",
															"src": "8604:22:13"
														},
														{
															"name": "dataEnd",
															"nodeType": "YulIdentifier",
															"src": "8628:7:13"
														}
													],
													"functionName": {
														"name": "abi_decode_t_address",
														"nodeType": "YulIdentifier",
														"src": "8583:20:13"
													},
													"nodeType": "YulFunctionCall",
													"src": "8583:53:13"
												},
												"variableNames": [
													{
														"name": "value0",
														"nodeType": "YulIdentifier",
														"src": "8573:6:13"
													}
												]
											}
										]
									},
									{
										"nodeType": "YulBlock",
										"src": "8656:303:13",
										"statements": [
											{
												"nodeType": "YulVariableDeclaration",
												"src": "8671:46:13",
												"value": {
													"arguments": [
														{
															"arguments": [
																{
																	"name": "headStart",
																	"nodeType": "YulIdentifier",
																	"src": "8702:9:13"
																},
																{
																	"kind": "number",
																	"nodeType": "YulLiteral",
																	"src": "8713:2:13",
																	"type": "",
																	"value": "32"
																}
															],
															"functionName": {
																"name": "add",
																"nodeType": "YulIdentifier",
																"src": "8698:3:13"
															},
															"nodeType": "YulFunctionCall",
															"src": "8698:18:13"
														}
													],
													"functionName": {
														"name": "calldataload",
														"nodeType": "YulIdentifier",
														"src": "8685:12:13"
													},
													"nodeType": "YulFunctionCall",
													"src": "8685:32:13"
												},
												"variables": [
													{
														"name": "offset",
														"nodeType": "YulTypedName",
														"src": "8675:6:13",
														"type": ""
													}
												]
											},
											{
												"body": {
													"nodeType": "YulBlock",
													"src": "8764:83:13",
													"statements": [
														{
															"expression": {
																"arguments": [],
																"functionName": {
																	"name": "revert_error_c1322bf8034eace5e0b5c7295db60986aa89aae5e0ea0873e4689e076861a5db",
																	"nodeType": "YulIdentifier",
																	"src": "8766:77:13"
																},
																"nodeType": "YulFunctionCall",
																"src": "8766:79:13"
															},
															"nodeType": "YulExpressionStatement",
															"src": "8766:79:13"
														}
													]
												},
												"condition": {
													"arguments": [
														{
															"name": "offset",
															"nodeType": "YulIdentifier",
															"src": "8736:6:13"
														},
														{
															"kind": "number",
															"nodeType": "YulLiteral",
															"src": "8744:18:13",
															"type": "",
															"value": "0xffffffffffffffff"
														}
													],
													"functionName": {
														"name": "gt",
														"nodeType": "YulIdentifier",
														"src": "8733:2:13"
													},
													"nodeType": "YulFunctionCall",
													"src": "8733:30:13"
												},
												"nodeType": "YulIf",
												"src": "8730:117:13"
											},
											{
												"nodeType": "YulAssignment",
												"src": "8861:88:13",
												"value": {
													"arguments": [
														{
															"arguments": [
																{
																	"name": "headStart",
																	"nodeType": "YulIdentifier",
																	"src": "8921:9:13"
																},
																{
																	"name": "offset",
																	"nodeType": "YulIdentifier",
																	"src": "8932:6:13"
																}
															],
															"functionName": {
																"name": "add",
																"nodeType": "YulIdentifier",
																"src": "8917:3:13"
															},
															"nodeType": "YulFunctionCall",
															"src": "8917:22:13"
														},
														{
															"name": "dataEnd",
															"nodeType": "YulIdentifier",
															"src": "8941:7:13"
														}
													],
													"functionName": {
														"name": "abi_decode_t_array$_t_uint256_$dyn_memory_ptr",
														"nodeType": "YulIdentifier",
														"src": "8871:45:13"
													},
													"nodeType": "YulFunctionCall",
													"src": "8871:78:13"
												},
												"variableNames": [
													{
														"name": "value1",
														"nodeType": "YulIdentifier",
														"src": "8861:6:13"
													}
												]
											}
										]
									}
								]
							},
							"name": "abi_decode_tuple_t_addresst_array$_t_uint256_$dyn_memory_ptr",
							"nodeType": "YulFunctionDefinition",
							"parameters": [
								{
									"name": "headStart",
									"nodeType": "YulTypedName",
									"src": "8352:9:13",
									"type": ""
								},
								{
									"name": "dataEnd",
									"nodeType": "YulTypedName",
									"src": "8363:7:13",
									"type": ""
								}
							],
							"returnVariables": [
								{
									"name": "value0",
									"nodeType": "YulTypedName",
									"src": "8375:6:13",
									"type": ""
								},
								{
									"name": "value1",
									"nodeType": "YulTypedName",
									"src": "8383:6:13",
									"type": ""
								}
							],
							"src": "8282:684:13"
						},
						{
							"body": {
								"nodeType": "YulBlock",
								"src": "9068:73:13",
								"statements": [
									{
										"expression": {
											"arguments": [
												{
													"name": "pos",
													"nodeType": "YulIdentifier",
													"src": "9085:3:13"
												},
												{
													"name": "length",
													"nodeType": "YulIdentifier",
													"src": "9090:6:13"
												}
											],
											"functionName": {
												"name": "mstore",
												"nodeType": "YulIdentifier",
												"src": "9078:6:13"
											},
											"nodeType": "YulFunctionCall",
											"src": "9078:19:13"
										},
										"nodeType": "YulExpressionStatement",
										"src": "9078:19:13"
									},
									{
										"nodeType": "YulAssignment",
										"src": "9106:29:13",
										"value": {
											"arguments": [
												{
													"name": "pos",
													"nodeType": "YulIdentifier",
													"src": "9125:3:13"
												},
												{
													"kind": "number",
													"nodeType": "YulLiteral",
													"src": "9130:4:13",
													"type": "",
													"value": "0x20"
												}
											],
											"functionName": {
												"name": "add",
												"nodeType": "YulIdentifier",
												"src": "9121:3:13"
											},
											"nodeType": "YulFunctionCall",
											"src": "9121:14:13"
										},
										"variableNames": [
											{
												"name": "updated_pos",
												"nodeType": "YulIdentifier",
												"src": "9106:11:13"
											}
										]
									}
								]
							},
							"name": "array_storeLengthForEncoding_t_string_memory_ptr_fromStack",
							"nodeType": "YulFunctionDefinition",
							"parameters": [
								{
									"name": "pos",
									"nodeType": "YulTypedName",
									"src": "9040:3:13",
									"type": ""
								},
								{
									"name": "length",
									"nodeType": "YulTypedName",
									"src": "9045:6:13",
									"type": ""
								}
							],
							"returnVariables": [
								{
									"name": "updated_pos",
									"nodeType": "YulTypedName",
									"src": "9056:11:13",
									"type": ""
								}
							],
							"src": "8972:169:13"
						},
						{
							"body": {
								"nodeType": "YulBlock",
								"src": "9253:119:13",
								"statements": [
									{
										"expression": {
											"arguments": [
												{
													"arguments": [
														{
															"name": "memPtr",
															"nodeType": "YulIdentifier",
															"src": "9275:6:13"
														},
														{
															"kind": "number",
															"nodeType": "YulLiteral",
															"src": "9283:1:13",
															"type": "",
															"value": "0"
														}
													],
													"functionName": {
														"name": "add",
														"nodeType": "YulIdentifier",
														"src": "9271:3:13"
													},
													"nodeType": "YulFunctionCall",
													"src": "9271:14:13"
												},
												{
													"hexValue": "4e6f204e465420636f6e7472616374206173736f636961746564207769746820",
													"kind": "string",
													"nodeType": "YulLiteral",
													"src": "9287:34:13",
													"type": "",
													"value": "No NFT contract associated with "
												}
											],
											"functionName": {
												"name": "mstore",
												"nodeType": "YulIdentifier",
												"src": "9264:6:13"
											},
											"nodeType": "YulFunctionCall",
											"src": "9264:58:13"
										},
										"nodeType": "YulExpressionStatement",
										"src": "9264:58:13"
									},
									{
										"expression": {
											"arguments": [
												{
													"arguments": [
														{
															"name": "memPtr",
															"nodeType": "YulIdentifier",
															"src": "9343:6:13"
														},
														{
															"kind": "number",
															"nodeType": "YulLiteral",
															"src": "9351:2:13",
															"type": "",
															"value": "32"
														}
													],
													"functionName": {
														"name": "add",
														"nodeType": "YulIdentifier",
														"src": "9339:3:13"
													},
													"nodeType": "YulFunctionCall",
													"src": "9339:15:13"
												},
												{
													"hexValue": "63616c6c6572",
													"kind": "string",
													"nodeType": "YulLiteral",
													"src": "9356:8:13",
													"type": "",
													"value": "caller"
												}
											],
											"functionName": {
												"name": "mstore",
												"nodeType": "YulIdentifier",
												"src": "9332:6:13"
											},
											"nodeType": "YulFunctionCall",
											"src": "9332:33:13"
										},
										"nodeType": "YulExpressionStatement",
										"src": "9332:33:13"
									}
								]
							},
							"name": "store_literal_in_memory_9761939be34d52ad729f4e4e7fb4f36a053f0fee36a4e99216ff07d0c9de5bfd",
							"nodeType": "YulFunctionDefinition",
							"parameters": [
								{
									"name": "memPtr",
									"nodeType": "YulTypedName",
									"src": "9245:6:13",
									"type": ""
								}
							],
							"src": "9147:225:13"
						},
						{
							"body": {
								"nodeType": "YulBlock",
								"src": "9524:220:13",
								"statements": [
									{
										"nodeType": "YulAssignment",
										"src": "9534:74:13",
										"value": {
											"arguments": [
												{
													"name": "pos",
													"nodeType": "YulIdentifier",
													"src": "9600:3:13"
												},
												{
													"kind": "number",
													"nodeType": "YulLiteral",
													"src": "9605:2:13",
													"type": "",
													"value": "38"
												}
											],
											"functionName": {
												"name": "array_storeLengthForEncoding_t_string_memory_ptr_fromStack",
												"nodeType": "YulIdentifier",
												"src": "9541:58:13"
											},
											"nodeType": "YulFunctionCall",
											"src": "9541:67:13"
										},
										"variableNames": [
											{
												"name": "pos",
												"nodeType": "YulIdentifier",
												"src": "9534:3:13"
											}
										]
									},
									{
										"expression": {
											"arguments": [
												{
													"name": "pos",
													"nodeType": "YulIdentifier",
													"src": "9706:3:13"
												}
											],
											"functionName": {
												"name": "store_literal_in_memory_9761939be34d52ad729f4e4e7fb4f36a053f0fee36a4e99216ff07d0c9de5bfd",
												"nodeType": "YulIdentifier",
												"src": "9617:88:13"
											},
											"nodeType": "YulFunctionCall",
											"src": "9617:93:13"
										},
										"nodeType": "YulExpressionStatement",
										"src": "9617:93:13"
									},
									{
										"nodeType": "YulAssignment",
										"src": "9719:19:13",
										"value": {
											"arguments": [
												{
													"name": "pos",
													"nodeType": "YulIdentifier",
													"src": "9730:3:13"
												},
												{
													"kind": "number",
													"nodeType": "YulLiteral",
													"src": "9735:2:13",
													"type": "",
													"value": "64"
												}
											],
											"functionName": {
												"name": "add",
												"nodeType": "YulIdentifier",
												"src": "9726:3:13"
											},
											"nodeType": "YulFunctionCall",
											"src": "9726:12:13"
										},
										"variableNames": [
											{
												"name": "end",
												"nodeType": "YulIdentifier",
												"src": "9719:3:13"
											}
										]
									}
								]
							},
							"name": "abi_encode_t_stringliteral_9761939be34d52ad729f4e4e7fb4f36a053f0fee36a4e99216ff07d0c9de5bfd_to_t_string_memory_ptr_fromStack",
							"nodeType": "YulFunctionDefinition",
							"parameters": [
								{
									"name": "pos",
									"nodeType": "YulTypedName",
									"src": "9512:3:13",
									"type": ""
								}
							],
							"returnVariables": [
								{
									"name": "end",
									"nodeType": "YulTypedName",
									"src": "9520:3:13",
									"type": ""
								}
							],
							"src": "9378:366:13"
						},
						{
							"body": {
								"nodeType": "YulBlock",
								"src": "9921:248:13",
								"statements": [
									{
										"nodeType": "YulAssignment",
										"src": "9931:26:13",
										"value": {
											"arguments": [
												{
													"name": "headStart",
													"nodeType": "YulIdentifier",
													"src": "9943:9:13"
												},
												{
													"kind": "number",
													"nodeType": "YulLiteral",
													"src": "9954:2:13",
													"type": "",
													"value": "32"
												}
											],
											"functionName": {
												"name": "add",
												"nodeType": "YulIdentifier",
												"src": "9939:3:13"
											},
											"nodeType": "YulFunctionCall",
											"src": "9939:18:13"
										},
										"variableNames": [
											{
												"name": "tail",
												"nodeType": "YulIdentifier",
												"src": "9931:4:13"
											}
										]
									},
									{
										"expression": {
											"arguments": [
												{
													"arguments": [
														{
															"name": "headStart",
															"nodeType": "YulIdentifier",
															"src": "9978:9:13"
														},
														{
															"kind": "number",
															"nodeType": "YulLiteral",
															"src": "9989:1:13",
															"type": "",
															"value": "0"
														}
													],
													"functionName": {
														"name": "add",
														"nodeType": "YulIdentifier",
														"src": "9974:3:13"
													},
													"nodeType": "YulFunctionCall",
													"src": "9974:17:13"
												},
												{
													"arguments": [
														{
															"name": "tail",
															"nodeType": "YulIdentifier",
															"src": "9997:4:13"
														},
														{
															"name": "headStart",
															"nodeType": "YulIdentifier",
															"src": "10003:9:13"
														}
													],
													"functionName": {
														"name": "sub",
														"nodeType": "YulIdentifier",
														"src": "9993:3:13"
													},
													"nodeType": "YulFunctionCall",
													"src": "9993:20:13"
												}
											],
											"functionName": {
												"name": "mstore",
												"nodeType": "YulIdentifier",
												"src": "9967:6:13"
											},
											"nodeType": "YulFunctionCall",
											"src": "9967:47:13"
										},
										"nodeType": "YulExpressionStatement",
										"src": "9967:47:13"
									},
									{
										"nodeType": "YulAssignment",
										"src": "10023:139:13",
										"value": {
											"arguments": [
												{
													"name": "tail",
													"nodeType": "YulIdentifier",
													"src": "10157:4:13"
												}
											],
											"functionName": {
												"name": "abi_encode_t_stringliteral_9761939be34d52ad729f4e4e7fb4f36a053f0fee36a4e99216ff07d0c9de5bfd_to_t_string_memory_ptr_fromStack",
												"nodeType": "YulIdentifier",
												"src": "10031:124:13"
											},
											"nodeType": "YulFunctionCall",
											"src": "10031:131:13"
										},
										"variableNames": [
											{
												"name": "tail",
												"nodeType": "YulIdentifier",
												"src": "10023:4:13"
											}
										]
									}
								]
							},
							"name": "abi_encode_tuple_t_stringliteral_9761939be34d52ad729f4e4e7fb4f36a053f0fee36a4e99216ff07d0c9de5bfd__to_t_string_memory_ptr__fromStack_reversed",
							"nodeType": "YulFunctionDefinition",
							"parameters": [
								{
									"name": "headStart",
									"nodeType": "YulTypedName",
									"src": "9901:9:13",
									"type": ""
								}
							],
							"returnVariables": [
								{
									"name": "tail",
									"nodeType": "YulTypedName",
									"src": "9916:4:13",
									"type": ""
								}
							],
							"src": "9750:419:13"
						},
						{
							"body": {
								"nodeType": "YulBlock",
								"src": "10281:127:13",
								"statements": [
									{
										"expression": {
											"arguments": [
												{
													"arguments": [
														{
															"name": "memPtr",
															"nodeType": "YulIdentifier",
															"src": "10303:6:13"
														},
														{
															"kind": "number",
															"nodeType": "YulLiteral",
															"src": "10311:1:13",
															"type": "",
															"value": "0"
														}
													],
													"functionName": {
														"name": "add",
														"nodeType": "YulIdentifier",
														"src": "10299:3:13"
													},
													"nodeType": "YulFunctionCall",
													"src": "10299:14:13"
												},
												{
													"hexValue": "4e6f207661756c74206173736f63696174656420776974682063616c6c657227",
													"kind": "string",
													"nodeType": "YulLiteral",
													"src": "10315:34:13",
													"type": "",
													"value": "No vault associated with caller'"
												}
											],
											"functionName": {
												"name": "mstore",
												"nodeType": "YulIdentifier",
												"src": "10292:6:13"
											},
											"nodeType": "YulFunctionCall",
											"src": "10292:58:13"
										},
										"nodeType": "YulExpressionStatement",
										"src": "10292:58:13"
									},
									{
										"expression": {
											"arguments": [
												{
													"arguments": [
														{
															"name": "memPtr",
															"nodeType": "YulIdentifier",
															"src": "10371:6:13"
														},
														{
															"kind": "number",
															"nodeType": "YulLiteral",
															"src": "10379:2:13",
															"type": "",
															"value": "32"
														}
													],
													"functionName": {
														"name": "add",
														"nodeType": "YulIdentifier",
														"src": "10367:3:13"
													},
													"nodeType": "YulFunctionCall",
													"src": "10367:15:13"
												},
												{
													"hexValue": "73204e465420636f6e7472616374",
													"kind": "string",
													"nodeType": "YulLiteral",
													"src": "10384:16:13",
													"type": "",
													"value": "s NFT contract"
												}
											],
											"functionName": {
												"name": "mstore",
												"nodeType": "YulIdentifier",
												"src": "10360:6:13"
											},
											"nodeType": "YulFunctionCall",
											"src": "10360:41:13"
										},
										"nodeType": "YulExpressionStatement",
										"src": "10360:41:13"
									}
								]
							},
							"name": "store_literal_in_memory_f9557d505c8bd41bfb57feb435c00f2fd7e4e4f41b7d53b93742c0a537d5aa0f",
							"nodeType": "YulFunctionDefinition",
							"parameters": [
								{
									"name": "memPtr",
									"nodeType": "YulTypedName",
									"src": "10273:6:13",
									"type": ""
								}
							],
							"src": "10175:233:13"
						},
						{
							"body": {
								"nodeType": "YulBlock",
								"src": "10560:220:13",
								"statements": [
									{
										"nodeType": "YulAssignment",
										"src": "10570:74:13",
										"value": {
											"arguments": [
												{
													"name": "pos",
													"nodeType": "YulIdentifier",
													"src": "10636:3:13"
												},
												{
													"kind": "number",
													"nodeType": "YulLiteral",
													"src": "10641:2:13",
													"type": "",
													"value": "46"
												}
											],
											"functionName": {
												"name": "array_storeLengthForEncoding_t_string_memory_ptr_fromStack",
												"nodeType": "YulIdentifier",
												"src": "10577:58:13"
											},
											"nodeType": "YulFunctionCall",
											"src": "10577:67:13"
										},
										"variableNames": [
											{
												"name": "pos",
												"nodeType": "YulIdentifier",
												"src": "10570:3:13"
											}
										]
									},
									{
										"expression": {
											"arguments": [
												{
													"name": "pos",
													"nodeType": "YulIdentifier",
													"src": "10742:3:13"
												}
											],
											"functionName": {
												"name": "store_literal_in_memory_f9557d505c8bd41bfb57feb435c00f2fd7e4e4f41b7d53b93742c0a537d5aa0f",
												"nodeType": "YulIdentifier",
												"src": "10653:88:13"
											},
											"nodeType": "YulFunctionCall",
											"src": "10653:93:13"
										},
										"nodeType": "YulExpressionStatement",
										"src": "10653:93:13"
									},
									{
										"nodeType": "YulAssignment",
										"src": "10755:19:13",
										"value": {
											"arguments": [
												{
													"name": "pos",
													"nodeType": "YulIdentifier",
													"src": "10766:3:13"
												},
												{
													"kind": "number",
													"nodeType": "YulLiteral",
													"src": "10771:2:13",
													"type": "",
													"value": "64"
												}
											],
											"functionName": {
												"name": "add",
												"nodeType": "YulIdentifier",
												"src": "10762:3:13"
											},
											"nodeType": "YulFunctionCall",
											"src": "10762:12:13"
										},
										"variableNames": [
											{
												"name": "end",
												"nodeType": "YulIdentifier",
												"src": "10755:3:13"
											}
										]
									}
								]
							},
							"name": "abi_encode_t_stringliteral_f9557d505c8bd41bfb57feb435c00f2fd7e4e4f41b7d53b93742c0a537d5aa0f_to_t_string_memory_ptr_fromStack",
							"nodeType": "YulFunctionDefinition",
							"parameters": [
								{
									"name": "pos",
									"nodeType": "YulTypedName",
									"src": "10548:3:13",
									"type": ""
								}
							],
							"returnVariables": [
								{
									"name": "end",
									"nodeType": "YulTypedName",
									"src": "10556:3:13",
									"type": ""
								}
							],
							"src": "10414:366:13"
						},
						{
							"body": {
								"nodeType": "YulBlock",
								"src": "10957:248:13",
								"statements": [
									{
										"nodeType": "YulAssignment",
										"src": "10967:26:13",
										"value": {
											"arguments": [
												{
													"name": "headStart",
													"nodeType": "YulIdentifier",
													"src": "10979:9:13"
												},
												{
													"kind": "number",
													"nodeType": "YulLiteral",
													"src": "10990:2:13",
													"type": "",
													"value": "32"
												}
											],
											"functionName": {
												"name": "add",
												"nodeType": "YulIdentifier",
												"src": "10975:3:13"
											},
											"nodeType": "YulFunctionCall",
											"src": "10975:18:13"
										},
										"variableNames": [
											{
												"name": "tail",
												"nodeType": "YulIdentifier",
												"src": "10967:4:13"
											}
										]
									},
									{
										"expression": {
											"arguments": [
												{
													"arguments": [
														{
															"name": "headStart",
															"nodeType": "YulIdentifier",
															"src": "11014:9:13"
														},
														{
															"kind": "number",
															"nodeType": "YulLiteral",
															"src": "11025:1:13",
															"type": "",
															"value": "0"
														}
													],
													"functionName": {
														"name": "add",
														"nodeType": "YulIdentifier",
														"src": "11010:3:13"
													},
													"nodeType": "YulFunctionCall",
													"src": "11010:17:13"
												},
												{
													"arguments": [
														{
															"name": "tail",
															"nodeType": "YulIdentifier",
															"src": "11033:4:13"
														},
														{
															"name": "headStart",
															"nodeType": "YulIdentifier",
															"src": "11039:9:13"
														}
													],
													"functionName": {
														"name": "sub",
														"nodeType": "YulIdentifier",
														"src": "11029:3:13"
													},
													"nodeType": "YulFunctionCall",
													"src": "11029:20:13"
												}
											],
											"functionName": {
												"name": "mstore",
												"nodeType": "YulIdentifier",
												"src": "11003:6:13"
											},
											"nodeType": "YulFunctionCall",
											"src": "11003:47:13"
										},
										"nodeType": "YulExpressionStatement",
										"src": "11003:47:13"
									},
									{
										"nodeType": "YulAssignment",
										"src": "11059:139:13",
										"value": {
											"arguments": [
												{
													"name": "tail",
													"nodeType": "YulIdentifier",
													"src": "11193:4:13"
												}
											],
											"functionName": {
												"name": "abi_encode_t_stringliteral_f9557d505c8bd41bfb57feb435c00f2fd7e4e4f41b7d53b93742c0a537d5aa0f_to_t_string_memory_ptr_fromStack",
												"nodeType": "YulIdentifier",
												"src": "11067:124:13"
											},
											"nodeType": "YulFunctionCall",
											"src": "11067:131:13"
										},
										"variableNames": [
											{
												"name": "tail",
												"nodeType": "YulIdentifier",
												"src": "11059:4:13"
											}
										]
									}
								]
							},
							"name": "abi_encode_tuple_t_stringliteral_f9557d505c8bd41bfb57feb435c00f2fd7e4e4f41b7d53b93742c0a537d5aa0f__to_t_string_memory_ptr__fromStack_reversed",
							"nodeType": "YulFunctionDefinition",
							"parameters": [
								{
									"name": "headStart",
									"nodeType": "YulTypedName",
									"src": "10937:9:13",
									"type": ""
								}
							],
							"returnVariables": [
								{
									"name": "tail",
									"nodeType": "YulTypedName",
									"src": "10952:4:13",
									"type": ""
								}
							],
							"src": "10786:419:13"
						},
						{
							"body": {
								"nodeType": "YulBlock",
								"src": "11274:80:13",
								"statements": [
									{
										"nodeType": "YulAssignment",
										"src": "11284:22:13",
										"value": {
											"arguments": [
												{
													"name": "offset",
													"nodeType": "YulIdentifier",
													"src": "11299:6:13"
												}
											],
											"functionName": {
												"name": "mload",
												"nodeType": "YulIdentifier",
												"src": "11293:5:13"
											},
											"nodeType": "YulFunctionCall",
											"src": "11293:13:13"
										},
										"variableNames": [
											{
												"name": "value",
												"nodeType": "YulIdentifier",
												"src": "11284:5:13"
											}
										]
									},
									{
										"expression": {
											"arguments": [
												{
													"name": "value",
													"nodeType": "YulIdentifier",
													"src": "11342:5:13"
												}
											],
											"functionName": {
												"name": "validator_revert_t_uint256",
												"nodeType": "YulIdentifier",
												"src": "11315:26:13"
											},
											"nodeType": "YulFunctionCall",
											"src": "11315:33:13"
										},
										"nodeType": "YulExpressionStatement",
										"src": "11315:33:13"
									}
								]
							},
							"name": "abi_decode_t_uint256_fromMemory",
							"nodeType": "YulFunctionDefinition",
							"parameters": [
								{
									"name": "offset",
									"nodeType": "YulTypedName",
									"src": "11252:6:13",
									"type": ""
								},
								{
									"name": "end",
									"nodeType": "YulTypedName",
									"src": "11260:3:13",
									"type": ""
								}
							],
							"returnVariables": [
								{
									"name": "value",
									"nodeType": "YulTypedName",
									"src": "11268:5:13",
									"type": ""
								}
							],
							"src": "11211:143:13"
						},
						{
							"body": {
								"nodeType": "YulBlock",
								"src": "11437:274:13",
								"statements": [
									{
										"body": {
											"nodeType": "YulBlock",
											"src": "11483:83:13",
											"statements": [
												{
													"expression": {
														"arguments": [],
														"functionName": {
															"name": "revert_error_dbdddcbe895c83990c08b3492a0e83918d802a52331272ac6fdb6a7c4aea3b1b",
															"nodeType": "YulIdentifier",
															"src": "11485:77:13"
														},
														"nodeType": "YulFunctionCall",
														"src": "11485:79:13"
													},
													"nodeType": "YulExpressionStatement",
													"src": "11485:79:13"
												}
											]
										},
										"condition": {
											"arguments": [
												{
													"arguments": [
														{
															"name": "dataEnd",
															"nodeType": "YulIdentifier",
															"src": "11458:7:13"
														},
														{
															"name": "headStart",
															"nodeType": "YulIdentifier",
															"src": "11467:9:13"
														}
													],
													"functionName": {
														"name": "sub",
														"nodeType": "YulIdentifier",
														"src": "11454:3:13"
													},
													"nodeType": "YulFunctionCall",
													"src": "11454:23:13"
												},
												{
													"kind": "number",
													"nodeType": "YulLiteral",
													"src": "11479:2:13",
													"type": "",
													"value": "32"
												}
											],
											"functionName": {
												"name": "slt",
												"nodeType": "YulIdentifier",
												"src": "11450:3:13"
											},
											"nodeType": "YulFunctionCall",
											"src": "11450:32:13"
										},
										"nodeType": "YulIf",
										"src": "11447:119:13"
									},
									{
										"nodeType": "YulBlock",
										"src": "11576:128:13",
										"statements": [
											{
												"nodeType": "YulVariableDeclaration",
												"src": "11591:15:13",
												"value": {
													"kind": "number",
													"nodeType": "YulLiteral",
													"src": "11605:1:13",
													"type": "",
													"value": "0"
												},
												"variables": [
													{
														"name": "offset",
														"nodeType": "YulTypedName",
														"src": "11595:6:13",
														"type": ""
													}
												]
											},
											{
												"nodeType": "YulAssignment",
												"src": "11620:74:13",
												"value": {
													"arguments": [
														{
															"arguments": [
																{
																	"name": "headStart",
																	"nodeType": "YulIdentifier",
																	"src": "11666:9:13"
																},
																{
																	"name": "offset",
																	"nodeType": "YulIdentifier",
																	"src": "11677:6:13"
																}
															],
															"functionName": {
																"name": "add",
																"nodeType": "YulIdentifier",
																"src": "11662:3:13"
															},
															"nodeType": "YulFunctionCall",
															"src": "11662:22:13"
														},
														{
															"name": "dataEnd",
															"nodeType": "YulIdentifier",
															"src": "11686:7:13"
														}
													],
													"functionName": {
														"name": "abi_decode_t_uint256_fromMemory",
														"nodeType": "YulIdentifier",
														"src": "11630:31:13"
													},
													"nodeType": "YulFunctionCall",
													"src": "11630:64:13"
												},
												"variableNames": [
													{
														"name": "value0",
														"nodeType": "YulIdentifier",
														"src": "11620:6:13"
													}
												]
											}
										]
									}
								]
							},
							"name": "abi_decode_tuple_t_uint256_fromMemory",
							"nodeType": "YulFunctionDefinition",
							"parameters": [
								{
									"name": "headStart",
									"nodeType": "YulTypedName",
									"src": "11407:9:13",
									"type": ""
								},
								{
									"name": "dataEnd",
									"nodeType": "YulTypedName",
									"src": "11418:7:13",
									"type": ""
								}
							],
							"returnVariables": [
								{
									"name": "value0",
									"nodeType": "YulTypedName",
									"src": "11430:6:13",
									"type": ""
								}
							],
							"src": "11360:351:13"
						},
						{
							"body": {
								"nodeType": "YulBlock",
								"src": "11847:619:13",
								"statements": [
									{
										"nodeType": "YulAssignment",
										"src": "11857:90:13",
										"value": {
											"arguments": [
												{
													"arguments": [
														{
															"name": "length",
															"nodeType": "YulIdentifier",
															"src": "11939:6:13"
														}
													],
													"functionName": {
														"name": "array_allocation_size_t_array$_t_uint256_$dyn_memory_ptr",
														"nodeType": "YulIdentifier",
														"src": "11882:56:13"
													},
													"nodeType": "YulFunctionCall",
													"src": "11882:64:13"
												}
											],
											"functionName": {
												"name": "allocate_memory",
												"nodeType": "YulIdentifier",
												"src": "11866:15:13"
											},
											"nodeType": "YulFunctionCall",
											"src": "11866:81:13"
										},
										"variableNames": [
											{
												"name": "array",
												"nodeType": "YulIdentifier",
												"src": "11857:5:13"
											}
										]
									},
									{
										"nodeType": "YulVariableDeclaration",
										"src": "11956:16:13",
										"value": {
											"name": "array",
											"nodeType": "YulIdentifier",
											"src": "11967:5:13"
										},
										"variables": [
											{
												"name": "dst",
												"nodeType": "YulTypedName",
												"src": "11960:3:13",
												"type": ""
											}
										]
									},
									{
										"expression": {
											"arguments": [
												{
													"name": "array",
													"nodeType": "YulIdentifier",
													"src": "11989:5:13"
												},
												{
													"name": "length",
													"nodeType": "YulIdentifier",
													"src": "11996:6:13"
												}
											],
											"functionName": {
												"name": "mstore",
												"nodeType": "YulIdentifier",
												"src": "11982:6:13"
											},
											"nodeType": "YulFunctionCall",
											"src": "11982:21:13"
										},
										"nodeType": "YulExpressionStatement",
										"src": "11982:21:13"
									},
									{
										"nodeType": "YulAssignment",
										"src": "12012:23:13",
										"value": {
											"arguments": [
												{
													"name": "array",
													"nodeType": "YulIdentifier",
													"src": "12023:5:13"
												},
												{
													"kind": "number",
													"nodeType": "YulLiteral",
													"src": "12030:4:13",
													"type": "",
													"value": "0x20"
												}
											],
											"functionName": {
												"name": "add",
												"nodeType": "YulIdentifier",
												"src": "12019:3:13"
											},
											"nodeType": "YulFunctionCall",
											"src": "12019:16:13"
										},
										"variableNames": [
											{
												"name": "dst",
												"nodeType": "YulIdentifier",
												"src": "12012:3:13"
											}
										]
									},
									{
										"nodeType": "YulVariableDeclaration",
										"src": "12045:44:13",
										"value": {
											"arguments": [
												{
													"name": "offset",
													"nodeType": "YulIdentifier",
													"src": "12063:6:13"
												},
												{
													"arguments": [
														{
															"name": "length",
															"nodeType": "YulIdentifier",
															"src": "12075:6:13"
														},
														{
															"kind": "number",
															"nodeType": "YulLiteral",
															"src": "12083:4:13",
															"type": "",
															"value": "0x20"
														}
													],
													"functionName": {
														"name": "mul",
														"nodeType": "YulIdentifier",
														"src": "12071:3:13"
													},
													"nodeType": "YulFunctionCall",
													"src": "12071:17:13"
												}
											],
											"functionName": {
												"name": "add",
												"nodeType": "YulIdentifier",
												"src": "12059:3:13"
											},
											"nodeType": "YulFunctionCall",
											"src": "12059:30:13"
										},
										"variables": [
											{
												"name": "srcEnd",
												"nodeType": "YulTypedName",
												"src": "12049:6:13",
												"type": ""
											}
										]
									},
									{
										"body": {
											"nodeType": "YulBlock",
											"src": "12117:103:13",
											"statements": [
												{
													"expression": {
														"arguments": [],
														"functionName": {
															"name": "revert_error_81385d8c0b31fffe14be1da910c8bd3a80be4cfa248e04f42ec0faea3132a8ef",
															"nodeType": "YulIdentifier",
															"src": "12131:77:13"
														},
														"nodeType": "YulFunctionCall",
														"src": "12131:79:13"
													},
													"nodeType": "YulExpressionStatement",
													"src": "12131:79:13"
												}
											]
										},
										"condition": {
											"arguments": [
												{
													"name": "srcEnd",
													"nodeType": "YulIdentifier",
													"src": "12104:6:13"
												},
												{
													"name": "end",
													"nodeType": "YulIdentifier",
													"src": "12112:3:13"
												}
											],
											"functionName": {
												"name": "gt",
												"nodeType": "YulIdentifier",
												"src": "12101:2:13"
											},
											"nodeType": "YulFunctionCall",
											"src": "12101:15:13"
										},
										"nodeType": "YulIf",
										"src": "12098:122:13"
									},
									{
										"body": {
											"nodeType": "YulBlock",
											"src": "12305:155:13",
											"statements": [
												{
													"nodeType": "YulVariableDeclaration",
													"src": "12320:21:13",
													"value": {
														"name": "src",
														"nodeType": "YulIdentifier",
														"src": "12338:3:13"
													},
													"variables": [
														{
															"name": "elementPos",
															"nodeType": "YulTypedName",
															"src": "12324:10:13",
															"type": ""
														}
													]
												},
												{
													"expression": {
														"arguments": [
															{
																"name": "dst",
																"nodeType": "YulIdentifier",
																"src": "12362:3:13"
															},
															{
																"arguments": [
																	{
																		"name": "elementPos",
																		"nodeType": "YulIdentifier",
																		"src": "12399:10:13"
																	},
																	{
																		"name": "end",
																		"nodeType": "YulIdentifier",
																		"src": "12411:3:13"
																	}
																],
																"functionName": {
																	"name": "abi_decode_t_uint256_fromMemory",
																	"nodeType": "YulIdentifier",
																	"src": "12367:31:13"
																},
																"nodeType": "YulFunctionCall",
																"src": "12367:48:13"
															}
														],
														"functionName": {
															"name": "mstore",
															"nodeType": "YulIdentifier",
															"src": "12355:6:13"
														},
														"nodeType": "YulFunctionCall",
														"src": "12355:61:13"
													},
													"nodeType": "YulExpressionStatement",
													"src": "12355:61:13"
												},
												{
													"nodeType": "YulAssignment",
													"src": "12429:21:13",
													"value": {
														"arguments": [
															{
																"name": "dst",
																"nodeType": "YulIdentifier",
																"src": "12440:3:13"
															},
															{
																"kind": "number",
																"nodeType": "YulLiteral",
																"src": "12445:4:13",
																"type": "",
																"value": "0x20"
															}
														],
														"functionName": {
															"name": "add",
															"nodeType": "YulIdentifier",
															"src": "12436:3:13"
														},
														"nodeType": "YulFunctionCall",
														"src": "12436:14:13"
													},
													"variableNames": [
														{
															"name": "dst",
															"nodeType": "YulIdentifier",
															"src": "12429:3:13"
														}
													]
												}
											]
										},
										"condition": {
											"arguments": [
												{
													"name": "src",
													"nodeType": "YulIdentifier",
													"src": "12258:3:13"
												},
												{
													"name": "srcEnd",
													"nodeType": "YulIdentifier",
													"src": "12263:6:13"
												}
											],
											"functionName": {
												"name": "lt",
												"nodeType": "YulIdentifier",
												"src": "12255:2:13"
											},
											"nodeType": "YulFunctionCall",
											"src": "12255:15:13"
										},
										"nodeType": "YulForLoop",
										"post": {
											"nodeType": "YulBlock",
											"src": "12271:25:13",
											"statements": [
												{
													"nodeType": "YulAssignment",
													"src": "12273:21:13",
													"value": {
														"arguments": [
															{
																"name": "src",
																"nodeType": "YulIdentifier",
																"src": "12284:3:13"
															},
															{
																"kind": "number",
																"nodeType": "YulLiteral",
																"src": "12289:4:13",
																"type": "",
																"value": "0x20"
															}
														],
														"functionName": {
															"name": "add",
															"nodeType": "YulIdentifier",
															"src": "12280:3:13"
														},
														"nodeType": "YulFunctionCall",
														"src": "12280:14:13"
													},
													"variableNames": [
														{
															"name": "src",
															"nodeType": "YulIdentifier",
															"src": "12273:3:13"
														}
													]
												}
											]
										},
										"pre": {
											"nodeType": "YulBlock",
											"src": "12233:21:13",
											"statements": [
												{
													"nodeType": "YulVariableDeclaration",
													"src": "12235:17:13",
													"value": {
														"name": "offset",
														"nodeType": "YulIdentifier",
														"src": "12246:6:13"
													},
													"variables": [
														{
															"name": "src",
															"nodeType": "YulTypedName",
															"src": "12239:3:13",
															"type": ""
														}
													]
												}
											]
										},
										"src": "12229:231:13"
									}
								]
							},
							"name": "abi_decode_available_length_t_array$_t_uint256_$dyn_memory_ptr_fromMemory",
							"nodeType": "YulFunctionDefinition",
							"parameters": [
								{
									"name": "offset",
									"nodeType": "YulTypedName",
									"src": "11817:6:13",
									"type": ""
								},
								{
									"name": "length",
									"nodeType": "YulTypedName",
									"src": "11825:6:13",
									"type": ""
								},
								{
									"name": "end",
									"nodeType": "YulTypedName",
									"src": "11833:3:13",
									"type": ""
								}
							],
							"returnVariables": [
								{
									"name": "array",
									"nodeType": "YulTypedName",
									"src": "11841:5:13",
									"type": ""
								}
							],
							"src": "11734:732:13"
						},
						{
							"body": {
								"nodeType": "YulBlock",
								"src": "12577:297:13",
								"statements": [
									{
										"body": {
											"nodeType": "YulBlock",
											"src": "12626:83:13",
											"statements": [
												{
													"expression": {
														"arguments": [],
														"functionName": {
															"name": "revert_error_1b9f4a0a5773e33b91aa01db23bf8c55fce1411167c872835e7fa00a4f17d46d",
															"nodeType": "YulIdentifier",
															"src": "12628:77:13"
														},
														"nodeType": "YulFunctionCall",
														"src": "12628:79:13"
													},
													"nodeType": "YulExpressionStatement",
													"src": "12628:79:13"
												}
											]
										},
										"condition": {
											"arguments": [
												{
													"arguments": [
														{
															"arguments": [
																{
																	"name": "offset",
																	"nodeType": "YulIdentifier",
																	"src": "12605:6:13"
																},
																{
																	"kind": "number",
																	"nodeType": "YulLiteral",
																	"src": "12613:4:13",
																	"type": "",
																	"value": "0x1f"
																}
															],
															"functionName": {
																"name": "add",
																"nodeType": "YulIdentifier",
																"src": "12601:3:13"
															},
															"nodeType": "YulFunctionCall",
															"src": "12601:17:13"
														},
														{
															"name": "end",
															"nodeType": "YulIdentifier",
															"src": "12620:3:13"
														}
													],
													"functionName": {
														"name": "slt",
														"nodeType": "YulIdentifier",
														"src": "12597:3:13"
													},
													"nodeType": "YulFunctionCall",
													"src": "12597:27:13"
												}
											],
											"functionName": {
												"name": "iszero",
												"nodeType": "YulIdentifier",
												"src": "12590:6:13"
											},
											"nodeType": "YulFunctionCall",
											"src": "12590:35:13"
										},
										"nodeType": "YulIf",
										"src": "12587:122:13"
									},
									{
										"nodeType": "YulVariableDeclaration",
										"src": "12718:27:13",
										"value": {
											"arguments": [
												{
													"name": "offset",
													"nodeType": "YulIdentifier",
													"src": "12738:6:13"
												}
											],
											"functionName": {
												"name": "mload",
												"nodeType": "YulIdentifier",
												"src": "12732:5:13"
											},
											"nodeType": "YulFunctionCall",
											"src": "12732:13:13"
										},
										"variables": [
											{
												"name": "length",
												"nodeType": "YulTypedName",
												"src": "12722:6:13",
												"type": ""
											}
										]
									},
									{
										"nodeType": "YulAssignment",
										"src": "12754:114:13",
										"value": {
											"arguments": [
												{
													"arguments": [
														{
															"name": "offset",
															"nodeType": "YulIdentifier",
															"src": "12841:6:13"
														},
														{
															"kind": "number",
															"nodeType": "YulLiteral",
															"src": "12849:4:13",
															"type": "",
															"value": "0x20"
														}
													],
													"functionName": {
														"name": "add",
														"nodeType": "YulIdentifier",
														"src": "12837:3:13"
													},
													"nodeType": "YulFunctionCall",
													"src": "12837:17:13"
												},
												{
													"name": "length",
													"nodeType": "YulIdentifier",
													"src": "12856:6:13"
												},
												{
													"name": "end",
													"nodeType": "YulIdentifier",
													"src": "12864:3:13"
												}
											],
											"functionName": {
												"name": "abi_decode_available_length_t_array$_t_uint256_$dyn_memory_ptr_fromMemory",
												"nodeType": "YulIdentifier",
												"src": "12763:73:13"
											},
											"nodeType": "YulFunctionCall",
											"src": "12763:105:13"
										},
										"variableNames": [
											{
												"name": "array",
												"nodeType": "YulIdentifier",
												"src": "12754:5:13"
											}
										]
									}
								]
							},
							"name": "abi_decode_t_array$_t_uint256_$dyn_memory_ptr_fromMemory",
							"nodeType": "YulFunctionDefinition",
							"parameters": [
								{
									"name": "offset",
									"nodeType": "YulTypedName",
									"src": "12555:6:13",
									"type": ""
								},
								{
									"name": "end",
									"nodeType": "YulTypedName",
									"src": "12563:3:13",
									"type": ""
								}
							],
							"returnVariables": [
								{
									"name": "array",
									"nodeType": "YulTypedName",
									"src": "12571:5:13",
									"type": ""
								}
							],
							"src": "12489:385:13"
						},
						{
							"body": {
								"nodeType": "YulBlock",
								"src": "12982:452:13",
								"statements": [
									{
										"body": {
											"nodeType": "YulBlock",
											"src": "13028:83:13",
											"statements": [
												{
													"expression": {
														"arguments": [],
														"functionName": {
															"name": "revert_error_dbdddcbe895c83990c08b3492a0e83918d802a52331272ac6fdb6a7c4aea3b1b",
															"nodeType": "YulIdentifier",
															"src": "13030:77:13"
														},
														"nodeType": "YulFunctionCall",
														"src": "13030:79:13"
													},
													"nodeType": "YulExpressionStatement",
													"src": "13030:79:13"
												}
											]
										},
										"condition": {
											"arguments": [
												{
													"arguments": [
														{
															"name": "dataEnd",
															"nodeType": "YulIdentifier",
															"src": "13003:7:13"
														},
														{
															"name": "headStart",
															"nodeType": "YulIdentifier",
															"src": "13012:9:13"
														}
													],
													"functionName": {
														"name": "sub",
														"nodeType": "YulIdentifier",
														"src": "12999:3:13"
													},
													"nodeType": "YulFunctionCall",
													"src": "12999:23:13"
												},
												{
													"kind": "number",
													"nodeType": "YulLiteral",
													"src": "13024:2:13",
													"type": "",
													"value": "32"
												}
											],
											"functionName": {
												"name": "slt",
												"nodeType": "YulIdentifier",
												"src": "12995:3:13"
											},
											"nodeType": "YulFunctionCall",
											"src": "12995:32:13"
										},
										"nodeType": "YulIf",
										"src": "12992:119:13"
									},
									{
										"nodeType": "YulBlock",
										"src": "13121:306:13",
										"statements": [
											{
												"nodeType": "YulVariableDeclaration",
												"src": "13136:38:13",
												"value": {
													"arguments": [
														{
															"arguments": [
																{
																	"name": "headStart",
																	"nodeType": "YulIdentifier",
																	"src": "13160:9:13"
																},
																{
																	"kind": "number",
																	"nodeType": "YulLiteral",
																	"src": "13171:1:13",
																	"type": "",
																	"value": "0"
																}
															],
															"functionName": {
																"name": "add",
																"nodeType": "YulIdentifier",
																"src": "13156:3:13"
															},
															"nodeType": "YulFunctionCall",
															"src": "13156:17:13"
														}
													],
													"functionName": {
														"name": "mload",
														"nodeType": "YulIdentifier",
														"src": "13150:5:13"
													},
													"nodeType": "YulFunctionCall",
													"src": "13150:24:13"
												},
												"variables": [
													{
														"name": "offset",
														"nodeType": "YulTypedName",
														"src": "13140:6:13",
														"type": ""
													}
												]
											},
											{
												"body": {
													"nodeType": "YulBlock",
													"src": "13221:83:13",
													"statements": [
														{
															"expression": {
																"arguments": [],
																"functionName": {
																	"name": "revert_error_c1322bf8034eace5e0b5c7295db60986aa89aae5e0ea0873e4689e076861a5db",
																	"nodeType": "YulIdentifier",
																	"src": "13223:77:13"
																},
																"nodeType": "YulFunctionCall",
																"src": "13223:79:13"
															},
															"nodeType": "YulExpressionStatement",
															"src": "13223:79:13"
														}
													]
												},
												"condition": {
													"arguments": [
														{
															"name": "offset",
															"nodeType": "YulIdentifier",
															"src": "13193:6:13"
														},
														{
															"kind": "number",
															"nodeType": "YulLiteral",
															"src": "13201:18:13",
															"type": "",
															"value": "0xffffffffffffffff"
														}
													],
													"functionName": {
														"name": "gt",
														"nodeType": "YulIdentifier",
														"src": "13190:2:13"
													},
													"nodeType": "YulFunctionCall",
													"src": "13190:30:13"
												},
												"nodeType": "YulIf",
												"src": "13187:117:13"
											},
											{
												"nodeType": "YulAssignment",
												"src": "13318:99:13",
												"value": {
													"arguments": [
														{
															"arguments": [
																{
																	"name": "headStart",
																	"nodeType": "YulIdentifier",
																	"src": "13389:9:13"
																},
																{
																	"name": "offset",
																	"nodeType": "YulIdentifier",
																	"src": "13400:6:13"
																}
															],
															"functionName": {
																"name": "add",
																"nodeType": "YulIdentifier",
																"src": "13385:3:13"
															},
															"nodeType": "YulFunctionCall",
															"src": "13385:22:13"
														},
														{
															"name": "dataEnd",
															"nodeType": "YulIdentifier",
															"src": "13409:7:13"
														}
													],
													"functionName": {
														"name": "abi_decode_t_array$_t_uint256_$dyn_memory_ptr_fromMemory",
														"nodeType": "YulIdentifier",
														"src": "13328:56:13"
													},
													"nodeType": "YulFunctionCall",
													"src": "13328:89:13"
												},
												"variableNames": [
													{
														"name": "value0",
														"nodeType": "YulIdentifier",
														"src": "13318:6:13"
													}
												]
											}
										]
									}
								]
							},
							"name": "abi_decode_tuple_t_array$_t_uint256_$dyn_memory_ptr_fromMemory",
							"nodeType": "YulFunctionDefinition",
							"parameters": [
								{
									"name": "headStart",
									"nodeType": "YulTypedName",
									"src": "12952:9:13",
									"type": ""
								},
								{
									"name": "dataEnd",
									"nodeType": "YulTypedName",
									"src": "12963:7:13",
									"type": ""
								}
							],
							"returnVariables": [
								{
									"name": "value0",
									"nodeType": "YulTypedName",
									"src": "12975:6:13",
									"type": ""
								}
							],
							"src": "12880:554:13"
						},
						{
							"body": {
								"nodeType": "YulBlock",
								"src": "13546:123:13",
								"statements": [
									{
										"expression": {
											"arguments": [
												{
													"arguments": [
														{
															"name": "memPtr",
															"nodeType": "YulIdentifier",
															"src": "13568:6:13"
														},
														{
															"kind": "number",
															"nodeType": "YulLiteral",
															"src": "13576:1:13",
															"type": "",
															"value": "0"
														}
													],
													"functionName": {
														"name": "add",
														"nodeType": "YulIdentifier",
														"src": "13564:3:13"
													},
													"nodeType": "YulFunctionCall",
													"src": "13564:14:13"
												},
												{
													"hexValue": "5661756c7420616c72656164792065786973747320666f722074686973204e46",
													"kind": "string",
													"nodeType": "YulLiteral",
													"src": "13580:34:13",
													"type": "",
													"value": "Vault already exists for this NF"
												}
											],
											"functionName": {
												"name": "mstore",
												"nodeType": "YulIdentifier",
												"src": "13557:6:13"
											},
											"nodeType": "YulFunctionCall",
											"src": "13557:58:13"
										},
										"nodeType": "YulExpressionStatement",
										"src": "13557:58:13"
									},
									{
										"expression": {
											"arguments": [
												{
													"arguments": [
														{
															"name": "memPtr",
															"nodeType": "YulIdentifier",
															"src": "13636:6:13"
														},
														{
															"kind": "number",
															"nodeType": "YulLiteral",
															"src": "13644:2:13",
															"type": "",
															"value": "32"
														}
													],
													"functionName": {
														"name": "add",
														"nodeType": "YulIdentifier",
														"src": "13632:3:13"
													},
													"nodeType": "YulFunctionCall",
													"src": "13632:15:13"
												},
												{
													"hexValue": "5420636f6e7472616374",
													"kind": "string",
													"nodeType": "YulLiteral",
													"src": "13649:12:13",
													"type": "",
													"value": "T contract"
												}
											],
											"functionName": {
												"name": "mstore",
												"nodeType": "YulIdentifier",
												"src": "13625:6:13"
											},
											"nodeType": "YulFunctionCall",
											"src": "13625:37:13"
										},
										"nodeType": "YulExpressionStatement",
										"src": "13625:37:13"
									}
								]
							},
							"name": "store_literal_in_memory_5824732942b65793939b349ae446a33529c5efa78f9adc0aff8550635fa44b27",
							"nodeType": "YulFunctionDefinition",
							"parameters": [
								{
									"name": "memPtr",
									"nodeType": "YulTypedName",
									"src": "13538:6:13",
									"type": ""
								}
							],
							"src": "13440:229:13"
						},
						{
							"body": {
								"nodeType": "YulBlock",
								"src": "13821:220:13",
								"statements": [
									{
										"nodeType": "YulAssignment",
										"src": "13831:74:13",
										"value": {
											"arguments": [
												{
													"name": "pos",
													"nodeType": "YulIdentifier",
													"src": "13897:3:13"
												},
												{
													"kind": "number",
													"nodeType": "YulLiteral",
													"src": "13902:2:13",
													"type": "",
													"value": "42"
												}
											],
											"functionName": {
												"name": "array_storeLengthForEncoding_t_string_memory_ptr_fromStack",
												"nodeType": "YulIdentifier",
												"src": "13838:58:13"
											},
											"nodeType": "YulFunctionCall",
											"src": "13838:67:13"
										},
										"variableNames": [
											{
												"name": "pos",
												"nodeType": "YulIdentifier",
												"src": "13831:3:13"
											}
										]
									},
									{
										"expression": {
											"arguments": [
												{
													"name": "pos",
													"nodeType": "YulIdentifier",
													"src": "14003:3:13"
												}
											],
											"functionName": {
												"name": "store_literal_in_memory_5824732942b65793939b349ae446a33529c5efa78f9adc0aff8550635fa44b27",
												"nodeType": "YulIdentifier",
												"src": "13914:88:13"
											},
											"nodeType": "YulFunctionCall",
											"src": "13914:93:13"
										},
										"nodeType": "YulExpressionStatement",
										"src": "13914:93:13"
									},
									{
										"nodeType": "YulAssignment",
										"src": "14016:19:13",
										"value": {
											"arguments": [
												{
													"name": "pos",
													"nodeType": "YulIdentifier",
													"src": "14027:3:13"
												},
												{
													"kind": "number",
													"nodeType": "YulLiteral",
													"src": "14032:2:13",
													"type": "",
													"value": "64"
												}
											],
											"functionName": {
												"name": "add",
												"nodeType": "YulIdentifier",
												"src": "14023:3:13"
											},
											"nodeType": "YulFunctionCall",
											"src": "14023:12:13"
										},
										"variableNames": [
											{
												"name": "end",
												"nodeType": "YulIdentifier",
												"src": "14016:3:13"
											}
										]
									}
								]
							},
							"name": "abi_encode_t_stringliteral_5824732942b65793939b349ae446a33529c5efa78f9adc0aff8550635fa44b27_to_t_string_memory_ptr_fromStack",
							"nodeType": "YulFunctionDefinition",
							"parameters": [
								{
									"name": "pos",
									"nodeType": "YulTypedName",
									"src": "13809:3:13",
									"type": ""
								}
							],
							"returnVariables": [
								{
									"name": "end",
									"nodeType": "YulTypedName",
									"src": "13817:3:13",
									"type": ""
								}
							],
							"src": "13675:366:13"
						},
						{
							"body": {
								"nodeType": "YulBlock",
								"src": "14218:248:13",
								"statements": [
									{
										"nodeType": "YulAssignment",
										"src": "14228:26:13",
										"value": {
											"arguments": [
												{
													"name": "headStart",
													"nodeType": "YulIdentifier",
													"src": "14240:9:13"
												},
												{
													"kind": "number",
													"nodeType": "YulLiteral",
													"src": "14251:2:13",
													"type": "",
													"value": "32"
												}
											],
											"functionName": {
												"name": "add",
												"nodeType": "YulIdentifier",
												"src": "14236:3:13"
											},
											"nodeType": "YulFunctionCall",
											"src": "14236:18:13"
										},
										"variableNames": [
											{
												"name": "tail",
												"nodeType": "YulIdentifier",
												"src": "14228:4:13"
											}
										]
									},
									{
										"expression": {
											"arguments": [
												{
													"arguments": [
														{
															"name": "headStart",
															"nodeType": "YulIdentifier",
															"src": "14275:9:13"
														},
														{
															"kind": "number",
															"nodeType": "YulLiteral",
															"src": "14286:1:13",
															"type": "",
															"value": "0"
														}
													],
													"functionName": {
														"name": "add",
														"nodeType": "YulIdentifier",
														"src": "14271:3:13"
													},
													"nodeType": "YulFunctionCall",
													"src": "14271:17:13"
												},
												{
													"arguments": [
														{
															"name": "tail",
															"nodeType": "YulIdentifier",
															"src": "14294:4:13"
														},
														{
															"name": "headStart",
															"nodeType": "YulIdentifier",
															"src": "14300:9:13"
														}
													],
													"functionName": {
														"name": "sub",
														"nodeType": "YulIdentifier",
														"src": "14290:3:13"
													},
													"nodeType": "YulFunctionCall",
													"src": "14290:20:13"
												}
											],
											"functionName": {
												"name": "mstore",
												"nodeType": "YulIdentifier",
												"src": "14264:6:13"
											},
											"nodeType": "YulFunctionCall",
											"src": "14264:47:13"
										},
										"nodeType": "YulExpressionStatement",
										"src": "14264:47:13"
									},
									{
										"nodeType": "YulAssignment",
										"src": "14320:139:13",
										"value": {
											"arguments": [
												{
													"name": "tail",
													"nodeType": "YulIdentifier",
													"src": "14454:4:13"
												}
											],
											"functionName": {
												"name": "abi_encode_t_stringliteral_5824732942b65793939b349ae446a33529c5efa78f9adc0aff8550635fa44b27_to_t_string_memory_ptr_fromStack",
												"nodeType": "YulIdentifier",
												"src": "14328:124:13"
											},
											"nodeType": "YulFunctionCall",
											"src": "14328:131:13"
										},
										"variableNames": [
											{
												"name": "tail",
												"nodeType": "YulIdentifier",
												"src": "14320:4:13"
											}
										]
									}
								]
							},
							"name": "abi_encode_tuple_t_stringliteral_5824732942b65793939b349ae446a33529c5efa78f9adc0aff8550635fa44b27__to_t_string_memory_ptr__fromStack_reversed",
							"nodeType": "YulFunctionDefinition",
							"parameters": [
								{
									"name": "headStart",
									"nodeType": "YulTypedName",
									"src": "14198:9:13",
									"type": ""
								}
							],
							"returnVariables": [
								{
									"name": "tail",
									"nodeType": "YulTypedName",
									"src": "14213:4:13",
									"type": ""
								}
							],
							"src": "14047:419:13"
						},
						{
							"body": {
								"nodeType": "YulBlock",
								"src": "14626:288:13",
								"statements": [
									{
										"nodeType": "YulAssignment",
										"src": "14636:26:13",
										"value": {
											"arguments": [
												{
													"name": "headStart",
													"nodeType": "YulIdentifier",
													"src": "14648:9:13"
												},
												{
													"kind": "number",
													"nodeType": "YulLiteral",
													"src": "14659:2:13",
													"type": "",
													"value": "96"
												}
											],
											"functionName": {
												"name": "add",
												"nodeType": "YulIdentifier",
												"src": "14644:3:13"
											},
											"nodeType": "YulFunctionCall",
											"src": "14644:18:13"
										},
										"variableNames": [
											{
												"name": "tail",
												"nodeType": "YulIdentifier",
												"src": "14636:4:13"
											}
										]
									},
									{
										"expression": {
											"arguments": [
												{
													"name": "value0",
													"nodeType": "YulIdentifier",
													"src": "14716:6:13"
												},
												{
													"arguments": [
														{
															"name": "headStart",
															"nodeType": "YulIdentifier",
															"src": "14729:9:13"
														},
														{
															"kind": "number",
															"nodeType": "YulLiteral",
															"src": "14740:1:13",
															"type": "",
															"value": "0"
														}
													],
													"functionName": {
														"name": "add",
														"nodeType": "YulIdentifier",
														"src": "14725:3:13"
													},
													"nodeType": "YulFunctionCall",
													"src": "14725:17:13"
												}
											],
											"functionName": {
												"name": "abi_encode_t_address_to_t_address_fromStack",
												"nodeType": "YulIdentifier",
												"src": "14672:43:13"
											},
											"nodeType": "YulFunctionCall",
											"src": "14672:71:13"
										},
										"nodeType": "YulExpressionStatement",
										"src": "14672:71:13"
									},
									{
										"expression": {
											"arguments": [
												{
													"name": "value1",
													"nodeType": "YulIdentifier",
													"src": "14797:6:13"
												},
												{
													"arguments": [
														{
															"name": "headStart",
															"nodeType": "YulIdentifier",
															"src": "14810:9:13"
														},
														{
															"kind": "number",
															"nodeType": "YulLiteral",
															"src": "14821:2:13",
															"type": "",
															"value": "32"
														}
													],
													"functionName": {
														"name": "add",
														"nodeType": "YulIdentifier",
														"src": "14806:3:13"
													},
													"nodeType": "YulFunctionCall",
													"src": "14806:18:13"
												}
											],
											"functionName": {
												"name": "abi_encode_t_uint256_to_t_uint256_fromStack",
												"nodeType": "YulIdentifier",
												"src": "14753:43:13"
											},
											"nodeType": "YulFunctionCall",
											"src": "14753:72:13"
										},
										"nodeType": "YulExpressionStatement",
										"src": "14753:72:13"
									},
									{
										"expression": {
											"arguments": [
												{
													"name": "value2",
													"nodeType": "YulIdentifier",
													"src": "14879:6:13"
												},
												{
													"arguments": [
														{
															"name": "headStart",
															"nodeType": "YulIdentifier",
															"src": "14892:9:13"
														},
														{
															"kind": "number",
															"nodeType": "YulLiteral",
															"src": "14903:2:13",
															"type": "",
															"value": "64"
														}
													],
													"functionName": {
														"name": "add",
														"nodeType": "YulIdentifier",
														"src": "14888:3:13"
													},
													"nodeType": "YulFunctionCall",
													"src": "14888:18:13"
												}
											],
											"functionName": {
												"name": "abi_encode_t_address_to_t_address_fromStack",
												"nodeType": "YulIdentifier",
												"src": "14835:43:13"
											},
											"nodeType": "YulFunctionCall",
											"src": "14835:72:13"
										},
										"nodeType": "YulExpressionStatement",
										"src": "14835:72:13"
									}
								]
							},
							"name": "abi_encode_tuple_t_address_t_uint256_t_address__to_t_address_t_uint256_t_address__fromStack_reversed",
							"nodeType": "YulFunctionDefinition",
							"parameters": [
								{
									"name": "headStart",
									"nodeType": "YulTypedName",
									"src": "14582:9:13",
									"type": ""
								},
								{
									"name": "value2",
									"nodeType": "YulTypedName",
									"src": "14594:6:13",
									"type": ""
								},
								{
									"name": "value1",
									"nodeType": "YulTypedName",
									"src": "14602:6:13",
									"type": ""
								},
								{
									"name": "value0",
									"nodeType": "YulTypedName",
									"src": "14610:6:13",
									"type": ""
								}
							],
							"returnVariables": [
								{
									"name": "tail",
									"nodeType": "YulTypedName",
									"src": "14621:4:13",
									"type": ""
								}
							],
							"src": "14472:442:13"
						},
						{
							"body": {
								"nodeType": "YulBlock",
								"src": "15074:288:13",
								"statements": [
									{
										"nodeType": "YulAssignment",
										"src": "15084:26:13",
										"value": {
											"arguments": [
												{
													"name": "headStart",
													"nodeType": "YulIdentifier",
													"src": "15096:9:13"
												},
												{
													"kind": "number",
													"nodeType": "YulLiteral",
													"src": "15107:2:13",
													"type": "",
													"value": "96"
												}
											],
											"functionName": {
												"name": "add",
												"nodeType": "YulIdentifier",
												"src": "15092:3:13"
											},
											"nodeType": "YulFunctionCall",
											"src": "15092:18:13"
										},
										"variableNames": [
											{
												"name": "tail",
												"nodeType": "YulIdentifier",
												"src": "15084:4:13"
											}
										]
									},
									{
										"expression": {
											"arguments": [
												{
													"name": "value0",
													"nodeType": "YulIdentifier",
													"src": "15164:6:13"
												},
												{
													"arguments": [
														{
															"name": "headStart",
															"nodeType": "YulIdentifier",
															"src": "15177:9:13"
														},
														{
															"kind": "number",
															"nodeType": "YulLiteral",
															"src": "15188:1:13",
															"type": "",
															"value": "0"
														}
													],
													"functionName": {
														"name": "add",
														"nodeType": "YulIdentifier",
														"src": "15173:3:13"
													},
													"nodeType": "YulFunctionCall",
													"src": "15173:17:13"
												}
											],
											"functionName": {
												"name": "abi_encode_t_uint256_to_t_uint256_fromStack",
												"nodeType": "YulIdentifier",
												"src": "15120:43:13"
											},
											"nodeType": "YulFunctionCall",
											"src": "15120:71:13"
										},
										"nodeType": "YulExpressionStatement",
										"src": "15120:71:13"
									},
									{
										"expression": {
											"arguments": [
												{
													"name": "value1",
													"nodeType": "YulIdentifier",
													"src": "15245:6:13"
												},
												{
													"arguments": [
														{
															"name": "headStart",
															"nodeType": "YulIdentifier",
															"src": "15258:9:13"
														},
														{
															"kind": "number",
															"nodeType": "YulLiteral",
															"src": "15269:2:13",
															"type": "",
															"value": "32"
														}
													],
													"functionName": {
														"name": "add",
														"nodeType": "YulIdentifier",
														"src": "15254:3:13"
													},
													"nodeType": "YulFunctionCall",
													"src": "15254:18:13"
												}
											],
											"functionName": {
												"name": "abi_encode_t_address_to_t_address_fromStack",
												"nodeType": "YulIdentifier",
												"src": "15201:43:13"
											},
											"nodeType": "YulFunctionCall",
											"src": "15201:72:13"
										},
										"nodeType": "YulExpressionStatement",
										"src": "15201:72:13"
									},
									{
										"expression": {
											"arguments": [
												{
													"name": "value2",
													"nodeType": "YulIdentifier",
													"src": "15327:6:13"
												},
												{
													"arguments": [
														{
															"name": "headStart",
															"nodeType": "YulIdentifier",
															"src": "15340:9:13"
														},
														{
															"kind": "number",
															"nodeType": "YulLiteral",
															"src": "15351:2:13",
															"type": "",
															"value": "64"
														}
													],
													"functionName": {
														"name": "add",
														"nodeType": "YulIdentifier",
														"src": "15336:3:13"
													},
													"nodeType": "YulFunctionCall",
													"src": "15336:18:13"
												}
											],
											"functionName": {
												"name": "abi_encode_t_address_to_t_address_fromStack",
												"nodeType": "YulIdentifier",
												"src": "15283:43:13"
											},
											"nodeType": "YulFunctionCall",
											"src": "15283:72:13"
										},
										"nodeType": "YulExpressionStatement",
										"src": "15283:72:13"
									}
								]
							},
							"name": "abi_encode_tuple_t_uint256_t_address_t_address__to_t_uint256_t_address_t_address__fromStack_reversed",
							"nodeType": "YulFunctionDefinition",
							"parameters": [
								{
									"name": "headStart",
									"nodeType": "YulTypedName",
									"src": "15030:9:13",
									"type": ""
								},
								{
									"name": "value2",
									"nodeType": "YulTypedName",
									"src": "15042:6:13",
									"type": ""
								},
								{
									"name": "value1",
									"nodeType": "YulTypedName",
									"src": "15050:6:13",
									"type": ""
								},
								{
									"name": "value0",
									"nodeType": "YulTypedName",
									"src": "15058:6:13",
									"type": ""
								}
							],
							"returnVariables": [
								{
									"name": "tail",
									"nodeType": "YulTypedName",
									"src": "15069:4:13",
									"type": ""
								}
							],
							"src": "14920:442:13"
						},
						{
							"body": {
								"nodeType": "YulBlock",
								"src": "15474:124:13",
								"statements": [
									{
										"expression": {
											"arguments": [
												{
													"arguments": [
														{
															"name": "memPtr",
															"nodeType": "YulIdentifier",
															"src": "15496:6:13"
														},
														{
															"kind": "number",
															"nodeType": "YulLiteral",
															"src": "15504:1:13",
															"type": "",
															"value": "0"
														}
													],
													"functionName": {
														"name": "add",
														"nodeType": "YulIdentifier",
														"src": "15492:3:13"
													},
													"nodeType": "YulFunctionCall",
													"src": "15492:14:13"
												},
												{
													"hexValue": "5661756c7420646f6573206e6f742065786973747320666f722074686973204e",
													"kind": "string",
													"nodeType": "YulLiteral",
													"src": "15508:34:13",
													"type": "",
													"value": "Vault does not exists for this N"
												}
											],
											"functionName": {
												"name": "mstore",
												"nodeType": "YulIdentifier",
												"src": "15485:6:13"
											},
											"nodeType": "YulFunctionCall",
											"src": "15485:58:13"
										},
										"nodeType": "YulExpressionStatement",
										"src": "15485:58:13"
									},
									{
										"expression": {
											"arguments": [
												{
													"arguments": [
														{
															"name": "memPtr",
															"nodeType": "YulIdentifier",
															"src": "15564:6:13"
														},
														{
															"kind": "number",
															"nodeType": "YulLiteral",
															"src": "15572:2:13",
															"type": "",
															"value": "32"
														}
													],
													"functionName": {
														"name": "add",
														"nodeType": "YulIdentifier",
														"src": "15560:3:13"
													},
													"nodeType": "YulFunctionCall",
													"src": "15560:15:13"
												},
												{
													"hexValue": "465420636f6e7472616374",
													"kind": "string",
													"nodeType": "YulLiteral",
													"src": "15577:13:13",
													"type": "",
													"value": "FT contract"
												}
											],
											"functionName": {
												"name": "mstore",
												"nodeType": "YulIdentifier",
												"src": "15553:6:13"
											},
											"nodeType": "YulFunctionCall",
											"src": "15553:38:13"
										},
										"nodeType": "YulExpressionStatement",
										"src": "15553:38:13"
									}
								]
							},
							"name": "store_literal_in_memory_af09f6db30e4867e53cba9916b467b745c1bb0ff7604dcbe2aeb26f6c0c4cbab",
							"nodeType": "YulFunctionDefinition",
							"parameters": [
								{
									"name": "memPtr",
									"nodeType": "YulTypedName",
									"src": "15466:6:13",
									"type": ""
								}
							],
							"src": "15368:230:13"
						},
						{
							"body": {
								"nodeType": "YulBlock",
								"src": "15750:220:13",
								"statements": [
									{
										"nodeType": "YulAssignment",
										"src": "15760:74:13",
										"value": {
											"arguments": [
												{
													"name": "pos",
													"nodeType": "YulIdentifier",
													"src": "15826:3:13"
												},
												{
													"kind": "number",
													"nodeType": "YulLiteral",
													"src": "15831:2:13",
													"type": "",
													"value": "43"
												}
											],
											"functionName": {
												"name": "array_storeLengthForEncoding_t_string_memory_ptr_fromStack",
												"nodeType": "YulIdentifier",
												"src": "15767:58:13"
											},
											"nodeType": "YulFunctionCall",
											"src": "15767:67:13"
										},
										"variableNames": [
											{
												"name": "pos",
												"nodeType": "YulIdentifier",
												"src": "15760:3:13"
											}
										]
									},
									{
										"expression": {
											"arguments": [
												{
													"name": "pos",
													"nodeType": "YulIdentifier",
													"src": "15932:3:13"
												}
											],
											"functionName": {
												"name": "store_literal_in_memory_af09f6db30e4867e53cba9916b467b745c1bb0ff7604dcbe2aeb26f6c0c4cbab",
												"nodeType": "YulIdentifier",
												"src": "15843:88:13"
											},
											"nodeType": "YulFunctionCall",
											"src": "15843:93:13"
										},
										"nodeType": "YulExpressionStatement",
										"src": "15843:93:13"
									},
									{
										"nodeType": "YulAssignment",
										"src": "15945:19:13",
										"value": {
											"arguments": [
												{
													"name": "pos",
													"nodeType": "YulIdentifier",
													"src": "15956:3:13"
												},
												{
													"kind": "number",
													"nodeType": "YulLiteral",
													"src": "15961:2:13",
													"type": "",
													"value": "64"
												}
											],
											"functionName": {
												"name": "add",
												"nodeType": "YulIdentifier",
												"src": "15952:3:13"
											},
											"nodeType": "YulFunctionCall",
											"src": "15952:12:13"
										},
										"variableNames": [
											{
												"name": "end",
												"nodeType": "YulIdentifier",
												"src": "15945:3:13"
											}
										]
									}
								]
							},
							"name": "abi_encode_t_stringliteral_af09f6db30e4867e53cba9916b467b745c1bb0ff7604dcbe2aeb26f6c0c4cbab_to_t_string_memory_ptr_fromStack",
							"nodeType": "YulFunctionDefinition",
							"parameters": [
								{
									"name": "pos",
									"nodeType": "YulTypedName",
									"src": "15738:3:13",
									"type": ""
								}
							],
							"returnVariables": [
								{
									"name": "end",
									"nodeType": "YulTypedName",
									"src": "15746:3:13",
									"type": ""
								}
							],
							"src": "15604:366:13"
						},
						{
							"body": {
								"nodeType": "YulBlock",
								"src": "16147:248:13",
								"statements": [
									{
										"nodeType": "YulAssignment",
										"src": "16157:26:13",
										"value": {
											"arguments": [
												{
													"name": "headStart",
													"nodeType": "YulIdentifier",
													"src": "16169:9:13"
												},
												{
													"kind": "number",
													"nodeType": "YulLiteral",
													"src": "16180:2:13",
													"type": "",
													"value": "32"
												}
											],
											"functionName": {
												"name": "add",
												"nodeType": "YulIdentifier",
												"src": "16165:3:13"
											},
											"nodeType": "YulFunctionCall",
											"src": "16165:18:13"
										},
										"variableNames": [
											{
												"name": "tail",
												"nodeType": "YulIdentifier",
												"src": "16157:4:13"
											}
										]
									},
									{
										"expression": {
											"arguments": [
												{
													"arguments": [
														{
															"name": "headStart",
															"nodeType": "YulIdentifier",
															"src": "16204:9:13"
														},
														{
															"kind": "number",
															"nodeType": "YulLiteral",
															"src": "16215:1:13",
															"type": "",
															"value": "0"
														}
													],
													"functionName": {
														"name": "add",
														"nodeType": "YulIdentifier",
														"src": "16200:3:13"
													},
													"nodeType": "YulFunctionCall",
													"src": "16200:17:13"
												},
												{
													"arguments": [
														{
															"name": "tail",
															"nodeType": "YulIdentifier",
															"src": "16223:4:13"
														},
														{
															"name": "headStart",
															"nodeType": "YulIdentifier",
															"src": "16229:9:13"
														}
													],
													"functionName": {
														"name": "sub",
														"nodeType": "YulIdentifier",
														"src": "16219:3:13"
													},
													"nodeType": "YulFunctionCall",
													"src": "16219:20:13"
												}
											],
											"functionName": {
												"name": "mstore",
												"nodeType": "YulIdentifier",
												"src": "16193:6:13"
											},
											"nodeType": "YulFunctionCall",
											"src": "16193:47:13"
										},
										"nodeType": "YulExpressionStatement",
										"src": "16193:47:13"
									},
									{
										"nodeType": "YulAssignment",
										"src": "16249:139:13",
										"value": {
											"arguments": [
												{
													"name": "tail",
													"nodeType": "YulIdentifier",
													"src": "16383:4:13"
												}
											],
											"functionName": {
												"name": "abi_encode_t_stringliteral_af09f6db30e4867e53cba9916b467b745c1bb0ff7604dcbe2aeb26f6c0c4cbab_to_t_string_memory_ptr_fromStack",
												"nodeType": "YulIdentifier",
												"src": "16257:124:13"
											},
											"nodeType": "YulFunctionCall",
											"src": "16257:131:13"
										},
										"variableNames": [
											{
												"name": "tail",
												"nodeType": "YulIdentifier",
												"src": "16249:4:13"
											}
										]
									}
								]
							},
							"name": "abi_encode_tuple_t_stringliteral_af09f6db30e4867e53cba9916b467b745c1bb0ff7604dcbe2aeb26f6c0c4cbab__to_t_string_memory_ptr__fromStack_reversed",
							"nodeType": "YulFunctionDefinition",
							"parameters": [
								{
									"name": "headStart",
									"nodeType": "YulTypedName",
									"src": "16127:9:13",
									"type": ""
								}
							],
							"returnVariables": [
								{
									"name": "tail",
									"nodeType": "YulTypedName",
									"src": "16142:4:13",
									"type": ""
								}
							],
							"src": "15976:419:13"
						},
						{
							"body": {
								"nodeType": "YulBlock",
								"src": "16507:61:13",
								"statements": [
									{
										"expression": {
											"arguments": [
												{
													"arguments": [
														{
															"name": "memPtr",
															"nodeType": "YulIdentifier",
															"src": "16529:6:13"
														},
														{
															"kind": "number",
															"nodeType": "YulLiteral",
															"src": "16537:1:13",
															"type": "",
															"value": "0"
														}
													],
													"functionName": {
														"name": "add",
														"nodeType": "YulIdentifier",
														"src": "16525:3:13"
													},
													"nodeType": "YulFunctionCall",
													"src": "16525:14:13"
												},
												{
													"hexValue": "4d69736d61746368656420617272617973",
													"kind": "string",
													"nodeType": "YulLiteral",
													"src": "16541:19:13",
													"type": "",
													"value": "Mismatched arrays"
												}
											],
											"functionName": {
												"name": "mstore",
												"nodeType": "YulIdentifier",
												"src": "16518:6:13"
											},
											"nodeType": "YulFunctionCall",
											"src": "16518:43:13"
										},
										"nodeType": "YulExpressionStatement",
										"src": "16518:43:13"
									}
								]
							},
							"name": "store_literal_in_memory_4fa02d1b88050f6a6a5d285d3489cc4bb24e4d1924dee6d5a2f903a871e4e481",
							"nodeType": "YulFunctionDefinition",
							"parameters": [
								{
									"name": "memPtr",
									"nodeType": "YulTypedName",
									"src": "16499:6:13",
									"type": ""
								}
							],
							"src": "16401:167:13"
						},
						{
							"body": {
								"nodeType": "YulBlock",
								"src": "16720:220:13",
								"statements": [
									{
										"nodeType": "YulAssignment",
										"src": "16730:74:13",
										"value": {
											"arguments": [
												{
													"name": "pos",
													"nodeType": "YulIdentifier",
													"src": "16796:3:13"
												},
												{
													"kind": "number",
													"nodeType": "YulLiteral",
													"src": "16801:2:13",
													"type": "",
													"value": "17"
												}
											],
											"functionName": {
												"name": "array_storeLengthForEncoding_t_string_memory_ptr_fromStack",
												"nodeType": "YulIdentifier",
												"src": "16737:58:13"
											},
											"nodeType": "YulFunctionCall",
											"src": "16737:67:13"
										},
										"variableNames": [
											{
												"name": "pos",
												"nodeType": "YulIdentifier",
												"src": "16730:3:13"
											}
										]
									},
									{
										"expression": {
											"arguments": [
												{
													"name": "pos",
													"nodeType": "YulIdentifier",
													"src": "16902:3:13"
												}
											],
											"functionName": {
												"name": "store_literal_in_memory_4fa02d1b88050f6a6a5d285d3489cc4bb24e4d1924dee6d5a2f903a871e4e481",
												"nodeType": "YulIdentifier",
												"src": "16813:88:13"
											},
											"nodeType": "YulFunctionCall",
											"src": "16813:93:13"
										},
										"nodeType": "YulExpressionStatement",
										"src": "16813:93:13"
									},
									{
										"nodeType": "YulAssignment",
										"src": "16915:19:13",
										"value": {
											"arguments": [
												{
													"name": "pos",
													"nodeType": "YulIdentifier",
													"src": "16926:3:13"
												},
												{
													"kind": "number",
													"nodeType": "YulLiteral",
													"src": "16931:2:13",
													"type": "",
													"value": "32"
												}
											],
											"functionName": {
												"name": "add",
												"nodeType": "YulIdentifier",
												"src": "16922:3:13"
											},
											"nodeType": "YulFunctionCall",
											"src": "16922:12:13"
										},
										"variableNames": [
											{
												"name": "end",
												"nodeType": "YulIdentifier",
												"src": "16915:3:13"
											}
										]
									}
								]
							},
							"name": "abi_encode_t_stringliteral_4fa02d1b88050f6a6a5d285d3489cc4bb24e4d1924dee6d5a2f903a871e4e481_to_t_string_memory_ptr_fromStack",
							"nodeType": "YulFunctionDefinition",
							"parameters": [
								{
									"name": "pos",
									"nodeType": "YulTypedName",
									"src": "16708:3:13",
									"type": ""
								}
							],
							"returnVariables": [
								{
									"name": "end",
									"nodeType": "YulTypedName",
									"src": "16716:3:13",
									"type": ""
								}
							],
							"src": "16574:366:13"
						},
						{
							"body": {
								"nodeType": "YulBlock",
								"src": "17117:248:13",
								"statements": [
									{
										"nodeType": "YulAssignment",
										"src": "17127:26:13",
										"value": {
											"arguments": [
												{
													"name": "headStart",
													"nodeType": "YulIdentifier",
													"src": "17139:9:13"
												},
												{
													"kind": "number",
													"nodeType": "YulLiteral",
													"src": "17150:2:13",
													"type": "",
													"value": "32"
												}
											],
											"functionName": {
												"name": "add",
												"nodeType": "YulIdentifier",
												"src": "17135:3:13"
											},
											"nodeType": "YulFunctionCall",
											"src": "17135:18:13"
										},
										"variableNames": [
											{
												"name": "tail",
												"nodeType": "YulIdentifier",
												"src": "17127:4:13"
											}
										]
									},
									{
										"expression": {
											"arguments": [
												{
													"arguments": [
														{
															"name": "headStart",
															"nodeType": "YulIdentifier",
															"src": "17174:9:13"
														},
														{
															"kind": "number",
															"nodeType": "YulLiteral",
															"src": "17185:1:13",
															"type": "",
															"value": "0"
														}
													],
													"functionName": {
														"name": "add",
														"nodeType": "YulIdentifier",
														"src": "17170:3:13"
													},
													"nodeType": "YulFunctionCall",
													"src": "17170:17:13"
												},
												{
													"arguments": [
														{
															"name": "tail",
															"nodeType": "YulIdentifier",
															"src": "17193:4:13"
														},
														{
															"name": "headStart",
															"nodeType": "YulIdentifier",
															"src": "17199:9:13"
														}
													],
													"functionName": {
														"name": "sub",
														"nodeType": "YulIdentifier",
														"src": "17189:3:13"
													},
													"nodeType": "YulFunctionCall",
													"src": "17189:20:13"
												}
											],
											"functionName": {
												"name": "mstore",
												"nodeType": "YulIdentifier",
												"src": "17163:6:13"
											},
											"nodeType": "YulFunctionCall",
											"src": "17163:47:13"
										},
										"nodeType": "YulExpressionStatement",
										"src": "17163:47:13"
									},
									{
										"nodeType": "YulAssignment",
										"src": "17219:139:13",
										"value": {
											"arguments": [
												{
													"name": "tail",
													"nodeType": "YulIdentifier",
													"src": "17353:4:13"
												}
											],
											"functionName": {
												"name": "abi_encode_t_stringliteral_4fa02d1b88050f6a6a5d285d3489cc4bb24e4d1924dee6d5a2f903a871e4e481_to_t_string_memory_ptr_fromStack",
												"nodeType": "YulIdentifier",
												"src": "17227:124:13"
											},
											"nodeType": "YulFunctionCall",
											"src": "17227:131:13"
										},
										"variableNames": [
											{
												"name": "tail",
												"nodeType": "YulIdentifier",
												"src": "17219:4:13"
											}
										]
									}
								]
							},
							"name": "abi_encode_tuple_t_stringliteral_4fa02d1b88050f6a6a5d285d3489cc4bb24e4d1924dee6d5a2f903a871e4e481__to_t_string_memory_ptr__fromStack_reversed",
							"nodeType": "YulFunctionDefinition",
							"parameters": [
								{
									"name": "headStart",
									"nodeType": "YulTypedName",
									"src": "17097:9:13",
									"type": ""
								}
							],
							"returnVariables": [
								{
									"name": "tail",
									"nodeType": "YulTypedName",
									"src": "17112:4:13",
									"type": ""
								}
							],
							"src": "16946:419:13"
						},
						{
							"body": {
								"nodeType": "YulBlock",
								"src": "17434:80:13",
								"statements": [
									{
										"nodeType": "YulAssignment",
										"src": "17444:22:13",
										"value": {
											"arguments": [
												{
													"name": "offset",
													"nodeType": "YulIdentifier",
													"src": "17459:6:13"
												}
											],
											"functionName": {
												"name": "mload",
												"nodeType": "YulIdentifier",
												"src": "17453:5:13"
											},
											"nodeType": "YulFunctionCall",
											"src": "17453:13:13"
										},
										"variableNames": [
											{
												"name": "value",
												"nodeType": "YulIdentifier",
												"src": "17444:5:13"
											}
										]
									},
									{
										"expression": {
											"arguments": [
												{
													"name": "value",
													"nodeType": "YulIdentifier",
													"src": "17502:5:13"
												}
											],
											"functionName": {
												"name": "validator_revert_t_address",
												"nodeType": "YulIdentifier",
												"src": "17475:26:13"
											},
											"nodeType": "YulFunctionCall",
											"src": "17475:33:13"
										},
										"nodeType": "YulExpressionStatement",
										"src": "17475:33:13"
									}
								]
							},
							"name": "abi_decode_t_address_fromMemory",
							"nodeType": "YulFunctionDefinition",
							"parameters": [
								{
									"name": "offset",
									"nodeType": "YulTypedName",
									"src": "17412:6:13",
									"type": ""
								},
								{
									"name": "end",
									"nodeType": "YulTypedName",
									"src": "17420:3:13",
									"type": ""
								}
							],
							"returnVariables": [
								{
									"name": "value",
									"nodeType": "YulTypedName",
									"src": "17428:5:13",
									"type": ""
								}
							],
							"src": "17371:143:13"
						},
						{
							"body": {
								"nodeType": "YulBlock",
								"src": "17597:274:13",
								"statements": [
									{
										"body": {
											"nodeType": "YulBlock",
											"src": "17643:83:13",
											"statements": [
												{
													"expression": {
														"arguments": [],
														"functionName": {
															"name": "revert_error_dbdddcbe895c83990c08b3492a0e83918d802a52331272ac6fdb6a7c4aea3b1b",
															"nodeType": "YulIdentifier",
															"src": "17645:77:13"
														},
														"nodeType": "YulFunctionCall",
														"src": "17645:79:13"
													},
													"nodeType": "YulExpressionStatement",
													"src": "17645:79:13"
												}
											]
										},
										"condition": {
											"arguments": [
												{
													"arguments": [
														{
															"name": "dataEnd",
															"nodeType": "YulIdentifier",
															"src": "17618:7:13"
														},
														{
															"name": "headStart",
															"nodeType": "YulIdentifier",
															"src": "17627:9:13"
														}
													],
													"functionName": {
														"name": "sub",
														"nodeType": "YulIdentifier",
														"src": "17614:3:13"
													},
													"nodeType": "YulFunctionCall",
													"src": "17614:23:13"
												},
												{
													"kind": "number",
													"nodeType": "YulLiteral",
													"src": "17639:2:13",
													"type": "",
													"value": "32"
												}
											],
											"functionName": {
												"name": "slt",
												"nodeType": "YulIdentifier",
												"src": "17610:3:13"
											},
											"nodeType": "YulFunctionCall",
											"src": "17610:32:13"
										},
										"nodeType": "YulIf",
										"src": "17607:119:13"
									},
									{
										"nodeType": "YulBlock",
										"src": "17736:128:13",
										"statements": [
											{
												"nodeType": "YulVariableDeclaration",
												"src": "17751:15:13",
												"value": {
													"kind": "number",
													"nodeType": "YulLiteral",
													"src": "17765:1:13",
													"type": "",
													"value": "0"
												},
												"variables": [
													{
														"name": "offset",
														"nodeType": "YulTypedName",
														"src": "17755:6:13",
														"type": ""
													}
												]
											},
											{
												"nodeType": "YulAssignment",
												"src": "17780:74:13",
												"value": {
													"arguments": [
														{
															"arguments": [
																{
																	"name": "headStart",
																	"nodeType": "YulIdentifier",
																	"src": "17826:9:13"
																},
																{
																	"name": "offset",
																	"nodeType": "YulIdentifier",
																	"src": "17837:6:13"
																}
															],
															"functionName": {
																"name": "add",
																"nodeType": "YulIdentifier",
																"src": "17822:3:13"
															},
															"nodeType": "YulFunctionCall",
															"src": "17822:22:13"
														},
														{
															"name": "dataEnd",
															"nodeType": "YulIdentifier",
															"src": "17846:7:13"
														}
													],
													"functionName": {
														"name": "abi_decode_t_address_fromMemory",
														"nodeType": "YulIdentifier",
														"src": "17790:31:13"
													},
													"nodeType": "YulFunctionCall",
													"src": "17790:64:13"
												},
												"variableNames": [
													{
														"name": "value0",
														"nodeType": "YulIdentifier",
														"src": "17780:6:13"
													}
												]
											}
										]
									}
								]
							},
							"name": "abi_decode_tuple_t_address_fromMemory",
							"nodeType": "YulFunctionDefinition",
							"parameters": [
								{
									"name": "headStart",
									"nodeType": "YulTypedName",
									"src": "17567:9:13",
									"type": ""
								},
								{
									"name": "dataEnd",
									"nodeType": "YulTypedName",
									"src": "17578:7:13",
									"type": ""
								}
							],
							"returnVariables": [
								{
									"name": "value0",
									"nodeType": "YulTypedName",
									"src": "17590:6:13",
									"type": ""
								}
							],
							"src": "17520:351:13"
						},
						{
							"body": {
								"nodeType": "YulBlock",
								"src": "17983:140:13",
								"statements": [
									{
										"expression": {
											"arguments": [
												{
													"arguments": [
														{
															"name": "memPtr",
															"nodeType": "YulIdentifier",
															"src": "18005:6:13"
														},
														{
															"kind": "number",
															"nodeType": "YulLiteral",
															"src": "18013:1:13",
															"type": "",
															"value": "0"
														}
													],
													"functionName": {
														"name": "add",
														"nodeType": "YulIdentifier",
														"src": "18001:3:13"
													},
													"nodeType": "YulFunctionCall",
													"src": "18001:14:13"
												},
												{
													"hexValue": "4f6e6c792074686520706572736f6e2077686f2063726561746564207661756c",
													"kind": "string",
													"nodeType": "YulLiteral",
													"src": "18017:34:13",
													"type": "",
													"value": "Only the person who created vaul"
												}
											],
											"functionName": {
												"name": "mstore",
												"nodeType": "YulIdentifier",
												"src": "17994:6:13"
											},
											"nodeType": "YulFunctionCall",
											"src": "17994:58:13"
										},
										"nodeType": "YulExpressionStatement",
										"src": "17994:58:13"
									},
									{
										"expression": {
											"arguments": [
												{
													"arguments": [
														{
															"name": "memPtr",
															"nodeType": "YulIdentifier",
															"src": "18073:6:13"
														},
														{
															"kind": "number",
															"nodeType": "YulLiteral",
															"src": "18081:2:13",
															"type": "",
															"value": "32"
														}
													],
													"functionName": {
														"name": "add",
														"nodeType": "YulIdentifier",
														"src": "18069:3:13"
													},
													"nodeType": "YulFunctionCall",
													"src": "18069:15:13"
												},
												{
													"hexValue": "742063616e206465706f7369742066756e647320696e746f206974",
													"kind": "string",
													"nodeType": "YulLiteral",
													"src": "18086:29:13",
													"type": "",
													"value": "t can deposit funds into it"
												}
											],
											"functionName": {
												"name": "mstore",
												"nodeType": "YulIdentifier",
												"src": "18062:6:13"
											},
											"nodeType": "YulFunctionCall",
											"src": "18062:54:13"
										},
										"nodeType": "YulExpressionStatement",
										"src": "18062:54:13"
									}
								]
							},
							"name": "store_literal_in_memory_8d454e2a084014abe0cb8b0220b87e9c52084abcf0f285c0683d2b62cc95c4d5",
							"nodeType": "YulFunctionDefinition",
							"parameters": [
								{
									"name": "memPtr",
									"nodeType": "YulTypedName",
									"src": "17975:6:13",
									"type": ""
								}
							],
							"src": "17877:246:13"
						},
						{
							"body": {
								"nodeType": "YulBlock",
								"src": "18275:220:13",
								"statements": [
									{
										"nodeType": "YulAssignment",
										"src": "18285:74:13",
										"value": {
											"arguments": [
												{
													"name": "pos",
													"nodeType": "YulIdentifier",
													"src": "18351:3:13"
												},
												{
													"kind": "number",
													"nodeType": "YulLiteral",
													"src": "18356:2:13",
													"type": "",
													"value": "59"
												}
											],
											"functionName": {
												"name": "array_storeLengthForEncoding_t_string_memory_ptr_fromStack",
												"nodeType": "YulIdentifier",
												"src": "18292:58:13"
											},
											"nodeType": "YulFunctionCall",
											"src": "18292:67:13"
										},
										"variableNames": [
											{
												"name": "pos",
												"nodeType": "YulIdentifier",
												"src": "18285:3:13"
											}
										]
									},
									{
										"expression": {
											"arguments": [
												{
													"name": "pos",
													"nodeType": "YulIdentifier",
													"src": "18457:3:13"
												}
											],
											"functionName": {
												"name": "store_literal_in_memory_8d454e2a084014abe0cb8b0220b87e9c52084abcf0f285c0683d2b62cc95c4d5",
												"nodeType": "YulIdentifier",
												"src": "18368:88:13"
											},
											"nodeType": "YulFunctionCall",
											"src": "18368:93:13"
										},
										"nodeType": "YulExpressionStatement",
										"src": "18368:93:13"
									},
									{
										"nodeType": "YulAssignment",
										"src": "18470:19:13",
										"value": {
											"arguments": [
												{
													"name": "pos",
													"nodeType": "YulIdentifier",
													"src": "18481:3:13"
												},
												{
													"kind": "number",
													"nodeType": "YulLiteral",
													"src": "18486:2:13",
													"type": "",
													"value": "64"
												}
											],
											"functionName": {
												"name": "add",
												"nodeType": "YulIdentifier",
												"src": "18477:3:13"
											},
											"nodeType": "YulFunctionCall",
											"src": "18477:12:13"
										},
										"variableNames": [
											{
												"name": "end",
												"nodeType": "YulIdentifier",
												"src": "18470:3:13"
											}
										]
									}
								]
							},
							"name": "abi_encode_t_stringliteral_8d454e2a084014abe0cb8b0220b87e9c52084abcf0f285c0683d2b62cc95c4d5_to_t_string_memory_ptr_fromStack",
							"nodeType": "YulFunctionDefinition",
							"parameters": [
								{
									"name": "pos",
									"nodeType": "YulTypedName",
									"src": "18263:3:13",
									"type": ""
								}
							],
							"returnVariables": [
								{
									"name": "end",
									"nodeType": "YulTypedName",
									"src": "18271:3:13",
									"type": ""
								}
							],
							"src": "18129:366:13"
						},
						{
							"body": {
								"nodeType": "YulBlock",
								"src": "18672:248:13",
								"statements": [
									{
										"nodeType": "YulAssignment",
										"src": "18682:26:13",
										"value": {
											"arguments": [
												{
													"name": "headStart",
													"nodeType": "YulIdentifier",
													"src": "18694:9:13"
												},
												{
													"kind": "number",
													"nodeType": "YulLiteral",
													"src": "18705:2:13",
													"type": "",
													"value": "32"
												}
											],
											"functionName": {
												"name": "add",
												"nodeType": "YulIdentifier",
												"src": "18690:3:13"
											},
											"nodeType": "YulFunctionCall",
											"src": "18690:18:13"
										},
										"variableNames": [
											{
												"name": "tail",
												"nodeType": "YulIdentifier",
												"src": "18682:4:13"
											}
										]
									},
									{
										"expression": {
											"arguments": [
												{
													"arguments": [
														{
															"name": "headStart",
															"nodeType": "YulIdentifier",
															"src": "18729:9:13"
														},
														{
															"kind": "number",
															"nodeType": "YulLiteral",
															"src": "18740:1:13",
															"type": "",
															"value": "0"
														}
													],
													"functionName": {
														"name": "add",
														"nodeType": "YulIdentifier",
														"src": "18725:3:13"
													},
													"nodeType": "YulFunctionCall",
													"src": "18725:17:13"
												},
												{
													"arguments": [
														{
															"name": "tail",
															"nodeType": "YulIdentifier",
															"src": "18748:4:13"
														},
														{
															"name": "headStart",
															"nodeType": "YulIdentifier",
															"src": "18754:9:13"
														}
													],
													"functionName": {
														"name": "sub",
														"nodeType": "YulIdentifier",
														"src": "18744:3:13"
													},
													"nodeType": "YulFunctionCall",
													"src": "18744:20:13"
												}
											],
											"functionName": {
												"name": "mstore",
												"nodeType": "YulIdentifier",
												"src": "18718:6:13"
											},
											"nodeType": "YulFunctionCall",
											"src": "18718:47:13"
										},
										"nodeType": "YulExpressionStatement",
										"src": "18718:47:13"
									},
									{
										"nodeType": "YulAssignment",
										"src": "18774:139:13",
										"value": {
											"arguments": [
												{
													"name": "tail",
													"nodeType": "YulIdentifier",
													"src": "18908:4:13"
												}
											],
											"functionName": {
												"name": "abi_encode_t_stringliteral_8d454e2a084014abe0cb8b0220b87e9c52084abcf0f285c0683d2b62cc95c4d5_to_t_string_memory_ptr_fromStack",
												"nodeType": "YulIdentifier",
												"src": "18782:124:13"
											},
											"nodeType": "YulFunctionCall",
											"src": "18782:131:13"
										},
										"variableNames": [
											{
												"name": "tail",
												"nodeType": "YulIdentifier",
												"src": "18774:4:13"
											}
										]
									}
								]
							},
							"name": "abi_encode_tuple_t_stringliteral_8d454e2a084014abe0cb8b0220b87e9c52084abcf0f285c0683d2b62cc95c4d5__to_t_string_memory_ptr__fromStack_reversed",
							"nodeType": "YulFunctionDefinition",
							"parameters": [
								{
									"name": "headStart",
									"nodeType": "YulTypedName",
									"src": "18652:9:13",
									"type": ""
								}
							],
							"returnVariables": [
								{
									"name": "tail",
									"nodeType": "YulTypedName",
									"src": "18667:4:13",
									"type": ""
								}
							],
							"src": "18501:419:13"
						},
						{
							"body": {
								"nodeType": "YulBlock",
								"src": "18954:152:13",
								"statements": [
									{
										"expression": {
											"arguments": [
												{
													"kind": "number",
													"nodeType": "YulLiteral",
													"src": "18971:1:13",
													"type": "",
													"value": "0"
												},
												{
													"kind": "number",
													"nodeType": "YulLiteral",
													"src": "18974:77:13",
													"type": "",
													"value": "35408467139433450592217433187231851964531694900788300625387963629091585785856"
												}
											],
											"functionName": {
												"name": "mstore",
												"nodeType": "YulIdentifier",
												"src": "18964:6:13"
											},
											"nodeType": "YulFunctionCall",
											"src": "18964:88:13"
										},
										"nodeType": "YulExpressionStatement",
										"src": "18964:88:13"
									},
									{
										"expression": {
											"arguments": [
												{
													"kind": "number",
													"nodeType": "YulLiteral",
													"src": "19068:1:13",
													"type": "",
													"value": "4"
												},
												{
													"kind": "number",
													"nodeType": "YulLiteral",
													"src": "19071:4:13",
													"type": "",
													"value": "0x32"
												}
											],
											"functionName": {
												"name": "mstore",
												"nodeType": "YulIdentifier",
												"src": "19061:6:13"
											},
											"nodeType": "YulFunctionCall",
											"src": "19061:15:13"
										},
										"nodeType": "YulExpressionStatement",
										"src": "19061:15:13"
									},
									{
										"expression": {
											"arguments": [
												{
													"kind": "number",
													"nodeType": "YulLiteral",
													"src": "19092:1:13",
													"type": "",
													"value": "0"
												},
												{
													"kind": "number",
													"nodeType": "YulLiteral",
													"src": "19095:4:13",
													"type": "",
													"value": "0x24"
												}
											],
											"functionName": {
												"name": "revert",
												"nodeType": "YulIdentifier",
												"src": "19085:6:13"
											},
											"nodeType": "YulFunctionCall",
											"src": "19085:15:13"
										},
										"nodeType": "YulExpressionStatement",
										"src": "19085:15:13"
									}
								]
							},
							"name": "panic_error_0x32",
							"nodeType": "YulFunctionDefinition",
							"src": "18926:180:13"
						},
						{
							"body": {
								"nodeType": "YulBlock",
								"src": "19140:152:13",
								"statements": [
									{
										"expression": {
											"arguments": [
												{
													"kind": "number",
													"nodeType": "YulLiteral",
													"src": "19157:1:13",
													"type": "",
													"value": "0"
												},
												{
													"kind": "number",
													"nodeType": "YulLiteral",
													"src": "19160:77:13",
													"type": "",
													"value": "35408467139433450592217433187231851964531694900788300625387963629091585785856"
												}
											],
											"functionName": {
												"name": "mstore",
												"nodeType": "YulIdentifier",
												"src": "19150:6:13"
											},
											"nodeType": "YulFunctionCall",
											"src": "19150:88:13"
										},
										"nodeType": "YulExpressionStatement",
										"src": "19150:88:13"
									},
									{
										"expression": {
											"arguments": [
												{
													"kind": "number",
													"nodeType": "YulLiteral",
													"src": "19254:1:13",
													"type": "",
													"value": "4"
												},
												{
													"kind": "number",
													"nodeType": "YulLiteral",
													"src": "19257:4:13",
													"type": "",
													"value": "0x11"
												}
											],
											"functionName": {
												"name": "mstore",
												"nodeType": "YulIdentifier",
												"src": "19247:6:13"
											},
											"nodeType": "YulFunctionCall",
											"src": "19247:15:13"
										},
										"nodeType": "YulExpressionStatement",
										"src": "19247:15:13"
									},
									{
										"expression": {
											"arguments": [
												{
													"kind": "number",
													"nodeType": "YulLiteral",
													"src": "19278:1:13",
													"type": "",
													"value": "0"
												},
												{
													"kind": "number",
													"nodeType": "YulLiteral",
													"src": "19281:4:13",
													"type": "",
													"value": "0x24"
												}
											],
											"functionName": {
												"name": "revert",
												"nodeType": "YulIdentifier",
												"src": "19271:6:13"
											},
											"nodeType": "YulFunctionCall",
											"src": "19271:15:13"
										},
										"nodeType": "YulExpressionStatement",
										"src": "19271:15:13"
									}
								]
							},
							"name": "panic_error_0x11",
							"nodeType": "YulFunctionDefinition",
							"src": "19112:180:13"
						},
						{
							"body": {
								"nodeType": "YulBlock",
								"src": "19342:147:13",
								"statements": [
									{
										"nodeType": "YulAssignment",
										"src": "19352:25:13",
										"value": {
											"arguments": [
												{
													"name": "x",
													"nodeType": "YulIdentifier",
													"src": "19375:1:13"
												}
											],
											"functionName": {
												"name": "cleanup_t_uint256",
												"nodeType": "YulIdentifier",
												"src": "19357:17:13"
											},
											"nodeType": "YulFunctionCall",
											"src": "19357:20:13"
										},
										"variableNames": [
											{
												"name": "x",
												"nodeType": "YulIdentifier",
												"src": "19352:1:13"
											}
										]
									},
									{
										"nodeType": "YulAssignment",
										"src": "19386:25:13",
										"value": {
											"arguments": [
												{
													"name": "y",
													"nodeType": "YulIdentifier",
													"src": "19409:1:13"
												}
											],
											"functionName": {
												"name": "cleanup_t_uint256",
												"nodeType": "YulIdentifier",
												"src": "19391:17:13"
											},
											"nodeType": "YulFunctionCall",
											"src": "19391:20:13"
										},
										"variableNames": [
											{
												"name": "y",
												"nodeType": "YulIdentifier",
												"src": "19386:1:13"
											}
										]
									},
									{
										"nodeType": "YulAssignment",
										"src": "19420:16:13",
										"value": {
											"arguments": [
												{
													"name": "x",
													"nodeType": "YulIdentifier",
													"src": "19431:1:13"
												},
												{
													"name": "y",
													"nodeType": "YulIdentifier",
													"src": "19434:1:13"
												}
											],
											"functionName": {
												"name": "add",
												"nodeType": "YulIdentifier",
												"src": "19427:3:13"
											},
											"nodeType": "YulFunctionCall",
											"src": "19427:9:13"
										},
										"variableNames": [
											{
												"name": "sum",
												"nodeType": "YulIdentifier",
												"src": "19420:3:13"
											}
										]
									},
									{
										"body": {
											"nodeType": "YulBlock",
											"src": "19460:22:13",
											"statements": [
												{
													"expression": {
														"arguments": [],
														"functionName": {
															"name": "panic_error_0x11",
															"nodeType": "YulIdentifier",
															"src": "19462:16:13"
														},
														"nodeType": "YulFunctionCall",
														"src": "19462:18:13"
													},
													"nodeType": "YulExpressionStatement",
													"src": "19462:18:13"
												}
											]
										},
										"condition": {
											"arguments": [
												{
													"name": "x",
													"nodeType": "YulIdentifier",
													"src": "19452:1:13"
												},
												{
													"name": "sum",
													"nodeType": "YulIdentifier",
													"src": "19455:3:13"
												}
											],
											"functionName": {
												"name": "gt",
												"nodeType": "YulIdentifier",
												"src": "19449:2:13"
											},
											"nodeType": "YulFunctionCall",
											"src": "19449:10:13"
										},
										"nodeType": "YulIf",
										"src": "19446:36:13"
									}
								]
							},
							"name": "checked_add_t_uint256",
							"nodeType": "YulFunctionDefinition",
							"parameters": [
								{
									"name": "x",
									"nodeType": "YulTypedName",
									"src": "19329:1:13",
									"type": ""
								},
								{
									"name": "y",
									"nodeType": "YulTypedName",
									"src": "19332:1:13",
									"type": ""
								}
							],
							"returnVariables": [
								{
									"name": "sum",
									"nodeType": "YulTypedName",
									"src": "19338:3:13",
									"type": ""
								}
							],
							"src": "19298:191:13"
						},
						{
							"body": {
								"nodeType": "YulBlock",
								"src": "19538:190:13",
								"statements": [
									{
										"nodeType": "YulAssignment",
										"src": "19548:33:13",
										"value": {
											"arguments": [
												{
													"name": "value",
													"nodeType": "YulIdentifier",
													"src": "19575:5:13"
												}
											],
											"functionName": {
												"name": "cleanup_t_uint256",
												"nodeType": "YulIdentifier",
												"src": "19557:17:13"
											},
											"nodeType": "YulFunctionCall",
											"src": "19557:24:13"
										},
										"variableNames": [
											{
												"name": "value",
												"nodeType": "YulIdentifier",
												"src": "19548:5:13"
											}
										]
									},
									{
										"body": {
											"nodeType": "YulBlock",
											"src": "19671:22:13",
											"statements": [
												{
													"expression": {
														"arguments": [],
														"functionName": {
															"name": "panic_error_0x11",
															"nodeType": "YulIdentifier",
															"src": "19673:16:13"
														},
														"nodeType": "YulFunctionCall",
														"src": "19673:18:13"
													},
													"nodeType": "YulExpressionStatement",
													"src": "19673:18:13"
												}
											]
										},
										"condition": {
											"arguments": [
												{
													"name": "value",
													"nodeType": "YulIdentifier",
													"src": "19596:5:13"
												},
												{
													"kind": "number",
													"nodeType": "YulLiteral",
													"src": "19603:66:13",
													"type": "",
													"value": "0xffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff"
												}
											],
											"functionName": {
												"name": "eq",
												"nodeType": "YulIdentifier",
												"src": "19593:2:13"
											},
											"nodeType": "YulFunctionCall",
											"src": "19593:77:13"
										},
										"nodeType": "YulIf",
										"src": "19590:103:13"
									},
									{
										"nodeType": "YulAssignment",
										"src": "19702:20:13",
										"value": {
											"arguments": [
												{
													"name": "value",
													"nodeType": "YulIdentifier",
													"src": "19713:5:13"
												},
												{
													"kind": "number",
													"nodeType": "YulLiteral",
													"src": "19720:1:13",
													"type": "",
													"value": "1"
												}
											],
											"functionName": {
												"name": "add",
												"nodeType": "YulIdentifier",
												"src": "19709:3:13"
											},
											"nodeType": "YulFunctionCall",
											"src": "19709:13:13"
										},
										"variableNames": [
											{
												"name": "ret",
												"nodeType": "YulIdentifier",
												"src": "19702:3:13"
											}
										]
									}
								]
							},
							"name": "increment_t_uint256",
							"nodeType": "YulFunctionDefinition",
							"parameters": [
								{
									"name": "value",
									"nodeType": "YulTypedName",
									"src": "19524:5:13",
									"type": ""
								}
							],
							"returnVariables": [
								{
									"name": "ret",
									"nodeType": "YulTypedName",
									"src": "19534:3:13",
									"type": ""
								}
							],
							"src": "19495:233:13"
						},
						{
							"body": {
								"nodeType": "YulBlock",
								"src": "19840:75:13",
								"statements": [
									{
										"expression": {
											"arguments": [
												{
													"arguments": [
														{
															"name": "memPtr",
															"nodeType": "YulIdentifier",
															"src": "19862:6:13"
														},
														{
															"kind": "number",
															"nodeType": "YulLiteral",
															"src": "19870:1:13",
															"type": "",
															"value": "0"
														}
													],
													"functionName": {
														"name": "add",
														"nodeType": "YulIdentifier",
														"src": "19858:3:13"
													},
													"nodeType": "YulFunctionCall",
													"src": "19858:14:13"
												},
												{
													"hexValue": "4d69736d61746368656420746f74616c206465706f73697420616d6f756e74",
													"kind": "string",
													"nodeType": "YulLiteral",
													"src": "19874:33:13",
													"type": "",
													"value": "Mismatched total deposit amount"
												}
											],
											"functionName": {
												"name": "mstore",
												"nodeType": "YulIdentifier",
												"src": "19851:6:13"
											},
											"nodeType": "YulFunctionCall",
											"src": "19851:57:13"
										},
										"nodeType": "YulExpressionStatement",
										"src": "19851:57:13"
									}
								]
							},
							"name": "store_literal_in_memory_a5e89270b3c56d4b9d1cf0a951d175d259ba209e17765637f05d1ed5391db802",
							"nodeType": "YulFunctionDefinition",
							"parameters": [
								{
									"name": "memPtr",
									"nodeType": "YulTypedName",
									"src": "19832:6:13",
									"type": ""
								}
							],
							"src": "19734:181:13"
						},
						{
							"body": {
								"nodeType": "YulBlock",
								"src": "20067:220:13",
								"statements": [
									{
										"nodeType": "YulAssignment",
										"src": "20077:74:13",
										"value": {
											"arguments": [
												{
													"name": "pos",
													"nodeType": "YulIdentifier",
													"src": "20143:3:13"
												},
												{
													"kind": "number",
													"nodeType": "YulLiteral",
													"src": "20148:2:13",
													"type": "",
													"value": "31"
												}
											],
											"functionName": {
												"name": "array_storeLengthForEncoding_t_string_memory_ptr_fromStack",
												"nodeType": "YulIdentifier",
												"src": "20084:58:13"
											},
											"nodeType": "YulFunctionCall",
											"src": "20084:67:13"
										},
										"variableNames": [
											{
												"name": "pos",
												"nodeType": "YulIdentifier",
												"src": "20077:3:13"
											}
										]
									},
									{
										"expression": {
											"arguments": [
												{
													"name": "pos",
													"nodeType": "YulIdentifier",
													"src": "20249:3:13"
												}
											],
											"functionName": {
												"name": "store_literal_in_memory_a5e89270b3c56d4b9d1cf0a951d175d259ba209e17765637f05d1ed5391db802",
												"nodeType": "YulIdentifier",
												"src": "20160:88:13"
											},
											"nodeType": "YulFunctionCall",
											"src": "20160:93:13"
										},
										"nodeType": "YulExpressionStatement",
										"src": "20160:93:13"
									},
									{
										"nodeType": "YulAssignment",
										"src": "20262:19:13",
										"value": {
											"arguments": [
												{
													"name": "pos",
													"nodeType": "YulIdentifier",
													"src": "20273:3:13"
												},
												{
													"kind": "number",
													"nodeType": "YulLiteral",
													"src": "20278:2:13",
													"type": "",
													"value": "32"
												}
											],
											"functionName": {
												"name": "add",
												"nodeType": "YulIdentifier",
												"src": "20269:3:13"
											},
											"nodeType": "YulFunctionCall",
											"src": "20269:12:13"
										},
										"variableNames": [
											{
												"name": "end",
												"nodeType": "YulIdentifier",
												"src": "20262:3:13"
											}
										]
									}
								]
							},
							"name": "abi_encode_t_stringliteral_a5e89270b3c56d4b9d1cf0a951d175d259ba209e17765637f05d1ed5391db802_to_t_string_memory_ptr_fromStack",
							"nodeType": "YulFunctionDefinition",
							"parameters": [
								{
									"name": "pos",
									"nodeType": "YulTypedName",
									"src": "20055:3:13",
									"type": ""
								}
							],
							"returnVariables": [
								{
									"name": "end",
									"nodeType": "YulTypedName",
									"src": "20063:3:13",
									"type": ""
								}
							],
							"src": "19921:366:13"
						},
						{
							"body": {
								"nodeType": "YulBlock",
								"src": "20464:248:13",
								"statements": [
									{
										"nodeType": "YulAssignment",
										"src": "20474:26:13",
										"value": {
											"arguments": [
												{
													"name": "headStart",
													"nodeType": "YulIdentifier",
													"src": "20486:9:13"
												},
												{
													"kind": "number",
													"nodeType": "YulLiteral",
													"src": "20497:2:13",
													"type": "",
													"value": "32"
												}
											],
											"functionName": {
												"name": "add",
												"nodeType": "YulIdentifier",
												"src": "20482:3:13"
											},
											"nodeType": "YulFunctionCall",
											"src": "20482:18:13"
										},
										"variableNames": [
											{
												"name": "tail",
												"nodeType": "YulIdentifier",
												"src": "20474:4:13"
											}
										]
									},
									{
										"expression": {
											"arguments": [
												{
													"arguments": [
														{
															"name": "headStart",
															"nodeType": "YulIdentifier",
															"src": "20521:9:13"
														},
														{
															"kind": "number",
															"nodeType": "YulLiteral",
															"src": "20532:1:13",
															"type": "",
															"value": "0"
														}
													],
													"functionName": {
														"name": "add",
														"nodeType": "YulIdentifier",
														"src": "20517:3:13"
													},
													"nodeType": "YulFunctionCall",
													"src": "20517:17:13"
												},
												{
													"arguments": [
														{
															"name": "tail",
															"nodeType": "YulIdentifier",
															"src": "20540:4:13"
														},
														{
															"name": "headStart",
															"nodeType": "YulIdentifier",
															"src": "20546:9:13"
														}
													],
													"functionName": {
														"name": "sub",
														"nodeType": "YulIdentifier",
														"src": "20536:3:13"
													},
													"nodeType": "YulFunctionCall",
													"src": "20536:20:13"
												}
											],
											"functionName": {
												"name": "mstore",
												"nodeType": "YulIdentifier",
												"src": "20510:6:13"
											},
											"nodeType": "YulFunctionCall",
											"src": "20510:47:13"
										},
										"nodeType": "YulExpressionStatement",
										"src": "20510:47:13"
									},
									{
										"nodeType": "YulAssignment",
										"src": "20566:139:13",
										"value": {
											"arguments": [
												{
													"name": "tail",
													"nodeType": "YulIdentifier",
													"src": "20700:4:13"
												}
											],
											"functionName": {
												"name": "abi_encode_t_stringliteral_a5e89270b3c56d4b9d1cf0a951d175d259ba209e17765637f05d1ed5391db802_to_t_string_memory_ptr_fromStack",
												"nodeType": "YulIdentifier",
												"src": "20574:124:13"
											},
											"nodeType": "YulFunctionCall",
											"src": "20574:131:13"
										},
										"variableNames": [
											{
												"name": "tail",
												"nodeType": "YulIdentifier",
												"src": "20566:4:13"
											}
										]
									}
								]
							},
							"name": "abi_encode_tuple_t_stringliteral_a5e89270b3c56d4b9d1cf0a951d175d259ba209e17765637f05d1ed5391db802__to_t_string_memory_ptr__fromStack_reversed",
							"nodeType": "YulFunctionDefinition",
							"parameters": [
								{
									"name": "headStart",
									"nodeType": "YulTypedName",
									"src": "20444:9:13",
									"type": ""
								}
							],
							"returnVariables": [
								{
									"name": "tail",
									"nodeType": "YulTypedName",
									"src": "20459:4:13",
									"type": ""
								}
							],
							"src": "20293:419:13"
						},
						{
							"body": {
								"nodeType": "YulBlock",
								"src": "20844:206:13",
								"statements": [
									{
										"nodeType": "YulAssignment",
										"src": "20854:26:13",
										"value": {
											"arguments": [
												{
													"name": "headStart",
													"nodeType": "YulIdentifier",
													"src": "20866:9:13"
												},
												{
													"kind": "number",
													"nodeType": "YulLiteral",
													"src": "20877:2:13",
													"type": "",
													"value": "64"
												}
											],
											"functionName": {
												"name": "add",
												"nodeType": "YulIdentifier",
												"src": "20862:3:13"
											},
											"nodeType": "YulFunctionCall",
											"src": "20862:18:13"
										},
										"variableNames": [
											{
												"name": "tail",
												"nodeType": "YulIdentifier",
												"src": "20854:4:13"
											}
										]
									},
									{
										"expression": {
											"arguments": [
												{
													"name": "value0",
													"nodeType": "YulIdentifier",
													"src": "20934:6:13"
												},
												{
													"arguments": [
														{
															"name": "headStart",
															"nodeType": "YulIdentifier",
															"src": "20947:9:13"
														},
														{
															"kind": "number",
															"nodeType": "YulLiteral",
															"src": "20958:1:13",
															"type": "",
															"value": "0"
														}
													],
													"functionName": {
														"name": "add",
														"nodeType": "YulIdentifier",
														"src": "20943:3:13"
													},
													"nodeType": "YulFunctionCall",
													"src": "20943:17:13"
												}
											],
											"functionName": {
												"name": "abi_encode_t_uint256_to_t_uint256_fromStack",
												"nodeType": "YulIdentifier",
												"src": "20890:43:13"
											},
											"nodeType": "YulFunctionCall",
											"src": "20890:71:13"
										},
										"nodeType": "YulExpressionStatement",
										"src": "20890:71:13"
									},
									{
										"expression": {
											"arguments": [
												{
													"name": "value1",
													"nodeType": "YulIdentifier",
													"src": "21015:6:13"
												},
												{
													"arguments": [
														{
															"name": "headStart",
															"nodeType": "YulIdentifier",
															"src": "21028:9:13"
														},
														{
															"kind": "number",
															"nodeType": "YulLiteral",
															"src": "21039:2:13",
															"type": "",
															"value": "32"
														}
													],
													"functionName": {
														"name": "add",
														"nodeType": "YulIdentifier",
														"src": "21024:3:13"
													},
													"nodeType": "YulFunctionCall",
													"src": "21024:18:13"
												}
											],
											"functionName": {
												"name": "abi_encode_t_uint256_to_t_uint256_fromStack",
												"nodeType": "YulIdentifier",
												"src": "20971:43:13"
											},
											"nodeType": "YulFunctionCall",
											"src": "20971:72:13"
										},
										"nodeType": "YulExpressionStatement",
										"src": "20971:72:13"
									}
								]
							},
							"name": "abi_encode_tuple_t_uint256_t_uint256__to_t_uint256_t_uint256__fromStack_reversed",
							"nodeType": "YulFunctionDefinition",
							"parameters": [
								{
									"name": "headStart",
									"nodeType": "YulTypedName",
									"src": "20808:9:13",
									"type": ""
								},
								{
									"name": "value1",
									"nodeType": "YulTypedName",
									"src": "20820:6:13",
									"type": ""
								},
								{
									"name": "value0",
									"nodeType": "YulTypedName",
									"src": "20828:6:13",
									"type": ""
								}
							],
							"returnVariables": [
								{
									"name": "tail",
									"nodeType": "YulTypedName",
									"src": "20839:4:13",
									"type": ""
								}
							],
							"src": "20718:332:13"
						},
						{
							"body": {
								"nodeType": "YulBlock",
								"src": "21162:133:13",
								"statements": [
									{
										"expression": {
											"arguments": [
												{
													"arguments": [
														{
															"name": "memPtr",
															"nodeType": "YulIdentifier",
															"src": "21184:6:13"
														},
														{
															"kind": "number",
															"nodeType": "YulLiteral",
															"src": "21192:1:13",
															"type": "",
															"value": "0"
														}
													],
													"functionName": {
														"name": "add",
														"nodeType": "YulIdentifier",
														"src": "21180:3:13"
													},
													"nodeType": "YulFunctionCall",
													"src": "21180:14:13"
												},
												{
													"hexValue": "4f6e6c792074686520706572736f6e2077686f2063726561746564207661756c",
													"kind": "string",
													"nodeType": "YulLiteral",
													"src": "21196:34:13",
													"type": "",
													"value": "Only the person who created vaul"
												}
											],
											"functionName": {
												"name": "mstore",
												"nodeType": "YulIdentifier",
												"src": "21173:6:13"
											},
											"nodeType": "YulFunctionCall",
											"src": "21173:58:13"
										},
										"nodeType": "YulExpressionStatement",
										"src": "21173:58:13"
									},
									{
										"expression": {
											"arguments": [
												{
													"arguments": [
														{
															"name": "memPtr",
															"nodeType": "YulIdentifier",
															"src": "21252:6:13"
														},
														{
															"kind": "number",
															"nodeType": "YulLiteral",
															"src": "21260:2:13",
															"type": "",
															"value": "32"
														}
													],
													"functionName": {
														"name": "add",
														"nodeType": "YulIdentifier",
														"src": "21248:3:13"
													},
													"nodeType": "YulFunctionCall",
													"src": "21248:15:13"
												},
												{
													"hexValue": "742063616e2077697468647261772066756e6473",
													"kind": "string",
													"nodeType": "YulLiteral",
													"src": "21265:22:13",
													"type": "",
													"value": "t can withdraw funds"
												}
											],
											"functionName": {
												"name": "mstore",
												"nodeType": "YulIdentifier",
												"src": "21241:6:13"
											},
											"nodeType": "YulFunctionCall",
											"src": "21241:47:13"
										},
										"nodeType": "YulExpressionStatement",
										"src": "21241:47:13"
									}
								]
							},
							"name": "store_literal_in_memory_02b8c2fb88814cea156c3111f16cfd94d03e5ad66e454c7339e3ad4f3d17e3e7",
							"nodeType": "YulFunctionDefinition",
							"parameters": [
								{
									"name": "memPtr",
									"nodeType": "YulTypedName",
									"src": "21154:6:13",
									"type": ""
								}
							],
							"src": "21056:239:13"
						},
						{
							"body": {
								"nodeType": "YulBlock",
								"src": "21447:220:13",
								"statements": [
									{
										"nodeType": "YulAssignment",
										"src": "21457:74:13",
										"value": {
											"arguments": [
												{
													"name": "pos",
													"nodeType": "YulIdentifier",
													"src": "21523:3:13"
												},
												{
													"kind": "number",
													"nodeType": "YulLiteral",
													"src": "21528:2:13",
													"type": "",
													"value": "52"
												}
											],
											"functionName": {
												"name": "array_storeLengthForEncoding_t_string_memory_ptr_fromStack",
												"nodeType": "YulIdentifier",
												"src": "21464:58:13"
											},
											"nodeType": "YulFunctionCall",
											"src": "21464:67:13"
										},
										"variableNames": [
											{
												"name": "pos",
												"nodeType": "YulIdentifier",
												"src": "21457:3:13"
											}
										]
									},
									{
										"expression": {
											"arguments": [
												{
													"name": "pos",
													"nodeType": "YulIdentifier",
													"src": "21629:3:13"
												}
											],
											"functionName": {
												"name": "store_literal_in_memory_02b8c2fb88814cea156c3111f16cfd94d03e5ad66e454c7339e3ad4f3d17e3e7",
												"nodeType": "YulIdentifier",
												"src": "21540:88:13"
											},
											"nodeType": "YulFunctionCall",
											"src": "21540:93:13"
										},
										"nodeType": "YulExpressionStatement",
										"src": "21540:93:13"
									},
									{
										"nodeType": "YulAssignment",
										"src": "21642:19:13",
										"value": {
											"arguments": [
												{
													"name": "pos",
													"nodeType": "YulIdentifier",
													"src": "21653:3:13"
												},
												{
													"kind": "number",
													"nodeType": "YulLiteral",
													"src": "21658:2:13",
													"type": "",
													"value": "64"
												}
											],
											"functionName": {
												"name": "add",
												"nodeType": "YulIdentifier",
												"src": "21649:3:13"
											},
											"nodeType": "YulFunctionCall",
											"src": "21649:12:13"
										},
										"variableNames": [
											{
												"name": "end",
												"nodeType": "YulIdentifier",
												"src": "21642:3:13"
											}
										]
									}
								]
							},
							"name": "abi_encode_t_stringliteral_02b8c2fb88814cea156c3111f16cfd94d03e5ad66e454c7339e3ad4f3d17e3e7_to_t_string_memory_ptr_fromStack",
							"nodeType": "YulFunctionDefinition",
							"parameters": [
								{
									"name": "pos",
									"nodeType": "YulTypedName",
									"src": "21435:3:13",
									"type": ""
								}
							],
							"returnVariables": [
								{
									"name": "end",
									"nodeType": "YulTypedName",
									"src": "21443:3:13",
									"type": ""
								}
							],
							"src": "21301:366:13"
						},
						{
							"body": {
								"nodeType": "YulBlock",
								"src": "21844:248:13",
								"statements": [
									{
										"nodeType": "YulAssignment",
										"src": "21854:26:13",
										"value": {
											"arguments": [
												{
													"name": "headStart",
													"nodeType": "YulIdentifier",
													"src": "21866:9:13"
												},
												{
													"kind": "number",
													"nodeType": "YulLiteral",
													"src": "21877:2:13",
													"type": "",
													"value": "32"
												}
											],
											"functionName": {
												"name": "add",
												"nodeType": "YulIdentifier",
												"src": "21862:3:13"
											},
											"nodeType": "YulFunctionCall",
											"src": "21862:18:13"
										},
										"variableNames": [
											{
												"name": "tail",
												"nodeType": "YulIdentifier",
												"src": "21854:4:13"
											}
										]
									},
									{
										"expression": {
											"arguments": [
												{
													"arguments": [
														{
															"name": "headStart",
															"nodeType": "YulIdentifier",
															"src": "21901:9:13"
														},
														{
															"kind": "number",
															"nodeType": "YulLiteral",
															"src": "21912:1:13",
															"type": "",
															"value": "0"
														}
													],
													"functionName": {
														"name": "add",
														"nodeType": "YulIdentifier",
														"src": "21897:3:13"
													},
													"nodeType": "YulFunctionCall",
													"src": "21897:17:13"
												},
												{
													"arguments": [
														{
															"name": "tail",
															"nodeType": "YulIdentifier",
															"src": "21920:4:13"
														},
														{
															"name": "headStart",
															"nodeType": "YulIdentifier",
															"src": "21926:9:13"
														}
													],
													"functionName": {
														"name": "sub",
														"nodeType": "YulIdentifier",
														"src": "21916:3:13"
													},
													"nodeType": "YulFunctionCall",
													"src": "21916:20:13"
												}
											],
											"functionName": {
												"name": "mstore",
												"nodeType": "YulIdentifier",
												"src": "21890:6:13"
											},
											"nodeType": "YulFunctionCall",
											"src": "21890:47:13"
										},
										"nodeType": "YulExpressionStatement",
										"src": "21890:47:13"
									},
									{
										"nodeType": "YulAssignment",
										"src": "21946:139:13",
										"value": {
											"arguments": [
												{
													"name": "tail",
													"nodeType": "YulIdentifier",
													"src": "22080:4:13"
												}
											],
											"functionName": {
												"name": "abi_encode_t_stringliteral_02b8c2fb88814cea156c3111f16cfd94d03e5ad66e454c7339e3ad4f3d17e3e7_to_t_string_memory_ptr_fromStack",
												"nodeType": "YulIdentifier",
												"src": "21954:124:13"
											},
											"nodeType": "YulFunctionCall",
											"src": "21954:131:13"
										},
										"variableNames": [
											{
												"name": "tail",
												"nodeType": "YulIdentifier",
												"src": "21946:4:13"
											}
										]
									}
								]
							},
							"name": "abi_encode_tuple_t_stringliteral_02b8c2fb88814cea156c3111f16cfd94d03e5ad66e454c7339e3ad4f3d17e3e7__to_t_string_memory_ptr__fromStack_reversed",
							"nodeType": "YulFunctionDefinition",
							"parameters": [
								{
									"name": "headStart",
									"nodeType": "YulTypedName",
									"src": "21824:9:13",
									"type": ""
								}
							],
							"returnVariables": [
								{
									"name": "tail",
									"nodeType": "YulTypedName",
									"src": "21839:4:13",
									"type": ""
								}
							],
							"src": "21673:419:13"
						},
						{
							"body": {
								"nodeType": "YulBlock",
								"src": "22151:51:13",
								"statements": [
									{
										"nodeType": "YulAssignment",
										"src": "22161:35:13",
										"value": {
											"arguments": [
												{
													"name": "value",
													"nodeType": "YulIdentifier",
													"src": "22190:5:13"
												}
											],
											"functionName": {
												"name": "cleanup_t_uint160",
												"nodeType": "YulIdentifier",
												"src": "22172:17:13"
											},
											"nodeType": "YulFunctionCall",
											"src": "22172:24:13"
										},
										"variableNames": [
											{
												"name": "cleaned",
												"nodeType": "YulIdentifier",
												"src": "22161:7:13"
											}
										]
									}
								]
							},
							"name": "cleanup_t_address_payable",
							"nodeType": "YulFunctionDefinition",
							"parameters": [
								{
									"name": "value",
									"nodeType": "YulTypedName",
									"src": "22133:5:13",
									"type": ""
								}
							],
							"returnVariables": [
								{
									"name": "cleaned",
									"nodeType": "YulTypedName",
									"src": "22143:7:13",
									"type": ""
								}
							],
							"src": "22098:104:13"
						},
						{
							"body": {
								"nodeType": "YulBlock",
								"src": "22289:61:13",
								"statements": [
									{
										"expression": {
											"arguments": [
												{
													"name": "pos",
													"nodeType": "YulIdentifier",
													"src": "22306:3:13"
												},
												{
													"arguments": [
														{
															"name": "value",
															"nodeType": "YulIdentifier",
															"src": "22337:5:13"
														}
													],
													"functionName": {
														"name": "cleanup_t_address_payable",
														"nodeType": "YulIdentifier",
														"src": "22311:25:13"
													},
													"nodeType": "YulFunctionCall",
													"src": "22311:32:13"
												}
											],
											"functionName": {
												"name": "mstore",
												"nodeType": "YulIdentifier",
												"src": "22299:6:13"
											},
											"nodeType": "YulFunctionCall",
											"src": "22299:45:13"
										},
										"nodeType": "YulExpressionStatement",
										"src": "22299:45:13"
									}
								]
							},
							"name": "abi_encode_t_address_payable_to_t_address_payable_fromStack",
							"nodeType": "YulFunctionDefinition",
							"parameters": [
								{
									"name": "value",
									"nodeType": "YulTypedName",
									"src": "22277:5:13",
									"type": ""
								},
								{
									"name": "pos",
									"nodeType": "YulTypedName",
									"src": "22284:3:13",
									"type": ""
								}
							],
							"src": "22208:142:13"
						},
						{
							"body": {
								"nodeType": "YulBlock",
								"src": "22548:323:13",
								"statements": [
									{
										"nodeType": "YulAssignment",
										"src": "22558:26:13",
										"value": {
											"arguments": [
												{
													"name": "headStart",
													"nodeType": "YulIdentifier",
													"src": "22570:9:13"
												},
												{
													"kind": "number",
													"nodeType": "YulLiteral",
													"src": "22581:2:13",
													"type": "",
													"value": "64"
												}
											],
											"functionName": {
												"name": "add",
												"nodeType": "YulIdentifier",
												"src": "22566:3:13"
											},
											"nodeType": "YulFunctionCall",
											"src": "22566:18:13"
										},
										"variableNames": [
											{
												"name": "tail",
												"nodeType": "YulIdentifier",
												"src": "22558:4:13"
											}
										]
									},
									{
										"expression": {
											"arguments": [
												{
													"name": "value0",
													"nodeType": "YulIdentifier",
													"src": "22654:6:13"
												},
												{
													"arguments": [
														{
															"name": "headStart",
															"nodeType": "YulIdentifier",
															"src": "22667:9:13"
														},
														{
															"kind": "number",
															"nodeType": "YulLiteral",
															"src": "22678:1:13",
															"type": "",
															"value": "0"
														}
													],
													"functionName": {
														"name": "add",
														"nodeType": "YulIdentifier",
														"src": "22663:3:13"
													},
													"nodeType": "YulFunctionCall",
													"src": "22663:17:13"
												}
											],
											"functionName": {
												"name": "abi_encode_t_address_payable_to_t_address_payable_fromStack",
												"nodeType": "YulIdentifier",
												"src": "22594:59:13"
											},
											"nodeType": "YulFunctionCall",
											"src": "22594:87:13"
										},
										"nodeType": "YulExpressionStatement",
										"src": "22594:87:13"
									},
									{
										"expression": {
											"arguments": [
												{
													"arguments": [
														{
															"name": "headStart",
															"nodeType": "YulIdentifier",
															"src": "22702:9:13"
														},
														{
															"kind": "number",
															"nodeType": "YulLiteral",
															"src": "22713:2:13",
															"type": "",
															"value": "32"
														}
													],
													"functionName": {
														"name": "add",
														"nodeType": "YulIdentifier",
														"src": "22698:3:13"
													},
													"nodeType": "YulFunctionCall",
													"src": "22698:18:13"
												},
												{
													"arguments": [
														{
															"name": "tail",
															"nodeType": "YulIdentifier",
															"src": "22722:4:13"
														},
														{
															"name": "headStart",
															"nodeType": "YulIdentifier",
															"src": "22728:9:13"
														}
													],
													"functionName": {
														"name": "sub",
														"nodeType": "YulIdentifier",
														"src": "22718:3:13"
													},
													"nodeType": "YulFunctionCall",
													"src": "22718:20:13"
												}
											],
											"functionName": {
												"name": "mstore",
												"nodeType": "YulIdentifier",
												"src": "22691:6:13"
											},
											"nodeType": "YulFunctionCall",
											"src": "22691:48:13"
										},
										"nodeType": "YulExpressionStatement",
										"src": "22691:48:13"
									},
									{
										"nodeType": "YulAssignment",
										"src": "22748:116:13",
										"value": {
											"arguments": [
												{
													"name": "value1",
													"nodeType": "YulIdentifier",
													"src": "22850:6:13"
												},
												{
													"name": "tail",
													"nodeType": "YulIdentifier",
													"src": "22859:4:13"
												}
											],
											"functionName": {
												"name": "abi_encode_t_array$_t_uint256_$dyn_memory_ptr_to_t_array$_t_uint256_$dyn_memory_ptr_fromStack",
												"nodeType": "YulIdentifier",
												"src": "22756:93:13"
											},
											"nodeType": "YulFunctionCall",
											"src": "22756:108:13"
										},
										"variableNames": [
											{
												"name": "tail",
												"nodeType": "YulIdentifier",
												"src": "22748:4:13"
											}
										]
									}
								]
							},
							"name": "abi_encode_tuple_t_address_payable_t_array$_t_uint256_$dyn_memory_ptr__to_t_address_payable_t_array$_t_uint256_$dyn_memory_ptr__fromStack_reversed",
							"nodeType": "YulFunctionDefinition",
							"parameters": [
								{
									"name": "headStart",
									"nodeType": "YulTypedName",
									"src": "22512:9:13",
									"type": ""
								},
								{
									"name": "value1",
									"nodeType": "YulTypedName",
									"src": "22524:6:13",
									"type": ""
								},
								{
									"name": "value0",
									"nodeType": "YulTypedName",
									"src": "22532:6:13",
									"type": ""
								}
							],
							"returnVariables": [
								{
									"name": "tail",
									"nodeType": "YulTypedName",
									"src": "22543:4:13",
									"type": ""
								}
							],
							"src": "22356:515:13"
						},
						{
							"body": {
								"nodeType": "YulBlock",
								"src": "22975:124:13",
								"statements": [
									{
										"nodeType": "YulAssignment",
										"src": "22985:26:13",
										"value": {
											"arguments": [
												{
													"name": "headStart",
													"nodeType": "YulIdentifier",
													"src": "22997:9:13"
												},
												{
													"kind": "number",
													"nodeType": "YulLiteral",
													"src": "23008:2:13",
													"type": "",
													"value": "32"
												}
											],
											"functionName": {
												"name": "add",
												"nodeType": "YulIdentifier",
												"src": "22993:3:13"
											},
											"nodeType": "YulFunctionCall",
											"src": "22993:18:13"
										},
										"variableNames": [
											{
												"name": "tail",
												"nodeType": "YulIdentifier",
												"src": "22985:4:13"
											}
										]
									},
									{
										"expression": {
											"arguments": [
												{
													"name": "value0",
													"nodeType": "YulIdentifier",
													"src": "23065:6:13"
												},
												{
													"arguments": [
														{
															"name": "headStart",
															"nodeType": "YulIdentifier",
															"src": "23078:9:13"
														},
														{
															"kind": "number",
															"nodeType": "YulLiteral",
															"src": "23089:1:13",
															"type": "",
															"value": "0"
														}
													],
													"functionName": {
														"name": "add",
														"nodeType": "YulIdentifier",
														"src": "23074:3:13"
													},
													"nodeType": "YulFunctionCall",
													"src": "23074:17:13"
												}
											],
											"functionName": {
												"name": "abi_encode_t_uint256_to_t_uint256_fromStack",
												"nodeType": "YulIdentifier",
												"src": "23021:43:13"
											},
											"nodeType": "YulFunctionCall",
											"src": "23021:71:13"
										},
										"nodeType": "YulExpressionStatement",
										"src": "23021:71:13"
									}
								]
							},
							"name": "abi_encode_tuple_t_uint256__to_t_uint256__fromStack_reversed",
							"nodeType": "YulFunctionDefinition",
							"parameters": [
								{
									"name": "headStart",
									"nodeType": "YulTypedName",
									"src": "22947:9:13",
									"type": ""
								},
								{
									"name": "value0",
									"nodeType": "YulTypedName",
									"src": "22959:6:13",
									"type": ""
								}
							],
							"returnVariables": [
								{
									"name": "tail",
									"nodeType": "YulTypedName",
									"src": "22970:4:13",
									"type": ""
								}
							],
							"src": "22877:222:13"
						},
						{
							"body": {
								"nodeType": "YulBlock",
								"src": "23211:117:13",
								"statements": [
									{
										"expression": {
											"arguments": [
												{
													"arguments": [
														{
															"name": "memPtr",
															"nodeType": "YulIdentifier",
															"src": "23233:6:13"
														},
														{
															"kind": "number",
															"nodeType": "YulLiteral",
															"src": "23241:1:13",
															"type": "",
															"value": "0"
														}
													],
													"functionName": {
														"name": "add",
														"nodeType": "YulIdentifier",
														"src": "23229:3:13"
													},
													"nodeType": "YulFunctionCall",
													"src": "23229:14:13"
												},
												{
													"hexValue": "596f7520617265206e6f7420746865206f776e6572206f66207468697320746f",
													"kind": "string",
													"nodeType": "YulLiteral",
													"src": "23245:34:13",
													"type": "",
													"value": "You are not the owner of this to"
												}
											],
											"functionName": {
												"name": "mstore",
												"nodeType": "YulIdentifier",
												"src": "23222:6:13"
											},
											"nodeType": "YulFunctionCall",
											"src": "23222:58:13"
										},
										"nodeType": "YulExpressionStatement",
										"src": "23222:58:13"
									},
									{
										"expression": {
											"arguments": [
												{
													"arguments": [
														{
															"name": "memPtr",
															"nodeType": "YulIdentifier",
															"src": "23301:6:13"
														},
														{
															"kind": "number",
															"nodeType": "YulLiteral",
															"src": "23309:2:13",
															"type": "",
															"value": "32"
														}
													],
													"functionName": {
														"name": "add",
														"nodeType": "YulIdentifier",
														"src": "23297:3:13"
													},
													"nodeType": "YulFunctionCall",
													"src": "23297:15:13"
												},
												{
													"hexValue": "6b656e21",
													"kind": "string",
													"nodeType": "YulLiteral",
													"src": "23314:6:13",
													"type": "",
													"value": "ken!"
												}
											],
											"functionName": {
												"name": "mstore",
												"nodeType": "YulIdentifier",
												"src": "23290:6:13"
											},
											"nodeType": "YulFunctionCall",
											"src": "23290:31:13"
										},
										"nodeType": "YulExpressionStatement",
										"src": "23290:31:13"
									}
								]
							},
							"name": "store_literal_in_memory_8f0021d44dc3c6a184f0ca9bb2b581abde8876c7afea5879ec72cd3feb6a7120",
							"nodeType": "YulFunctionDefinition",
							"parameters": [
								{
									"name": "memPtr",
									"nodeType": "YulTypedName",
									"src": "23203:6:13",
									"type": ""
								}
							],
							"src": "23105:223:13"
						},
						{
							"body": {
								"nodeType": "YulBlock",
								"src": "23480:220:13",
								"statements": [
									{
										"nodeType": "YulAssignment",
										"src": "23490:74:13",
										"value": {
											"arguments": [
												{
													"name": "pos",
													"nodeType": "YulIdentifier",
													"src": "23556:3:13"
												},
												{
													"kind": "number",
													"nodeType": "YulLiteral",
													"src": "23561:2:13",
													"type": "",
													"value": "36"
												}
											],
											"functionName": {
												"name": "array_storeLengthForEncoding_t_string_memory_ptr_fromStack",
												"nodeType": "YulIdentifier",
												"src": "23497:58:13"
											},
											"nodeType": "YulFunctionCall",
											"src": "23497:67:13"
										},
										"variableNames": [
											{
												"name": "pos",
												"nodeType": "YulIdentifier",
												"src": "23490:3:13"
											}
										]
									},
									{
										"expression": {
											"arguments": [
												{
													"name": "pos",
													"nodeType": "YulIdentifier",
													"src": "23662:3:13"
												}
											],
											"functionName": {
												"name": "store_literal_in_memory_8f0021d44dc3c6a184f0ca9bb2b581abde8876c7afea5879ec72cd3feb6a7120",
												"nodeType": "YulIdentifier",
												"src": "23573:88:13"
											},
											"nodeType": "YulFunctionCall",
											"src": "23573:93:13"
										},
										"nodeType": "YulExpressionStatement",
										"src": "23573:93:13"
									},
									{
										"nodeType": "YulAssignment",
										"src": "23675:19:13",
										"value": {
											"arguments": [
												{
													"name": "pos",
													"nodeType": "YulIdentifier",
													"src": "23686:3:13"
												},
												{
													"kind": "number",
													"nodeType": "YulLiteral",
													"src": "23691:2:13",
													"type": "",
													"value": "64"
												}
											],
											"functionName": {
												"name": "add",
												"nodeType": "YulIdentifier",
												"src": "23682:3:13"
											},
											"nodeType": "YulFunctionCall",
											"src": "23682:12:13"
										},
										"variableNames": [
											{
												"name": "end",
												"nodeType": "YulIdentifier",
												"src": "23675:3:13"
											}
										]
									}
								]
							},
							"name": "abi_encode_t_stringliteral_8f0021d44dc3c6a184f0ca9bb2b581abde8876c7afea5879ec72cd3feb6a7120_to_t_string_memory_ptr_fromStack",
							"nodeType": "YulFunctionDefinition",
							"parameters": [
								{
									"name": "pos",
									"nodeType": "YulTypedName",
									"src": "23468:3:13",
									"type": ""
								}
							],
							"returnVariables": [
								{
									"name": "end",
									"nodeType": "YulTypedName",
									"src": "23476:3:13",
									"type": ""
								}
							],
							"src": "23334:366:13"
						},
						{
							"body": {
								"nodeType": "YulBlock",
								"src": "23877:248:13",
								"statements": [
									{
										"nodeType": "YulAssignment",
										"src": "23887:26:13",
										"value": {
											"arguments": [
												{
													"name": "headStart",
													"nodeType": "YulIdentifier",
													"src": "23899:9:13"
												},
												{
													"kind": "number",
													"nodeType": "YulLiteral",
													"src": "23910:2:13",
													"type": "",
													"value": "32"
												}
											],
											"functionName": {
												"name": "add",
												"nodeType": "YulIdentifier",
												"src": "23895:3:13"
											},
											"nodeType": "YulFunctionCall",
											"src": "23895:18:13"
										},
										"variableNames": [
											{
												"name": "tail",
												"nodeType": "YulIdentifier",
												"src": "23887:4:13"
											}
										]
									},
									{
										"expression": {
											"arguments": [
												{
													"arguments": [
														{
															"name": "headStart",
															"nodeType": "YulIdentifier",
															"src": "23934:9:13"
														},
														{
															"kind": "number",
															"nodeType": "YulLiteral",
															"src": "23945:1:13",
															"type": "",
															"value": "0"
														}
													],
													"functionName": {
														"name": "add",
														"nodeType": "YulIdentifier",
														"src": "23930:3:13"
													},
													"nodeType": "YulFunctionCall",
													"src": "23930:17:13"
												},
												{
													"arguments": [
														{
															"name": "tail",
															"nodeType": "YulIdentifier",
															"src": "23953:4:13"
														},
														{
															"name": "headStart",
															"nodeType": "YulIdentifier",
															"src": "23959:9:13"
														}
													],
													"functionName": {
														"name": "sub",
														"nodeType": "YulIdentifier",
														"src": "23949:3:13"
													},
													"nodeType": "YulFunctionCall",
													"src": "23949:20:13"
												}
											],
											"functionName": {
												"name": "mstore",
												"nodeType": "YulIdentifier",
												"src": "23923:6:13"
											},
											"nodeType": "YulFunctionCall",
											"src": "23923:47:13"
										},
										"nodeType": "YulExpressionStatement",
										"src": "23923:47:13"
									},
									{
										"nodeType": "YulAssignment",
										"src": "23979:139:13",
										"value": {
											"arguments": [
												{
													"name": "tail",
													"nodeType": "YulIdentifier",
													"src": "24113:4:13"
												}
											],
											"functionName": {
												"name": "abi_encode_t_stringliteral_8f0021d44dc3c6a184f0ca9bb2b581abde8876c7afea5879ec72cd3feb6a7120_to_t_string_memory_ptr_fromStack",
												"nodeType": "YulIdentifier",
												"src": "23987:124:13"
											},
											"nodeType": "YulFunctionCall",
											"src": "23987:131:13"
										},
										"variableNames": [
											{
												"name": "tail",
												"nodeType": "YulIdentifier",
												"src": "23979:4:13"
											}
										]
									}
								]
							},
							"name": "abi_encode_tuple_t_stringliteral_8f0021d44dc3c6a184f0ca9bb2b581abde8876c7afea5879ec72cd3feb6a7120__to_t_string_memory_ptr__fromStack_reversed",
							"nodeType": "YulFunctionDefinition",
							"parameters": [
								{
									"name": "headStart",
									"nodeType": "YulTypedName",
									"src": "23857:9:13",
									"type": ""
								}
							],
							"returnVariables": [
								{
									"name": "tail",
									"nodeType": "YulTypedName",
									"src": "23872:4:13",
									"type": ""
								}
							],
							"src": "23706:419:13"
						},
						{
							"body": {
								"nodeType": "YulBlock",
								"src": "24237:116:13",
								"statements": [
									{
										"expression": {
											"arguments": [
												{
													"arguments": [
														{
															"name": "memPtr",
															"nodeType": "YulIdentifier",
															"src": "24259:6:13"
														},
														{
															"kind": "number",
															"nodeType": "YulLiteral",
															"src": "24267:1:13",
															"type": "",
															"value": "0"
														}
													],
													"functionName": {
														"name": "add",
														"nodeType": "YulIdentifier",
														"src": "24255:3:13"
													},
													"nodeType": "YulFunctionCall",
													"src": "24255:14:13"
												},
												{
													"hexValue": "436f6e7472616374206e6f7420617070726f76656420746f206275726e20746f",
													"kind": "string",
													"nodeType": "YulLiteral",
													"src": "24271:34:13",
													"type": "",
													"value": "Contract not approved to burn to"
												}
											],
											"functionName": {
												"name": "mstore",
												"nodeType": "YulIdentifier",
												"src": "24248:6:13"
											},
											"nodeType": "YulFunctionCall",
											"src": "24248:58:13"
										},
										"nodeType": "YulExpressionStatement",
										"src": "24248:58:13"
									},
									{
										"expression": {
											"arguments": [
												{
													"arguments": [
														{
															"name": "memPtr",
															"nodeType": "YulIdentifier",
															"src": "24327:6:13"
														},
														{
															"kind": "number",
															"nodeType": "YulLiteral",
															"src": "24335:2:13",
															"type": "",
															"value": "32"
														}
													],
													"functionName": {
														"name": "add",
														"nodeType": "YulIdentifier",
														"src": "24323:3:13"
													},
													"nodeType": "YulFunctionCall",
													"src": "24323:15:13"
												},
												{
													"hexValue": "6b656e",
													"kind": "string",
													"nodeType": "YulLiteral",
													"src": "24340:5:13",
													"type": "",
													"value": "ken"
												}
											],
											"functionName": {
												"name": "mstore",
												"nodeType": "YulIdentifier",
												"src": "24316:6:13"
											},
											"nodeType": "YulFunctionCall",
											"src": "24316:30:13"
										},
										"nodeType": "YulExpressionStatement",
										"src": "24316:30:13"
									}
								]
							},
							"name": "store_literal_in_memory_4f4fa40674b63d9f789043d4550fa5f5291b0482fc45cbbc7ace27126a67c59b",
							"nodeType": "YulFunctionDefinition",
							"parameters": [
								{
									"name": "memPtr",
									"nodeType": "YulTypedName",
									"src": "24229:6:13",
									"type": ""
								}
							],
							"src": "24131:222:13"
						},
						{
							"body": {
								"nodeType": "YulBlock",
								"src": "24505:220:13",
								"statements": [
									{
										"nodeType": "YulAssignment",
										"src": "24515:74:13",
										"value": {
											"arguments": [
												{
													"name": "pos",
													"nodeType": "YulIdentifier",
													"src": "24581:3:13"
												},
												{
													"kind": "number",
													"nodeType": "YulLiteral",
													"src": "24586:2:13",
													"type": "",
													"value": "35"
												}
											],
											"functionName": {
												"name": "array_storeLengthForEncoding_t_string_memory_ptr_fromStack",
												"nodeType": "YulIdentifier",
												"src": "24522:58:13"
											},
											"nodeType": "YulFunctionCall",
											"src": "24522:67:13"
										},
										"variableNames": [
											{
												"name": "pos",
												"nodeType": "YulIdentifier",
												"src": "24515:3:13"
											}
										]
									},
									{
										"expression": {
											"arguments": [
												{
													"name": "pos",
													"nodeType": "YulIdentifier",
													"src": "24687:3:13"
												}
											],
											"functionName": {
												"name": "store_literal_in_memory_4f4fa40674b63d9f789043d4550fa5f5291b0482fc45cbbc7ace27126a67c59b",
												"nodeType": "YulIdentifier",
												"src": "24598:88:13"
											},
											"nodeType": "YulFunctionCall",
											"src": "24598:93:13"
										},
										"nodeType": "YulExpressionStatement",
										"src": "24598:93:13"
									},
									{
										"nodeType": "YulAssignment",
										"src": "24700:19:13",
										"value": {
											"arguments": [
												{
													"name": "pos",
													"nodeType": "YulIdentifier",
													"src": "24711:3:13"
												},
												{
													"kind": "number",
													"nodeType": "YulLiteral",
													"src": "24716:2:13",
													"type": "",
													"value": "64"
												}
											],
											"functionName": {
												"name": "add",
												"nodeType": "YulIdentifier",
												"src": "24707:3:13"
											},
											"nodeType": "YulFunctionCall",
											"src": "24707:12:13"
										},
										"variableNames": [
											{
												"name": "end",
												"nodeType": "YulIdentifier",
												"src": "24700:3:13"
											}
										]
									}
								]
							},
							"name": "abi_encode_t_stringliteral_4f4fa40674b63d9f789043d4550fa5f5291b0482fc45cbbc7ace27126a67c59b_to_t_string_memory_ptr_fromStack",
							"nodeType": "YulFunctionDefinition",
							"parameters": [
								{
									"name": "pos",
									"nodeType": "YulTypedName",
									"src": "24493:3:13",
									"type": ""
								}
							],
							"returnVariables": [
								{
									"name": "end",
									"nodeType": "YulTypedName",
									"src": "24501:3:13",
									"type": ""
								}
							],
							"src": "24359:366:13"
						},
						{
							"body": {
								"nodeType": "YulBlock",
								"src": "24902:248:13",
								"statements": [
									{
										"nodeType": "YulAssignment",
										"src": "24912:26:13",
										"value": {
											"arguments": [
												{
													"name": "headStart",
													"nodeType": "YulIdentifier",
													"src": "24924:9:13"
												},
												{
													"kind": "number",
													"nodeType": "YulLiteral",
													"src": "24935:2:13",
													"type": "",
													"value": "32"
												}
											],
											"functionName": {
												"name": "add",
												"nodeType": "YulIdentifier",
												"src": "24920:3:13"
											},
											"nodeType": "YulFunctionCall",
											"src": "24920:18:13"
										},
										"variableNames": [
											{
												"name": "tail",
												"nodeType": "YulIdentifier",
												"src": "24912:4:13"
											}
										]
									},
									{
										"expression": {
											"arguments": [
												{
													"arguments": [
														{
															"name": "headStart",
															"nodeType": "YulIdentifier",
															"src": "24959:9:13"
														},
														{
															"kind": "number",
															"nodeType": "YulLiteral",
															"src": "24970:1:13",
															"type": "",
															"value": "0"
														}
													],
													"functionName": {
														"name": "add",
														"nodeType": "YulIdentifier",
														"src": "24955:3:13"
													},
													"nodeType": "YulFunctionCall",
													"src": "24955:17:13"
												},
												{
													"arguments": [
														{
															"name": "tail",
															"nodeType": "YulIdentifier",
															"src": "24978:4:13"
														},
														{
															"name": "headStart",
															"nodeType": "YulIdentifier",
															"src": "24984:9:13"
														}
													],
													"functionName": {
														"name": "sub",
														"nodeType": "YulIdentifier",
														"src": "24974:3:13"
													},
													"nodeType": "YulFunctionCall",
													"src": "24974:20:13"
												}
											],
											"functionName": {
												"name": "mstore",
												"nodeType": "YulIdentifier",
												"src": "24948:6:13"
											},
											"nodeType": "YulFunctionCall",
											"src": "24948:47:13"
										},
										"nodeType": "YulExpressionStatement",
										"src": "24948:47:13"
									},
									{
										"nodeType": "YulAssignment",
										"src": "25004:139:13",
										"value": {
											"arguments": [
												{
													"name": "tail",
													"nodeType": "YulIdentifier",
													"src": "25138:4:13"
												}
											],
											"functionName": {
												"name": "abi_encode_t_stringliteral_4f4fa40674b63d9f789043d4550fa5f5291b0482fc45cbbc7ace27126a67c59b_to_t_string_memory_ptr_fromStack",
												"nodeType": "YulIdentifier",
												"src": "25012:124:13"
											},
											"nodeType": "YulFunctionCall",
											"src": "25012:131:13"
										},
										"variableNames": [
											{
												"name": "tail",
												"nodeType": "YulIdentifier",
												"src": "25004:4:13"
											}
										]
									}
								]
							},
							"name": "abi_encode_tuple_t_stringliteral_4f4fa40674b63d9f789043d4550fa5f5291b0482fc45cbbc7ace27126a67c59b__to_t_string_memory_ptr__fromStack_reversed",
							"nodeType": "YulFunctionDefinition",
							"parameters": [
								{
									"name": "headStart",
									"nodeType": "YulTypedName",
									"src": "24882:9:13",
									"type": ""
								}
							],
							"returnVariables": [
								{
									"name": "tail",
									"nodeType": "YulTypedName",
									"src": "24897:4:13",
									"type": ""
								}
							],
							"src": "24731:419:13"
						},
						{
							"body": {
								"nodeType": "YulBlock",
								"src": "25298:222:13",
								"statements": [
									{
										"nodeType": "YulAssignment",
										"src": "25308:26:13",
										"value": {
											"arguments": [
												{
													"name": "headStart",
													"nodeType": "YulIdentifier",
													"src": "25320:9:13"
												},
												{
													"kind": "number",
													"nodeType": "YulLiteral",
													"src": "25331:2:13",
													"type": "",
													"value": "64"
												}
											],
											"functionName": {
												"name": "add",
												"nodeType": "YulIdentifier",
												"src": "25316:3:13"
											},
											"nodeType": "YulFunctionCall",
											"src": "25316:18:13"
										},
										"variableNames": [
											{
												"name": "tail",
												"nodeType": "YulIdentifier",
												"src": "25308:4:13"
											}
										]
									},
									{
										"expression": {
											"arguments": [
												{
													"name": "value0",
													"nodeType": "YulIdentifier",
													"src": "25404:6:13"
												},
												{
													"arguments": [
														{
															"name": "headStart",
															"nodeType": "YulIdentifier",
															"src": "25417:9:13"
														},
														{
															"kind": "number",
															"nodeType": "YulLiteral",
															"src": "25428:1:13",
															"type": "",
															"value": "0"
														}
													],
													"functionName": {
														"name": "add",
														"nodeType": "YulIdentifier",
														"src": "25413:3:13"
													},
													"nodeType": "YulFunctionCall",
													"src": "25413:17:13"
												}
											],
											"functionName": {
												"name": "abi_encode_t_address_payable_to_t_address_payable_fromStack",
												"nodeType": "YulIdentifier",
												"src": "25344:59:13"
											},
											"nodeType": "YulFunctionCall",
											"src": "25344:87:13"
										},
										"nodeType": "YulExpressionStatement",
										"src": "25344:87:13"
									},
									{
										"expression": {
											"arguments": [
												{
													"name": "value1",
													"nodeType": "YulIdentifier",
													"src": "25485:6:13"
												},
												{
													"arguments": [
														{
															"name": "headStart",
															"nodeType": "YulIdentifier",
															"src": "25498:9:13"
														},
														{
															"kind": "number",
															"nodeType": "YulLiteral",
															"src": "25509:2:13",
															"type": "",
															"value": "32"
														}
													],
													"functionName": {
														"name": "add",
														"nodeType": "YulIdentifier",
														"src": "25494:3:13"
													},
													"nodeType": "YulFunctionCall",
													"src": "25494:18:13"
												}
											],
											"functionName": {
												"name": "abi_encode_t_uint256_to_t_uint256_fromStack",
												"nodeType": "YulIdentifier",
												"src": "25441:43:13"
											},
											"nodeType": "YulFunctionCall",
											"src": "25441:72:13"
										},
										"nodeType": "YulExpressionStatement",
										"src": "25441:72:13"
									}
								]
							},
							"name": "abi_encode_tuple_t_address_payable_t_uint256__to_t_address_payable_t_uint256__fromStack_reversed",
							"nodeType": "YulFunctionDefinition",
							"parameters": [
								{
									"name": "headStart",
									"nodeType": "YulTypedName",
									"src": "25262:9:13",
									"type": ""
								},
								{
									"name": "value1",
									"nodeType": "YulTypedName",
									"src": "25274:6:13",
									"type": ""
								},
								{
									"name": "value0",
									"nodeType": "YulTypedName",
									"src": "25282:6:13",
									"type": ""
								}
							],
							"returnVariables": [
								{
									"name": "tail",
									"nodeType": "YulTypedName",
									"src": "25293:4:13",
									"type": ""
								}
							],
							"src": "25156:364:13"
						}
					]
				},
				"contents": "{\n\n    function cleanup_t_uint256(value) -> cleaned {\n        cleaned := value\n    }\n\n    function abi_encode_t_uint256_to_t_uint256_fromStack(value, pos) {\n        mstore(pos, cleanup_t_uint256(value))\n    }\n\n    function array_length_t_array$_t_uint256_$dyn_memory_ptr(value) -> length {\n\n        length := mload(value)\n\n    }\n\n    function array_storeLengthForEncoding_t_array$_t_uint256_$dyn_memory_ptr_fromStack(pos, length) -> updated_pos {\n        mstore(pos, length)\n        updated_pos := add(pos, 0x20)\n    }\n\n    function array_dataslot_t_array$_t_uint256_$dyn_memory_ptr(ptr) -> data {\n        data := ptr\n\n        data := add(ptr, 0x20)\n\n    }\n\n    function abi_encode_t_uint256_to_t_uint256(value, pos) {\n        mstore(pos, cleanup_t_uint256(value))\n    }\n\n    function abi_encodeUpdatedPos_t_uint256_to_t_uint256(value0, pos) -> updatedPos {\n        abi_encode_t_uint256_to_t_uint256(value0, pos)\n        updatedPos := add(pos, 0x20)\n    }\n\n    function array_nextElement_t_array$_t_uint256_$dyn_memory_ptr(ptr) -> next {\n        next := add(ptr, 0x20)\n    }\n\n    // uint256[] -> uint256[]\n    function abi_encode_t_array$_t_uint256_$dyn_memory_ptr_to_t_array$_t_uint256_$dyn_memory_ptr_fromStack(value, pos)  -> end  {\n        let length := array_length_t_array$_t_uint256_$dyn_memory_ptr(value)\n        pos := array_storeLengthForEncoding_t_array$_t_uint256_$dyn_memory_ptr_fromStack(pos, length)\n        let baseRef := array_dataslot_t_array$_t_uint256_$dyn_memory_ptr(value)\n        let srcPtr := baseRef\n        for { let i := 0 } lt(i, length) { i := add(i, 1) }\n        {\n            let elementValue0 := mload(srcPtr)\n            pos := abi_encodeUpdatedPos_t_uint256_to_t_uint256(elementValue0, pos)\n            srcPtr := array_nextElement_t_array$_t_uint256_$dyn_memory_ptr(srcPtr)\n        }\n        end := pos\n    }\n\n    function cleanup_t_uint160(value) -> cleaned {\n        cleaned := and(value, 0xffffffffffffffffffffffffffffffffffffffff)\n    }\n\n    function cleanup_t_address(value) -> cleaned {\n        cleaned := cleanup_t_uint160(value)\n    }\n\n    function abi_encode_t_address_to_t_address_fromStack(value, pos) {\n        mstore(pos, cleanup_t_address(value))\n    }\n\n    function abi_encode_tuple_t_uint256_t_uint256_t_array$_t_uint256_$dyn_memory_ptr_t_address__to_t_uint256_t_uint256_t_array$_t_uint256_$dyn_memory_ptr_t_address__fromStack_reversed(headStart , value3, value2, value1, value0) -> tail {\n        tail := add(headStart, 128)\n\n        abi_encode_t_uint256_to_t_uint256_fromStack(value0,  add(headStart, 0))\n\n        abi_encode_t_uint256_to_t_uint256_fromStack(value1,  add(headStart, 32))\n\n        mstore(add(headStart, 64), sub(tail, headStart))\n        tail := abi_encode_t_array$_t_uint256_$dyn_memory_ptr_to_t_array$_t_uint256_$dyn_memory_ptr_fromStack(value2,  tail)\n\n        abi_encode_t_address_to_t_address_fromStack(value3,  add(headStart, 96))\n\n    }\n\n    function allocate_unbounded() -> memPtr {\n        memPtr := mload(64)\n    }\n\n    function revert_error_dbdddcbe895c83990c08b3492a0e83918d802a52331272ac6fdb6a7c4aea3b1b() {\n        revert(0, 0)\n    }\n\n    function revert_error_c1322bf8034eace5e0b5c7295db60986aa89aae5e0ea0873e4689e076861a5db() {\n        revert(0, 0)\n    }\n\n    function validator_revert_t_address(value) {\n        if iszero(eq(value, cleanup_t_address(value))) { revert(0, 0) }\n    }\n\n    function abi_decode_t_address(offset, end) -> value {\n        value := calldataload(offset)\n        validator_revert_t_address(value)\n    }\n\n    function abi_decode_tuple_t_address(headStart, dataEnd) -> value0 {\n        if slt(sub(dataEnd, headStart), 32) { revert_error_dbdddcbe895c83990c08b3492a0e83918d802a52331272ac6fdb6a7c4aea3b1b() }\n\n        {\n\n            let offset := 0\n\n            value0 := abi_decode_t_address(add(headStart, offset), dataEnd)\n        }\n\n    }\n\n    function abi_encode_tuple_t_address__to_t_address__fromStack_reversed(headStart , value0) -> tail {\n        tail := add(headStart, 32)\n\n        abi_encode_t_address_to_t_address_fromStack(value0,  add(headStart, 0))\n\n    }\n\n    function validator_revert_t_uint256(value) {\n        if iszero(eq(value, cleanup_t_uint256(value))) { revert(0, 0) }\n    }\n\n    function abi_decode_t_uint256(offset, end) -> value {\n        value := calldataload(offset)\n        validator_revert_t_uint256(value)\n    }\n\n    function abi_decode_tuple_t_addresst_uint256(headStart, dataEnd) -> value0, value1 {\n        if slt(sub(dataEnd, headStart), 64) { revert_error_dbdddcbe895c83990c08b3492a0e83918d802a52331272ac6fdb6a7c4aea3b1b() }\n\n        {\n\n            let offset := 0\n\n            value0 := abi_decode_t_address(add(headStart, offset), dataEnd)\n        }\n\n        {\n\n            let offset := 32\n\n            value1 := abi_decode_t_uint256(add(headStart, offset), dataEnd)\n        }\n\n    }\n\n    function revert_error_1b9f4a0a5773e33b91aa01db23bf8c55fce1411167c872835e7fa00a4f17d46d() {\n        revert(0, 0)\n    }\n\n    function round_up_to_mul_of_32(value) -> result {\n        result := and(add(value, 31), not(31))\n    }\n\n    function panic_error_0x41() {\n        mstore(0, 35408467139433450592217433187231851964531694900788300625387963629091585785856)\n        mstore(4, 0x41)\n        revert(0, 0x24)\n    }\n\n    function finalize_allocation(memPtr, size) {\n        let newFreePtr := add(memPtr, round_up_to_mul_of_32(size))\n        // protect against overflow\n        if or(gt(newFreePtr, 0xffffffffffffffff), lt(newFreePtr, memPtr)) { panic_error_0x41() }\n        mstore(64, newFreePtr)\n    }\n\n    function allocate_memory(size) -> memPtr {\n        memPtr := allocate_unbounded()\n        finalize_allocation(memPtr, size)\n    }\n\n    function array_allocation_size_t_array$_t_uint256_$dyn_memory_ptr(length) -> size {\n        // Make sure we can allocate memory without overflow\n        if gt(length, 0xffffffffffffffff) { panic_error_0x41() }\n\n        size := mul(length, 0x20)\n\n        // add length slot\n        size := add(size, 0x20)\n\n    }\n\n    function revert_error_81385d8c0b31fffe14be1da910c8bd3a80be4cfa248e04f42ec0faea3132a8ef() {\n        revert(0, 0)\n    }\n\n    // uint256[]\n    function abi_decode_available_length_t_array$_t_uint256_$dyn_memory_ptr(offset, length, end) -> array {\n        array := allocate_memory(array_allocation_size_t_array$_t_uint256_$dyn_memory_ptr(length))\n        let dst := array\n\n        mstore(array, length)\n        dst := add(array, 0x20)\n\n        let srcEnd := add(offset, mul(length, 0x20))\n        if gt(srcEnd, end) {\n            revert_error_81385d8c0b31fffe14be1da910c8bd3a80be4cfa248e04f42ec0faea3132a8ef()\n        }\n        for { let src := offset } lt(src, srcEnd) { src := add(src, 0x20) }\n        {\n\n            let elementPos := src\n\n            mstore(dst, abi_decode_t_uint256(elementPos, end))\n            dst := add(dst, 0x20)\n        }\n    }\n\n    // uint256[]\n    function abi_decode_t_array$_t_uint256_$dyn_memory_ptr(offset, end) -> array {\n        if iszero(slt(add(offset, 0x1f), end)) { revert_error_1b9f4a0a5773e33b91aa01db23bf8c55fce1411167c872835e7fa00a4f17d46d() }\n        let length := calldataload(offset)\n        array := abi_decode_available_length_t_array$_t_uint256_$dyn_memory_ptr(add(offset, 0x20), length, end)\n    }\n\n    function abi_decode_tuple_t_addresst_array$_t_uint256_$dyn_memory_ptrt_array$_t_uint256_$dyn_memory_ptr(headStart, dataEnd) -> value0, value1, value2 {\n        if slt(sub(dataEnd, headStart), 96) { revert_error_dbdddcbe895c83990c08b3492a0e83918d802a52331272ac6fdb6a7c4aea3b1b() }\n\n        {\n\n            let offset := 0\n\n            value0 := abi_decode_t_address(add(headStart, offset), dataEnd)\n        }\n\n        {\n\n            let offset := calldataload(add(headStart, 32))\n            if gt(offset, 0xffffffffffffffff) { revert_error_c1322bf8034eace5e0b5c7295db60986aa89aae5e0ea0873e4689e076861a5db() }\n\n            value1 := abi_decode_t_array$_t_uint256_$dyn_memory_ptr(add(headStart, offset), dataEnd)\n        }\n\n        {\n\n            let offset := calldataload(add(headStart, 64))\n            if gt(offset, 0xffffffffffffffff) { revert_error_c1322bf8034eace5e0b5c7295db60986aa89aae5e0ea0873e4689e076861a5db() }\n\n            value2 := abi_decode_t_array$_t_uint256_$dyn_memory_ptr(add(headStart, offset), dataEnd)\n        }\n\n    }\n\n    function abi_decode_tuple_t_addresst_array$_t_uint256_$dyn_memory_ptr(headStart, dataEnd) -> value0, value1 {\n        if slt(sub(dataEnd, headStart), 64) { revert_error_dbdddcbe895c83990c08b3492a0e83918d802a52331272ac6fdb6a7c4aea3b1b() }\n\n        {\n\n            let offset := 0\n\n            value0 := abi_decode_t_address(add(headStart, offset), dataEnd)\n        }\n\n        {\n\n            let offset := calldataload(add(headStart, 32))\n            if gt(offset, 0xffffffffffffffff) { revert_error_c1322bf8034eace5e0b5c7295db60986aa89aae5e0ea0873e4689e076861a5db() }\n\n            value1 := abi_decode_t_array$_t_uint256_$dyn_memory_ptr(add(headStart, offset), dataEnd)\n        }\n\n    }\n\n    function array_storeLengthForEncoding_t_string_memory_ptr_fromStack(pos, length) -> updated_pos {\n        mstore(pos, length)\n        updated_pos := add(pos, 0x20)\n    }\n\n    function store_literal_in_memory_9761939be34d52ad729f4e4e7fb4f36a053f0fee36a4e99216ff07d0c9de5bfd(memPtr) {\n\n        mstore(add(memPtr, 0), \"No NFT contract associated with \")\n\n        mstore(add(memPtr, 32), \"caller\")\n\n    }\n\n    function abi_encode_t_stringliteral_9761939be34d52ad729f4e4e7fb4f36a053f0fee36a4e99216ff07d0c9de5bfd_to_t_string_memory_ptr_fromStack(pos) -> end {\n        pos := array_storeLengthForEncoding_t_string_memory_ptr_fromStack(pos, 38)\n        store_literal_in_memory_9761939be34d52ad729f4e4e7fb4f36a053f0fee36a4e99216ff07d0c9de5bfd(pos)\n        end := add(pos, 64)\n    }\n\n    function abi_encode_tuple_t_stringliteral_9761939be34d52ad729f4e4e7fb4f36a053f0fee36a4e99216ff07d0c9de5bfd__to_t_string_memory_ptr__fromStack_reversed(headStart ) -> tail {\n        tail := add(headStart, 32)\n\n        mstore(add(headStart, 0), sub(tail, headStart))\n        tail := abi_encode_t_stringliteral_9761939be34d52ad729f4e4e7fb4f36a053f0fee36a4e99216ff07d0c9de5bfd_to_t_string_memory_ptr_fromStack( tail)\n\n    }\n\n    function store_literal_in_memory_f9557d505c8bd41bfb57feb435c00f2fd7e4e4f41b7d53b93742c0a537d5aa0f(memPtr) {\n\n        mstore(add(memPtr, 0), \"No vault associated with caller'\")\n\n        mstore(add(memPtr, 32), \"s NFT contract\")\n\n    }\n\n    function abi_encode_t_stringliteral_f9557d505c8bd41bfb57feb435c00f2fd7e4e4f41b7d53b93742c0a537d5aa0f_to_t_string_memory_ptr_fromStack(pos) -> end {\n        pos := array_storeLengthForEncoding_t_string_memory_ptr_fromStack(pos, 46)\n        store_literal_in_memory_f9557d505c8bd41bfb57feb435c00f2fd7e4e4f41b7d53b93742c0a537d5aa0f(pos)\n        end := add(pos, 64)\n    }\n\n    function abi_encode_tuple_t_stringliteral_f9557d505c8bd41bfb57feb435c00f2fd7e4e4f41b7d53b93742c0a537d5aa0f__to_t_string_memory_ptr__fromStack_reversed(headStart ) -> tail {\n        tail := add(headStart, 32)\n\n        mstore(add(headStart, 0), sub(tail, headStart))\n        tail := abi_encode_t_stringliteral_f9557d505c8bd41bfb57feb435c00f2fd7e4e4f41b7d53b93742c0a537d5aa0f_to_t_string_memory_ptr_fromStack( tail)\n\n    }\n\n    function abi_decode_t_uint256_fromMemory(offset, end) -> value {\n        value := mload(offset)\n        validator_revert_t_uint256(value)\n    }\n\n    function abi_decode_tuple_t_uint256_fromMemory(headStart, dataEnd) -> value0 {\n        if slt(sub(dataEnd, headStart), 32) { revert_error_dbdddcbe895c83990c08b3492a0e83918d802a52331272ac6fdb6a7c4aea3b1b() }\n\n        {\n\n            let offset := 0\n\n            value0 := abi_decode_t_uint256_fromMemory(add(headStart, offset), dataEnd)\n        }\n\n    }\n\n    // uint256[]\n    function abi_decode_available_length_t_array$_t_uint256_$dyn_memory_ptr_fromMemory(offset, length, end) -> array {\n        array := allocate_memory(array_allocation_size_t_array$_t_uint256_$dyn_memory_ptr(length))\n        let dst := array\n\n        mstore(array, length)\n        dst := add(array, 0x20)\n\n        let srcEnd := add(offset, mul(length, 0x20))\n        if gt(srcEnd, end) {\n            revert_error_81385d8c0b31fffe14be1da910c8bd3a80be4cfa248e04f42ec0faea3132a8ef()\n        }\n        for { let src := offset } lt(src, srcEnd) { src := add(src, 0x20) }\n        {\n\n            let elementPos := src\n\n            mstore(dst, abi_decode_t_uint256_fromMemory(elementPos, end))\n            dst := add(dst, 0x20)\n        }\n    }\n\n    // uint256[]\n    function abi_decode_t_array$_t_uint256_$dyn_memory_ptr_fromMemory(offset, end) -> array {\n        if iszero(slt(add(offset, 0x1f), end)) { revert_error_1b9f4a0a5773e33b91aa01db23bf8c55fce1411167c872835e7fa00a4f17d46d() }\n        let length := mload(offset)\n        array := abi_decode_available_length_t_array$_t_uint256_$dyn_memory_ptr_fromMemory(add(offset, 0x20), length, end)\n    }\n\n    function abi_decode_tuple_t_array$_t_uint256_$dyn_memory_ptr_fromMemory(headStart, dataEnd) -> value0 {\n        if slt(sub(dataEnd, headStart), 32) { revert_error_dbdddcbe895c83990c08b3492a0e83918d802a52331272ac6fdb6a7c4aea3b1b() }\n\n        {\n\n            let offset := mload(add(headStart, 0))\n            if gt(offset, 0xffffffffffffffff) { revert_error_c1322bf8034eace5e0b5c7295db60986aa89aae5e0ea0873e4689e076861a5db() }\n\n            value0 := abi_decode_t_array$_t_uint256_$dyn_memory_ptr_fromMemory(add(headStart, offset), dataEnd)\n        }\n\n    }\n\n    function store_literal_in_memory_5824732942b65793939b349ae446a33529c5efa78f9adc0aff8550635fa44b27(memPtr) {\n\n        mstore(add(memPtr, 0), \"Vault already exists for this NF\")\n\n        mstore(add(memPtr, 32), \"T contract\")\n\n    }\n\n    function abi_encode_t_stringliteral_5824732942b65793939b349ae446a33529c5efa78f9adc0aff8550635fa44b27_to_t_string_memory_ptr_fromStack(pos) -> end {\n        pos := array_storeLengthForEncoding_t_string_memory_ptr_fromStack(pos, 42)\n        store_literal_in_memory_5824732942b65793939b349ae446a33529c5efa78f9adc0aff8550635fa44b27(pos)\n        end := add(pos, 64)\n    }\n\n    function abi_encode_tuple_t_stringliteral_5824732942b65793939b349ae446a33529c5efa78f9adc0aff8550635fa44b27__to_t_string_memory_ptr__fromStack_reversed(headStart ) -> tail {\n        tail := add(headStart, 32)\n\n        mstore(add(headStart, 0), sub(tail, headStart))\n        tail := abi_encode_t_stringliteral_5824732942b65793939b349ae446a33529c5efa78f9adc0aff8550635fa44b27_to_t_string_memory_ptr_fromStack( tail)\n\n    }\n\n    function abi_encode_tuple_t_address_t_uint256_t_address__to_t_address_t_uint256_t_address__fromStack_reversed(headStart , value2, value1, value0) -> tail {\n        tail := add(headStart, 96)\n\n        abi_encode_t_address_to_t_address_fromStack(value0,  add(headStart, 0))\n\n        abi_encode_t_uint256_to_t_uint256_fromStack(value1,  add(headStart, 32))\n\n        abi_encode_t_address_to_t_address_fromStack(value2,  add(headStart, 64))\n\n    }\n\n    function abi_encode_tuple_t_uint256_t_address_t_address__to_t_uint256_t_address_t_address__fromStack_reversed(headStart , value2, value1, value0) -> tail {\n        tail := add(headStart, 96)\n\n        abi_encode_t_uint256_to_t_uint256_fromStack(value0,  add(headStart, 0))\n\n        abi_encode_t_address_to_t_address_fromStack(value1,  add(headStart, 32))\n\n        abi_encode_t_address_to_t_address_fromStack(value2,  add(headStart, 64))\n\n    }\n\n    function store_literal_in_memory_af09f6db30e4867e53cba9916b467b745c1bb0ff7604dcbe2aeb26f6c0c4cbab(memPtr) {\n\n        mstore(add(memPtr, 0), \"Vault does not exists for this N\")\n\n        mstore(add(memPtr, 32), \"FT contract\")\n\n    }\n\n    function abi_encode_t_stringliteral_af09f6db30e4867e53cba9916b467b745c1bb0ff7604dcbe2aeb26f6c0c4cbab_to_t_string_memory_ptr_fromStack(pos) -> end {\n        pos := array_storeLengthForEncoding_t_string_memory_ptr_fromStack(pos, 43)\n        store_literal_in_memory_af09f6db30e4867e53cba9916b467b745c1bb0ff7604dcbe2aeb26f6c0c4cbab(pos)\n        end := add(pos, 64)\n    }\n\n    function abi_encode_tuple_t_stringliteral_af09f6db30e4867e53cba9916b467b745c1bb0ff7604dcbe2aeb26f6c0c4cbab__to_t_string_memory_ptr__fromStack_reversed(headStart ) -> tail {\n        tail := add(headStart, 32)\n\n        mstore(add(headStart, 0), sub(tail, headStart))\n        tail := abi_encode_t_stringliteral_af09f6db30e4867e53cba9916b467b745c1bb0ff7604dcbe2aeb26f6c0c4cbab_to_t_string_memory_ptr_fromStack( tail)\n\n    }\n\n    function store_literal_in_memory_4fa02d1b88050f6a6a5d285d3489cc4bb24e4d1924dee6d5a2f903a871e4e481(memPtr) {\n\n        mstore(add(memPtr, 0), \"Mismatched arrays\")\n\n    }\n\n    function abi_encode_t_stringliteral_4fa02d1b88050f6a6a5d285d3489cc4bb24e4d1924dee6d5a2f903a871e4e481_to_t_string_memory_ptr_fromStack(pos) -> end {\n        pos := array_storeLengthForEncoding_t_string_memory_ptr_fromStack(pos, 17)\n        store_literal_in_memory_4fa02d1b88050f6a6a5d285d3489cc4bb24e4d1924dee6d5a2f903a871e4e481(pos)\n        end := add(pos, 32)\n    }\n\n    function abi_encode_tuple_t_stringliteral_4fa02d1b88050f6a6a5d285d3489cc4bb24e4d1924dee6d5a2f903a871e4e481__to_t_string_memory_ptr__fromStack_reversed(headStart ) -> tail {\n        tail := add(headStart, 32)\n\n        mstore(add(headStart, 0), sub(tail, headStart))\n        tail := abi_encode_t_stringliteral_4fa02d1b88050f6a6a5d285d3489cc4bb24e4d1924dee6d5a2f903a871e4e481_to_t_string_memory_ptr_fromStack( tail)\n\n    }\n\n    function abi_decode_t_address_fromMemory(offset, end) -> value {\n        value := mload(offset)\n        validator_revert_t_address(value)\n    }\n\n    function abi_decode_tuple_t_address_fromMemory(headStart, dataEnd) -> value0 {\n        if slt(sub(dataEnd, headStart), 32) { revert_error_dbdddcbe895c83990c08b3492a0e83918d802a52331272ac6fdb6a7c4aea3b1b() }\n\n        {\n\n            let offset := 0\n\n            value0 := abi_decode_t_address_fromMemory(add(headStart, offset), dataEnd)\n        }\n\n    }\n\n    function store_literal_in_memory_8d454e2a084014abe0cb8b0220b87e9c52084abcf0f285c0683d2b62cc95c4d5(memPtr) {\n\n        mstore(add(memPtr, 0), \"Only the person who created vaul\")\n\n        mstore(add(memPtr, 32), \"t can deposit funds into it\")\n\n    }\n\n    function abi_encode_t_stringliteral_8d454e2a084014abe0cb8b0220b87e9c52084abcf0f285c0683d2b62cc95c4d5_to_t_string_memory_ptr_fromStack(pos) -> end {\n        pos := array_storeLengthForEncoding_t_string_memory_ptr_fromStack(pos, 59)\n        store_literal_in_memory_8d454e2a084014abe0cb8b0220b87e9c52084abcf0f285c0683d2b62cc95c4d5(pos)\n        end := add(pos, 64)\n    }\n\n    function abi_encode_tuple_t_stringliteral_8d454e2a084014abe0cb8b0220b87e9c52084abcf0f285c0683d2b62cc95c4d5__to_t_string_memory_ptr__fromStack_reversed(headStart ) -> tail {\n        tail := add(headStart, 32)\n\n        mstore(add(headStart, 0), sub(tail, headStart))\n        tail := abi_encode_t_stringliteral_8d454e2a084014abe0cb8b0220b87e9c52084abcf0f285c0683d2b62cc95c4d5_to_t_string_memory_ptr_fromStack( tail)\n\n    }\n\n    function panic_error_0x32() {\n        mstore(0, 35408467139433450592217433187231851964531694900788300625387963629091585785856)\n        mstore(4, 0x32)\n        revert(0, 0x24)\n    }\n\n    function panic_error_0x11() {\n        mstore(0, 35408467139433450592217433187231851964531694900788300625387963629091585785856)\n        mstore(4, 0x11)\n        revert(0, 0x24)\n    }\n\n    function checked_add_t_uint256(x, y) -> sum {\n        x := cleanup_t_uint256(x)\n        y := cleanup_t_uint256(y)\n        sum := add(x, y)\n\n        if gt(x, sum) { panic_error_0x11() }\n\n    }\n\n    function increment_t_uint256(value) -> ret {\n        value := cleanup_t_uint256(value)\n        if eq(value, 0xffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff) { panic_error_0x11() }\n        ret := add(value, 1)\n    }\n\n    function store_literal_in_memory_a5e89270b3c56d4b9d1cf0a951d175d259ba209e17765637f05d1ed5391db802(memPtr) {\n\n        mstore(add(memPtr, 0), \"Mismatched total deposit amount\")\n\n    }\n\n    function abi_encode_t_stringliteral_a5e89270b3c56d4b9d1cf0a951d175d259ba209e17765637f05d1ed5391db802_to_t_string_memory_ptr_fromStack(pos) -> end {\n        pos := array_storeLengthForEncoding_t_string_memory_ptr_fromStack(pos, 31)\n        store_literal_in_memory_a5e89270b3c56d4b9d1cf0a951d175d259ba209e17765637f05d1ed5391db802(pos)\n        end := add(pos, 32)\n    }\n\n    function abi_encode_tuple_t_stringliteral_a5e89270b3c56d4b9d1cf0a951d175d259ba209e17765637f05d1ed5391db802__to_t_string_memory_ptr__fromStack_reversed(headStart ) -> tail {\n        tail := add(headStart, 32)\n\n        mstore(add(headStart, 0), sub(tail, headStart))\n        tail := abi_encode_t_stringliteral_a5e89270b3c56d4b9d1cf0a951d175d259ba209e17765637f05d1ed5391db802_to_t_string_memory_ptr_fromStack( tail)\n\n    }\n\n    function abi_encode_tuple_t_uint256_t_uint256__to_t_uint256_t_uint256__fromStack_reversed(headStart , value1, value0) -> tail {\n        tail := add(headStart, 64)\n\n        abi_encode_t_uint256_to_t_uint256_fromStack(value0,  add(headStart, 0))\n\n        abi_encode_t_uint256_to_t_uint256_fromStack(value1,  add(headStart, 32))\n\n    }\n\n    function store_literal_in_memory_02b8c2fb88814cea156c3111f16cfd94d03e5ad66e454c7339e3ad4f3d17e3e7(memPtr) {\n\n        mstore(add(memPtr, 0), \"Only the person who created vaul\")\n\n        mstore(add(memPtr, 32), \"t can withdraw funds\")\n\n    }\n\n    function abi_encode_t_stringliteral_02b8c2fb88814cea156c3111f16cfd94d03e5ad66e454c7339e3ad4f3d17e3e7_to_t_string_memory_ptr_fromStack(pos) -> end {\n        pos := array_storeLengthForEncoding_t_string_memory_ptr_fromStack(pos, 52)\n        store_literal_in_memory_02b8c2fb88814cea156c3111f16cfd94d03e5ad66e454c7339e3ad4f3d17e3e7(pos)\n        end := add(pos, 64)\n    }\n\n    function abi_encode_tuple_t_stringliteral_02b8c2fb88814cea156c3111f16cfd94d03e5ad66e454c7339e3ad4f3d17e3e7__to_t_string_memory_ptr__fromStack_reversed(headStart ) -> tail {\n        tail := add(headStart, 32)\n\n        mstore(add(headStart, 0), sub(tail, headStart))\n        tail := abi_encode_t_stringliteral_02b8c2fb88814cea156c3111f16cfd94d03e5ad66e454c7339e3ad4f3d17e3e7_to_t_string_memory_ptr_fromStack( tail)\n\n    }\n\n    function cleanup_t_address_payable(value) -> cleaned {\n        cleaned := cleanup_t_uint160(value)\n    }\n\n    function abi_encode_t_address_payable_to_t_address_payable_fromStack(value, pos) {\n        mstore(pos, cleanup_t_address_payable(value))\n    }\n\n    function abi_encode_tuple_t_address_payable_t_array$_t_uint256_$dyn_memory_ptr__to_t_address_payable_t_array$_t_uint256_$dyn_memory_ptr__fromStack_reversed(headStart , value1, value0) -> tail {\n        tail := add(headStart, 64)\n\n        abi_encode_t_address_payable_to_t_address_payable_fromStack(value0,  add(headStart, 0))\n\n        mstore(add(headStart, 32), sub(tail, headStart))\n        tail := abi_encode_t_array$_t_uint256_$dyn_memory_ptr_to_t_array$_t_uint256_$dyn_memory_ptr_fromStack(value1,  tail)\n\n    }\n\n    function abi_encode_tuple_t_uint256__to_t_uint256__fromStack_reversed(headStart , value0) -> tail {\n        tail := add(headStart, 32)\n\n        abi_encode_t_uint256_to_t_uint256_fromStack(value0,  add(headStart, 0))\n\n    }\n\n    function store_literal_in_memory_8f0021d44dc3c6a184f0ca9bb2b581abde8876c7afea5879ec72cd3feb6a7120(memPtr) {\n\n        mstore(add(memPtr, 0), \"You are not the owner of this to\")\n\n        mstore(add(memPtr, 32), \"ken!\")\n\n    }\n\n    function abi_encode_t_stringliteral_8f0021d44dc3c6a184f0ca9bb2b581abde8876c7afea5879ec72cd3feb6a7120_to_t_string_memory_ptr_fromStack(pos) -> end {\n        pos := array_storeLengthForEncoding_t_string_memory_ptr_fromStack(pos, 36)\n        store_literal_in_memory_8f0021d44dc3c6a184f0ca9bb2b581abde8876c7afea5879ec72cd3feb6a7120(pos)\n        end := add(pos, 64)\n    }\n\n    function abi_encode_tuple_t_stringliteral_8f0021d44dc3c6a184f0ca9bb2b581abde8876c7afea5879ec72cd3feb6a7120__to_t_string_memory_ptr__fromStack_reversed(headStart ) -> tail {\n        tail := add(headStart, 32)\n\n        mstore(add(headStart, 0), sub(tail, headStart))\n        tail := abi_encode_t_stringliteral_8f0021d44dc3c6a184f0ca9bb2b581abde8876c7afea5879ec72cd3feb6a7120_to_t_string_memory_ptr_fromStack( tail)\n\n    }\n\n    function store_literal_in_memory_4f4fa40674b63d9f789043d4550fa5f5291b0482fc45cbbc7ace27126a67c59b(memPtr) {\n\n        mstore(add(memPtr, 0), \"Contract not approved to burn to\")\n\n        mstore(add(memPtr, 32), \"ken\")\n\n    }\n\n    function abi_encode_t_stringliteral_4f4fa40674b63d9f789043d4550fa5f5291b0482fc45cbbc7ace27126a67c59b_to_t_string_memory_ptr_fromStack(pos) -> end {\n        pos := array_storeLengthForEncoding_t_string_memory_ptr_fromStack(pos, 35)\n        store_literal_in_memory_4f4fa40674b63d9f789043d4550fa5f5291b0482fc45cbbc7ace27126a67c59b(pos)\n        end := add(pos, 64)\n    }\n\n    function abi_encode_tuple_t_stringliteral_4f4fa40674b63d9f789043d4550fa5f5291b0482fc45cbbc7ace27126a67c59b__to_t_string_memory_ptr__fromStack_reversed(headStart ) -> tail {\n        tail := add(headStart, 32)\n\n        mstore(add(headStart, 0), sub(tail, headStart))\n        tail := abi_encode_t_stringliteral_4f4fa40674b63d9f789043d4550fa5f5291b0482fc45cbbc7ace27126a67c59b_to_t_string_memory_ptr_fromStack( tail)\n\n    }\n\n    function abi_encode_tuple_t_address_payable_t_uint256__to_t_address_payable_t_uint256__fromStack_reversed(headStart , value1, value0) -> tail {\n        tail := add(headStart, 64)\n\n        abi_encode_t_address_payable_to_t_address_payable_fromStack(value0,  add(headStart, 0))\n\n        abi_encode_t_uint256_to_t_uint256_fromStack(value1,  add(headStart, 32))\n\n    }\n\n}\n",
				"id": 13,
				"language": "Yul",
				"name": "#utility.yul"
			}
		],
		"immutableReferences": {},
		"linkReferences": {},
		"object": "608060405260043610620000865760003560e01c8063622bc90e1162000055578063622bc90e14620001745780637f30952314620001b8578063a3648ec014620001d8578063aad3ec9614620001f85762000086565b80630db6f34d146200008b5780631cb3d31414620000be578063429b62e514620001025780635f76dfc01462000146575b600080fd5b3480156200009857600080fd5b50620000a362000218565b604051620000b594939291906200137b565b60405180910390f35b348015620000cb57600080fd5b50620000ea6004803603810190620000e4919062001414565b620004f4565b604051620000f9919062001446565b60405180910390f35b3480156200010f57600080fd5b506200012e600480360381019062000128919062001414565b62000527565b6040516200013d919062001446565b60405180910390f35b3480156200015357600080fd5b506200017260048036038101906200016c919062001494565b6200055a565b005b3480156200018157600080fd5b50620001a060048036038101906200019a919062001414565b6200080d565b604051620001af919062001446565b60405180910390f35b620001d66004803603810190620001d0919062001650565b62000876565b005b620001f66004803603810190620001f09190620016ea565b62000c40565b005b62000216600480360381019062000210919062001494565b62000e7e565b005b6000806060600080600260003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff169050600073ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff1603620002f4576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401620002eb90620017d7565b60405180910390fd5b6000600160008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff169050600073ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff1603620003ca576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401620003c1906200186f565b60405180910390fd5b600081905060008173ffffffffffffffffffffffffffffffffffffffff1631905060008273ffffffffffffffffffffffffffffffffffffffff16638fd251656040518163ffffffff1660e01b8152600401602060405180830381865afa15801562000439573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906200045f9190620018a8565b905060008373ffffffffffffffffffffffffffffffffffffffff166367f718a96040518163ffffffff1660e01b8152600401600060405180830381865afa158015620004af573d6000803e3d6000fd5b505050506040513d6000823e3d601f19601f82011682018060405250810190620004da919062001981565b905082828288995099509950995050505050505090919293565b60016020528060005260406000206000915054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b60026020528060005260406000206000915054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b600073ffffffffffffffffffffffffffffffffffffffff16600160008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16146200062b576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401620006229062001a48565b60405180910390fd5b60008282336040516200063e906200123f565b6200064c9392919062001a6a565b604051809103906000f08015801562000669573d6000803e3d6000fd5b5090506000819080600181540180825580915050600190039060005260206000200160009091909190916101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555080600160008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555082600260003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055507fa8596cc4a052ecc7656e9ca0fb7a10472573699e3aa34ac5659bc37c1b0a44fc428285604051620008009392919062001aa7565b60405180910390a1505050565b6000600160008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff169050919050565b600073ffffffffffffffffffffffffffffffffffffffff16600160008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff160362000947576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016200093e9062001b5a565b60405180910390fd5b6000349050600062000959856200080d565b90508251845114620009a2576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401620009999062001bcc565b60405180910390fd5b6000808290503373ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff1663f851a4406040518163ffffffff1660e01b8152600401602060405180830381865afa15801562000a0b573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019062000a31919062001c05565b73ffffffffffffffffffffffffffffffffffffffff161462000a8a576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040162000a819062001cad565b60405180910390fd5b60005b865181101562000ada5785818151811062000aad5762000aac62001ccf565b5b60200260200101518362000ac2919062001d2d565b9250808062000ad19062001d68565b91505062000a8d565b5081841462000b20576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040162000b179062001e05565b60405180910390fd5b60005b865181101562000bee578173ffffffffffffffffffffffffffffffffffffffff1663a40398a688838151811062000b5f5762000b5e62001ccf565b5b602002602001015188848151811062000b7d5762000b7c62001ccf565b5b60200260200101516040518363ffffffff1660e01b815260040162000ba492919062001e27565b600060405180830381600087803b15801562000bbf57600080fd5b505af115801562000bd4573d6000803e3d6000fd5b50505050808062000be59062001d68565b91505062000b23565b508273ffffffffffffffffffffffffffffffffffffffff166108fc839081150290604051600060405180830381858888f1935050505015801562000c36573d6000803e3d6000fd5b5050505050505050565b600073ffffffffffffffffffffffffffffffffffffffff16600160008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff160362000d11576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040162000d089062001b5a565b60405180910390fd5b600062000d1e836200080d565b905060008190503373ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff1663f851a4406040518163ffffffff1660e01b8152600401602060405180830381865afa15801562000d88573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019062000dae919062001c05565b73ffffffffffffffffffffffffffffffffffffffff161462000e07576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040162000dfe9062001eca565b60405180910390fd5b8073ffffffffffffffffffffffffffffffffffffffff16638293744b33856040518363ffffffff1660e01b815260040162000e4492919062001f11565b600060405180830381600087803b15801562000e5f57600080fd5b505af115801562000e74573d6000803e3d6000fd5b5050505050505050565b600073ffffffffffffffffffffffffffffffffffffffff16600160008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff160362000f4f576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040162000f469062001b5a565b60405180910390fd5b60008290506000839050600062000f66856200080d565b905060008373ffffffffffffffffffffffffffffffffffffffff16636352211e866040518263ffffffff1660e01b815260040162000fa5919062001f45565b602060405180830381865afa15801562000fc3573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019062000fe9919062001c05565b90503373ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff16146200105c576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401620010539062001fd8565b60405180910390fd5b3073ffffffffffffffffffffffffffffffffffffffff168473ffffffffffffffffffffffffffffffffffffffff1663081812fc876040518263ffffffff1660e01b8152600401620010ae919062001f45565b602060405180830381865afa158015620010cc573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190620010f2919062001c05565b73ffffffffffffffffffffffffffffffffffffffff16146200114b576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401620011429062002070565b60405180910390fd5b8273ffffffffffffffffffffffffffffffffffffffff166342966c68866040518263ffffffff1660e01b815260040162001186919062001f45565b600060405180830381600087803b158015620011a157600080fd5b505af1158015620011b6573d6000803e3d6000fd5b50505050600033905060008390508073ffffffffffffffffffffffffffffffffffffffff1663ed2b40ea83896040518363ffffffff1660e01b81526004016200120192919062002092565b600060405180830381600087803b1580156200121c57600080fd5b505af115801562001231573d6000803e3d6000fd5b505050505050505050505050565b61121e80620020c083390190565b6000819050919050565b62001262816200124d565b82525050565b600081519050919050565b600082825260208201905092915050565b6000819050602082019050919050565b6200129f816200124d565b82525050565b6000620012b3838362001294565b60208301905092915050565b6000602082019050919050565b6000620012d98262001268565b620012e5818562001273565b9350620012f28362001284565b8060005b83811015620013295781516200130d8882620012a5565b97506200131a83620012bf565b925050600181019050620012f6565b5085935050505092915050565b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b6000620013638262001336565b9050919050565b620013758162001356565b82525050565b600060808201905062001392600083018762001257565b620013a1602083018662001257565b8181036040830152620013b58185620012cc565b9050620013c660608301846200136a565b95945050505050565b6000604051905090565b600080fd5b600080fd5b620013ee8162001356565b8114620013fa57600080fd5b50565b6000813590506200140e81620013e3565b92915050565b6000602082840312156200142d576200142c620013d9565b5b60006200143d84828501620013fd565b91505092915050565b60006020820190506200145d60008301846200136a565b92915050565b6200146e816200124d565b81146200147a57600080fd5b50565b6000813590506200148e8162001463565b92915050565b60008060408385031215620014ae57620014ad620013d9565b5b6000620014be85828601620013fd565b9250506020620014d1858286016200147d565b9150509250929050565b600080fd5b6000601f19601f8301169050919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b6200152b82620014e0565b810181811067ffffffffffffffff821117156200154d576200154c620014f1565b5b80604052505050565b600062001562620013cf565b905062001570828262001520565b919050565b600067ffffffffffffffff821115620015935762001592620014f1565b5b602082029050602081019050919050565b600080fd5b6000620015c0620015ba8462001575565b62001556565b90508083825260208201905060208402830185811115620015e657620015e5620015a4565b5b835b81811015620016135780620015fe88826200147d565b845260208401935050602081019050620015e8565b5050509392505050565b600082601f830112620016355762001634620014db565b5b813562001647848260208601620015a9565b91505092915050565b6000806000606084860312156200166c576200166b620013d9565b5b60006200167c86828701620013fd565b935050602084013567ffffffffffffffff811115620016a0576200169f620013de565b5b620016ae868287016200161d565b925050604084013567ffffffffffffffff811115620016d257620016d1620013de565b5b620016e0868287016200161d565b9150509250925092565b60008060408385031215620017045762001703620013d9565b5b60006200171485828601620013fd565b925050602083013567ffffffffffffffff811115620017385762001737620013de565b5b62001746858286016200161d565b9150509250929050565b600082825260208201905092915050565b7f4e6f204e465420636f6e7472616374206173736f63696174656420776974682060008201527f63616c6c65720000000000000000000000000000000000000000000000000000602082015250565b6000620017bf60268362001750565b9150620017cc8262001761565b604082019050919050565b60006020820190508181036000830152620017f281620017b0565b9050919050565b7f4e6f207661756c74206173736f63696174656420776974682063616c6c65722760008201527f73204e465420636f6e7472616374000000000000000000000000000000000000602082015250565b600062001857602e8362001750565b91506200186482620017f9565b604082019050919050565b600060208201905081810360008301526200188a8162001848565b9050919050565b600081519050620018a28162001463565b92915050565b600060208284031215620018c157620018c0620013d9565b5b6000620018d18482850162001891565b91505092915050565b6000620018f1620018eb8462001575565b62001556565b90508083825260208201905060208402830185811115620019175762001916620015a4565b5b835b818110156200194457806200192f888262001891565b84526020840193505060208101905062001919565b5050509392505050565b600082601f830112620019665762001965620014db565b5b815162001978848260208601620018da565b91505092915050565b6000602082840312156200199a5762001999620013d9565b5b600082015167ffffffffffffffff811115620019bb57620019ba620013de565b5b620019c9848285016200194e565b91505092915050565b7f5661756c7420616c72656164792065786973747320666f722074686973204e4660008201527f5420636f6e747261637400000000000000000000000000000000000000000000602082015250565b600062001a30602a8362001750565b915062001a3d82620019d2565b604082019050919050565b6000602082019050818103600083015262001a638162001a21565b9050919050565b600060608201905062001a8160008301866200136a565b62001a90602083018562001257565b62001a9f60408301846200136a565b949350505050565b600060608201905062001abe600083018662001257565b62001acd60208301856200136a565b62001adc60408301846200136a565b949350505050565b7f5661756c7420646f6573206e6f742065786973747320666f722074686973204e60008201527f465420636f6e7472616374000000000000000000000000000000000000000000602082015250565b600062001b42602b8362001750565b915062001b4f8262001ae4565b604082019050919050565b6000602082019050818103600083015262001b758162001b33565b9050919050565b7f4d69736d61746368656420617272617973000000000000000000000000000000600082015250565b600062001bb460118362001750565b915062001bc18262001b7c565b602082019050919050565b6000602082019050818103600083015262001be78162001ba5565b9050919050565b60008151905062001bff81620013e3565b92915050565b60006020828403121562001c1e5762001c1d620013d9565b5b600062001c2e8482850162001bee565b91505092915050565b7f4f6e6c792074686520706572736f6e2077686f2063726561746564207661756c60008201527f742063616e206465706f7369742066756e647320696e746f2069740000000000602082015250565b600062001c95603b8362001750565b915062001ca28262001c37565b604082019050919050565b6000602082019050818103600083015262001cc88162001c86565b9050919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b600062001d3a826200124d565b915062001d47836200124d565b925082820190508082111562001d625762001d6162001cfe565b5b92915050565b600062001d75826200124d565b91507fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff820362001daa5762001da962001cfe565b5b600182019050919050565b7f4d69736d61746368656420746f74616c206465706f73697420616d6f756e7400600082015250565b600062001ded601f8362001750565b915062001dfa8262001db5565b602082019050919050565b6000602082019050818103600083015262001e208162001dde565b9050919050565b600060408201905062001e3e600083018562001257565b62001e4d602083018462001257565b9392505050565b7f4f6e6c792074686520706572736f6e2077686f2063726561746564207661756c60008201527f742063616e2077697468647261772066756e6473000000000000000000000000602082015250565b600062001eb260348362001750565b915062001ebf8262001e54565b604082019050919050565b6000602082019050818103600083015262001ee58162001ea3565b9050919050565b600062001ef98262001336565b9050919050565b62001f0b8162001eec565b82525050565b600060408201905062001f28600083018562001f00565b818103602083015262001f3c8184620012cc565b90509392505050565b600060208201905062001f5c600083018462001257565b92915050565b7f596f7520617265206e6f7420746865206f776e6572206f66207468697320746f60008201527f6b656e2100000000000000000000000000000000000000000000000000000000602082015250565b600062001fc060248362001750565b915062001fcd8262001f62565b604082019050919050565b6000602082019050818103600083015262001ff38162001fb1565b9050919050565b7f436f6e7472616374206e6f7420617070726f76656420746f206275726e20746f60008201527f6b656e0000000000000000000000000000000000000000000000000000000000602082015250565b60006200205860238362001750565b9150620020658262001ffa565b604082019050919050565b600060208201905081810360008301526200208b8162002049565b9050919050565b6000604082019050620020a9600083018562001f00565b620020b8602083018462001257565b939250505056fe60806040523480156200001157600080fd5b506040516200121e3803806200121e8339818101604052810190620000379190620001b5565b826000806101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055508160028190555080600560006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055504260038190555033600460006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555050505062000211565b600080fd5b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b6000620001428262000115565b9050919050565b620001548162000135565b81146200016057600080fd5b50565b600081519050620001748162000149565b92915050565b6000819050919050565b6200018f816200017a565b81146200019b57600080fd5b50565b600081519050620001af8162000184565b92915050565b600080600060608486031215620001d157620001d062000110565b5b6000620001e18682870162000163565b9350506020620001f4868287016200019e565b9250506040620002078682870162000163565b9150509250925092565b610ffd80620002216000396000f3fe6080604052600436106100a05760003560e01c80638fd25165116100645780638fd2516514610183578063a40398a6146101ae578063d58778d6146101d7578063d8270dce14610214578063ed2b40ea1461023f578063f851a4401461025b576100a7565b806331c2273b146100a9578063505658d9146100d45780635e4f6cab146100ff57806367f718a91461013c5780638293744b14610167576100a7565b366100a757005b005b3480156100b557600080fd5b506100be610286565b6040516100cb91906108c7565b60405180910390f35b3480156100e057600080fd5b506100e96102aa565b6040516100f691906108c7565b60405180910390f35b34801561010b57600080fd5b506101266004803603810190610121919061092c565b6102d0565b6040516101339190610968565b60405180910390f35b34801561014857600080fd5b506101516102e8565b60405161015e9190610a41565b60405180910390f35b610181600480360381019061017c9190610bfa565b610340565b005b34801561018f57600080fd5b50610198610578565b6040516101a59190610968565b60405180910390f35b3480156101ba57600080fd5b506101d560048036038101906101d09190610c56565b61057e565b005b3480156101e357600080fd5b506101fe60048036038101906101f9919061092c565b610681565b60405161020b9190610968565b60405180910390f35b34801561022057600080fd5b506102296106a5565b6040516102369190610968565b60405180910390f35b61025960048036038101906102549190610c96565b6106ab565b005b34801561026757600080fd5b50610270610860565b60405161027d91906108c7565b60405180910390f35b60008054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b600460009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b60016020528060005260406000206000915090505481565b6060600680548060200260200160405190810160405280929190818152602001828054801561033657602002820191906000526020600020905b815481526020019060010190808311610322575b5050505050905090565b600460009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff16146103d0576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016103c790610d59565b60405180910390fd5b600280546103de9190610da8565b600354426103ec9190610dea565b101561042d576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161042490610e90565b60405180910390fd5b6000805b825181101561052b5760006001600085848151811061045357610452610eb0565b5b6020026020010151815260200190815260200160002054116104aa576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016104a190610f2b565b60405180910390fd5b600160008483815181106104c1576104c0610eb0565b5b6020026020010151815260200190815260200160002054826104e39190610f4b565b91506000600160008584815181106104fe576104fd610eb0565b5b6020026020010151815260200190815260200160002081905550808061052390610f7f565b915050610431565b508273ffffffffffffffffffffffffffffffffffffffff166108fc829081150290604051600060405180830381858888f19350505050158015610572573d6000803e3d6000fd5b50505050565b60025481565b600460009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff161461060e576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161060590610d59565b60405180910390fd5b60006001600084815260200190815260200160002054036106535760068290806001815401808255809150506001900390600052602060002001600090919091909150555b806001600084815260200190815260200160002060008282546106769190610f4b565b925050819055505050565b6006818154811061069157600080fd5b906000526020600020016000915090505481565b60035481565b600460009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff161461073b576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161073290610d59565b60405180910390fd5b6000600160008381526020019081526020016000205411610791576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161078890610f2b565b60405180910390fd5b600254600354426107a29190610dea565b10156107e3576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016107da90610e90565b60405180910390fd5b600060016000838152602001908152602001600020549050600060016000848152602001908152602001600020819055508273ffffffffffffffffffffffffffffffffffffffff166108fc829081150290604051600060405180830381858888f1935050505015801561085a573d6000803e3d6000fd5b50505050565b600560009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b60006108b182610886565b9050919050565b6108c1816108a6565b82525050565b60006020820190506108dc60008301846108b8565b92915050565b6000604051905090565b600080fd5b600080fd5b6000819050919050565b610909816108f6565b811461091457600080fd5b50565b60008135905061092681610900565b92915050565b600060208284031215610942576109416108ec565b5b600061095084828501610917565b91505092915050565b610962816108f6565b82525050565b600060208201905061097d6000830184610959565b92915050565b600081519050919050565b600082825260208201905092915050565b6000819050602082019050919050565b6109b8816108f6565b82525050565b60006109ca83836109af565b60208301905092915050565b6000602082019050919050565b60006109ee82610983565b6109f8818561098e565b9350610a038361099f565b8060005b83811015610a34578151610a1b88826109be565b9750610a26836109d6565b925050600181019050610a07565b5085935050505092915050565b60006020820190508181036000830152610a5b81846109e3565b905092915050565b6000610a6e82610886565b9050919050565b610a7e81610a63565b8114610a8957600080fd5b50565b600081359050610a9b81610a75565b92915050565b600080fd5b6000601f19601f8301169050919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b610aef82610aa6565b810181811067ffffffffffffffff82111715610b0e57610b0d610ab7565b5b80604052505050565b6000610b216108e2565b9050610b2d8282610ae6565b919050565b600067ffffffffffffffff821115610b4d57610b4c610ab7565b5b602082029050602081019050919050565b600080fd5b6000610b76610b7184610b32565b610b17565b90508083825260208201905060208402830185811115610b9957610b98610b5e565b5b835b81811015610bc25780610bae8882610917565b845260208401935050602081019050610b9b565b5050509392505050565b600082601f830112610be157610be0610aa1565b5b8135610bf1848260208601610b63565b91505092915050565b60008060408385031215610c1157610c106108ec565b5b6000610c1f85828601610a8c565b925050602083013567ffffffffffffffff811115610c4057610c3f6108f1565b5b610c4c85828601610bcc565b9150509250929050565b60008060408385031215610c6d57610c6c6108ec565b5b6000610c7b85828601610917565b9250506020610c8c85828601610917565b9150509250929050565b60008060408385031215610cad57610cac6108ec565b5b6000610cbb85828601610a8c565b9250506020610ccc85828601610917565b9150509250929050565b600082825260208201905092915050565b7f4f6e6c7920426974737572616e636520636f6e74726163742063616e2063616c60008201527f6c20746869732066756e6374696f6e0000000000000000000000000000000000602082015250565b6000610d43602f83610cd6565b9150610d4e82610ce7565b604082019050919050565b60006020820190508181036000830152610d7281610d36565b9050919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b6000610db3826108f6565b9150610dbe836108f6565b9250828202610dcc816108f6565b91508282048414831517610de357610de2610d79565b5b5092915050565b6000610df5826108f6565b9150610e00836108f6565b9250828203905081811115610e1857610e17610d79565b5b92915050565b7f43616e6e6f74206163636573732066756e6374696f6e206265666f726520746860008201527f65206d696e696d756d2074696d65206861732070617373656400000000000000602082015250565b6000610e7a603983610cd6565b9150610e8582610e1e565b604082019050919050565b60006020820190508181036000830152610ea981610e6d565b9050919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b7f4e6f2062616c616e636520666f72207468697320746f6b656e49440000000000600082015250565b6000610f15601b83610cd6565b9150610f2082610edf565b602082019050919050565b60006020820190508181036000830152610f4481610f08565b9050919050565b6000610f56826108f6565b9150610f61836108f6565b9250828201905080821115610f7957610f78610d79565b5b92915050565b6000610f8a826108f6565b91507fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff8203610fbc57610fbb610d79565b5b60018201905091905056fea26469706673582212206b9b96cb8730c8a6f1babf870770a66b17a6b9760fd6ef1c71ba328de2e6083c64736f6c63430008120033a2646970667358221220989f0457d23eca59953258acf1c2677a4f2c18e1599e6bffc5c50e780412dae364736f6c63430008120033",
		"opcodes": "PUSH1 0x80 PUSH1 0x40 MSTORE PUSH1 0x4 CALLDATASIZE LT PUSH3 0x86 JUMPI PUSH1 0x0 CALLDATALOAD PUSH1 0xE0 SHR DUP1 PUSH4 0x622BC90E GT PUSH3 0x55 JUMPI DUP1 PUSH4 0x622BC90E EQ PUSH3 0x174 JUMPI DUP1 PUSH4 0x7F309523 EQ PUSH3 0x1B8 JUMPI DUP1 PUSH4 0xA3648EC0 EQ PUSH3 0x1D8 JUMPI DUP1 PUSH4 0xAAD3EC96 EQ PUSH3 0x1F8 JUMPI PUSH3 0x86 JUMP JUMPDEST DUP1 PUSH4 0xDB6F34D EQ PUSH3 0x8B JUMPI DUP1 PUSH4 0x1CB3D314 EQ PUSH3 0xBE JUMPI DUP1 PUSH4 0x429B62E5 EQ PUSH3 0x102 JUMPI DUP1 PUSH4 0x5F76DFC0 EQ PUSH3 0x146 JUMPI JUMPDEST PUSH1 0x0 DUP1 REVERT JUMPDEST CALLVALUE DUP1 ISZERO PUSH3 0x98 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH3 0xA3 PUSH3 0x218 JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH3 0xB5 SWAP5 SWAP4 SWAP3 SWAP2 SWAP1 PUSH3 0x137B JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 RETURN JUMPDEST CALLVALUE DUP1 ISZERO PUSH3 0xCB JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH3 0xEA PUSH1 0x4 DUP1 CALLDATASIZE SUB DUP2 ADD SWAP1 PUSH3 0xE4 SWAP2 SWAP1 PUSH3 0x1414 JUMP JUMPDEST PUSH3 0x4F4 JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH3 0xF9 SWAP2 SWAP1 PUSH3 0x1446 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 RETURN JUMPDEST CALLVALUE DUP1 ISZERO PUSH3 0x10F JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH3 0x12E PUSH1 0x4 DUP1 CALLDATASIZE SUB DUP2 ADD SWAP1 PUSH3 0x128 SWAP2 SWAP1 PUSH3 0x1414 JUMP JUMPDEST PUSH3 0x527 JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH3 0x13D SWAP2 SWAP1 PUSH3 0x1446 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 RETURN JUMPDEST CALLVALUE DUP1 ISZERO PUSH3 0x153 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH3 0x172 PUSH1 0x4 DUP1 CALLDATASIZE SUB DUP2 ADD SWAP1 PUSH3 0x16C SWAP2 SWAP1 PUSH3 0x1494 JUMP JUMPDEST PUSH3 0x55A JUMP JUMPDEST STOP JUMPDEST CALLVALUE DUP1 ISZERO PUSH3 0x181 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH3 0x1A0 PUSH1 0x4 DUP1 CALLDATASIZE SUB DUP2 ADD SWAP1 PUSH3 0x19A SWAP2 SWAP1 PUSH3 0x1414 JUMP JUMPDEST PUSH3 0x80D JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH3 0x1AF SWAP2 SWAP1 PUSH3 0x1446 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 RETURN JUMPDEST PUSH3 0x1D6 PUSH1 0x4 DUP1 CALLDATASIZE SUB DUP2 ADD SWAP1 PUSH3 0x1D0 SWAP2 SWAP1 PUSH3 0x1650 JUMP JUMPDEST PUSH3 0x876 JUMP JUMPDEST STOP JUMPDEST PUSH3 0x1F6 PUSH1 0x4 DUP1 CALLDATASIZE SUB DUP2 ADD SWAP1 PUSH3 0x1F0 SWAP2 SWAP1 PUSH3 0x16EA JUMP JUMPDEST PUSH3 0xC40 JUMP JUMPDEST STOP JUMPDEST PUSH3 0x216 PUSH1 0x4 DUP1 CALLDATASIZE SUB DUP2 ADD SWAP1 PUSH3 0x210 SWAP2 SWAP1 PUSH3 0x1494 JUMP JUMPDEST PUSH3 0xE7E JUMP JUMPDEST STOP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x60 PUSH1 0x0 DUP1 PUSH1 0x2 PUSH1 0x0 CALLER PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP2 MSTORE PUSH1 0x20 ADD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 KECCAK256 PUSH1 0x0 SWAP1 SLOAD SWAP1 PUSH2 0x100 EXP SWAP1 DIV PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND SWAP1 POP PUSH1 0x0 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP2 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND SUB PUSH3 0x2F4 JUMPI PUSH1 0x40 MLOAD PUSH32 0x8C379A000000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD PUSH3 0x2EB SWAP1 PUSH3 0x17D7 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST PUSH1 0x0 PUSH1 0x1 PUSH1 0x0 DUP4 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP2 MSTORE PUSH1 0x20 ADD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 KECCAK256 PUSH1 0x0 SWAP1 SLOAD SWAP1 PUSH2 0x100 EXP SWAP1 DIV PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND SWAP1 POP PUSH1 0x0 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP2 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND SUB PUSH3 0x3CA JUMPI PUSH1 0x40 MLOAD PUSH32 0x8C379A000000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD PUSH3 0x3C1 SWAP1 PUSH3 0x186F JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST PUSH1 0x0 DUP2 SWAP1 POP PUSH1 0x0 DUP2 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND BALANCE SWAP1 POP PUSH1 0x0 DUP3 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH4 0x8FD25165 PUSH1 0x40 MLOAD DUP2 PUSH4 0xFFFFFFFF AND PUSH1 0xE0 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH1 0x20 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 DUP7 GAS STATICCALL ISZERO DUP1 ISZERO PUSH3 0x439 JUMPI RETURNDATASIZE PUSH1 0x0 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH1 0x0 REVERT JUMPDEST POP POP POP POP PUSH1 0x40 MLOAD RETURNDATASIZE PUSH1 0x1F NOT PUSH1 0x1F DUP3 ADD AND DUP3 ADD DUP1 PUSH1 0x40 MSTORE POP DUP2 ADD SWAP1 PUSH3 0x45F SWAP2 SWAP1 PUSH3 0x18A8 JUMP JUMPDEST SWAP1 POP PUSH1 0x0 DUP4 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH4 0x67F718A9 PUSH1 0x40 MLOAD DUP2 PUSH4 0xFFFFFFFF AND PUSH1 0xE0 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH1 0x0 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 DUP7 GAS STATICCALL ISZERO DUP1 ISZERO PUSH3 0x4AF JUMPI RETURNDATASIZE PUSH1 0x0 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH1 0x0 REVERT JUMPDEST POP POP POP POP PUSH1 0x40 MLOAD RETURNDATASIZE PUSH1 0x0 DUP3 RETURNDATACOPY RETURNDATASIZE PUSH1 0x1F NOT PUSH1 0x1F DUP3 ADD AND DUP3 ADD DUP1 PUSH1 0x40 MSTORE POP DUP2 ADD SWAP1 PUSH3 0x4DA SWAP2 SWAP1 PUSH3 0x1981 JUMP JUMPDEST SWAP1 POP DUP3 DUP3 DUP3 DUP9 SWAP10 POP SWAP10 POP SWAP10 POP SWAP10 POP POP POP POP POP POP POP SWAP1 SWAP2 SWAP3 SWAP4 JUMP JUMPDEST PUSH1 0x1 PUSH1 0x20 MSTORE DUP1 PUSH1 0x0 MSTORE PUSH1 0x40 PUSH1 0x0 KECCAK256 PUSH1 0x0 SWAP2 POP SLOAD SWAP1 PUSH2 0x100 EXP SWAP1 DIV PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP2 JUMP JUMPDEST PUSH1 0x2 PUSH1 0x20 MSTORE DUP1 PUSH1 0x0 MSTORE PUSH1 0x40 PUSH1 0x0 KECCAK256 PUSH1 0x0 SWAP2 POP SLOAD SWAP1 PUSH2 0x100 EXP SWAP1 DIV PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP2 JUMP JUMPDEST PUSH1 0x0 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH1 0x1 PUSH1 0x0 DUP5 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP2 MSTORE PUSH1 0x20 ADD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 KECCAK256 PUSH1 0x0 SWAP1 SLOAD SWAP1 PUSH2 0x100 EXP SWAP1 DIV PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND EQ PUSH3 0x62B JUMPI PUSH1 0x40 MLOAD PUSH32 0x8C379A000000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD PUSH3 0x622 SWAP1 PUSH3 0x1A48 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST PUSH1 0x0 DUP3 DUP3 CALLER PUSH1 0x40 MLOAD PUSH3 0x63E SWAP1 PUSH3 0x123F JUMP JUMPDEST PUSH3 0x64C SWAP4 SWAP3 SWAP2 SWAP1 PUSH3 0x1A6A JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 PUSH1 0x0 CREATE DUP1 ISZERO DUP1 ISZERO PUSH3 0x669 JUMPI RETURNDATASIZE PUSH1 0x0 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH1 0x0 REVERT JUMPDEST POP SWAP1 POP PUSH1 0x0 DUP2 SWAP1 DUP1 PUSH1 0x1 DUP2 SLOAD ADD DUP1 DUP3 SSTORE DUP1 SWAP2 POP POP PUSH1 0x1 SWAP1 SUB SWAP1 PUSH1 0x0 MSTORE PUSH1 0x20 PUSH1 0x0 KECCAK256 ADD PUSH1 0x0 SWAP1 SWAP2 SWAP1 SWAP2 SWAP1 SWAP2 PUSH2 0x100 EXP DUP2 SLOAD DUP2 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF MUL NOT AND SWAP1 DUP4 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND MUL OR SWAP1 SSTORE POP DUP1 PUSH1 0x1 PUSH1 0x0 DUP6 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP2 MSTORE PUSH1 0x20 ADD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 KECCAK256 PUSH1 0x0 PUSH2 0x100 EXP DUP2 SLOAD DUP2 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF MUL NOT AND SWAP1 DUP4 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND MUL OR SWAP1 SSTORE POP DUP3 PUSH1 0x2 PUSH1 0x0 CALLER PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP2 MSTORE PUSH1 0x20 ADD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 KECCAK256 PUSH1 0x0 PUSH2 0x100 EXP DUP2 SLOAD DUP2 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF MUL NOT AND SWAP1 DUP4 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND MUL OR SWAP1 SSTORE POP PUSH32 0xA8596CC4A052ECC7656E9CA0FB7A10472573699E3AA34AC5659BC37C1B0A44FC TIMESTAMP DUP3 DUP6 PUSH1 0x40 MLOAD PUSH3 0x800 SWAP4 SWAP3 SWAP2 SWAP1 PUSH3 0x1AA7 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 LOG1 POP POP POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x1 PUSH1 0x0 DUP4 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP2 MSTORE PUSH1 0x20 ADD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 KECCAK256 PUSH1 0x0 SWAP1 SLOAD SWAP1 PUSH2 0x100 EXP SWAP1 DIV PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH1 0x1 PUSH1 0x0 DUP6 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP2 MSTORE PUSH1 0x20 ADD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 KECCAK256 PUSH1 0x0 SWAP1 SLOAD SWAP1 PUSH2 0x100 EXP SWAP1 DIV PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND SUB PUSH3 0x947 JUMPI PUSH1 0x40 MLOAD PUSH32 0x8C379A000000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD PUSH3 0x93E SWAP1 PUSH3 0x1B5A JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST PUSH1 0x0 CALLVALUE SWAP1 POP PUSH1 0x0 PUSH3 0x959 DUP6 PUSH3 0x80D JUMP JUMPDEST SWAP1 POP DUP3 MLOAD DUP5 MLOAD EQ PUSH3 0x9A2 JUMPI PUSH1 0x40 MLOAD PUSH32 0x8C379A000000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD PUSH3 0x999 SWAP1 PUSH3 0x1BCC JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST PUSH1 0x0 DUP1 DUP3 SWAP1 POP CALLER PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP2 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH4 0xF851A440 PUSH1 0x40 MLOAD DUP2 PUSH4 0xFFFFFFFF AND PUSH1 0xE0 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH1 0x20 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 DUP7 GAS STATICCALL ISZERO DUP1 ISZERO PUSH3 0xA0B JUMPI RETURNDATASIZE PUSH1 0x0 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH1 0x0 REVERT JUMPDEST POP POP POP POP PUSH1 0x40 MLOAD RETURNDATASIZE PUSH1 0x1F NOT PUSH1 0x1F DUP3 ADD AND DUP3 ADD DUP1 PUSH1 0x40 MSTORE POP DUP2 ADD SWAP1 PUSH3 0xA31 SWAP2 SWAP1 PUSH3 0x1C05 JUMP JUMPDEST PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND EQ PUSH3 0xA8A JUMPI PUSH1 0x40 MLOAD PUSH32 0x8C379A000000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD PUSH3 0xA81 SWAP1 PUSH3 0x1CAD JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST PUSH1 0x0 JUMPDEST DUP7 MLOAD DUP2 LT ISZERO PUSH3 0xADA JUMPI DUP6 DUP2 DUP2 MLOAD DUP2 LT PUSH3 0xAAD JUMPI PUSH3 0xAAC PUSH3 0x1CCF JUMP JUMPDEST JUMPDEST PUSH1 0x20 MUL PUSH1 0x20 ADD ADD MLOAD DUP4 PUSH3 0xAC2 SWAP2 SWAP1 PUSH3 0x1D2D JUMP JUMPDEST SWAP3 POP DUP1 DUP1 PUSH3 0xAD1 SWAP1 PUSH3 0x1D68 JUMP JUMPDEST SWAP2 POP POP PUSH3 0xA8D JUMP JUMPDEST POP DUP2 DUP5 EQ PUSH3 0xB20 JUMPI PUSH1 0x40 MLOAD PUSH32 0x8C379A000000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD PUSH3 0xB17 SWAP1 PUSH3 0x1E05 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST PUSH1 0x0 JUMPDEST DUP7 MLOAD DUP2 LT ISZERO PUSH3 0xBEE JUMPI DUP2 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH4 0xA40398A6 DUP9 DUP4 DUP2 MLOAD DUP2 LT PUSH3 0xB5F JUMPI PUSH3 0xB5E PUSH3 0x1CCF JUMP JUMPDEST JUMPDEST PUSH1 0x20 MUL PUSH1 0x20 ADD ADD MLOAD DUP9 DUP5 DUP2 MLOAD DUP2 LT PUSH3 0xB7D JUMPI PUSH3 0xB7C PUSH3 0x1CCF JUMP JUMPDEST JUMPDEST PUSH1 0x20 MUL PUSH1 0x20 ADD ADD MLOAD PUSH1 0x40 MLOAD DUP4 PUSH4 0xFFFFFFFF AND PUSH1 0xE0 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH3 0xBA4 SWAP3 SWAP2 SWAP1 PUSH3 0x1E27 JUMP JUMPDEST PUSH1 0x0 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 PUSH1 0x0 DUP8 DUP1 EXTCODESIZE ISZERO DUP1 ISZERO PUSH3 0xBBF JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP GAS CALL ISZERO DUP1 ISZERO PUSH3 0xBD4 JUMPI RETURNDATASIZE PUSH1 0x0 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH1 0x0 REVERT JUMPDEST POP POP POP POP DUP1 DUP1 PUSH3 0xBE5 SWAP1 PUSH3 0x1D68 JUMP JUMPDEST SWAP2 POP POP PUSH3 0xB23 JUMP JUMPDEST POP DUP3 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH2 0x8FC DUP4 SWAP1 DUP2 ISZERO MUL SWAP1 PUSH1 0x40 MLOAD PUSH1 0x0 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 DUP6 DUP9 DUP9 CALL SWAP4 POP POP POP POP ISZERO DUP1 ISZERO PUSH3 0xC36 JUMPI RETURNDATASIZE PUSH1 0x0 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH1 0x0 REVERT JUMPDEST POP POP POP POP POP POP POP POP JUMP JUMPDEST PUSH1 0x0 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH1 0x1 PUSH1 0x0 DUP5 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP2 MSTORE PUSH1 0x20 ADD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 KECCAK256 PUSH1 0x0 SWAP1 SLOAD SWAP1 PUSH2 0x100 EXP SWAP1 DIV PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND SUB PUSH3 0xD11 JUMPI PUSH1 0x40 MLOAD PUSH32 0x8C379A000000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD PUSH3 0xD08 SWAP1 PUSH3 0x1B5A JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST PUSH1 0x0 PUSH3 0xD1E DUP4 PUSH3 0x80D JUMP JUMPDEST SWAP1 POP PUSH1 0x0 DUP2 SWAP1 POP CALLER PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP2 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH4 0xF851A440 PUSH1 0x40 MLOAD DUP2 PUSH4 0xFFFFFFFF AND PUSH1 0xE0 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH1 0x20 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 DUP7 GAS STATICCALL ISZERO DUP1 ISZERO PUSH3 0xD88 JUMPI RETURNDATASIZE PUSH1 0x0 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH1 0x0 REVERT JUMPDEST POP POP POP POP PUSH1 0x40 MLOAD RETURNDATASIZE PUSH1 0x1F NOT PUSH1 0x1F DUP3 ADD AND DUP3 ADD DUP1 PUSH1 0x40 MSTORE POP DUP2 ADD SWAP1 PUSH3 0xDAE SWAP2 SWAP1 PUSH3 0x1C05 JUMP JUMPDEST PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND EQ PUSH3 0xE07 JUMPI PUSH1 0x40 MLOAD PUSH32 0x8C379A000000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD PUSH3 0xDFE SWAP1 PUSH3 0x1ECA JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST DUP1 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH4 0x8293744B CALLER DUP6 PUSH1 0x40 MLOAD DUP4 PUSH4 0xFFFFFFFF AND PUSH1 0xE0 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH3 0xE44 SWAP3 SWAP2 SWAP1 PUSH3 0x1F11 JUMP JUMPDEST PUSH1 0x0 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 PUSH1 0x0 DUP8 DUP1 EXTCODESIZE ISZERO DUP1 ISZERO PUSH3 0xE5F JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP GAS CALL ISZERO DUP1 ISZERO PUSH3 0xE74 JUMPI RETURNDATASIZE PUSH1 0x0 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH1 0x0 REVERT JUMPDEST POP POP POP POP POP POP POP POP JUMP JUMPDEST PUSH1 0x0 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH1 0x1 PUSH1 0x0 DUP5 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP2 MSTORE PUSH1 0x20 ADD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 KECCAK256 PUSH1 0x0 SWAP1 SLOAD SWAP1 PUSH2 0x100 EXP SWAP1 DIV PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND SUB PUSH3 0xF4F JUMPI PUSH1 0x40 MLOAD PUSH32 0x8C379A000000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD PUSH3 0xF46 SWAP1 PUSH3 0x1B5A JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST PUSH1 0x0 DUP3 SWAP1 POP PUSH1 0x0 DUP4 SWAP1 POP PUSH1 0x0 PUSH3 0xF66 DUP6 PUSH3 0x80D JUMP JUMPDEST SWAP1 POP PUSH1 0x0 DUP4 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH4 0x6352211E DUP7 PUSH1 0x40 MLOAD DUP3 PUSH4 0xFFFFFFFF AND PUSH1 0xE0 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH3 0xFA5 SWAP2 SWAP1 PUSH3 0x1F45 JUMP JUMPDEST PUSH1 0x20 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 DUP7 GAS STATICCALL ISZERO DUP1 ISZERO PUSH3 0xFC3 JUMPI RETURNDATASIZE PUSH1 0x0 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH1 0x0 REVERT JUMPDEST POP POP POP POP PUSH1 0x40 MLOAD RETURNDATASIZE PUSH1 0x1F NOT PUSH1 0x1F DUP3 ADD AND DUP3 ADD DUP1 PUSH1 0x40 MSTORE POP DUP2 ADD SWAP1 PUSH3 0xFE9 SWAP2 SWAP1 PUSH3 0x1C05 JUMP JUMPDEST SWAP1 POP CALLER PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP2 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND EQ PUSH3 0x105C JUMPI PUSH1 0x40 MLOAD PUSH32 0x8C379A000000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD PUSH3 0x1053 SWAP1 PUSH3 0x1FD8 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST ADDRESS PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP5 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH4 0x81812FC DUP8 PUSH1 0x40 MLOAD DUP3 PUSH4 0xFFFFFFFF AND PUSH1 0xE0 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH3 0x10AE SWAP2 SWAP1 PUSH3 0x1F45 JUMP JUMPDEST PUSH1 0x20 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 DUP7 GAS STATICCALL ISZERO DUP1 ISZERO PUSH3 0x10CC JUMPI RETURNDATASIZE PUSH1 0x0 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH1 0x0 REVERT JUMPDEST POP POP POP POP PUSH1 0x40 MLOAD RETURNDATASIZE PUSH1 0x1F NOT PUSH1 0x1F DUP3 ADD AND DUP3 ADD DUP1 PUSH1 0x40 MSTORE POP DUP2 ADD SWAP1 PUSH3 0x10F2 SWAP2 SWAP1 PUSH3 0x1C05 JUMP JUMPDEST PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND EQ PUSH3 0x114B JUMPI PUSH1 0x40 MLOAD PUSH32 0x8C379A000000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD PUSH3 0x1142 SWAP1 PUSH3 0x2070 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST DUP3 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH4 0x42966C68 DUP7 PUSH1 0x40 MLOAD DUP3 PUSH4 0xFFFFFFFF AND PUSH1 0xE0 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH3 0x1186 SWAP2 SWAP1 PUSH3 0x1F45 JUMP JUMPDEST PUSH1 0x0 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 PUSH1 0x0 DUP8 DUP1 EXTCODESIZE ISZERO DUP1 ISZERO PUSH3 0x11A1 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP GAS CALL ISZERO DUP1 ISZERO PUSH3 0x11B6 JUMPI RETURNDATASIZE PUSH1 0x0 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH1 0x0 REVERT JUMPDEST POP POP POP POP PUSH1 0x0 CALLER SWAP1 POP PUSH1 0x0 DUP4 SWAP1 POP DUP1 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH4 0xED2B40EA DUP4 DUP10 PUSH1 0x40 MLOAD DUP4 PUSH4 0xFFFFFFFF AND PUSH1 0xE0 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH3 0x1201 SWAP3 SWAP2 SWAP1 PUSH3 0x2092 JUMP JUMPDEST PUSH1 0x0 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 PUSH1 0x0 DUP8 DUP1 EXTCODESIZE ISZERO DUP1 ISZERO PUSH3 0x121C JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP GAS CALL ISZERO DUP1 ISZERO PUSH3 0x1231 JUMPI RETURNDATASIZE PUSH1 0x0 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH1 0x0 REVERT JUMPDEST POP POP POP POP POP POP POP POP POP POP POP POP JUMP JUMPDEST PUSH2 0x121E DUP1 PUSH3 0x20C0 DUP4 CODECOPY ADD SWAP1 JUMP JUMPDEST PUSH1 0x0 DUP2 SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH3 0x1262 DUP2 PUSH3 0x124D JUMP JUMPDEST DUP3 MSTORE POP POP JUMP JUMPDEST PUSH1 0x0 DUP2 MLOAD SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 DUP3 DUP3 MSTORE PUSH1 0x20 DUP3 ADD SWAP1 POP SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 DUP2 SWAP1 POP PUSH1 0x20 DUP3 ADD SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH3 0x129F DUP2 PUSH3 0x124D JUMP JUMPDEST DUP3 MSTORE POP POP JUMP JUMPDEST PUSH1 0x0 PUSH3 0x12B3 DUP4 DUP4 PUSH3 0x1294 JUMP JUMPDEST PUSH1 0x20 DUP4 ADD SWAP1 POP SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 ADD SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 PUSH3 0x12D9 DUP3 PUSH3 0x1268 JUMP JUMPDEST PUSH3 0x12E5 DUP2 DUP6 PUSH3 0x1273 JUMP JUMPDEST SWAP4 POP PUSH3 0x12F2 DUP4 PUSH3 0x1284 JUMP JUMPDEST DUP1 PUSH1 0x0 JUMPDEST DUP4 DUP2 LT ISZERO PUSH3 0x1329 JUMPI DUP2 MLOAD PUSH3 0x130D DUP9 DUP3 PUSH3 0x12A5 JUMP JUMPDEST SWAP8 POP PUSH3 0x131A DUP4 PUSH3 0x12BF JUMP JUMPDEST SWAP3 POP POP PUSH1 0x1 DUP2 ADD SWAP1 POP PUSH3 0x12F6 JUMP JUMPDEST POP DUP6 SWAP4 POP POP POP POP SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF DUP3 AND SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 PUSH3 0x1363 DUP3 PUSH3 0x1336 JUMP JUMPDEST SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH3 0x1375 DUP2 PUSH3 0x1356 JUMP JUMPDEST DUP3 MSTORE POP POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x80 DUP3 ADD SWAP1 POP PUSH3 0x1392 PUSH1 0x0 DUP4 ADD DUP8 PUSH3 0x1257 JUMP JUMPDEST PUSH3 0x13A1 PUSH1 0x20 DUP4 ADD DUP7 PUSH3 0x1257 JUMP JUMPDEST DUP2 DUP2 SUB PUSH1 0x40 DUP4 ADD MSTORE PUSH3 0x13B5 DUP2 DUP6 PUSH3 0x12CC JUMP JUMPDEST SWAP1 POP PUSH3 0x13C6 PUSH1 0x60 DUP4 ADD DUP5 PUSH3 0x136A JUMP JUMPDEST SWAP6 SWAP5 POP POP POP POP POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x40 MLOAD SWAP1 POP SWAP1 JUMP JUMPDEST PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH3 0x13EE DUP2 PUSH3 0x1356 JUMP JUMPDEST DUP2 EQ PUSH3 0x13FA JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP JUMP JUMPDEST PUSH1 0x0 DUP2 CALLDATALOAD SWAP1 POP PUSH3 0x140E DUP2 PUSH3 0x13E3 JUMP JUMPDEST SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 DUP5 SUB SLT ISZERO PUSH3 0x142D JUMPI PUSH3 0x142C PUSH3 0x13D9 JUMP JUMPDEST JUMPDEST PUSH1 0x0 PUSH3 0x143D DUP5 DUP3 DUP6 ADD PUSH3 0x13FD JUMP JUMPDEST SWAP2 POP POP SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 ADD SWAP1 POP PUSH3 0x145D PUSH1 0x0 DUP4 ADD DUP5 PUSH3 0x136A JUMP JUMPDEST SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH3 0x146E DUP2 PUSH3 0x124D JUMP JUMPDEST DUP2 EQ PUSH3 0x147A JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP JUMP JUMPDEST PUSH1 0x0 DUP2 CALLDATALOAD SWAP1 POP PUSH3 0x148E DUP2 PUSH3 0x1463 JUMP JUMPDEST SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x40 DUP4 DUP6 SUB SLT ISZERO PUSH3 0x14AE JUMPI PUSH3 0x14AD PUSH3 0x13D9 JUMP JUMPDEST JUMPDEST PUSH1 0x0 PUSH3 0x14BE DUP6 DUP3 DUP7 ADD PUSH3 0x13FD JUMP JUMPDEST SWAP3 POP POP PUSH1 0x20 PUSH3 0x14D1 DUP6 DUP3 DUP7 ADD PUSH3 0x147D JUMP JUMPDEST SWAP2 POP POP SWAP3 POP SWAP3 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH1 0x0 PUSH1 0x1F NOT PUSH1 0x1F DUP4 ADD AND SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH32 0x4E487B7100000000000000000000000000000000000000000000000000000000 PUSH1 0x0 MSTORE PUSH1 0x41 PUSH1 0x4 MSTORE PUSH1 0x24 PUSH1 0x0 REVERT JUMPDEST PUSH3 0x152B DUP3 PUSH3 0x14E0 JUMP JUMPDEST DUP2 ADD DUP2 DUP2 LT PUSH8 0xFFFFFFFFFFFFFFFF DUP3 GT OR ISZERO PUSH3 0x154D JUMPI PUSH3 0x154C PUSH3 0x14F1 JUMP JUMPDEST JUMPDEST DUP1 PUSH1 0x40 MSTORE POP POP POP JUMP JUMPDEST PUSH1 0x0 PUSH3 0x1562 PUSH3 0x13CF JUMP JUMPDEST SWAP1 POP PUSH3 0x1570 DUP3 DUP3 PUSH3 0x1520 JUMP JUMPDEST SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 PUSH8 0xFFFFFFFFFFFFFFFF DUP3 GT ISZERO PUSH3 0x1593 JUMPI PUSH3 0x1592 PUSH3 0x14F1 JUMP JUMPDEST JUMPDEST PUSH1 0x20 DUP3 MUL SWAP1 POP PUSH1 0x20 DUP2 ADD SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH1 0x0 PUSH3 0x15C0 PUSH3 0x15BA DUP5 PUSH3 0x1575 JUMP JUMPDEST PUSH3 0x1556 JUMP JUMPDEST SWAP1 POP DUP1 DUP4 DUP3 MSTORE PUSH1 0x20 DUP3 ADD SWAP1 POP PUSH1 0x20 DUP5 MUL DUP4 ADD DUP6 DUP2 GT ISZERO PUSH3 0x15E6 JUMPI PUSH3 0x15E5 PUSH3 0x15A4 JUMP JUMPDEST JUMPDEST DUP4 JUMPDEST DUP2 DUP2 LT ISZERO PUSH3 0x1613 JUMPI DUP1 PUSH3 0x15FE DUP9 DUP3 PUSH3 0x147D JUMP JUMPDEST DUP5 MSTORE PUSH1 0x20 DUP5 ADD SWAP4 POP POP PUSH1 0x20 DUP2 ADD SWAP1 POP PUSH3 0x15E8 JUMP JUMPDEST POP POP POP SWAP4 SWAP3 POP POP POP JUMP JUMPDEST PUSH1 0x0 DUP3 PUSH1 0x1F DUP4 ADD SLT PUSH3 0x1635 JUMPI PUSH3 0x1634 PUSH3 0x14DB JUMP JUMPDEST JUMPDEST DUP2 CALLDATALOAD PUSH3 0x1647 DUP5 DUP3 PUSH1 0x20 DUP7 ADD PUSH3 0x15A9 JUMP JUMPDEST SWAP2 POP POP SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x0 PUSH1 0x60 DUP5 DUP7 SUB SLT ISZERO PUSH3 0x166C JUMPI PUSH3 0x166B PUSH3 0x13D9 JUMP JUMPDEST JUMPDEST PUSH1 0x0 PUSH3 0x167C DUP7 DUP3 DUP8 ADD PUSH3 0x13FD JUMP JUMPDEST SWAP4 POP POP PUSH1 0x20 DUP5 ADD CALLDATALOAD PUSH8 0xFFFFFFFFFFFFFFFF DUP2 GT ISZERO PUSH3 0x16A0 JUMPI PUSH3 0x169F PUSH3 0x13DE JUMP JUMPDEST JUMPDEST PUSH3 0x16AE DUP7 DUP3 DUP8 ADD PUSH3 0x161D JUMP JUMPDEST SWAP3 POP POP PUSH1 0x40 DUP5 ADD CALLDATALOAD PUSH8 0xFFFFFFFFFFFFFFFF DUP2 GT ISZERO PUSH3 0x16D2 JUMPI PUSH3 0x16D1 PUSH3 0x13DE JUMP JUMPDEST JUMPDEST PUSH3 0x16E0 DUP7 DUP3 DUP8 ADD PUSH3 0x161D JUMP JUMPDEST SWAP2 POP POP SWAP3 POP SWAP3 POP SWAP3 JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x40 DUP4 DUP6 SUB SLT ISZERO PUSH3 0x1704 JUMPI PUSH3 0x1703 PUSH3 0x13D9 JUMP JUMPDEST JUMPDEST PUSH1 0x0 PUSH3 0x1714 DUP6 DUP3 DUP7 ADD PUSH3 0x13FD JUMP JUMPDEST SWAP3 POP POP PUSH1 0x20 DUP4 ADD CALLDATALOAD PUSH8 0xFFFFFFFFFFFFFFFF DUP2 GT ISZERO PUSH3 0x1738 JUMPI PUSH3 0x1737 PUSH3 0x13DE JUMP JUMPDEST JUMPDEST PUSH3 0x1746 DUP6 DUP3 DUP7 ADD PUSH3 0x161D JUMP JUMPDEST SWAP2 POP POP SWAP3 POP SWAP3 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 DUP3 DUP3 MSTORE PUSH1 0x20 DUP3 ADD SWAP1 POP SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH32 0x4E6F204E465420636F6E7472616374206173736F636961746564207769746820 PUSH1 0x0 DUP3 ADD MSTORE PUSH32 0x63616C6C65720000000000000000000000000000000000000000000000000000 PUSH1 0x20 DUP3 ADD MSTORE POP JUMP JUMPDEST PUSH1 0x0 PUSH3 0x17BF PUSH1 0x26 DUP4 PUSH3 0x1750 JUMP JUMPDEST SWAP2 POP PUSH3 0x17CC DUP3 PUSH3 0x1761 JUMP JUMPDEST PUSH1 0x40 DUP3 ADD SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 ADD SWAP1 POP DUP2 DUP2 SUB PUSH1 0x0 DUP4 ADD MSTORE PUSH3 0x17F2 DUP2 PUSH3 0x17B0 JUMP JUMPDEST SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH32 0x4E6F207661756C74206173736F63696174656420776974682063616C6C657227 PUSH1 0x0 DUP3 ADD MSTORE PUSH32 0x73204E465420636F6E7472616374000000000000000000000000000000000000 PUSH1 0x20 DUP3 ADD MSTORE POP JUMP JUMPDEST PUSH1 0x0 PUSH3 0x1857 PUSH1 0x2E DUP4 PUSH3 0x1750 JUMP JUMPDEST SWAP2 POP PUSH3 0x1864 DUP3 PUSH3 0x17F9 JUMP JUMPDEST PUSH1 0x40 DUP3 ADD SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 ADD SWAP1 POP DUP2 DUP2 SUB PUSH1 0x0 DUP4 ADD MSTORE PUSH3 0x188A DUP2 PUSH3 0x1848 JUMP JUMPDEST SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 DUP2 MLOAD SWAP1 POP PUSH3 0x18A2 DUP2 PUSH3 0x1463 JUMP JUMPDEST SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 DUP5 SUB SLT ISZERO PUSH3 0x18C1 JUMPI PUSH3 0x18C0 PUSH3 0x13D9 JUMP JUMPDEST JUMPDEST PUSH1 0x0 PUSH3 0x18D1 DUP5 DUP3 DUP6 ADD PUSH3 0x1891 JUMP JUMPDEST SWAP2 POP POP SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 PUSH3 0x18F1 PUSH3 0x18EB DUP5 PUSH3 0x1575 JUMP JUMPDEST PUSH3 0x1556 JUMP JUMPDEST SWAP1 POP DUP1 DUP4 DUP3 MSTORE PUSH1 0x20 DUP3 ADD SWAP1 POP PUSH1 0x20 DUP5 MUL DUP4 ADD DUP6 DUP2 GT ISZERO PUSH3 0x1917 JUMPI PUSH3 0x1916 PUSH3 0x15A4 JUMP JUMPDEST JUMPDEST DUP4 JUMPDEST DUP2 DUP2 LT ISZERO PUSH3 0x1944 JUMPI DUP1 PUSH3 0x192F DUP9 DUP3 PUSH3 0x1891 JUMP JUMPDEST DUP5 MSTORE PUSH1 0x20 DUP5 ADD SWAP4 POP POP PUSH1 0x20 DUP2 ADD SWAP1 POP PUSH3 0x1919 JUMP JUMPDEST POP POP POP SWAP4 SWAP3 POP POP POP JUMP JUMPDEST PUSH1 0x0 DUP3 PUSH1 0x1F DUP4 ADD SLT PUSH3 0x1966 JUMPI PUSH3 0x1965 PUSH3 0x14DB JUMP JUMPDEST JUMPDEST DUP2 MLOAD PUSH3 0x1978 DUP5 DUP3 PUSH1 0x20 DUP7 ADD PUSH3 0x18DA JUMP JUMPDEST SWAP2 POP POP SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 DUP5 SUB SLT ISZERO PUSH3 0x199A JUMPI PUSH3 0x1999 PUSH3 0x13D9 JUMP JUMPDEST JUMPDEST PUSH1 0x0 DUP3 ADD MLOAD PUSH8 0xFFFFFFFFFFFFFFFF DUP2 GT ISZERO PUSH3 0x19BB JUMPI PUSH3 0x19BA PUSH3 0x13DE JUMP JUMPDEST JUMPDEST PUSH3 0x19C9 DUP5 DUP3 DUP6 ADD PUSH3 0x194E JUMP JUMPDEST SWAP2 POP POP SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH32 0x5661756C7420616C72656164792065786973747320666F722074686973204E46 PUSH1 0x0 DUP3 ADD MSTORE PUSH32 0x5420636F6E747261637400000000000000000000000000000000000000000000 PUSH1 0x20 DUP3 ADD MSTORE POP JUMP JUMPDEST PUSH1 0x0 PUSH3 0x1A30 PUSH1 0x2A DUP4 PUSH3 0x1750 JUMP JUMPDEST SWAP2 POP PUSH3 0x1A3D DUP3 PUSH3 0x19D2 JUMP JUMPDEST PUSH1 0x40 DUP3 ADD SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 ADD SWAP1 POP DUP2 DUP2 SUB PUSH1 0x0 DUP4 ADD MSTORE PUSH3 0x1A63 DUP2 PUSH3 0x1A21 JUMP JUMPDEST SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x60 DUP3 ADD SWAP1 POP PUSH3 0x1A81 PUSH1 0x0 DUP4 ADD DUP7 PUSH3 0x136A JUMP JUMPDEST PUSH3 0x1A90 PUSH1 0x20 DUP4 ADD DUP6 PUSH3 0x1257 JUMP JUMPDEST PUSH3 0x1A9F PUSH1 0x40 DUP4 ADD DUP5 PUSH3 0x136A JUMP JUMPDEST SWAP5 SWAP4 POP POP POP POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x60 DUP3 ADD SWAP1 POP PUSH3 0x1ABE PUSH1 0x0 DUP4 ADD DUP7 PUSH3 0x1257 JUMP JUMPDEST PUSH3 0x1ACD PUSH1 0x20 DUP4 ADD DUP6 PUSH3 0x136A JUMP JUMPDEST PUSH3 0x1ADC PUSH1 0x40 DUP4 ADD DUP5 PUSH3 0x136A JUMP JUMPDEST SWAP5 SWAP4 POP POP POP POP JUMP JUMPDEST PUSH32 0x5661756C7420646F6573206E6F742065786973747320666F722074686973204E PUSH1 0x0 DUP3 ADD MSTORE PUSH32 0x465420636F6E7472616374000000000000000000000000000000000000000000 PUSH1 0x20 DUP3 ADD MSTORE POP JUMP JUMPDEST PUSH1 0x0 PUSH3 0x1B42 PUSH1 0x2B DUP4 PUSH3 0x1750 JUMP JUMPDEST SWAP2 POP PUSH3 0x1B4F DUP3 PUSH3 0x1AE4 JUMP JUMPDEST PUSH1 0x40 DUP3 ADD SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 ADD SWAP1 POP DUP2 DUP2 SUB PUSH1 0x0 DUP4 ADD MSTORE PUSH3 0x1B75 DUP2 PUSH3 0x1B33 JUMP JUMPDEST SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH32 0x4D69736D61746368656420617272617973000000000000000000000000000000 PUSH1 0x0 DUP3 ADD MSTORE POP JUMP JUMPDEST PUSH1 0x0 PUSH3 0x1BB4 PUSH1 0x11 DUP4 PUSH3 0x1750 JUMP JUMPDEST SWAP2 POP PUSH3 0x1BC1 DUP3 PUSH3 0x1B7C JUMP JUMPDEST PUSH1 0x20 DUP3 ADD SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 ADD SWAP1 POP DUP2 DUP2 SUB PUSH1 0x0 DUP4 ADD MSTORE PUSH3 0x1BE7 DUP2 PUSH3 0x1BA5 JUMP JUMPDEST SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 DUP2 MLOAD SWAP1 POP PUSH3 0x1BFF DUP2 PUSH3 0x13E3 JUMP JUMPDEST SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 DUP5 SUB SLT ISZERO PUSH3 0x1C1E JUMPI PUSH3 0x1C1D PUSH3 0x13D9 JUMP JUMPDEST JUMPDEST PUSH1 0x0 PUSH3 0x1C2E DUP5 DUP3 DUP6 ADD PUSH3 0x1BEE JUMP JUMPDEST SWAP2 POP POP SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH32 0x4F6E6C792074686520706572736F6E2077686F2063726561746564207661756C PUSH1 0x0 DUP3 ADD MSTORE PUSH32 0x742063616E206465706F7369742066756E647320696E746F2069740000000000 PUSH1 0x20 DUP3 ADD MSTORE POP JUMP JUMPDEST PUSH1 0x0 PUSH3 0x1C95 PUSH1 0x3B DUP4 PUSH3 0x1750 JUMP JUMPDEST SWAP2 POP PUSH3 0x1CA2 DUP3 PUSH3 0x1C37 JUMP JUMPDEST PUSH1 0x40 DUP3 ADD SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 ADD SWAP1 POP DUP2 DUP2 SUB PUSH1 0x0 DUP4 ADD MSTORE PUSH3 0x1CC8 DUP2 PUSH3 0x1C86 JUMP JUMPDEST SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH32 0x4E487B7100000000000000000000000000000000000000000000000000000000 PUSH1 0x0 MSTORE PUSH1 0x32 PUSH1 0x4 MSTORE PUSH1 0x24 PUSH1 0x0 REVERT JUMPDEST PUSH32 0x4E487B7100000000000000000000000000000000000000000000000000000000 PUSH1 0x0 MSTORE PUSH1 0x11 PUSH1 0x4 MSTORE PUSH1 0x24 PUSH1 0x0 REVERT JUMPDEST PUSH1 0x0 PUSH3 0x1D3A DUP3 PUSH3 0x124D JUMP JUMPDEST SWAP2 POP PUSH3 0x1D47 DUP4 PUSH3 0x124D JUMP JUMPDEST SWAP3 POP DUP3 DUP3 ADD SWAP1 POP DUP1 DUP3 GT ISZERO PUSH3 0x1D62 JUMPI PUSH3 0x1D61 PUSH3 0x1CFE JUMP JUMPDEST JUMPDEST SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 PUSH3 0x1D75 DUP3 PUSH3 0x124D JUMP JUMPDEST SWAP2 POP PUSH32 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF DUP3 SUB PUSH3 0x1DAA JUMPI PUSH3 0x1DA9 PUSH3 0x1CFE JUMP JUMPDEST JUMPDEST PUSH1 0x1 DUP3 ADD SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH32 0x4D69736D61746368656420746F74616C206465706F73697420616D6F756E7400 PUSH1 0x0 DUP3 ADD MSTORE POP JUMP JUMPDEST PUSH1 0x0 PUSH3 0x1DED PUSH1 0x1F DUP4 PUSH3 0x1750 JUMP JUMPDEST SWAP2 POP PUSH3 0x1DFA DUP3 PUSH3 0x1DB5 JUMP JUMPDEST PUSH1 0x20 DUP3 ADD SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 ADD SWAP1 POP DUP2 DUP2 SUB PUSH1 0x0 DUP4 ADD MSTORE PUSH3 0x1E20 DUP2 PUSH3 0x1DDE JUMP JUMPDEST SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x40 DUP3 ADD SWAP1 POP PUSH3 0x1E3E PUSH1 0x0 DUP4 ADD DUP6 PUSH3 0x1257 JUMP JUMPDEST PUSH3 0x1E4D PUSH1 0x20 DUP4 ADD DUP5 PUSH3 0x1257 JUMP JUMPDEST SWAP4 SWAP3 POP POP POP JUMP JUMPDEST PUSH32 0x4F6E6C792074686520706572736F6E2077686F2063726561746564207661756C PUSH1 0x0 DUP3 ADD MSTORE PUSH32 0x742063616E2077697468647261772066756E6473000000000000000000000000 PUSH1 0x20 DUP3 ADD MSTORE POP JUMP JUMPDEST PUSH1 0x0 PUSH3 0x1EB2 PUSH1 0x34 DUP4 PUSH3 0x1750 JUMP JUMPDEST SWAP2 POP PUSH3 0x1EBF DUP3 PUSH3 0x1E54 JUMP JUMPDEST PUSH1 0x40 DUP3 ADD SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 ADD SWAP1 POP DUP2 DUP2 SUB PUSH1 0x0 DUP4 ADD MSTORE PUSH3 0x1EE5 DUP2 PUSH3 0x1EA3 JUMP JUMPDEST SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 PUSH3 0x1EF9 DUP3 PUSH3 0x1336 JUMP JUMPDEST SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH3 0x1F0B DUP2 PUSH3 0x1EEC JUMP JUMPDEST DUP3 MSTORE POP POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x40 DUP3 ADD SWAP1 POP PUSH3 0x1F28 PUSH1 0x0 DUP4 ADD DUP6 PUSH3 0x1F00 JUMP JUMPDEST DUP2 DUP2 SUB PUSH1 0x20 DUP4 ADD MSTORE PUSH3 0x1F3C DUP2 DUP5 PUSH3 0x12CC JUMP JUMPDEST SWAP1 POP SWAP4 SWAP3 POP POP POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 ADD SWAP1 POP PUSH3 0x1F5C PUSH1 0x0 DUP4 ADD DUP5 PUSH3 0x1257 JUMP JUMPDEST SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH32 0x596F7520617265206E6F7420746865206F776E6572206F66207468697320746F PUSH1 0x0 DUP3 ADD MSTORE PUSH32 0x6B656E2100000000000000000000000000000000000000000000000000000000 PUSH1 0x20 DUP3 ADD MSTORE POP JUMP JUMPDEST PUSH1 0x0 PUSH3 0x1FC0 PUSH1 0x24 DUP4 PUSH3 0x1750 JUMP JUMPDEST SWAP2 POP PUSH3 0x1FCD DUP3 PUSH3 0x1F62 JUMP JUMPDEST PUSH1 0x40 DUP3 ADD SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 ADD SWAP1 POP DUP2 DUP2 SUB PUSH1 0x0 DUP4 ADD MSTORE PUSH3 0x1FF3 DUP2 PUSH3 0x1FB1 JUMP JUMPDEST SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH32 0x436F6E7472616374206E6F7420617070726F76656420746F206275726E20746F PUSH1 0x0 DUP3 ADD MSTORE PUSH32 0x6B656E0000000000000000000000000000000000000000000000000000000000 PUSH1 0x20 DUP3 ADD MSTORE POP JUMP JUMPDEST PUSH1 0x0 PUSH3 0x2058 PUSH1 0x23 DUP4 PUSH3 0x1750 JUMP JUMPDEST SWAP2 POP PUSH3 0x2065 DUP3 PUSH3 0x1FFA JUMP JUMPDEST PUSH1 0x40 DUP3 ADD SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 ADD SWAP1 POP DUP2 DUP2 SUB PUSH1 0x0 DUP4 ADD MSTORE PUSH3 0x208B DUP2 PUSH3 0x2049 JUMP JUMPDEST SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x40 DUP3 ADD SWAP1 POP PUSH3 0x20A9 PUSH1 0x0 DUP4 ADD DUP6 PUSH3 0x1F00 JUMP JUMPDEST PUSH3 0x20B8 PUSH1 0x20 DUP4 ADD DUP5 PUSH3 0x1257 JUMP JUMPDEST SWAP4 SWAP3 POP POP POP JUMP INVALID PUSH1 0x80 PUSH1 0x40 MSTORE CALLVALUE DUP1 ISZERO PUSH3 0x11 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH1 0x40 MLOAD PUSH3 0x121E CODESIZE SUB DUP1 PUSH3 0x121E DUP4 CODECOPY DUP2 DUP2 ADD PUSH1 0x40 MSTORE DUP2 ADD SWAP1 PUSH3 0x37 SWAP2 SWAP1 PUSH3 0x1B5 JUMP JUMPDEST DUP3 PUSH1 0x0 DUP1 PUSH2 0x100 EXP DUP2 SLOAD DUP2 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF MUL NOT AND SWAP1 DUP4 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND MUL OR SWAP1 SSTORE POP DUP2 PUSH1 0x2 DUP2 SWAP1 SSTORE POP DUP1 PUSH1 0x5 PUSH1 0x0 PUSH2 0x100 EXP DUP2 SLOAD DUP2 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF MUL NOT AND SWAP1 DUP4 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND MUL OR SWAP1 SSTORE POP TIMESTAMP PUSH1 0x3 DUP2 SWAP1 SSTORE POP CALLER PUSH1 0x4 PUSH1 0x0 PUSH2 0x100 EXP DUP2 SLOAD DUP2 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF MUL NOT AND SWAP1 DUP4 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND MUL OR SWAP1 SSTORE POP POP POP POP PUSH3 0x211 JUMP JUMPDEST PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH1 0x0 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF DUP3 AND SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 PUSH3 0x142 DUP3 PUSH3 0x115 JUMP JUMPDEST SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH3 0x154 DUP2 PUSH3 0x135 JUMP JUMPDEST DUP2 EQ PUSH3 0x160 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP JUMP JUMPDEST PUSH1 0x0 DUP2 MLOAD SWAP1 POP PUSH3 0x174 DUP2 PUSH3 0x149 JUMP JUMPDEST SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 DUP2 SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH3 0x18F DUP2 PUSH3 0x17A JUMP JUMPDEST DUP2 EQ PUSH3 0x19B JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP JUMP JUMPDEST PUSH1 0x0 DUP2 MLOAD SWAP1 POP PUSH3 0x1AF DUP2 PUSH3 0x184 JUMP JUMPDEST SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x0 PUSH1 0x60 DUP5 DUP7 SUB SLT ISZERO PUSH3 0x1D1 JUMPI PUSH3 0x1D0 PUSH3 0x110 JUMP JUMPDEST JUMPDEST PUSH1 0x0 PUSH3 0x1E1 DUP7 DUP3 DUP8 ADD PUSH3 0x163 JUMP JUMPDEST SWAP4 POP POP PUSH1 0x20 PUSH3 0x1F4 DUP7 DUP3 DUP8 ADD PUSH3 0x19E JUMP JUMPDEST SWAP3 POP POP PUSH1 0x40 PUSH3 0x207 DUP7 DUP3 DUP8 ADD PUSH3 0x163 JUMP JUMPDEST SWAP2 POP POP SWAP3 POP SWAP3 POP SWAP3 JUMP JUMPDEST PUSH2 0xFFD DUP1 PUSH3 0x221 PUSH1 0x0 CODECOPY PUSH1 0x0 RETURN INVALID PUSH1 0x80 PUSH1 0x40 MSTORE PUSH1 0x4 CALLDATASIZE LT PUSH2 0xA0 JUMPI PUSH1 0x0 CALLDATALOAD PUSH1 0xE0 SHR DUP1 PUSH4 0x8FD25165 GT PUSH2 0x64 JUMPI DUP1 PUSH4 0x8FD25165 EQ PUSH2 0x183 JUMPI DUP1 PUSH4 0xA40398A6 EQ PUSH2 0x1AE JUMPI DUP1 PUSH4 0xD58778D6 EQ PUSH2 0x1D7 JUMPI DUP1 PUSH4 0xD8270DCE EQ PUSH2 0x214 JUMPI DUP1 PUSH4 0xED2B40EA EQ PUSH2 0x23F JUMPI DUP1 PUSH4 0xF851A440 EQ PUSH2 0x25B JUMPI PUSH2 0xA7 JUMP JUMPDEST DUP1 PUSH4 0x31C2273B EQ PUSH2 0xA9 JUMPI DUP1 PUSH4 0x505658D9 EQ PUSH2 0xD4 JUMPI DUP1 PUSH4 0x5E4F6CAB EQ PUSH2 0xFF JUMPI DUP1 PUSH4 0x67F718A9 EQ PUSH2 0x13C JUMPI DUP1 PUSH4 0x8293744B EQ PUSH2 0x167 JUMPI PUSH2 0xA7 JUMP JUMPDEST CALLDATASIZE PUSH2 0xA7 JUMPI STOP JUMPDEST STOP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0xB5 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0xBE PUSH2 0x286 JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH2 0xCB SWAP2 SWAP1 PUSH2 0x8C7 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 RETURN JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0xE0 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0xE9 PUSH2 0x2AA JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH2 0xF6 SWAP2 SWAP1 PUSH2 0x8C7 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 RETURN JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x10B JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x126 PUSH1 0x4 DUP1 CALLDATASIZE SUB DUP2 ADD SWAP1 PUSH2 0x121 SWAP2 SWAP1 PUSH2 0x92C JUMP JUMPDEST PUSH2 0x2D0 JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH2 0x133 SWAP2 SWAP1 PUSH2 0x968 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 RETURN JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x148 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x151 PUSH2 0x2E8 JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH2 0x15E SWAP2 SWAP1 PUSH2 0xA41 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 RETURN JUMPDEST PUSH2 0x181 PUSH1 0x4 DUP1 CALLDATASIZE SUB DUP2 ADD SWAP1 PUSH2 0x17C SWAP2 SWAP1 PUSH2 0xBFA JUMP JUMPDEST PUSH2 0x340 JUMP JUMPDEST STOP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x18F JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x198 PUSH2 0x578 JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH2 0x1A5 SWAP2 SWAP1 PUSH2 0x968 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 RETURN JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x1BA JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x1D5 PUSH1 0x4 DUP1 CALLDATASIZE SUB DUP2 ADD SWAP1 PUSH2 0x1D0 SWAP2 SWAP1 PUSH2 0xC56 JUMP JUMPDEST PUSH2 0x57E JUMP JUMPDEST STOP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x1E3 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x1FE PUSH1 0x4 DUP1 CALLDATASIZE SUB DUP2 ADD SWAP1 PUSH2 0x1F9 SWAP2 SWAP1 PUSH2 0x92C JUMP JUMPDEST PUSH2 0x681 JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH2 0x20B SWAP2 SWAP1 PUSH2 0x968 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 RETURN JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x220 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x229 PUSH2 0x6A5 JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH2 0x236 SWAP2 SWAP1 PUSH2 0x968 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 RETURN JUMPDEST PUSH2 0x259 PUSH1 0x4 DUP1 CALLDATASIZE SUB DUP2 ADD SWAP1 PUSH2 0x254 SWAP2 SWAP1 PUSH2 0xC96 JUMP JUMPDEST PUSH2 0x6AB JUMP JUMPDEST STOP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x267 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x270 PUSH2 0x860 JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH2 0x27D SWAP2 SWAP1 PUSH2 0x8C7 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 RETURN JUMPDEST PUSH1 0x0 DUP1 SLOAD SWAP1 PUSH2 0x100 EXP SWAP1 DIV PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP2 JUMP JUMPDEST PUSH1 0x4 PUSH1 0x0 SWAP1 SLOAD SWAP1 PUSH2 0x100 EXP SWAP1 DIV PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP2 JUMP JUMPDEST PUSH1 0x1 PUSH1 0x20 MSTORE DUP1 PUSH1 0x0 MSTORE PUSH1 0x40 PUSH1 0x0 KECCAK256 PUSH1 0x0 SWAP2 POP SWAP1 POP SLOAD DUP2 JUMP JUMPDEST PUSH1 0x60 PUSH1 0x6 DUP1 SLOAD DUP1 PUSH1 0x20 MUL PUSH1 0x20 ADD PUSH1 0x40 MLOAD SWAP1 DUP2 ADD PUSH1 0x40 MSTORE DUP1 SWAP3 SWAP2 SWAP1 DUP2 DUP2 MSTORE PUSH1 0x20 ADD DUP3 DUP1 SLOAD DUP1 ISZERO PUSH2 0x336 JUMPI PUSH1 0x20 MUL DUP3 ADD SWAP2 SWAP1 PUSH1 0x0 MSTORE PUSH1 0x20 PUSH1 0x0 KECCAK256 SWAP1 JUMPDEST DUP2 SLOAD DUP2 MSTORE PUSH1 0x20 ADD SWAP1 PUSH1 0x1 ADD SWAP1 DUP1 DUP4 GT PUSH2 0x322 JUMPI JUMPDEST POP POP POP POP POP SWAP1 POP SWAP1 JUMP JUMPDEST PUSH1 0x4 PUSH1 0x0 SWAP1 SLOAD SWAP1 PUSH2 0x100 EXP SWAP1 DIV PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND CALLER PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND EQ PUSH2 0x3D0 JUMPI PUSH1 0x40 MLOAD PUSH32 0x8C379A000000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x3C7 SWAP1 PUSH2 0xD59 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST PUSH1 0x2 DUP1 SLOAD PUSH2 0x3DE SWAP2 SWAP1 PUSH2 0xDA8 JUMP JUMPDEST PUSH1 0x3 SLOAD TIMESTAMP PUSH2 0x3EC SWAP2 SWAP1 PUSH2 0xDEA JUMP JUMPDEST LT ISZERO PUSH2 0x42D JUMPI PUSH1 0x40 MLOAD PUSH32 0x8C379A000000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x424 SWAP1 PUSH2 0xE90 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST PUSH1 0x0 DUP1 JUMPDEST DUP3 MLOAD DUP2 LT ISZERO PUSH2 0x52B JUMPI PUSH1 0x0 PUSH1 0x1 PUSH1 0x0 DUP6 DUP5 DUP2 MLOAD DUP2 LT PUSH2 0x453 JUMPI PUSH2 0x452 PUSH2 0xEB0 JUMP JUMPDEST JUMPDEST PUSH1 0x20 MUL PUSH1 0x20 ADD ADD MLOAD DUP2 MSTORE PUSH1 0x20 ADD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 KECCAK256 SLOAD GT PUSH2 0x4AA JUMPI PUSH1 0x40 MLOAD PUSH32 0x8C379A000000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x4A1 SWAP1 PUSH2 0xF2B JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST PUSH1 0x1 PUSH1 0x0 DUP5 DUP4 DUP2 MLOAD DUP2 LT PUSH2 0x4C1 JUMPI PUSH2 0x4C0 PUSH2 0xEB0 JUMP JUMPDEST JUMPDEST PUSH1 0x20 MUL PUSH1 0x20 ADD ADD MLOAD DUP2 MSTORE PUSH1 0x20 ADD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 KECCAK256 SLOAD DUP3 PUSH2 0x4E3 SWAP2 SWAP1 PUSH2 0xF4B JUMP JUMPDEST SWAP2 POP PUSH1 0x0 PUSH1 0x1 PUSH1 0x0 DUP6 DUP5 DUP2 MLOAD DUP2 LT PUSH2 0x4FE JUMPI PUSH2 0x4FD PUSH2 0xEB0 JUMP JUMPDEST JUMPDEST PUSH1 0x20 MUL PUSH1 0x20 ADD ADD MLOAD DUP2 MSTORE PUSH1 0x20 ADD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 KECCAK256 DUP2 SWAP1 SSTORE POP DUP1 DUP1 PUSH2 0x523 SWAP1 PUSH2 0xF7F JUMP JUMPDEST SWAP2 POP POP PUSH2 0x431 JUMP JUMPDEST POP DUP3 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH2 0x8FC DUP3 SWAP1 DUP2 ISZERO MUL SWAP1 PUSH1 0x40 MLOAD PUSH1 0x0 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 DUP6 DUP9 DUP9 CALL SWAP4 POP POP POP POP ISZERO DUP1 ISZERO PUSH2 0x572 JUMPI RETURNDATASIZE PUSH1 0x0 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH1 0x0 REVERT JUMPDEST POP POP POP POP JUMP JUMPDEST PUSH1 0x2 SLOAD DUP2 JUMP JUMPDEST PUSH1 0x4 PUSH1 0x0 SWAP1 SLOAD SWAP1 PUSH2 0x100 EXP SWAP1 DIV PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND CALLER PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND EQ PUSH2 0x60E JUMPI PUSH1 0x40 MLOAD PUSH32 0x8C379A000000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x605 SWAP1 PUSH2 0xD59 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST PUSH1 0x0 PUSH1 0x1 PUSH1 0x0 DUP5 DUP2 MSTORE PUSH1 0x20 ADD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 KECCAK256 SLOAD SUB PUSH2 0x653 JUMPI PUSH1 0x6 DUP3 SWAP1 DUP1 PUSH1 0x1 DUP2 SLOAD ADD DUP1 DUP3 SSTORE DUP1 SWAP2 POP POP PUSH1 0x1 SWAP1 SUB SWAP1 PUSH1 0x0 MSTORE PUSH1 0x20 PUSH1 0x0 KECCAK256 ADD PUSH1 0x0 SWAP1 SWAP2 SWAP1 SWAP2 SWAP1 SWAP2 POP SSTORE JUMPDEST DUP1 PUSH1 0x1 PUSH1 0x0 DUP5 DUP2 MSTORE PUSH1 0x20 ADD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 KECCAK256 PUSH1 0x0 DUP3 DUP3 SLOAD PUSH2 0x676 SWAP2 SWAP1 PUSH2 0xF4B JUMP JUMPDEST SWAP3 POP POP DUP2 SWAP1 SSTORE POP POP POP JUMP JUMPDEST PUSH1 0x6 DUP2 DUP2 SLOAD DUP2 LT PUSH2 0x691 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST SWAP1 PUSH1 0x0 MSTORE PUSH1 0x20 PUSH1 0x0 KECCAK256 ADD PUSH1 0x0 SWAP2 POP SWAP1 POP SLOAD DUP2 JUMP JUMPDEST PUSH1 0x3 SLOAD DUP2 JUMP JUMPDEST PUSH1 0x4 PUSH1 0x0 SWAP1 SLOAD SWAP1 PUSH2 0x100 EXP SWAP1 DIV PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND CALLER PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND EQ PUSH2 0x73B JUMPI PUSH1 0x40 MLOAD PUSH32 0x8C379A000000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x732 SWAP1 PUSH2 0xD59 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST PUSH1 0x0 PUSH1 0x1 PUSH1 0x0 DUP4 DUP2 MSTORE PUSH1 0x20 ADD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 KECCAK256 SLOAD GT PUSH2 0x791 JUMPI PUSH1 0x40 MLOAD PUSH32 0x8C379A000000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x788 SWAP1 PUSH2 0xF2B JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST PUSH1 0x2 SLOAD PUSH1 0x3 SLOAD TIMESTAMP PUSH2 0x7A2 SWAP2 SWAP1 PUSH2 0xDEA JUMP JUMPDEST LT ISZERO PUSH2 0x7E3 JUMPI PUSH1 0x40 MLOAD PUSH32 0x8C379A000000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x7DA SWAP1 PUSH2 0xE90 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST PUSH1 0x0 PUSH1 0x1 PUSH1 0x0 DUP4 DUP2 MSTORE PUSH1 0x20 ADD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 KECCAK256 SLOAD SWAP1 POP PUSH1 0x0 PUSH1 0x1 PUSH1 0x0 DUP5 DUP2 MSTORE PUSH1 0x20 ADD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 KECCAK256 DUP2 SWAP1 SSTORE POP DUP3 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH2 0x8FC DUP3 SWAP1 DUP2 ISZERO MUL SWAP1 PUSH1 0x40 MLOAD PUSH1 0x0 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 DUP6 DUP9 DUP9 CALL SWAP4 POP POP POP POP ISZERO DUP1 ISZERO PUSH2 0x85A JUMPI RETURNDATASIZE PUSH1 0x0 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH1 0x0 REVERT JUMPDEST POP POP POP POP JUMP JUMPDEST PUSH1 0x5 PUSH1 0x0 SWAP1 SLOAD SWAP1 PUSH2 0x100 EXP SWAP1 DIV PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP2 JUMP JUMPDEST PUSH1 0x0 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF DUP3 AND SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0x8B1 DUP3 PUSH2 0x886 JUMP JUMPDEST SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH2 0x8C1 DUP2 PUSH2 0x8A6 JUMP JUMPDEST DUP3 MSTORE POP POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 ADD SWAP1 POP PUSH2 0x8DC PUSH1 0x0 DUP4 ADD DUP5 PUSH2 0x8B8 JUMP JUMPDEST SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x40 MLOAD SWAP1 POP SWAP1 JUMP JUMPDEST PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH1 0x0 DUP2 SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH2 0x909 DUP2 PUSH2 0x8F6 JUMP JUMPDEST DUP2 EQ PUSH2 0x914 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP JUMP JUMPDEST PUSH1 0x0 DUP2 CALLDATALOAD SWAP1 POP PUSH2 0x926 DUP2 PUSH2 0x900 JUMP JUMPDEST SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 DUP5 SUB SLT ISZERO PUSH2 0x942 JUMPI PUSH2 0x941 PUSH2 0x8EC JUMP JUMPDEST JUMPDEST PUSH1 0x0 PUSH2 0x950 DUP5 DUP3 DUP6 ADD PUSH2 0x917 JUMP JUMPDEST SWAP2 POP POP SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH2 0x962 DUP2 PUSH2 0x8F6 JUMP JUMPDEST DUP3 MSTORE POP POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 ADD SWAP1 POP PUSH2 0x97D PUSH1 0x0 DUP4 ADD DUP5 PUSH2 0x959 JUMP JUMPDEST SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 DUP2 MLOAD SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 DUP3 DUP3 MSTORE PUSH1 0x20 DUP3 ADD SWAP1 POP SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 DUP2 SWAP1 POP PUSH1 0x20 DUP3 ADD SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH2 0x9B8 DUP2 PUSH2 0x8F6 JUMP JUMPDEST DUP3 MSTORE POP POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0x9CA DUP4 DUP4 PUSH2 0x9AF JUMP JUMPDEST PUSH1 0x20 DUP4 ADD SWAP1 POP SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 ADD SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0x9EE DUP3 PUSH2 0x983 JUMP JUMPDEST PUSH2 0x9F8 DUP2 DUP6 PUSH2 0x98E JUMP JUMPDEST SWAP4 POP PUSH2 0xA03 DUP4 PUSH2 0x99F JUMP JUMPDEST DUP1 PUSH1 0x0 JUMPDEST DUP4 DUP2 LT ISZERO PUSH2 0xA34 JUMPI DUP2 MLOAD PUSH2 0xA1B DUP9 DUP3 PUSH2 0x9BE JUMP JUMPDEST SWAP8 POP PUSH2 0xA26 DUP4 PUSH2 0x9D6 JUMP JUMPDEST SWAP3 POP POP PUSH1 0x1 DUP2 ADD SWAP1 POP PUSH2 0xA07 JUMP JUMPDEST POP DUP6 SWAP4 POP POP POP POP SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 ADD SWAP1 POP DUP2 DUP2 SUB PUSH1 0x0 DUP4 ADD MSTORE PUSH2 0xA5B DUP2 DUP5 PUSH2 0x9E3 JUMP JUMPDEST SWAP1 POP SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0xA6E DUP3 PUSH2 0x886 JUMP JUMPDEST SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH2 0xA7E DUP2 PUSH2 0xA63 JUMP JUMPDEST DUP2 EQ PUSH2 0xA89 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP JUMP JUMPDEST PUSH1 0x0 DUP2 CALLDATALOAD SWAP1 POP PUSH2 0xA9B DUP2 PUSH2 0xA75 JUMP JUMPDEST SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH1 0x0 PUSH1 0x1F NOT PUSH1 0x1F DUP4 ADD AND SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH32 0x4E487B7100000000000000000000000000000000000000000000000000000000 PUSH1 0x0 MSTORE PUSH1 0x41 PUSH1 0x4 MSTORE PUSH1 0x24 PUSH1 0x0 REVERT JUMPDEST PUSH2 0xAEF DUP3 PUSH2 0xAA6 JUMP JUMPDEST DUP2 ADD DUP2 DUP2 LT PUSH8 0xFFFFFFFFFFFFFFFF DUP3 GT OR ISZERO PUSH2 0xB0E JUMPI PUSH2 0xB0D PUSH2 0xAB7 JUMP JUMPDEST JUMPDEST DUP1 PUSH1 0x40 MSTORE POP POP POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0xB21 PUSH2 0x8E2 JUMP JUMPDEST SWAP1 POP PUSH2 0xB2D DUP3 DUP3 PUSH2 0xAE6 JUMP JUMPDEST SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 PUSH8 0xFFFFFFFFFFFFFFFF DUP3 GT ISZERO PUSH2 0xB4D JUMPI PUSH2 0xB4C PUSH2 0xAB7 JUMP JUMPDEST JUMPDEST PUSH1 0x20 DUP3 MUL SWAP1 POP PUSH1 0x20 DUP2 ADD SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH1 0x0 PUSH2 0xB76 PUSH2 0xB71 DUP5 PUSH2 0xB32 JUMP JUMPDEST PUSH2 0xB17 JUMP JUMPDEST SWAP1 POP DUP1 DUP4 DUP3 MSTORE PUSH1 0x20 DUP3 ADD SWAP1 POP PUSH1 0x20 DUP5 MUL DUP4 ADD DUP6 DUP2 GT ISZERO PUSH2 0xB99 JUMPI PUSH2 0xB98 PUSH2 0xB5E JUMP JUMPDEST JUMPDEST DUP4 JUMPDEST DUP2 DUP2 LT ISZERO PUSH2 0xBC2 JUMPI DUP1 PUSH2 0xBAE DUP9 DUP3 PUSH2 0x917 JUMP JUMPDEST DUP5 MSTORE PUSH1 0x20 DUP5 ADD SWAP4 POP POP PUSH1 0x20 DUP2 ADD SWAP1 POP PUSH2 0xB9B JUMP JUMPDEST POP POP POP SWAP4 SWAP3 POP POP POP JUMP JUMPDEST PUSH1 0x0 DUP3 PUSH1 0x1F DUP4 ADD SLT PUSH2 0xBE1 JUMPI PUSH2 0xBE0 PUSH2 0xAA1 JUMP JUMPDEST JUMPDEST DUP2 CALLDATALOAD PUSH2 0xBF1 DUP5 DUP3 PUSH1 0x20 DUP7 ADD PUSH2 0xB63 JUMP JUMPDEST SWAP2 POP POP SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x40 DUP4 DUP6 SUB SLT ISZERO PUSH2 0xC11 JUMPI PUSH2 0xC10 PUSH2 0x8EC JUMP JUMPDEST JUMPDEST PUSH1 0x0 PUSH2 0xC1F DUP6 DUP3 DUP7 ADD PUSH2 0xA8C JUMP JUMPDEST SWAP3 POP POP PUSH1 0x20 DUP4 ADD CALLDATALOAD PUSH8 0xFFFFFFFFFFFFFFFF DUP2 GT ISZERO PUSH2 0xC40 JUMPI PUSH2 0xC3F PUSH2 0x8F1 JUMP JUMPDEST JUMPDEST PUSH2 0xC4C DUP6 DUP3 DUP7 ADD PUSH2 0xBCC JUMP JUMPDEST SWAP2 POP POP SWAP3 POP SWAP3 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x40 DUP4 DUP6 SUB SLT ISZERO PUSH2 0xC6D JUMPI PUSH2 0xC6C PUSH2 0x8EC JUMP JUMPDEST JUMPDEST PUSH1 0x0 PUSH2 0xC7B DUP6 DUP3 DUP7 ADD PUSH2 0x917 JUMP JUMPDEST SWAP3 POP POP PUSH1 0x20 PUSH2 0xC8C DUP6 DUP3 DUP7 ADD PUSH2 0x917 JUMP JUMPDEST SWAP2 POP POP SWAP3 POP SWAP3 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x40 DUP4 DUP6 SUB SLT ISZERO PUSH2 0xCAD JUMPI PUSH2 0xCAC PUSH2 0x8EC JUMP JUMPDEST JUMPDEST PUSH1 0x0 PUSH2 0xCBB DUP6 DUP3 DUP7 ADD PUSH2 0xA8C JUMP JUMPDEST SWAP3 POP POP PUSH1 0x20 PUSH2 0xCCC DUP6 DUP3 DUP7 ADD PUSH2 0x917 JUMP JUMPDEST SWAP2 POP POP SWAP3 POP SWAP3 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 DUP3 DUP3 MSTORE PUSH1 0x20 DUP3 ADD SWAP1 POP SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH32 0x4F6E6C7920426974737572616E636520636F6E74726163742063616E2063616C PUSH1 0x0 DUP3 ADD MSTORE PUSH32 0x6C20746869732066756E6374696F6E0000000000000000000000000000000000 PUSH1 0x20 DUP3 ADD MSTORE POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0xD43 PUSH1 0x2F DUP4 PUSH2 0xCD6 JUMP JUMPDEST SWAP2 POP PUSH2 0xD4E DUP3 PUSH2 0xCE7 JUMP JUMPDEST PUSH1 0x40 DUP3 ADD SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 ADD SWAP1 POP DUP2 DUP2 SUB PUSH1 0x0 DUP4 ADD MSTORE PUSH2 0xD72 DUP2 PUSH2 0xD36 JUMP JUMPDEST SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH32 0x4E487B7100000000000000000000000000000000000000000000000000000000 PUSH1 0x0 MSTORE PUSH1 0x11 PUSH1 0x4 MSTORE PUSH1 0x24 PUSH1 0x0 REVERT JUMPDEST PUSH1 0x0 PUSH2 0xDB3 DUP3 PUSH2 0x8F6 JUMP JUMPDEST SWAP2 POP PUSH2 0xDBE DUP4 PUSH2 0x8F6 JUMP JUMPDEST SWAP3 POP DUP3 DUP3 MUL PUSH2 0xDCC DUP2 PUSH2 0x8F6 JUMP JUMPDEST SWAP2 POP DUP3 DUP3 DIV DUP5 EQ DUP4 ISZERO OR PUSH2 0xDE3 JUMPI PUSH2 0xDE2 PUSH2 0xD79 JUMP JUMPDEST JUMPDEST POP SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0xDF5 DUP3 PUSH2 0x8F6 JUMP JUMPDEST SWAP2 POP PUSH2 0xE00 DUP4 PUSH2 0x8F6 JUMP JUMPDEST SWAP3 POP DUP3 DUP3 SUB SWAP1 POP DUP2 DUP2 GT ISZERO PUSH2 0xE18 JUMPI PUSH2 0xE17 PUSH2 0xD79 JUMP JUMPDEST JUMPDEST SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH32 0x43616E6E6F74206163636573732066756E6374696F6E206265666F7265207468 PUSH1 0x0 DUP3 ADD MSTORE PUSH32 0x65206D696E696D756D2074696D65206861732070617373656400000000000000 PUSH1 0x20 DUP3 ADD MSTORE POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0xE7A PUSH1 0x39 DUP4 PUSH2 0xCD6 JUMP JUMPDEST SWAP2 POP PUSH2 0xE85 DUP3 PUSH2 0xE1E JUMP JUMPDEST PUSH1 0x40 DUP3 ADD SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 ADD SWAP1 POP DUP2 DUP2 SUB PUSH1 0x0 DUP4 ADD MSTORE PUSH2 0xEA9 DUP2 PUSH2 0xE6D JUMP JUMPDEST SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH32 0x4E487B7100000000000000000000000000000000000000000000000000000000 PUSH1 0x0 MSTORE PUSH1 0x32 PUSH1 0x4 MSTORE PUSH1 0x24 PUSH1 0x0 REVERT JUMPDEST PUSH32 0x4E6F2062616C616E636520666F72207468697320746F6B656E49440000000000 PUSH1 0x0 DUP3 ADD MSTORE POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0xF15 PUSH1 0x1B DUP4 PUSH2 0xCD6 JUMP JUMPDEST SWAP2 POP PUSH2 0xF20 DUP3 PUSH2 0xEDF JUMP JUMPDEST PUSH1 0x20 DUP3 ADD SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 ADD SWAP1 POP DUP2 DUP2 SUB PUSH1 0x0 DUP4 ADD MSTORE PUSH2 0xF44 DUP2 PUSH2 0xF08 JUMP JUMPDEST SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0xF56 DUP3 PUSH2 0x8F6 JUMP JUMPDEST SWAP2 POP PUSH2 0xF61 DUP4 PUSH2 0x8F6 JUMP JUMPDEST SWAP3 POP DUP3 DUP3 ADD SWAP1 POP DUP1 DUP3 GT ISZERO PUSH2 0xF79 JUMPI PUSH2 0xF78 PUSH2 0xD79 JUMP JUMPDEST JUMPDEST SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0xF8A DUP3 PUSH2 0x8F6 JUMP JUMPDEST SWAP2 POP PUSH32 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF DUP3 SUB PUSH2 0xFBC JUMPI PUSH2 0xFBB PUSH2 0xD79 JUMP JUMPDEST JUMPDEST PUSH1 0x1 DUP3 ADD SWAP1 POP SWAP2 SWAP1 POP JUMP INVALID LOG2 PUSH5 0x6970667358 0x22 SLT KECCAK256 PUSH12 0x9B96CB8730C8A6F1BABF8707 PUSH17 0xA66B17A6B9760FD6EF1C71BA328DE2E608 EXTCODECOPY PUSH5 0x736F6C6343 STOP ADDMOD SLT STOP CALLER LOG2 PUSH5 0x6970667358 0x22 SLT KECCAK256 SWAP9 SWAP16 DIV JUMPI 0xD2 RETURNDATACOPY 0xCA MSIZE SWAP6 ORIGIN PC 0xAC CALL 0xC2 PUSH8 0x7A4F2C18E1599E6B SELFDESTRUCT 0xC5 0xC5 0xE PUSH25 0x412DAE364736F6C6343000812003300000000000000000000 ",
		"sourceMap": "3425:5583:12:-:0;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;8226:779;;;;;;;;;;;;;:::i;:::-;;;;;;;;;;:::i;:::-;;;;;;;;3719:47;;;;;;;;;;;;;;;;;;;;;;;:::i;:::-;;:::i;:::-;;;;;;;:::i;:::-;;;;;;;;3822:41;;;;;;;;;;;;;;;;;;;;;;;:::i;:::-;;:::i;:::-;;;;;;;:::i;:::-;;;;;;;;4052:491;;;;;;;;;;;;;;;;;;;;;;;:::i;:::-;;:::i;:::-;;7807:142;;;;;;;;;;;;;;;;;;;;;;;:::i;:::-;;:::i;:::-;;;;;;;:::i;:::-;;;;;;;;4805:1021;;;;;;;;;;;;;:::i;:::-;;:::i;:::-;;6025:533;;;;;;;;;;;;;:::i;:::-;;:::i;:::-;;6743:867;;;;;;;;;;;;;:::i;:::-;;:::i;:::-;;8226:779;8276:7;8285;8294:16;8312:7;8332:26;8361:6;:18;8368:10;8361:18;;;;;;;;;;;;;;;;;;;;;;;;;8332:47;;8428:1;8398:32;;:18;:32;;;8390:83;;;;;;;;;;;;:::i;:::-;;;;;;;;;8486:28;8517:12;:32;8530:18;8517:32;;;;;;;;;;;;;;;;;;;;;;;;;8486:63;;8600:1;8568:34;;:20;:34;;;8560:93;;;;;;;;;;;;:::i;:::-;;;;;;;;;8666:11;8694:20;8666:50;;8727:20;8758:5;8750:22;;;8727:45;;8783:27;8813:5;:25;;;:27;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;:::i;:::-;8783:57;;8851:32;8886:5;:17;;;:19;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;:::i;:::-;8851:54;;8926:12;8940:19;8961:15;8978:18;8918:79;;;;;;;;;;;;;;8226:779;;;;:::o;3719:47::-;;;;;;;;;;;;;;;;;;;;;;:::o;3822:41::-;;;;;;;;;;;;;;;;;;;;;;:::o;4052:491::-;4190:1;4145:47;;:12;:33;4158:19;4145:33;;;;;;;;;;;;;;;;;;;;;;;;;:47;;;4137:102;;;;;;;;;;;;:::i;:::-;;;;;;;;;4250:11;4274:19;4294:8;4304:10;4264:51;;;;;:::i;:::-;;;;;;;:::i;:::-;;;;;;;;;;;;;;;;;;;;;;;;4250:65;;4326:6;4338:5;4326:18;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;4398:5;4355:12;:33;4368:19;4355:33;;;;;;;;;;;;;;;;:49;;;;;;;;;;;;;;;;;;4436:19;4415:6;:18;4422:10;4415:18;;;;;;;;;;;;;;;;:40;;;;;;;;;;;;;;;;;;4471:64;4484:15;4508:5;4515:19;4471:64;;;;;;;;:::i;:::-;;;;;;;;4126:417;4052:491;;:::o;7807:142::-;7883:7;7909:12;:32;7922:18;7909:32;;;;;;;;;;;;;;;;;;;;;;;;;7902:39;;7807:142;;;:::o;4805:1021::-;4986:1;4942:46;;:12;:32;4955:18;4942:32;;;;;;;;;;;;;;;;;;;;;;;;;:46;;;4934:102;;;;;;;;;;;;:::i;:::-;;;;;;;;;5049:18;5070:9;5049:30;;5090:37;5138:38;5157:18;5138;:38::i;:::-;5090:87;;5216:7;:14;5196:9;:16;:34;5188:64;;;;;;;;;;;;:::i;:::-;;;;;;;;;5263:19;5297:11;5317:21;5297:42;;5375:10;5358:27;;:5;:11;;;:13;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;:::i;:::-;:27;;;5350:99;;;;;;;;;;;;:::i;:::-;;;;;;;;;5465:9;5460:99;5484:9;:16;5480:1;:20;5460:99;;;5537:7;5545:1;5537:10;;;;;;;;:::i;:::-;;;;;;;;5522:25;;;;;:::i;:::-;;;5502:3;;;;;:::i;:::-;;;;5460:99;;;;5591:11;5577:10;:25;5569:69;;;;;;;;;;;;:::i;:::-;;;;;;;;;5654:9;5649:116;5673:9;:16;5669:1;:20;5649:116;;;5711:5;:16;;;5728:9;5738:1;5728:12;;;;;;;;:::i;:::-;;;;;;;;5742:7;5750:1;5742:10;;;;;;;;:::i;:::-;;;;;;;;5711:42;;;;;;;;;;;;;;;;:::i;:::-;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;5691:3;;;;;:::i;:::-;;;;5649:116;;;;5775:21;:30;;:43;5806:11;5775:43;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;4923:903;;;;4805:1021;;;:::o;6025:533::-;6180:1;6136:46;;:12;:32;6149:18;6136:32;;;;;;;;;;;;;;;;;;;;;;;;;:46;;;6128:102;;;;;;;;;;;;:::i;:::-;;;;;;;;;6251:37;6299:38;6318:18;6299;:38::i;:::-;6251:87;;6349:11;6369:21;6349:42;;6427:10;6410:27;;:5;:11;;;:13;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;:::i;:::-;:27;;;6402:92;;;;;;;;;;;;:::i;:::-;;;;;;;;;6505:5;:14;;;6528:10;6541:8;6505:45;;;;;;;;;;;;;;;;:::i;:::-;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;6117:441;;6025:533;;:::o;6743:867::-;6882:1;6838:46;;:12;:32;6851:18;6838:32;;;;;;;;;;;;;;;;;;;;;;;;;:46;;;6830:102;;;;;;;;;;;;:::i;:::-;;;;;;;;;6945:12;6967:18;6945:41;;6997:20;7035:18;6997:57;;7067:37;7115:38;7134:18;7115;:38::i;:::-;7067:87;;7165:18;7186:5;:13;;;7200:8;7186:23;;;;;;;;;;;;;;;:::i;:::-;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;:::i;:::-;7165:44;;7252:10;7238:24;;:10;:24;;;7230:73;;;;;;;;;;;;:::i;:::-;;;;;;;;;7361:4;7322:44;;:5;:17;;;7340:8;7322:27;;;;;;;;;;;;;;;:::i;:::-;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;:::i;:::-;:44;;;7314:92;;;;;;;;;;;;:::i;:::-;;;;;;;;;7419:5;:10;;;7430:8;7419:20;;;;;;;;;;;;;;;:::i;:::-;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;7452:25;7488:10;7452:47;;7510:11;7530:21;7510:42;;7565:5;:16;;;7582:9;7593:8;7565:37;;;;;;;;;;;;;;;;:::i;:::-;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;6819:791;;;;;;6743:867;;:::o;-1:-1:-1:-;;;;;;;;:::o;7:77:13:-;44:7;73:5;62:16;;7:77;;;:::o;90:118::-;177:24;195:5;177:24;:::i;:::-;172:3;165:37;90:118;;:::o;214:114::-;281:6;315:5;309:12;299:22;;214:114;;;:::o;334:184::-;433:11;467:6;462:3;455:19;507:4;502:3;498:14;483:29;;334:184;;;;:::o;524:132::-;591:4;614:3;606:11;;644:4;639:3;635:14;627:22;;524:132;;;:::o;662:108::-;739:24;757:5;739:24;:::i;:::-;734:3;727:37;662:108;;:::o;776:179::-;845:10;866:46;908:3;900:6;866:46;:::i;:::-;944:4;939:3;935:14;921:28;;776:179;;;;:::o;961:113::-;1031:4;1063;1058:3;1054:14;1046:22;;961:113;;;:::o;1110:732::-;1229:3;1258:54;1306:5;1258:54;:::i;:::-;1328:86;1407:6;1402:3;1328:86;:::i;:::-;1321:93;;1438:56;1488:5;1438:56;:::i;:::-;1517:7;1548:1;1533:284;1558:6;1555:1;1552:13;1533:284;;;1634:6;1628:13;1661:63;1720:3;1705:13;1661:63;:::i;:::-;1654:70;;1747:60;1800:6;1747:60;:::i;:::-;1737:70;;1593:224;1580:1;1577;1573:9;1568:14;;1533:284;;;1537:14;1833:3;1826:10;;1234:608;;;1110:732;;;;:::o;1848:126::-;1885:7;1925:42;1918:5;1914:54;1903:65;;1848:126;;;:::o;1980:96::-;2017:7;2046:24;2064:5;2046:24;:::i;:::-;2035:35;;1980:96;;;:::o;2082:118::-;2169:24;2187:5;2169:24;:::i;:::-;2164:3;2157:37;2082:118;;:::o;2206:704::-;2433:4;2471:3;2460:9;2456:19;2448:27;;2485:71;2553:1;2542:9;2538:17;2529:6;2485:71;:::i;:::-;2566:72;2634:2;2623:9;2619:18;2610:6;2566:72;:::i;:::-;2685:9;2679:4;2675:20;2670:2;2659:9;2655:18;2648:48;2713:108;2816:4;2807:6;2713:108;:::i;:::-;2705:116;;2831:72;2899:2;2888:9;2884:18;2875:6;2831:72;:::i;:::-;2206:704;;;;;;;:::o;2916:75::-;2949:6;2982:2;2976:9;2966:19;;2916:75;:::o;2997:117::-;3106:1;3103;3096:12;3120:117;3229:1;3226;3219:12;3243:122;3316:24;3334:5;3316:24;:::i;:::-;3309:5;3306:35;3296:63;;3355:1;3352;3345:12;3296:63;3243:122;:::o;3371:139::-;3417:5;3455:6;3442:20;3433:29;;3471:33;3498:5;3471:33;:::i;:::-;3371:139;;;;:::o;3516:329::-;3575:6;3624:2;3612:9;3603:7;3599:23;3595:32;3592:119;;;3630:79;;:::i;:::-;3592:119;3750:1;3775:53;3820:7;3811:6;3800:9;3796:22;3775:53;:::i;:::-;3765:63;;3721:117;3516:329;;;;:::o;3851:222::-;3944:4;3982:2;3971:9;3967:18;3959:26;;3995:71;4063:1;4052:9;4048:17;4039:6;3995:71;:::i;:::-;3851:222;;;;:::o;4079:122::-;4152:24;4170:5;4152:24;:::i;:::-;4145:5;4142:35;4132:63;;4191:1;4188;4181:12;4132:63;4079:122;:::o;4207:139::-;4253:5;4291:6;4278:20;4269:29;;4307:33;4334:5;4307:33;:::i;:::-;4207:139;;;;:::o;4352:474::-;4420:6;4428;4477:2;4465:9;4456:7;4452:23;4448:32;4445:119;;;4483:79;;:::i;:::-;4445:119;4603:1;4628:53;4673:7;4664:6;4653:9;4649:22;4628:53;:::i;:::-;4618:63;;4574:117;4730:2;4756:53;4801:7;4792:6;4781:9;4777:22;4756:53;:::i;:::-;4746:63;;4701:118;4352:474;;;;;:::o;4832:117::-;4941:1;4938;4931:12;4955:102;4996:6;5047:2;5043:7;5038:2;5031:5;5027:14;5023:28;5013:38;;4955:102;;;:::o;5063:180::-;5111:77;5108:1;5101:88;5208:4;5205:1;5198:15;5232:4;5229:1;5222:15;5249:281;5332:27;5354:4;5332:27;:::i;:::-;5324:6;5320:40;5462:6;5450:10;5447:22;5426:18;5414:10;5411:34;5408:62;5405:88;;;5473:18;;:::i;:::-;5405:88;5513:10;5509:2;5502:22;5292:238;5249:281;;:::o;5536:129::-;5570:6;5597:20;;:::i;:::-;5587:30;;5626:33;5654:4;5646:6;5626:33;:::i;:::-;5536:129;;;:::o;5671:311::-;5748:4;5838:18;5830:6;5827:30;5824:56;;;5860:18;;:::i;:::-;5824:56;5910:4;5902:6;5898:17;5890:25;;5970:4;5964;5960:15;5952:23;;5671:311;;;:::o;5988:117::-;6097:1;6094;6087:12;6128:710;6224:5;6249:81;6265:64;6322:6;6265:64;:::i;:::-;6249:81;:::i;:::-;6240:90;;6350:5;6379:6;6372:5;6365:21;6413:4;6406:5;6402:16;6395:23;;6466:4;6458:6;6454:17;6446:6;6442:30;6495:3;6487:6;6484:15;6481:122;;;6514:79;;:::i;:::-;6481:122;6629:6;6612:220;6646:6;6641:3;6638:15;6612:220;;;6721:3;6750:37;6783:3;6771:10;6750:37;:::i;:::-;6745:3;6738:50;6817:4;6812:3;6808:14;6801:21;;6688:144;6672:4;6667:3;6663:14;6656:21;;6612:220;;;6616:21;6230:608;;6128:710;;;;;:::o;6861:370::-;6932:5;6981:3;6974:4;6966:6;6962:17;6958:27;6948:122;;6989:79;;:::i;:::-;6948:122;7106:6;7093:20;7131:94;7221:3;7213:6;7206:4;7198:6;7194:17;7131:94;:::i;:::-;7122:103;;6938:293;6861:370;;;;:::o;7237:1039::-;7364:6;7372;7380;7429:2;7417:9;7408:7;7404:23;7400:32;7397:119;;;7435:79;;:::i;:::-;7397:119;7555:1;7580:53;7625:7;7616:6;7605:9;7601:22;7580:53;:::i;:::-;7570:63;;7526:117;7710:2;7699:9;7695:18;7682:32;7741:18;7733:6;7730:30;7727:117;;;7763:79;;:::i;:::-;7727:117;7868:78;7938:7;7929:6;7918:9;7914:22;7868:78;:::i;:::-;7858:88;;7653:303;8023:2;8012:9;8008:18;7995:32;8054:18;8046:6;8043:30;8040:117;;;8076:79;;:::i;:::-;8040:117;8181:78;8251:7;8242:6;8231:9;8227:22;8181:78;:::i;:::-;8171:88;;7966:303;7237:1039;;;;;:::o;8282:684::-;8375:6;8383;8432:2;8420:9;8411:7;8407:23;8403:32;8400:119;;;8438:79;;:::i;:::-;8400:119;8558:1;8583:53;8628:7;8619:6;8608:9;8604:22;8583:53;:::i;:::-;8573:63;;8529:117;8713:2;8702:9;8698:18;8685:32;8744:18;8736:6;8733:30;8730:117;;;8766:79;;:::i;:::-;8730:117;8871:78;8941:7;8932:6;8921:9;8917:22;8871:78;:::i;:::-;8861:88;;8656:303;8282:684;;;;;:::o;8972:169::-;9056:11;9090:6;9085:3;9078:19;9130:4;9125:3;9121:14;9106:29;;8972:169;;;;:::o;9147:225::-;9287:34;9283:1;9275:6;9271:14;9264:58;9356:8;9351:2;9343:6;9339:15;9332:33;9147:225;:::o;9378:366::-;9520:3;9541:67;9605:2;9600:3;9541:67;:::i;:::-;9534:74;;9617:93;9706:3;9617:93;:::i;:::-;9735:2;9730:3;9726:12;9719:19;;9378:366;;;:::o;9750:419::-;9916:4;9954:2;9943:9;9939:18;9931:26;;10003:9;9997:4;9993:20;9989:1;9978:9;9974:17;9967:47;10031:131;10157:4;10031:131;:::i;:::-;10023:139;;9750:419;;;:::o;10175:233::-;10315:34;10311:1;10303:6;10299:14;10292:58;10384:16;10379:2;10371:6;10367:15;10360:41;10175:233;:::o;10414:366::-;10556:3;10577:67;10641:2;10636:3;10577:67;:::i;:::-;10570:74;;10653:93;10742:3;10653:93;:::i;:::-;10771:2;10766:3;10762:12;10755:19;;10414:366;;;:::o;10786:419::-;10952:4;10990:2;10979:9;10975:18;10967:26;;11039:9;11033:4;11029:20;11025:1;11014:9;11010:17;11003:47;11067:131;11193:4;11067:131;:::i;:::-;11059:139;;10786:419;;;:::o;11211:143::-;11268:5;11299:6;11293:13;11284:22;;11315:33;11342:5;11315:33;:::i;:::-;11211:143;;;;:::o;11360:351::-;11430:6;11479:2;11467:9;11458:7;11454:23;11450:32;11447:119;;;11485:79;;:::i;:::-;11447:119;11605:1;11630:64;11686:7;11677:6;11666:9;11662:22;11630:64;:::i;:::-;11620:74;;11576:128;11360:351;;;;:::o;11734:732::-;11841:5;11866:81;11882:64;11939:6;11882:64;:::i;:::-;11866:81;:::i;:::-;11857:90;;11967:5;11996:6;11989:5;11982:21;12030:4;12023:5;12019:16;12012:23;;12083:4;12075:6;12071:17;12063:6;12059:30;12112:3;12104:6;12101:15;12098:122;;;12131:79;;:::i;:::-;12098:122;12246:6;12229:231;12263:6;12258:3;12255:15;12229:231;;;12338:3;12367:48;12411:3;12399:10;12367:48;:::i;:::-;12362:3;12355:61;12445:4;12440:3;12436:14;12429:21;;12305:155;12289:4;12284:3;12280:14;12273:21;;12229:231;;;12233:21;11847:619;;11734:732;;;;;:::o;12489:385::-;12571:5;12620:3;12613:4;12605:6;12601:17;12597:27;12587:122;;12628:79;;:::i;:::-;12587:122;12738:6;12732:13;12763:105;12864:3;12856:6;12849:4;12841:6;12837:17;12763:105;:::i;:::-;12754:114;;12577:297;12489:385;;;;:::o;12880:554::-;12975:6;13024:2;13012:9;13003:7;12999:23;12995:32;12992:119;;;13030:79;;:::i;:::-;12992:119;13171:1;13160:9;13156:17;13150:24;13201:18;13193:6;13190:30;13187:117;;;13223:79;;:::i;:::-;13187:117;13328:89;13409:7;13400:6;13389:9;13385:22;13328:89;:::i;:::-;13318:99;;13121:306;12880:554;;;;:::o;13440:229::-;13580:34;13576:1;13568:6;13564:14;13557:58;13649:12;13644:2;13636:6;13632:15;13625:37;13440:229;:::o;13675:366::-;13817:3;13838:67;13902:2;13897:3;13838:67;:::i;:::-;13831:74;;13914:93;14003:3;13914:93;:::i;:::-;14032:2;14027:3;14023:12;14016:19;;13675:366;;;:::o;14047:419::-;14213:4;14251:2;14240:9;14236:18;14228:26;;14300:9;14294:4;14290:20;14286:1;14275:9;14271:17;14264:47;14328:131;14454:4;14328:131;:::i;:::-;14320:139;;14047:419;;;:::o;14472:442::-;14621:4;14659:2;14648:9;14644:18;14636:26;;14672:71;14740:1;14729:9;14725:17;14716:6;14672:71;:::i;:::-;14753:72;14821:2;14810:9;14806:18;14797:6;14753:72;:::i;:::-;14835;14903:2;14892:9;14888:18;14879:6;14835:72;:::i;:::-;14472:442;;;;;;:::o;14920:::-;15069:4;15107:2;15096:9;15092:18;15084:26;;15120:71;15188:1;15177:9;15173:17;15164:6;15120:71;:::i;:::-;15201:72;15269:2;15258:9;15254:18;15245:6;15201:72;:::i;:::-;15283;15351:2;15340:9;15336:18;15327:6;15283:72;:::i;:::-;14920:442;;;;;;:::o;15368:230::-;15508:34;15504:1;15496:6;15492:14;15485:58;15577:13;15572:2;15564:6;15560:15;15553:38;15368:230;:::o;15604:366::-;15746:3;15767:67;15831:2;15826:3;15767:67;:::i;:::-;15760:74;;15843:93;15932:3;15843:93;:::i;:::-;15961:2;15956:3;15952:12;15945:19;;15604:366;;;:::o;15976:419::-;16142:4;16180:2;16169:9;16165:18;16157:26;;16229:9;16223:4;16219:20;16215:1;16204:9;16200:17;16193:47;16257:131;16383:4;16257:131;:::i;:::-;16249:139;;15976:419;;;:::o;16401:167::-;16541:19;16537:1;16529:6;16525:14;16518:43;16401:167;:::o;16574:366::-;16716:3;16737:67;16801:2;16796:3;16737:67;:::i;:::-;16730:74;;16813:93;16902:3;16813:93;:::i;:::-;16931:2;16926:3;16922:12;16915:19;;16574:366;;;:::o;16946:419::-;17112:4;17150:2;17139:9;17135:18;17127:26;;17199:9;17193:4;17189:20;17185:1;17174:9;17170:17;17163:47;17227:131;17353:4;17227:131;:::i;:::-;17219:139;;16946:419;;;:::o;17371:143::-;17428:5;17459:6;17453:13;17444:22;;17475:33;17502:5;17475:33;:::i;:::-;17371:143;;;;:::o;17520:351::-;17590:6;17639:2;17627:9;17618:7;17614:23;17610:32;17607:119;;;17645:79;;:::i;:::-;17607:119;17765:1;17790:64;17846:7;17837:6;17826:9;17822:22;17790:64;:::i;:::-;17780:74;;17736:128;17520:351;;;;:::o;17877:246::-;18017:34;18013:1;18005:6;18001:14;17994:58;18086:29;18081:2;18073:6;18069:15;18062:54;17877:246;:::o;18129:366::-;18271:3;18292:67;18356:2;18351:3;18292:67;:::i;:::-;18285:74;;18368:93;18457:3;18368:93;:::i;:::-;18486:2;18481:3;18477:12;18470:19;;18129:366;;;:::o;18501:419::-;18667:4;18705:2;18694:9;18690:18;18682:26;;18754:9;18748:4;18744:20;18740:1;18729:9;18725:17;18718:47;18782:131;18908:4;18782:131;:::i;:::-;18774:139;;18501:419;;;:::o;18926:180::-;18974:77;18971:1;18964:88;19071:4;19068:1;19061:15;19095:4;19092:1;19085:15;19112:180;19160:77;19157:1;19150:88;19257:4;19254:1;19247:15;19281:4;19278:1;19271:15;19298:191;19338:3;19357:20;19375:1;19357:20;:::i;:::-;19352:25;;19391:20;19409:1;19391:20;:::i;:::-;19386:25;;19434:1;19431;19427:9;19420:16;;19455:3;19452:1;19449:10;19446:36;;;19462:18;;:::i;:::-;19446:36;19298:191;;;;:::o;19495:233::-;19534:3;19557:24;19575:5;19557:24;:::i;:::-;19548:33;;19603:66;19596:5;19593:77;19590:103;;19673:18;;:::i;:::-;19590:103;19720:1;19713:5;19709:13;19702:20;;19495:233;;;:::o;19734:181::-;19874:33;19870:1;19862:6;19858:14;19851:57;19734:181;:::o;19921:366::-;20063:3;20084:67;20148:2;20143:3;20084:67;:::i;:::-;20077:74;;20160:93;20249:3;20160:93;:::i;:::-;20278:2;20273:3;20269:12;20262:19;;19921:366;;;:::o;20293:419::-;20459:4;20497:2;20486:9;20482:18;20474:26;;20546:9;20540:4;20536:20;20532:1;20521:9;20517:17;20510:47;20574:131;20700:4;20574:131;:::i;:::-;20566:139;;20293:419;;;:::o;20718:332::-;20839:4;20877:2;20866:9;20862:18;20854:26;;20890:71;20958:1;20947:9;20943:17;20934:6;20890:71;:::i;:::-;20971:72;21039:2;21028:9;21024:18;21015:6;20971:72;:::i;:::-;20718:332;;;;;:::o;21056:239::-;21196:34;21192:1;21184:6;21180:14;21173:58;21265:22;21260:2;21252:6;21248:15;21241:47;21056:239;:::o;21301:366::-;21443:3;21464:67;21528:2;21523:3;21464:67;:::i;:::-;21457:74;;21540:93;21629:3;21540:93;:::i;:::-;21658:2;21653:3;21649:12;21642:19;;21301:366;;;:::o;21673:419::-;21839:4;21877:2;21866:9;21862:18;21854:26;;21926:9;21920:4;21916:20;21912:1;21901:9;21897:17;21890:47;21954:131;22080:4;21954:131;:::i;:::-;21946:139;;21673:419;;;:::o;22098:104::-;22143:7;22172:24;22190:5;22172:24;:::i;:::-;22161:35;;22098:104;;;:::o;22208:142::-;22311:32;22337:5;22311:32;:::i;:::-;22306:3;22299:45;22208:142;;:::o;22356:515::-;22543:4;22581:2;22570:9;22566:18;22558:26;;22594:87;22678:1;22667:9;22663:17;22654:6;22594:87;:::i;:::-;22728:9;22722:4;22718:20;22713:2;22702:9;22698:18;22691:48;22756:108;22859:4;22850:6;22756:108;:::i;:::-;22748:116;;22356:515;;;;;:::o;22877:222::-;22970:4;23008:2;22997:9;22993:18;22985:26;;23021:71;23089:1;23078:9;23074:17;23065:6;23021:71;:::i;:::-;22877:222;;;;:::o;23105:223::-;23245:34;23241:1;23233:6;23229:14;23222:58;23314:6;23309:2;23301:6;23297:15;23290:31;23105:223;:::o;23334:366::-;23476:3;23497:67;23561:2;23556:3;23497:67;:::i;:::-;23490:74;;23573:93;23662:3;23573:93;:::i;:::-;23691:2;23686:3;23682:12;23675:19;;23334:366;;;:::o;23706:419::-;23872:4;23910:2;23899:9;23895:18;23887:26;;23959:9;23953:4;23949:20;23945:1;23934:9;23930:17;23923:47;23987:131;24113:4;23987:131;:::i;:::-;23979:139;;23706:419;;;:::o;24131:222::-;24271:34;24267:1;24259:6;24255:14;24248:58;24340:5;24335:2;24327:6;24323:15;24316:30;24131:222;:::o;24359:366::-;24501:3;24522:67;24586:2;24581:3;24522:67;:::i;:::-;24515:74;;24598:93;24687:3;24598:93;:::i;:::-;24716:2;24711:3;24707:12;24700:19;;24359:366;;;:::o;24731:419::-;24897:4;24935:2;24924:9;24920:18;24912:26;;24984:9;24978:4;24974:20;24970:1;24959:9;24955:17;24948:47;25012:131;25138:4;25012:131;:::i;:::-;25004:139;;24731:419;;;:::o;25156:364::-;25293:4;25331:2;25320:9;25316:18;25308:26;;25344:87;25428:1;25417:9;25413:17;25404:6;25344:87;:::i;:::-;25441:72;25509:2;25498:9;25494:18;25485:6;25441:72;:::i;:::-;25156:364;;;;;:::o"
	},
	"Assembly": ".code\n  PUSH 80\t\t\tcontract Bitsurance {\\r\\n\\r\\n ...\n  PUSH 40\t\t\tcontract Bitsurance {\\r\\n\\r\\n ...\n  MSTORE \t\t\tcontract Bitsurance {\\r\\n\\r\\n ...\n  CALLVALUE \t\t\tcontract Bitsurance {\\r\\n\\r\\n ...\n  DUP1 \t\t\tcontract Bitsurance {\\r\\n\\r\\n ...\n  ISZERO \t\t\tcontract Bitsurance {\\r\\n\\r\\n ...\n  PUSH [tag] 1\t\t\tcontract Bitsurance {\\r\\n\\r\\n ...\n  JUMPI \t\t\tcontract Bitsurance {\\r\\n\\r\\n ...\n  PUSH 0\t\t\tcontract Bitsurance {\\r\\n\\r\\n ...\n  DUP1 \t\t\tcontract Bitsurance {\\r\\n\\r\\n ...\n  REVERT \t\t\tcontract Bitsurance {\\r\\n\\r\\n ...\ntag 1\t\t\tcontract Bitsurance {\\r\\n\\r\\n ...\n  JUMPDEST \t\t\tcontract Bitsurance {\\r\\n\\r\\n ...\n  POP \t\t\tcontract Bitsurance {\\r\\n\\r\\n ...\n  PUSH #[$] 0000000000000000000000000000000000000000000000000000000000000000\t\t\tcontract Bitsurance {\\r\\n\\r\\n ...\n  DUP1 \t\t\tcontract Bitsurance {\\r\\n\\r\\n ...\n  PUSH [$] 0000000000000000000000000000000000000000000000000000000000000000\t\t\tcontract Bitsurance {\\r\\n\\r\\n ...\n  PUSH 0\t\t\tcontract Bitsurance {\\r\\n\\r\\n ...\n  CODECOPY \t\t\tcontract Bitsurance {\\r\\n\\r\\n ...\n  PUSH 0\t\t\tcontract Bitsurance {\\r\\n\\r\\n ...\n  RETURN \t\t\tcontract Bitsurance {\\r\\n\\r\\n ...\n.data\n  0:\n    .code\n      PUSH 80\t\t\tcontract Bitsurance {\\r\\n\\r\\n ...\n      PUSH 40\t\t\tcontract Bitsurance {\\r\\n\\r\\n ...\n      MSTORE \t\t\tcontract Bitsurance {\\r\\n\\r\\n ...\n      PUSH 4\t\t\tcontract Bitsurance {\\r\\n\\r\\n ...\n      CALLDATASIZE \t\t\tcontract Bitsurance {\\r\\n\\r\\n ...\n      LT \t\t\tcontract Bitsurance {\\r\\n\\r\\n ...\n      PUSH [tag] 1\t\t\tcontract Bitsurance {\\r\\n\\r\\n ...\n      JUMPI \t\t\tcontract Bitsurance {\\r\\n\\r\\n ...\n      PUSH 0\t\t\tcontract Bitsurance {\\r\\n\\r\\n ...\n      CALLDATALOAD \t\t\tcontract Bitsurance {\\r\\n\\r\\n ...\n      PUSH E0\t\t\tcontract Bitsurance {\\r\\n\\r\\n ...\n      SHR \t\t\tcontract Bitsurance {\\r\\n\\r\\n ...\n      DUP1 \t\t\tcontract Bitsurance {\\r\\n\\r\\n ...\n      PUSH 622BC90E\t\t\tcontract Bitsurance {\\r\\n\\r\\n ...\n      GT \t\t\tcontract Bitsurance {\\r\\n\\r\\n ...\n      PUSH [tag] 10\t\t\tcontract Bitsurance {\\r\\n\\r\\n ...\n      JUMPI \t\t\tcontract Bitsurance {\\r\\n\\r\\n ...\n      DUP1 \t\t\tcontract Bitsurance {\\r\\n\\r\\n ...\n      PUSH 622BC90E\t\t\tcontract Bitsurance {\\r\\n\\r\\n ...\n      EQ \t\t\tcontract Bitsurance {\\r\\n\\r\\n ...\n      PUSH [tag] 6\t\t\tcontract Bitsurance {\\r\\n\\r\\n ...\n      JUMPI \t\t\tcontract Bitsurance {\\r\\n\\r\\n ...\n      DUP1 \t\t\tcontract Bitsurance {\\r\\n\\r\\n ...\n      PUSH 7F309523\t\t\tcontract Bitsurance {\\r\\n\\r\\n ...\n      EQ \t\t\tcontract Bitsurance {\\r\\n\\r\\n ...\n      PUSH [tag] 7\t\t\tcontract Bitsurance {\\r\\n\\r\\n ...\n      JUMPI \t\t\tcontract Bitsurance {\\r\\n\\r\\n ...\n      DUP1 \t\t\tcontract Bitsurance {\\r\\n\\r\\n ...\n      PUSH A3648EC0\t\t\tcontract Bitsurance {\\r\\n\\r\\n ...\n      EQ \t\t\tcontract Bitsurance {\\r\\n\\r\\n ...\n      PUSH [tag] 8\t\t\tcontract Bitsurance {\\r\\n\\r\\n ...\n      JUMPI \t\t\tcontract Bitsurance {\\r\\n\\r\\n ...\n      DUP1 \t\t\tcontract Bitsurance {\\r\\n\\r\\n ...\n      PUSH AAD3EC96\t\t\tcontract Bitsurance {\\r\\n\\r\\n ...\n      EQ \t\t\tcontract Bitsurance {\\r\\n\\r\\n ...\n      PUSH [tag] 9\t\t\tcontract Bitsurance {\\r\\n\\r\\n ...\n      JUMPI \t\t\tcontract Bitsurance {\\r\\n\\r\\n ...\n      PUSH [tag] 1\t\t\tcontract Bitsurance {\\r\\n\\r\\n ...\n      JUMP \t\t\tcontract Bitsurance {\\r\\n\\r\\n ...\n    tag 10\t\t\tcontract Bitsurance {\\r\\n\\r\\n ...\n      JUMPDEST \t\t\tcontract Bitsurance {\\r\\n\\r\\n ...\n      DUP1 \t\t\tcontract Bitsurance {\\r\\n\\r\\n ...\n      PUSH DB6F34D\t\t\tcontract Bitsurance {\\r\\n\\r\\n ...\n      EQ \t\t\tcontract Bitsurance {\\r\\n\\r\\n ...\n      PUSH [tag] 2\t\t\tcontract Bitsurance {\\r\\n\\r\\n ...\n      JUMPI \t\t\tcontract Bitsurance {\\r\\n\\r\\n ...\n      DUP1 \t\t\tcontract Bitsurance {\\r\\n\\r\\n ...\n      PUSH 1CB3D314\t\t\tcontract Bitsurance {\\r\\n\\r\\n ...\n      EQ \t\t\tcontract Bitsurance {\\r\\n\\r\\n ...\n      PUSH [tag] 3\t\t\tcontract Bitsurance {\\r\\n\\r\\n ...\n      JUMPI \t\t\tcontract Bitsurance {\\r\\n\\r\\n ...\n      DUP1 \t\t\tcontract Bitsurance {\\r\\n\\r\\n ...\n      PUSH 429B62E5\t\t\tcontract Bitsurance {\\r\\n\\r\\n ...\n      EQ \t\t\tcontract Bitsurance {\\r\\n\\r\\n ...\n      PUSH [tag] 4\t\t\tcontract Bitsurance {\\r\\n\\r\\n ...\n      JUMPI \t\t\tcontract Bitsurance {\\r\\n\\r\\n ...\n      DUP1 \t\t\tcontract Bitsurance {\\r\\n\\r\\n ...\n      PUSH 5F76DFC0\t\t\tcontract Bitsurance {\\r\\n\\r\\n ...\n      EQ \t\t\tcontract Bitsurance {\\r\\n\\r\\n ...\n      PUSH [tag] 5\t\t\tcontract Bitsurance {\\r\\n\\r\\n ...\n      JUMPI \t\t\tcontract Bitsurance {\\r\\n\\r\\n ...\n    tag 1\t\t\tcontract Bitsurance {\\r\\n\\r\\n ...\n      JUMPDEST \t\t\tcontract Bitsurance {\\r\\n\\r\\n ...\n      PUSH 0\t\t\tcontract Bitsurance {\\r\\n\\r\\n ...\n      DUP1 \t\t\tcontract Bitsurance {\\r\\n\\r\\n ...\n      REVERT \t\t\tcontract Bitsurance {\\r\\n\\r\\n ...\n    tag 2\t\t\tfunction getMyVaultDetails() p...\n      JUMPDEST \t\t\tfunction getMyVaultDetails() p...\n      CALLVALUE \t\t\tfunction getMyVaultDetails() p...\n      DUP1 \t\t\tfunction getMyVaultDetails() p...\n      ISZERO \t\t\tfunction getMyVaultDetails() p...\n      PUSH [tag] 11\t\t\tfunction getMyVaultDetails() p...\n      JUMPI \t\t\tfunction getMyVaultDetails() p...\n      PUSH 0\t\t\tfunction getMyVaultDetails() p...\n      DUP1 \t\t\tfunction getMyVaultDetails() p...\n      REVERT \t\t\tfunction getMyVaultDetails() p...\n    tag 11\t\t\tfunction getMyVaultDetails() p...\n      JUMPDEST \t\t\tfunction getMyVaultDetails() p...\n      POP \t\t\tfunction getMyVaultDetails() p...\n      PUSH [tag] 12\t\t\tfunction getMyVaultDetails() p...\n      PUSH [tag] 13\t\t\tfunction getMyVaultDetails() p...\n      JUMP \t\t\tfunction getMyVaultDetails() p...\n    tag 12\t\t\tfunction getMyVaultDetails() p...\n      JUMPDEST \t\t\tfunction getMyVaultDetails() p...\n      PUSH 40\t\t\tfunction getMyVaultDetails() p...\n      MLOAD \t\t\tfunction getMyVaultDetails() p...\n      PUSH [tag] 14\t\t\tfunction getMyVaultDetails() p...\n      SWAP5 \t\t\tfunction getMyVaultDetails() p...\n      SWAP4 \t\t\tfunction getMyVaultDetails() p...\n      SWAP3 \t\t\tfunction getMyVaultDetails() p...\n      SWAP2 \t\t\tfunction getMyVaultDetails() p...\n      SWAP1 \t\t\tfunction getMyVaultDetails() p...\n      PUSH [tag] 15\t\t\tfunction getMyVaultDetails() p...\n      JUMP \t\t\tfunction getMyVaultDetails() p...\n    tag 14\t\t\tfunction getMyVaultDetails() p...\n      JUMPDEST \t\t\tfunction getMyVaultDetails() p...\n      PUSH 40\t\t\tfunction getMyVaultDetails() p...\n      MLOAD \t\t\tfunction getMyVaultDetails() p...\n      DUP1 \t\t\tfunction getMyVaultDetails() p...\n      SWAP2 \t\t\tfunction getMyVaultDetails() p...\n      SUB \t\t\tfunction getMyVaultDetails() p...\n      SWAP1 \t\t\tfunction getMyVaultDetails() p...\n      RETURN \t\t\tfunction getMyVaultDetails() p...\n    tag 3\t\t\tmapping(address => address) pu...\n      JUMPDEST \t\t\tmapping(address => address) pu...\n      CALLVALUE \t\t\tmapping(address => address) pu...\n      DUP1 \t\t\tmapping(address => address) pu...\n      ISZERO \t\t\tmapping(address => address) pu...\n      PUSH [tag] 16\t\t\tmapping(address => address) pu...\n      JUMPI \t\t\tmapping(address => address) pu...\n      PUSH 0\t\t\tmapping(address => address) pu...\n      DUP1 \t\t\tmapping(address => address) pu...\n      REVERT \t\t\tmapping(address => address) pu...\n    tag 16\t\t\tmapping(address => address) pu...\n      JUMPDEST \t\t\tmapping(address => address) pu...\n      POP \t\t\tmapping(address => address) pu...\n      PUSH [tag] 17\t\t\tmapping(address => address) pu...\n      PUSH 4\t\t\tmapping(address => address) pu...\n      DUP1 \t\t\tmapping(address => address) pu...\n      CALLDATASIZE \t\t\tmapping(address => address) pu...\n      SUB \t\t\tmapping(address => address) pu...\n      DUP2 \t\t\tmapping(address => address) pu...\n      ADD \t\t\tmapping(address => address) pu...\n      SWAP1 \t\t\tmapping(address => address) pu...\n      PUSH [tag] 18\t\t\tmapping(address => address) pu...\n      SWAP2 \t\t\tmapping(address => address) pu...\n      SWAP1 \t\t\tmapping(address => address) pu...\n      PUSH [tag] 19\t\t\tmapping(address => address) pu...\n      JUMP \t\t\tmapping(address => address) pu...\n    tag 18\t\t\tmapping(address => address) pu...\n      JUMPDEST \t\t\tmapping(address => address) pu...\n      PUSH [tag] 20\t\t\tmapping(address => address) pu...\n      JUMP \t\t\tmapping(address => address) pu...\n    tag 17\t\t\tmapping(address => address) pu...\n      JUMPDEST \t\t\tmapping(address => address) pu...\n      PUSH 40\t\t\tmapping(address => address) pu...\n      MLOAD \t\t\tmapping(address => address) pu...\n      PUSH [tag] 21\t\t\tmapping(address => address) pu...\n      SWAP2 \t\t\tmapping(address => address) pu...\n      SWAP1 \t\t\tmapping(address => address) pu...\n      PUSH [tag] 22\t\t\tmapping(address => address) pu...\n      JUMP \t\t\tmapping(address => address) pu...\n    tag 21\t\t\tmapping(address => address) pu...\n      JUMPDEST \t\t\tmapping(address => address) pu...\n      PUSH 40\t\t\tmapping(address => address) pu...\n      MLOAD \t\t\tmapping(address => address) pu...\n      DUP1 \t\t\tmapping(address => address) pu...\n      SWAP2 \t\t\tmapping(address => address) pu...\n      SUB \t\t\tmapping(address => address) pu...\n      SWAP1 \t\t\tmapping(address => address) pu...\n      RETURN \t\t\tmapping(address => address) pu...\n    tag 4\t\t\tmapping(address => address) pu...\n      JUMPDEST \t\t\tmapping(address => address) pu...\n      CALLVALUE \t\t\tmapping(address => address) pu...\n      DUP1 \t\t\tmapping(address => address) pu...\n      ISZERO \t\t\tmapping(address => address) pu...\n      PUSH [tag] 23\t\t\tmapping(address => address) pu...\n      JUMPI \t\t\tmapping(address => address) pu...\n      PUSH 0\t\t\tmapping(address => address) pu...\n      DUP1 \t\t\tmapping(address => address) pu...\n      REVERT \t\t\tmapping(address => address) pu...\n    tag 23\t\t\tmapping(address => address) pu...\n      JUMPDEST \t\t\tmapping(address => address) pu...\n      POP \t\t\tmapping(address => address) pu...\n      PUSH [tag] 24\t\t\tmapping(address => address) pu...\n      PUSH 4\t\t\tmapping(address => address) pu...\n      DUP1 \t\t\tmapping(address => address) pu...\n      CALLDATASIZE \t\t\tmapping(address => address) pu...\n      SUB \t\t\tmapping(address => address) pu...\n      DUP2 \t\t\tmapping(address => address) pu...\n      ADD \t\t\tmapping(address => address) pu...\n      SWAP1 \t\t\tmapping(address => address) pu...\n      PUSH [tag] 25\t\t\tmapping(address => address) pu...\n      SWAP2 \t\t\tmapping(address => address) pu...\n      SWAP1 \t\t\tmapping(address => address) pu...\n      PUSH [tag] 19\t\t\tmapping(address => address) pu...\n      JUMP \t\t\tmapping(address => address) pu...\n    tag 25\t\t\tmapping(address => address) pu...\n      JUMPDEST \t\t\tmapping(address => address) pu...\n      PUSH [tag] 26\t\t\tmapping(address => address) pu...\n      JUMP \t\t\tmapping(address => address) pu...\n    tag 24\t\t\tmapping(address => address) pu...\n      JUMPDEST \t\t\tmapping(address => address) pu...\n      PUSH 40\t\t\tmapping(address => address) pu...\n      MLOAD \t\t\tmapping(address => address) pu...\n      PUSH [tag] 27\t\t\tmapping(address => address) pu...\n      SWAP2 \t\t\tmapping(address => address) pu...\n      SWAP1 \t\t\tmapping(address => address) pu...\n      PUSH [tag] 22\t\t\tmapping(address => address) pu...\n      JUMP \t\t\tmapping(address => address) pu...\n    tag 27\t\t\tmapping(address => address) pu...\n      JUMPDEST \t\t\tmapping(address => address) pu...\n      PUSH 40\t\t\tmapping(address => address) pu...\n      MLOAD \t\t\tmapping(address => address) pu...\n      DUP1 \t\t\tmapping(address => address) pu...\n      SWAP2 \t\t\tmapping(address => address) pu...\n      SUB \t\t\tmapping(address => address) pu...\n      SWAP1 \t\t\tmapping(address => address) pu...\n      RETURN \t\t\tmapping(address => address) pu...\n    tag 5\t\t\tfunction createVault(address _...\n      JUMPDEST \t\t\tfunction createVault(address _...\n      CALLVALUE \t\t\tfunction createVault(address _...\n      DUP1 \t\t\tfunction createVault(address _...\n      ISZERO \t\t\tfunction createVault(address _...\n      PUSH [tag] 28\t\t\tfunction createVault(address _...\n      JUMPI \t\t\tfunction createVault(address _...\n      PUSH 0\t\t\tfunction createVault(address _...\n      DUP1 \t\t\tfunction createVault(address _...\n      REVERT \t\t\tfunction createVault(address _...\n    tag 28\t\t\tfunction createVault(address _...\n      JUMPDEST \t\t\tfunction createVault(address _...\n      POP \t\t\tfunction createVault(address _...\n      PUSH [tag] 29\t\t\tfunction createVault(address _...\n      PUSH 4\t\t\tfunction createVault(address _...\n      DUP1 \t\t\tfunction createVault(address _...\n      CALLDATASIZE \t\t\tfunction createVault(address _...\n      SUB \t\t\tfunction createVault(address _...\n      DUP2 \t\t\tfunction createVault(address _...\n      ADD \t\t\tfunction createVault(address _...\n      SWAP1 \t\t\tfunction createVault(address _...\n      PUSH [tag] 30\t\t\tfunction createVault(address _...\n      SWAP2 \t\t\tfunction createVault(address _...\n      SWAP1 \t\t\tfunction createVault(address _...\n      PUSH [tag] 31\t\t\tfunction createVault(address _...\n      JUMP \t\t\tfunction createVault(address _...\n    tag 30\t\t\tfunction createVault(address _...\n      JUMPDEST \t\t\tfunction createVault(address _...\n      PUSH [tag] 32\t\t\tfunction createVault(address _...\n      JUMP \t\t\tfunction createVault(address _...\n    tag 29\t\t\tfunction createVault(address _...\n      JUMPDEST \t\t\tfunction createVault(address _...\n      STOP \t\t\tfunction createVault(address _...\n    tag 6\t\t\tfunction getContractAddress(ad...\n      JUMPDEST \t\t\tfunction getContractAddress(ad...\n      CALLVALUE \t\t\tfunction getContractAddress(ad...\n      DUP1 \t\t\tfunction getContractAddress(ad...\n      ISZERO \t\t\tfunction getContractAddress(ad...\n      PUSH [tag] 33\t\t\tfunction getContractAddress(ad...\n      JUMPI \t\t\tfunction getContractAddress(ad...\n      PUSH 0\t\t\tfunction getContractAddress(ad...\n      DUP1 \t\t\tfunction getContractAddress(ad...\n      REVERT \t\t\tfunction getContractAddress(ad...\n    tag 33\t\t\tfunction getContractAddress(ad...\n      JUMPDEST \t\t\tfunction getContractAddress(ad...\n      POP \t\t\tfunction getContractAddress(ad...\n      PUSH [tag] 34\t\t\tfunction getContractAddress(ad...\n      PUSH 4\t\t\tfunction getContractAddress(ad...\n      DUP1 \t\t\tfunction getContractAddress(ad...\n      CALLDATASIZE \t\t\tfunction getContractAddress(ad...\n      SUB \t\t\tfunction getContractAddress(ad...\n      DUP2 \t\t\tfunction getContractAddress(ad...\n      ADD \t\t\tfunction getContractAddress(ad...\n      SWAP1 \t\t\tfunction getContractAddress(ad...\n      PUSH [tag] 35\t\t\tfunction getContractAddress(ad...\n      SWAP2 \t\t\tfunction getContractAddress(ad...\n      SWAP1 \t\t\tfunction getContractAddress(ad...\n      PUSH [tag] 19\t\t\tfunction getContractAddress(ad...\n      JUMP \t\t\tfunction getContractAddress(ad...\n    tag 35\t\t\tfunction getContractAddress(ad...\n      JUMPDEST \t\t\tfunction getContractAddress(ad...\n      PUSH [tag] 36\t\t\tfunction getContractAddress(ad...\n      JUMP \t\t\tfunction getContractAddress(ad...\n    tag 34\t\t\tfunction getContractAddress(ad...\n      JUMPDEST \t\t\tfunction getContractAddress(ad...\n      PUSH 40\t\t\tfunction getContractAddress(ad...\n      MLOAD \t\t\tfunction getContractAddress(ad...\n      PUSH [tag] 37\t\t\tfunction getContractAddress(ad...\n      SWAP2 \t\t\tfunction getContractAddress(ad...\n      SWAP1 \t\t\tfunction getContractAddress(ad...\n      PUSH [tag] 22\t\t\tfunction getContractAddress(ad...\n      JUMP \t\t\tfunction getContractAddress(ad...\n    tag 37\t\t\tfunction getContractAddress(ad...\n      JUMPDEST \t\t\tfunction getContractAddress(ad...\n      PUSH 40\t\t\tfunction getContractAddress(ad...\n      MLOAD \t\t\tfunction getContractAddress(ad...\n      DUP1 \t\t\tfunction getContractAddress(ad...\n      SWAP2 \t\t\tfunction getContractAddress(ad...\n      SUB \t\t\tfunction getContractAddress(ad...\n      SWAP1 \t\t\tfunction getContractAddress(ad...\n      RETURN \t\t\tfunction getContractAddress(ad...\n    tag 7\t\t\tfunction depositFunds(address ...\n      JUMPDEST \t\t\tfunction depositFunds(address ...\n      PUSH [tag] 38\t\t\tfunction depositFunds(address ...\n      PUSH 4\t\t\tfunction depositFunds(address ...\n      DUP1 \t\t\tfunction depositFunds(address ...\n      CALLDATASIZE \t\t\tfunction depositFunds(address ...\n      SUB \t\t\tfunction depositFunds(address ...\n      DUP2 \t\t\tfunction depositFunds(address ...\n      ADD \t\t\tfunction depositFunds(address ...\n      SWAP1 \t\t\tfunction depositFunds(address ...\n      PUSH [tag] 39\t\t\tfunction depositFunds(address ...\n      SWAP2 \t\t\tfunction depositFunds(address ...\n      SWAP1 \t\t\tfunction depositFunds(address ...\n      PUSH [tag] 40\t\t\tfunction depositFunds(address ...\n      JUMP \t\t\tfunction depositFunds(address ...\n    tag 39\t\t\tfunction depositFunds(address ...\n      JUMPDEST \t\t\tfunction depositFunds(address ...\n      PUSH [tag] 41\t\t\tfunction depositFunds(address ...\n      JUMP \t\t\tfunction depositFunds(address ...\n    tag 38\t\t\tfunction depositFunds(address ...\n      JUMPDEST \t\t\tfunction depositFunds(address ...\n      STOP \t\t\tfunction depositFunds(address ...\n    tag 8\t\t\tfunction withdrawFunds(address...\n      JUMPDEST \t\t\tfunction withdrawFunds(address...\n      PUSH [tag] 42\t\t\tfunction withdrawFunds(address...\n      PUSH 4\t\t\tfunction withdrawFunds(address...\n      DUP1 \t\t\tfunction withdrawFunds(address...\n      CALLDATASIZE \t\t\tfunction withdrawFunds(address...\n      SUB \t\t\tfunction withdrawFunds(address...\n      DUP2 \t\t\tfunction withdrawFunds(address...\n      ADD \t\t\tfunction withdrawFunds(address...\n      SWAP1 \t\t\tfunction withdrawFunds(address...\n      PUSH [tag] 43\t\t\tfunction withdrawFunds(address...\n      SWAP2 \t\t\tfunction withdrawFunds(address...\n      SWAP1 \t\t\tfunction withdrawFunds(address...\n      PUSH [tag] 44\t\t\tfunction withdrawFunds(address...\n      JUMP \t\t\tfunction withdrawFunds(address...\n    tag 43\t\t\tfunction withdrawFunds(address...\n      JUMPDEST \t\t\tfunction withdrawFunds(address...\n      PUSH [tag] 45\t\t\tfunction withdrawFunds(address...\n      JUMP \t\t\tfunction withdrawFunds(address...\n    tag 42\t\t\tfunction withdrawFunds(address...\n      JUMPDEST \t\t\tfunction withdrawFunds(address...\n      STOP \t\t\tfunction withdrawFunds(address...\n    tag 9\t\t\tfunction claim(address NFTCont...\n      JUMPDEST \t\t\tfunction claim(address NFTCont...\n      PUSH [tag] 46\t\t\tfunction claim(address NFTCont...\n      PUSH 4\t\t\tfunction claim(address NFTCont...\n      DUP1 \t\t\tfunction claim(address NFTCont...\n      CALLDATASIZE \t\t\tfunction claim(address NFTCont...\n      SUB \t\t\tfunction claim(address NFTCont...\n      DUP2 \t\t\tfunction claim(address NFTCont...\n      ADD \t\t\tfunction claim(address NFTCont...\n      SWAP1 \t\t\tfunction claim(address NFTCont...\n      PUSH [tag] 47\t\t\tfunction claim(address NFTCont...\n      SWAP2 \t\t\tfunction claim(address NFTCont...\n      SWAP1 \t\t\tfunction claim(address NFTCont...\n      PUSH [tag] 31\t\t\tfunction claim(address NFTCont...\n      JUMP \t\t\tfunction claim(address NFTCont...\n    tag 47\t\t\tfunction claim(address NFTCont...\n      JUMPDEST \t\t\tfunction claim(address NFTCont...\n      PUSH [tag] 48\t\t\tfunction claim(address NFTCont...\n      JUMP \t\t\tfunction claim(address NFTCont...\n    tag 46\t\t\tfunction claim(address NFTCont...\n      JUMPDEST \t\t\tfunction claim(address NFTCont...\n      STOP \t\t\tfunction claim(address NFTCont...\n    tag 13\t\t\tfunction getMyVaultDetails() p...\n      JUMPDEST \t\t\tfunction getMyVaultDetails() p...\n      PUSH 0\t\t\tuint256\n      DUP1 \t\t\tuint256\n      PUSH 60\t\t\tuint256[] memory\n      PUSH 0\t\t\taddress\n      DUP1 \t\t\taddress nftContractAddress\n      PUSH 2\t\t\tadmins\n      PUSH 0\t\t\tadmins[msg.sender]\n      CALLER \t\t\tmsg.sender\n      PUSH FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF\t\t\tadmins[msg.sender]\n      AND \t\t\tadmins[msg.sender]\n      PUSH FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF\t\t\tadmins[msg.sender]\n      AND \t\t\tadmins[msg.sender]\n      DUP2 \t\t\tadmins[msg.sender]\n      MSTORE \t\t\tadmins[msg.sender]\n      PUSH 20\t\t\tadmins[msg.sender]\n      ADD \t\t\tadmins[msg.sender]\n      SWAP1 \t\t\tadmins[msg.sender]\n      DUP2 \t\t\tadmins[msg.sender]\n      MSTORE \t\t\tadmins[msg.sender]\n      PUSH 20\t\t\tadmins[msg.sender]\n      ADD \t\t\tadmins[msg.sender]\n      PUSH 0\t\t\tadmins[msg.sender]\n      KECCAK256 \t\t\tadmins[msg.sender]\n      PUSH 0\t\t\tadmins[msg.sender]\n      SWAP1 \t\t\tadmins[msg.sender]\n      SLOAD \t\t\tadmins[msg.sender]\n      SWAP1 \t\t\tadmins[msg.sender]\n      PUSH 100\t\t\tadmins[msg.sender]\n      EXP \t\t\tadmins[msg.sender]\n      SWAP1 \t\t\tadmins[msg.sender]\n      DIV \t\t\tadmins[msg.sender]\n      PUSH FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF\t\t\tadmins[msg.sender]\n      AND \t\t\tadmins[msg.sender]\n      SWAP1 \t\t\taddress nftContractAddress = a...\n      POP \t\t\taddress nftContractAddress = a...\n      PUSH 0\t\t\t0\n      PUSH FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF\t\t\tnftContractAddress != address(...\n      AND \t\t\tnftContractAddress != address(...\n      DUP2 \t\t\tnftContractAddress\n      PUSH FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF\t\t\tnftContractAddress != address(...\n      AND \t\t\tnftContractAddress != address(...\n      SUB \t\t\tnftContractAddress != address(...\n      PUSH [tag] 50\t\t\trequire(nftContractAddress != ...\n      JUMPI \t\t\trequire(nftContractAddress != ...\n      PUSH 40\t\t\trequire(nftContractAddress != ...\n      MLOAD \t\t\trequire(nftContractAddress != ...\n      PUSH 8C379A000000000000000000000000000000000000000000000000000000000\t\t\trequire(nftContractAddress != ...\n      DUP2 \t\t\trequire(nftContractAddress != ...\n      MSTORE \t\t\trequire(nftContractAddress != ...\n      PUSH 4\t\t\trequire(nftContractAddress != ...\n      ADD \t\t\trequire(nftContractAddress != ...\n      PUSH [tag] 51\t\t\trequire(nftContractAddress != ...\n      SWAP1 \t\t\trequire(nftContractAddress != ...\n      PUSH [tag] 52\t\t\trequire(nftContractAddress != ...\n      JUMP \t\t\trequire(nftContractAddress != ...\n    tag 51\t\t\trequire(nftContractAddress != ...\n      JUMPDEST \t\t\trequire(nftContractAddress != ...\n      PUSH 40\t\t\trequire(nftContractAddress != ...\n      MLOAD \t\t\trequire(nftContractAddress != ...\n      DUP1 \t\t\trequire(nftContractAddress != ...\n      SWAP2 \t\t\trequire(nftContractAddress != ...\n      SUB \t\t\trequire(nftContractAddress != ...\n      SWAP1 \t\t\trequire(nftContractAddress != ...\n      REVERT \t\t\trequire(nftContractAddress != ...\n    tag 50\t\t\trequire(nftContractAddress != ...\n      JUMPDEST \t\t\trequire(nftContractAddress != ...\n      PUSH 0\t\t\taddress vaultContractAddress\n      PUSH 1\t\t\tvaultAddress\n      PUSH 0\t\t\tvaultAddress[nftContractAddres...\n      DUP4 \t\t\tnftContractAddress\n      PUSH FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF\t\t\tvaultAddress[nftContractAddres...\n      AND \t\t\tvaultAddress[nftContractAddres...\n      PUSH FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF\t\t\tvaultAddress[nftContractAddres...\n      AND \t\t\tvaultAddress[nftContractAddres...\n      DUP2 \t\t\tvaultAddress[nftContractAddres...\n      MSTORE \t\t\tvaultAddress[nftContractAddres...\n      PUSH 20\t\t\tvaultAddress[nftContractAddres...\n      ADD \t\t\tvaultAddress[nftContractAddres...\n      SWAP1 \t\t\tvaultAddress[nftContractAddres...\n      DUP2 \t\t\tvaultAddress[nftContractAddres...\n      MSTORE \t\t\tvaultAddress[nftContractAddres...\n      PUSH 20\t\t\tvaultAddress[nftContractAddres...\n      ADD \t\t\tvaultAddress[nftContractAddres...\n      PUSH 0\t\t\tvaultAddress[nftContractAddres...\n      KECCAK256 \t\t\tvaultAddress[nftContractAddres...\n      PUSH 0\t\t\tvaultAddress[nftContractAddres...\n      SWAP1 \t\t\tvaultAddress[nftContractAddres...\n      SLOAD \t\t\tvaultAddress[nftContractAddres...\n      SWAP1 \t\t\tvaultAddress[nftContractAddres...\n      PUSH 100\t\t\tvaultAddress[nftContractAddres...\n      EXP \t\t\tvaultAddress[nftContractAddres...\n      SWAP1 \t\t\tvaultAddress[nftContractAddres...\n      DIV \t\t\tvaultAddress[nftContractAddres...\n      PUSH FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF\t\t\tvaultAddress[nftContractAddres...\n      AND \t\t\tvaultAddress[nftContractAddres...\n      SWAP1 \t\t\taddress vaultContractAddress =...\n      POP \t\t\taddress vaultContractAddress =...\n      PUSH 0\t\t\t0\n      PUSH FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF\t\t\tvaultContractAddress != addres...\n      AND \t\t\tvaultContractAddress != addres...\n      DUP2 \t\t\tvaultContractAddress\n      PUSH FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF\t\t\tvaultContractAddress != addres...\n      AND \t\t\tvaultContractAddress != addres...\n      SUB \t\t\tvaultContractAddress != addres...\n      PUSH [tag] 53\t\t\trequire(vaultContractAddress !...\n      JUMPI \t\t\trequire(vaultContractAddress !...\n      PUSH 40\t\t\trequire(vaultContractAddress !...\n      MLOAD \t\t\trequire(vaultContractAddress !...\n      PUSH 8C379A000000000000000000000000000000000000000000000000000000000\t\t\trequire(vaultContractAddress !...\n      DUP2 \t\t\trequire(vaultContractAddress !...\n      MSTORE \t\t\trequire(vaultContractAddress !...\n      PUSH 4\t\t\trequire(vaultContractAddress !...\n      ADD \t\t\trequire(vaultContractAddress !...\n      PUSH [tag] 54\t\t\trequire(vaultContractAddress !...\n      SWAP1 \t\t\trequire(vaultContractAddress !...\n      PUSH [tag] 55\t\t\trequire(vaultContractAddress !...\n      JUMP \t\t\trequire(vaultContractAddress !...\n    tag 54\t\t\trequire(vaultContractAddress !...\n      JUMPDEST \t\t\trequire(vaultContractAddress !...\n      PUSH 40\t\t\trequire(vaultContractAddress !...\n      MLOAD \t\t\trequire(vaultContractAddress !...\n      DUP1 \t\t\trequire(vaultContractAddress !...\n      SWAP2 \t\t\trequire(vaultContractAddress !...\n      SUB \t\t\trequire(vaultContractAddress !...\n      SWAP1 \t\t\trequire(vaultContractAddress !...\n      REVERT \t\t\trequire(vaultContractAddress !...\n    tag 53\t\t\trequire(vaultContractAddress !...\n      JUMPDEST \t\t\trequire(vaultContractAddress !...\n      PUSH 0\t\t\tVault vault\n      DUP2 \t\t\tvaultContractAddress\n      SWAP1 \t\t\tVault vault = Vault(payable(va...\n      POP \t\t\tVault vault = Vault(payable(va...\n      PUSH 0\t\t\tuint256 totalBalance\n      DUP2 \t\t\tvault\n      PUSH FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF\t\t\taddress(vault).balance\n      AND \t\t\taddress(vault).balance\n      BALANCE \t\t\taddress(vault).balance\n      SWAP1 \t\t\tuint256 totalBalance = address...\n      POP \t\t\tuint256 totalBalance = address...\n      PUSH 0\t\t\tuint256 minimumWithdrawTime\n      DUP3 \t\t\tvault\n      PUSH FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF\t\t\tvault.minimumWithdrawTime\n      AND \t\t\tvault.minimumWithdrawTime\n      PUSH 8FD25165\t\t\tvault.minimumWithdrawTime\n      PUSH 40\t\t\tvault.minimumWithdrawTime()\n      MLOAD \t\t\tvault.minimumWithdrawTime()\n      DUP2 \t\t\tvault.minimumWithdrawTime()\n      PUSH FFFFFFFF\t\t\tvault.minimumWithdrawTime()\n      AND \t\t\tvault.minimumWithdrawTime()\n      PUSH E0\t\t\tvault.minimumWithdrawTime()\n      SHL \t\t\tvault.minimumWithdrawTime()\n      DUP2 \t\t\tvault.minimumWithdrawTime()\n      MSTORE \t\t\tvault.minimumWithdrawTime()\n      PUSH 4\t\t\tvault.minimumWithdrawTime()\n      ADD \t\t\tvault.minimumWithdrawTime()\n      PUSH 20\t\t\tvault.minimumWithdrawTime()\n      PUSH 40\t\t\tvault.minimumWithdrawTime()\n      MLOAD \t\t\tvault.minimumWithdrawTime()\n      DUP1 \t\t\tvault.minimumWithdrawTime()\n      DUP4 \t\t\tvault.minimumWithdrawTime()\n      SUB \t\t\tvault.minimumWithdrawTime()\n      DUP2 \t\t\tvault.minimumWithdrawTime()\n      DUP7 \t\t\tvault.minimumWithdrawTime()\n      GAS \t\t\tvault.minimumWithdrawTime()\n      STATICCALL \t\t\tvault.minimumWithdrawTime()\n      ISZERO \t\t\tvault.minimumWithdrawTime()\n      DUP1 \t\t\tvault.minimumWithdrawTime()\n      ISZERO \t\t\tvault.minimumWithdrawTime()\n      PUSH [tag] 57\t\t\tvault.minimumWithdrawTime()\n      JUMPI \t\t\tvault.minimumWithdrawTime()\n      RETURNDATASIZE \t\t\tvault.minimumWithdrawTime()\n      PUSH 0\t\t\tvault.minimumWithdrawTime()\n      DUP1 \t\t\tvault.minimumWithdrawTime()\n      RETURNDATACOPY \t\t\tvault.minimumWithdrawTime()\n      RETURNDATASIZE \t\t\tvault.minimumWithdrawTime()\n      PUSH 0\t\t\tvault.minimumWithdrawTime()\n      REVERT \t\t\tvault.minimumWithdrawTime()\n    tag 57\t\t\tvault.minimumWithdrawTime()\n      JUMPDEST \t\t\tvault.minimumWithdrawTime()\n      POP \t\t\tvault.minimumWithdrawTime()\n      POP \t\t\tvault.minimumWithdrawTime()\n      POP \t\t\tvault.minimumWithdrawTime()\n      POP \t\t\tvault.minimumWithdrawTime()\n      PUSH 40\t\t\tvault.minimumWithdrawTime()\n      MLOAD \t\t\tvault.minimumWithdrawTime()\n      RETURNDATASIZE \t\t\tvault.minimumWithdrawTime()\n      PUSH 1F\t\t\tvault.minimumWithdrawTime()\n      NOT \t\t\tvault.minimumWithdrawTime()\n      PUSH 1F\t\t\tvault.minimumWithdrawTime()\n      DUP3 \t\t\tvault.minimumWithdrawTime()\n      ADD \t\t\tvault.minimumWithdrawTime()\n      AND \t\t\tvault.minimumWithdrawTime()\n      DUP3 \t\t\tvault.minimumWithdrawTime()\n      ADD \t\t\tvault.minimumWithdrawTime()\n      DUP1 \t\t\tvault.minimumWithdrawTime()\n      PUSH 40\t\t\tvault.minimumWithdrawTime()\n      MSTORE \t\t\tvault.minimumWithdrawTime()\n      POP \t\t\tvault.minimumWithdrawTime()\n      DUP2 \t\t\tvault.minimumWithdrawTime()\n      ADD \t\t\tvault.minimumWithdrawTime()\n      SWAP1 \t\t\tvault.minimumWithdrawTime()\n      PUSH [tag] 58\t\t\tvault.minimumWithdrawTime()\n      SWAP2 \t\t\tvault.minimumWithdrawTime()\n      SWAP1 \t\t\tvault.minimumWithdrawTime()\n      PUSH [tag] 59\t\t\tvault.minimumWithdrawTime()\n      JUMP \t\t\tvault.minimumWithdrawTime()\n    tag 58\t\t\tvault.minimumWithdrawTime()\n      JUMPDEST \t\t\tvault.minimumWithdrawTime()\n      SWAP1 \t\t\tuint256 minimumWithdrawTime = ...\n      POP \t\t\tuint256 minimumWithdrawTime = ...\n      PUSH 0\t\t\tuint256[] memory insuredTokenI...\n      DUP4 \t\t\tvault\n      PUSH FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF\t\t\tvault.getTokenIds\n      AND \t\t\tvault.getTokenIds\n      PUSH 67F718A9\t\t\tvault.getTokenIds\n      PUSH 40\t\t\tvault.getTokenIds()\n      MLOAD \t\t\tvault.getTokenIds()\n      DUP2 \t\t\tvault.getTokenIds()\n      PUSH FFFFFFFF\t\t\tvault.getTokenIds()\n      AND \t\t\tvault.getTokenIds()\n      PUSH E0\t\t\tvault.getTokenIds()\n      SHL \t\t\tvault.getTokenIds()\n      DUP2 \t\t\tvault.getTokenIds()\n      MSTORE \t\t\tvault.getTokenIds()\n      PUSH 4\t\t\tvault.getTokenIds()\n      ADD \t\t\tvault.getTokenIds()\n      PUSH 0\t\t\tvault.getTokenIds()\n      PUSH 40\t\t\tvault.getTokenIds()\n      MLOAD \t\t\tvault.getTokenIds()\n      DUP1 \t\t\tvault.getTokenIds()\n      DUP4 \t\t\tvault.getTokenIds()\n      SUB \t\t\tvault.getTokenIds()\n      DUP2 \t\t\tvault.getTokenIds()\n      DUP7 \t\t\tvault.getTokenIds()\n      GAS \t\t\tvault.getTokenIds()\n      STATICCALL \t\t\tvault.getTokenIds()\n      ISZERO \t\t\tvault.getTokenIds()\n      DUP1 \t\t\tvault.getTokenIds()\n      ISZERO \t\t\tvault.getTokenIds()\n      PUSH [tag] 61\t\t\tvault.getTokenIds()\n      JUMPI \t\t\tvault.getTokenIds()\n      RETURNDATASIZE \t\t\tvault.getTokenIds()\n      PUSH 0\t\t\tvault.getTokenIds()\n      DUP1 \t\t\tvault.getTokenIds()\n      RETURNDATACOPY \t\t\tvault.getTokenIds()\n      RETURNDATASIZE \t\t\tvault.getTokenIds()\n      PUSH 0\t\t\tvault.getTokenIds()\n      REVERT \t\t\tvault.getTokenIds()\n    tag 61\t\t\tvault.getTokenIds()\n      JUMPDEST \t\t\tvault.getTokenIds()\n      POP \t\t\tvault.getTokenIds()\n      POP \t\t\tvault.getTokenIds()\n      POP \t\t\tvault.getTokenIds()\n      POP \t\t\tvault.getTokenIds()\n      PUSH 40\t\t\tvault.getTokenIds()\n      MLOAD \t\t\tvault.getTokenIds()\n      RETURNDATASIZE \t\t\tvault.getTokenIds()\n      PUSH 0\t\t\tvault.getTokenIds()\n      DUP3 \t\t\tvault.getTokenIds()\n      RETURNDATACOPY \t\t\tvault.getTokenIds()\n      RETURNDATASIZE \t\t\tvault.getTokenIds()\n      PUSH 1F\t\t\tvault.getTokenIds()\n      NOT \t\t\tvault.getTokenIds()\n      PUSH 1F\t\t\tvault.getTokenIds()\n      DUP3 \t\t\tvault.getTokenIds()\n      ADD \t\t\tvault.getTokenIds()\n      AND \t\t\tvault.getTokenIds()\n      DUP3 \t\t\tvault.getTokenIds()\n      ADD \t\t\tvault.getTokenIds()\n      DUP1 \t\t\tvault.getTokenIds()\n      PUSH 40\t\t\tvault.getTokenIds()\n      MSTORE \t\t\tvault.getTokenIds()\n      POP \t\t\tvault.getTokenIds()\n      DUP2 \t\t\tvault.getTokenIds()\n      ADD \t\t\tvault.getTokenIds()\n      SWAP1 \t\t\tvault.getTokenIds()\n      PUSH [tag] 62\t\t\tvault.getTokenIds()\n      SWAP2 \t\t\tvault.getTokenIds()\n      SWAP1 \t\t\tvault.getTokenIds()\n      PUSH [tag] 63\t\t\tvault.getTokenIds()\n      JUMP \t\t\tvault.getTokenIds()\n    tag 62\t\t\tvault.getTokenIds()\n      JUMPDEST \t\t\tvault.getTokenIds()\n      SWAP1 \t\t\tuint256[] memory insuredTokenI...\n      POP \t\t\tuint256[] memory insuredTokenI...\n      DUP3 \t\t\ttotalBalance\n      DUP3 \t\t\tminimumWithdrawTime\n      DUP3 \t\t\tinsuredTokenIds\n      DUP9 \t\t\tnftContractAddress\n      SWAP10 \t\t\treturn (totalBalance, minimumW...\n      POP \t\t\treturn (totalBalance, minimumW...\n      SWAP10 \t\t\treturn (totalBalance, minimumW...\n      POP \t\t\treturn (totalBalance, minimumW...\n      SWAP10 \t\t\treturn (totalBalance, minimumW...\n      POP \t\t\treturn (totalBalance, minimumW...\n      SWAP10 \t\t\treturn (totalBalance, minimumW...\n      POP \t\t\treturn (totalBalance, minimumW...\n      POP \t\t\treturn (totalBalance, minimumW...\n      POP \t\t\treturn (totalBalance, minimumW...\n      POP \t\t\treturn (totalBalance, minimumW...\n      POP \t\t\treturn (totalBalance, minimumW...\n      POP \t\t\treturn (totalBalance, minimumW...\n      POP \t\t\treturn (totalBalance, minimumW...\n      SWAP1 \t\t\tfunction getMyVaultDetails() p...\n      SWAP2 \t\t\tfunction getMyVaultDetails() p...\n      SWAP3 \t\t\tfunction getMyVaultDetails() p...\n      SWAP4 \t\t\tfunction getMyVaultDetails() p...\n      JUMP \t\t\tfunction getMyVaultDetails() p...\n    tag 20\t\t\tmapping(address => address) pu...\n      JUMPDEST \t\t\tmapping(address => address) pu...\n      PUSH 1\t\t\tmapping(address => address) pu...\n      PUSH 20\t\t\tmapping(address => address) pu...\n      MSTORE \t\t\tmapping(address => address) pu...\n      DUP1 \t\t\tmapping(address => address) pu...\n      PUSH 0\t\t\tmapping(address => address) pu...\n      MSTORE \t\t\tmapping(address => address) pu...\n      PUSH 40\t\t\tmapping(address => address) pu...\n      PUSH 0\t\t\tmapping(address => address) pu...\n      KECCAK256 \t\t\tmapping(address => address) pu...\n      PUSH 0\t\t\tmapping(address => address) pu...\n      SWAP2 \t\t\tmapping(address => address) pu...\n      POP \t\t\tmapping(address => address) pu...\n      SLOAD \t\t\tmapping(address => address) pu...\n      SWAP1 \t\t\tmapping(address => address) pu...\n      PUSH 100\t\t\tmapping(address => address) pu...\n      EXP \t\t\tmapping(address => address) pu...\n      SWAP1 \t\t\tmapping(address => address) pu...\n      DIV \t\t\tmapping(address => address) pu...\n      PUSH FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF\t\t\tmapping(address => address) pu...\n      AND \t\t\tmapping(address => address) pu...\n      DUP2 \t\t\tmapping(address => address) pu...\n      JUMP \t\t\tmapping(address => address) pu...\n    tag 26\t\t\tmapping(address => address) pu...\n      JUMPDEST \t\t\tmapping(address => address) pu...\n      PUSH 2\t\t\tmapping(address => address) pu...\n      PUSH 20\t\t\tmapping(address => address) pu...\n      MSTORE \t\t\tmapping(address => address) pu...\n      DUP1 \t\t\tmapping(address => address) pu...\n      PUSH 0\t\t\tmapping(address => address) pu...\n      MSTORE \t\t\tmapping(address => address) pu...\n      PUSH 40\t\t\tmapping(address => address) pu...\n      PUSH 0\t\t\tmapping(address => address) pu...\n      KECCAK256 \t\t\tmapping(address => address) pu...\n      PUSH 0\t\t\tmapping(address => address) pu...\n      SWAP2 \t\t\tmapping(address => address) pu...\n      POP \t\t\tmapping(address => address) pu...\n      SLOAD \t\t\tmapping(address => address) pu...\n      SWAP1 \t\t\tmapping(address => address) pu...\n      PUSH 100\t\t\tmapping(address => address) pu...\n      EXP \t\t\tmapping(address => address) pu...\n      SWAP1 \t\t\tmapping(address => address) pu...\n      DIV \t\t\tmapping(address => address) pu...\n      PUSH FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF\t\t\tmapping(address => address) pu...\n      AND \t\t\tmapping(address => address) pu...\n      DUP2 \t\t\tmapping(address => address) pu...\n      JUMP \t\t\tmapping(address => address) pu...\n    tag 32\t\t\tfunction createVault(address _...\n      JUMPDEST \t\t\tfunction createVault(address _...\n      PUSH 0\t\t\t0\n      PUSH FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF\t\t\tvaultAddress[_NFTContractAddre...\n      AND \t\t\tvaultAddress[_NFTContractAddre...\n      PUSH 1\t\t\tvaultAddress\n      PUSH 0\t\t\tvaultAddress[_NFTContractAddre...\n      DUP5 \t\t\t_NFTContractAddress\n      PUSH FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF\t\t\tvaultAddress[_NFTContractAddre...\n      AND \t\t\tvaultAddress[_NFTContractAddre...\n      PUSH FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF\t\t\tvaultAddress[_NFTContractAddre...\n      AND \t\t\tvaultAddress[_NFTContractAddre...\n      DUP2 \t\t\tvaultAddress[_NFTContractAddre...\n      MSTORE \t\t\tvaultAddress[_NFTContractAddre...\n      PUSH 20\t\t\tvaultAddress[_NFTContractAddre...\n      ADD \t\t\tvaultAddress[_NFTContractAddre...\n      SWAP1 \t\t\tvaultAddress[_NFTContractAddre...\n      DUP2 \t\t\tvaultAddress[_NFTContractAddre...\n      MSTORE \t\t\tvaultAddress[_NFTContractAddre...\n      PUSH 20\t\t\tvaultAddress[_NFTContractAddre...\n      ADD \t\t\tvaultAddress[_NFTContractAddre...\n      PUSH 0\t\t\tvaultAddress[_NFTContractAddre...\n      KECCAK256 \t\t\tvaultAddress[_NFTContractAddre...\n      PUSH 0\t\t\tvaultAddress[_NFTContractAddre...\n      SWAP1 \t\t\tvaultAddress[_NFTContractAddre...\n      SLOAD \t\t\tvaultAddress[_NFTContractAddre...\n      SWAP1 \t\t\tvaultAddress[_NFTContractAddre...\n      PUSH 100\t\t\tvaultAddress[_NFTContractAddre...\n      EXP \t\t\tvaultAddress[_NFTContractAddre...\n      SWAP1 \t\t\tvaultAddress[_NFTContractAddre...\n      DIV \t\t\tvaultAddress[_NFTContractAddre...\n      PUSH FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF\t\t\tvaultAddress[_NFTContractAddre...\n      AND \t\t\tvaultAddress[_NFTContractAddre...\n      PUSH FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF\t\t\tvaultAddress[_NFTContractAddre...\n      AND \t\t\tvaultAddress[_NFTContractAddre...\n      EQ \t\t\tvaultAddress[_NFTContractAddre...\n      PUSH [tag] 65\t\t\trequire(vaultAddress[_NFTContr...\n      JUMPI \t\t\trequire(vaultAddress[_NFTContr...\n      PUSH 40\t\t\trequire(vaultAddress[_NFTContr...\n      MLOAD \t\t\trequire(vaultAddress[_NFTContr...\n      PUSH 8C379A000000000000000000000000000000000000000000000000000000000\t\t\trequire(vaultAddress[_NFTContr...\n      DUP2 \t\t\trequire(vaultAddress[_NFTContr...\n      MSTORE \t\t\trequire(vaultAddress[_NFTContr...\n      PUSH 4\t\t\trequire(vaultAddress[_NFTContr...\n      ADD \t\t\trequire(vaultAddress[_NFTContr...\n      PUSH [tag] 66\t\t\trequire(vaultAddress[_NFTContr...\n      SWAP1 \t\t\trequire(vaultAddress[_NFTContr...\n      PUSH [tag] 67\t\t\trequire(vaultAddress[_NFTContr...\n      JUMP \t\t\trequire(vaultAddress[_NFTContr...\n    tag 66\t\t\trequire(vaultAddress[_NFTContr...\n      JUMPDEST \t\t\trequire(vaultAddress[_NFTContr...\n      PUSH 40\t\t\trequire(vaultAddress[_NFTContr...\n      MLOAD \t\t\trequire(vaultAddress[_NFTContr...\n      DUP1 \t\t\trequire(vaultAddress[_NFTContr...\n      SWAP2 \t\t\trequire(vaultAddress[_NFTContr...\n      SUB \t\t\trequire(vaultAddress[_NFTContr...\n      SWAP1 \t\t\trequire(vaultAddress[_NFTContr...\n      REVERT \t\t\trequire(vaultAddress[_NFTContr...\n    tag 65\t\t\trequire(vaultAddress[_NFTContr...\n      JUMPDEST \t\t\trequire(vaultAddress[_NFTContr...\n      PUSH 0\t\t\tVault vault\n      DUP3 \t\t\t_NFTContractAddress\n      DUP3 \t\t\t_minTime\n      CALLER \t\t\tmsg.sender\n      PUSH 40\t\t\tnew Vault(_NFTContractAddress,...\n      MLOAD \t\t\tnew Vault(_NFTContractAddress,...\n      PUSH [tag] 68\t\t\tnew Vault(_NFTContractAddress,...\n      SWAP1 \t\t\tnew Vault(_NFTContractAddress,...\n      PUSH [tag] 69\t\t\tnew Vault(_NFTContractAddress,...\n      JUMP \t\t\tnew Vault(_NFTContractAddress,...\n    tag 68\t\t\tnew Vault(_NFTContractAddress,...\n      JUMPDEST \t\t\tnew Vault(_NFTContractAddress,...\n      PUSH [tag] 70\t\t\tnew Vault(_NFTContractAddress,...\n      SWAP4 \t\t\tnew Vault(_NFTContractAddress,...\n      SWAP3 \t\t\tnew Vault(_NFTContractAddress,...\n      SWAP2 \t\t\tnew Vault(_NFTContractAddress,...\n      SWAP1 \t\t\tnew Vault(_NFTContractAddress,...\n      PUSH [tag] 71\t\t\tnew Vault(_NFTContractAddress,...\n      JUMP \t\t\tnew Vault(_NFTContractAddress,...\n    tag 70\t\t\tnew Vault(_NFTContractAddress,...\n      JUMPDEST \t\t\tnew Vault(_NFTContractAddress,...\n      PUSH 40\t\t\tnew Vault(_NFTContractAddress,...\n      MLOAD \t\t\tnew Vault(_NFTContractAddress,...\n      DUP1 \t\t\tnew Vault(_NFTContractAddress,...\n      SWAP2 \t\t\tnew Vault(_NFTContractAddress,...\n      SUB \t\t\tnew Vault(_NFTContractAddress,...\n      SWAP1 \t\t\tnew Vault(_NFTContractAddress,...\n      PUSH 0\t\t\tnew Vault(_NFTContractAddress,...\n      CREATE \t\t\tnew Vault(_NFTContractAddress,...\n      DUP1 \t\t\tnew Vault(_NFTContractAddress,...\n      ISZERO \t\t\tnew Vault(_NFTContractAddress,...\n      DUP1 \t\t\tnew Vault(_NFTContractAddress,...\n      ISZERO \t\t\tnew Vault(_NFTContractAddress,...\n      PUSH [tag] 72\t\t\tnew Vault(_NFTContractAddress,...\n      JUMPI \t\t\tnew Vault(_NFTContractAddress,...\n      RETURNDATASIZE \t\t\tnew Vault(_NFTContractAddress,...\n      PUSH 0\t\t\tnew Vault(_NFTContractAddress,...\n      DUP1 \t\t\tnew Vault(_NFTContractAddress,...\n      RETURNDATACOPY \t\t\tnew Vault(_NFTContractAddress,...\n      RETURNDATASIZE \t\t\tnew Vault(_NFTContractAddress,...\n      PUSH 0\t\t\tnew Vault(_NFTContractAddress,...\n      REVERT \t\t\tnew Vault(_NFTContractAddress,...\n    tag 72\t\t\tnew Vault(_NFTContractAddress,...\n      JUMPDEST \t\t\tnew Vault(_NFTContractAddress,...\n      POP \t\t\tnew Vault(_NFTContractAddress,...\n      SWAP1 \t\t\tVault vault = new Vault(_NFTCo...\n      POP \t\t\tVault vault = new Vault(_NFTCo...\n      PUSH 0\t\t\tvaults\n      DUP2 \t\t\tvault\n      SWAP1 \t\t\tvaults.push(vault)\n      DUP1 \t\t\tvaults.push(vault)\n      PUSH 1\t\t\tvaults.push(vault)\n      DUP2 \t\t\tvaults.push(vault)\n      SLOAD \t\t\tvaults.push(vault)\n      ADD \t\t\tvaults.push(vault)\n      DUP1 \t\t\tvaults.push(vault)\n      DUP3 \t\t\tvaults.push(vault)\n      SSTORE \t\t\tvaults.push(vault)\n      DUP1 \t\t\tvaults.push(vault)\n      SWAP2 \t\t\tvaults.push(vault)\n      POP \t\t\tvaults.push(vault)\n      POP \t\t\tvaults.push(vault)\n      PUSH 1\t\t\tvaults.push(vault)\n      SWAP1 \t\t\tvaults.push(vault)\n      SUB \t\t\tvaults.push(vault)\n      SWAP1 \t\t\tvaults.push(vault)\n      PUSH 0\t\t\tvaults.push(vault)\n      MSTORE \t\t\tvaults.push(vault)\n      PUSH 20\t\t\tvaults.push(vault)\n      PUSH 0\t\t\tvaults.push(vault)\n      KECCAK256 \t\t\tvaults.push(vault)\n      ADD \t\t\tvaults.push(vault)\n      PUSH 0\t\t\tvaults.push(vault)\n      SWAP1 \t\t\tvaults.push(vault)\n      SWAP2 \t\t\tvaults.push(vault)\n      SWAP1 \t\t\tvaults.push(vault)\n      SWAP2 \t\t\tvaults.push(vault)\n      SWAP1 \t\t\tvaults.push(vault)\n      SWAP2 \t\t\tvaults.push(vault)\n      PUSH 100\t\t\tvaults.push(vault)\n      EXP \t\t\tvaults.push(vault)\n      DUP2 \t\t\tvaults.push(vault)\n      SLOAD \t\t\tvaults.push(vault)\n      DUP2 \t\t\tvaults.push(vault)\n      PUSH FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF\t\t\tvaults.push(vault)\n      MUL \t\t\tvaults.push(vault)\n      NOT \t\t\tvaults.push(vault)\n      AND \t\t\tvaults.push(vault)\n      SWAP1 \t\t\tvaults.push(vault)\n      DUP4 \t\t\tvaults.push(vault)\n      PUSH FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF\t\t\tvaults.push(vault)\n      AND \t\t\tvaults.push(vault)\n      MUL \t\t\tvaults.push(vault)\n      OR \t\t\tvaults.push(vault)\n      SWAP1 \t\t\tvaults.push(vault)\n      SSTORE \t\t\tvaults.push(vault)\n      POP \t\t\tvaults.push(vault)\n      DUP1 \t\t\tvault\n      PUSH 1\t\t\tvaultAddress\n      PUSH 0\t\t\tvaultAddress[_NFTContractAddre...\n      DUP6 \t\t\t_NFTContractAddress\n      PUSH FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF\t\t\tvaultAddress[_NFTContractAddre...\n      AND \t\t\tvaultAddress[_NFTContractAddre...\n      PUSH FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF\t\t\tvaultAddress[_NFTContractAddre...\n      AND \t\t\tvaultAddress[_NFTContractAddre...\n      DUP2 \t\t\tvaultAddress[_NFTContractAddre...\n      MSTORE \t\t\tvaultAddress[_NFTContractAddre...\n      PUSH 20\t\t\tvaultAddress[_NFTContractAddre...\n      ADD \t\t\tvaultAddress[_NFTContractAddre...\n      SWAP1 \t\t\tvaultAddress[_NFTContractAddre...\n      DUP2 \t\t\tvaultAddress[_NFTContractAddre...\n      MSTORE \t\t\tvaultAddress[_NFTContractAddre...\n      PUSH 20\t\t\tvaultAddress[_NFTContractAddre...\n      ADD \t\t\tvaultAddress[_NFTContractAddre...\n      PUSH 0\t\t\tvaultAddress[_NFTContractAddre...\n      KECCAK256 \t\t\tvaultAddress[_NFTContractAddre...\n      PUSH 0\t\t\tvaultAddress[_NFTContractAddre...\n      PUSH 100\t\t\tvaultAddress[_NFTContractAddre...\n      EXP \t\t\tvaultAddress[_NFTContractAddre...\n      DUP2 \t\t\tvaultAddress[_NFTContractAddre...\n      SLOAD \t\t\tvaultAddress[_NFTContractAddre...\n      DUP2 \t\t\tvaultAddress[_NFTContractAddre...\n      PUSH FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF\t\t\tvaultAddress[_NFTContractAddre...\n      MUL \t\t\tvaultAddress[_NFTContractAddre...\n      NOT \t\t\tvaultAddress[_NFTContractAddre...\n      AND \t\t\tvaultAddress[_NFTContractAddre...\n      SWAP1 \t\t\tvaultAddress[_NFTContractAddre...\n      DUP4 \t\t\tvaultAddress[_NFTContractAddre...\n      PUSH FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF\t\t\tvaultAddress[_NFTContractAddre...\n      AND \t\t\tvaultAddress[_NFTContractAddre...\n      MUL \t\t\tvaultAddress[_NFTContractAddre...\n      OR \t\t\tvaultAddress[_NFTContractAddre...\n      SWAP1 \t\t\tvaultAddress[_NFTContractAddre...\n      SSTORE \t\t\tvaultAddress[_NFTContractAddre...\n      POP \t\t\tvaultAddress[_NFTContractAddre...\n      DUP3 \t\t\t_NFTContractAddress\n      PUSH 2\t\t\tadmins\n      PUSH 0\t\t\tadmins[msg.sender]\n      CALLER \t\t\tmsg.sender\n      PUSH FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF\t\t\tadmins[msg.sender]\n      AND \t\t\tadmins[msg.sender]\n      PUSH FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF\t\t\tadmins[msg.sender]\n      AND \t\t\tadmins[msg.sender]\n      DUP2 \t\t\tadmins[msg.sender]\n      MSTORE \t\t\tadmins[msg.sender]\n      PUSH 20\t\t\tadmins[msg.sender]\n      ADD \t\t\tadmins[msg.sender]\n      SWAP1 \t\t\tadmins[msg.sender]\n      DUP2 \t\t\tadmins[msg.sender]\n      MSTORE \t\t\tadmins[msg.sender]\n      PUSH 20\t\t\tadmins[msg.sender]\n      ADD \t\t\tadmins[msg.sender]\n      PUSH 0\t\t\tadmins[msg.sender]\n      KECCAK256 \t\t\tadmins[msg.sender]\n      PUSH 0\t\t\tadmins[msg.sender]\n      PUSH 100\t\t\tadmins[msg.sender] = _NFTContr...\n      EXP \t\t\tadmins[msg.sender] = _NFTContr...\n      DUP2 \t\t\tadmins[msg.sender] = _NFTContr...\n      SLOAD \t\t\tadmins[msg.sender] = _NFTContr...\n      DUP2 \t\t\tadmins[msg.sender] = _NFTContr...\n      PUSH FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF\t\t\tadmins[msg.sender] = _NFTContr...\n      MUL \t\t\tadmins[msg.sender] = _NFTContr...\n      NOT \t\t\tadmins[msg.sender] = _NFTContr...\n      AND \t\t\tadmins[msg.sender] = _NFTContr...\n      SWAP1 \t\t\tadmins[msg.sender] = _NFTContr...\n      DUP4 \t\t\tadmins[msg.sender] = _NFTContr...\n      PUSH FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF\t\t\tadmins[msg.sender] = _NFTContr...\n      AND \t\t\tadmins[msg.sender] = _NFTContr...\n      MUL \t\t\tadmins[msg.sender] = _NFTContr...\n      OR \t\t\tadmins[msg.sender] = _NFTContr...\n      SWAP1 \t\t\tadmins[msg.sender] = _NFTContr...\n      SSTORE \t\t\tadmins[msg.sender] = _NFTContr...\n      POP \t\t\tadmins[msg.sender] = _NFTContr...\n      PUSH A8596CC4A052ECC7656E9CA0FB7A10472573699E3AA34AC5659BC37C1B0A44FC\t\t\tVaultCreated(block.timestamp,a...\n      TIMESTAMP \t\t\tblock.timestamp\n      DUP3 \t\t\tvault\n      DUP6 \t\t\t_NFTContractAddress\n      PUSH 40\t\t\tVaultCreated(block.timestamp,a...\n      MLOAD \t\t\tVaultCreated(block.timestamp,a...\n      PUSH [tag] 74\t\t\tVaultCreated(block.timestamp,a...\n      SWAP4 \t\t\tVaultCreated(block.timestamp,a...\n      SWAP3 \t\t\tVaultCreated(block.timestamp,a...\n      SWAP2 \t\t\tVaultCreated(block.timestamp,a...\n      SWAP1 \t\t\tVaultCreated(block.timestamp,a...\n      PUSH [tag] 75\t\t\tVaultCreated(block.timestamp,a...\n      JUMP \t\t\tVaultCreated(block.timestamp,a...\n    tag 74\t\t\tVaultCreated(block.timestamp,a...\n      JUMPDEST \t\t\tVaultCreated(block.timestamp,a...\n      PUSH 40\t\t\tVaultCreated(block.timestamp,a...\n      MLOAD \t\t\tVaultCreated(block.timestamp,a...\n      DUP1 \t\t\tVaultCreated(block.timestamp,a...\n      SWAP2 \t\t\tVaultCreated(block.timestamp,a...\n      SUB \t\t\tVaultCreated(block.timestamp,a...\n      SWAP1 \t\t\tVaultCreated(block.timestamp,a...\n      LOG1 \t\t\tVaultCreated(block.timestamp,a...\n      POP \t\t\t{\\r\\n        require(vaultAddr...\n      POP \t\t\tfunction createVault(address _...\n      POP \t\t\tfunction createVault(address _...\n      JUMP \t\t\tfunction createVault(address _...\n    tag 36\t\t\tfunction getContractAddress(ad...\n      JUMPDEST \t\t\tfunction getContractAddress(ad...\n      PUSH 0\t\t\taddress\n      PUSH 1\t\t\tvaultAddress\n      PUSH 0\t\t\tvaultAddress[NFTContractAddres...\n      DUP4 \t\t\tNFTContractAddress\n      PUSH FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF\t\t\tvaultAddress[NFTContractAddres...\n      AND \t\t\tvaultAddress[NFTContractAddres...\n      PUSH FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF\t\t\tvaultAddress[NFTContractAddres...\n      AND \t\t\tvaultAddress[NFTContractAddres...\n      DUP2 \t\t\tvaultAddress[NFTContractAddres...\n      MSTORE \t\t\tvaultAddress[NFTContractAddres...\n      PUSH 20\t\t\tvaultAddress[NFTContractAddres...\n      ADD \t\t\tvaultAddress[NFTContractAddres...\n      SWAP1 \t\t\tvaultAddress[NFTContractAddres...\n      DUP2 \t\t\tvaultAddress[NFTContractAddres...\n      MSTORE \t\t\tvaultAddress[NFTContractAddres...\n      PUSH 20\t\t\tvaultAddress[NFTContractAddres...\n      ADD \t\t\tvaultAddress[NFTContractAddres...\n      PUSH 0\t\t\tvaultAddress[NFTContractAddres...\n      KECCAK256 \t\t\tvaultAddress[NFTContractAddres...\n      PUSH 0\t\t\tvaultAddress[NFTContractAddres...\n      SWAP1 \t\t\tvaultAddress[NFTContractAddres...\n      SLOAD \t\t\tvaultAddress[NFTContractAddres...\n      SWAP1 \t\t\tvaultAddress[NFTContractAddres...\n      PUSH 100\t\t\tvaultAddress[NFTContractAddres...\n      EXP \t\t\tvaultAddress[NFTContractAddres...\n      SWAP1 \t\t\tvaultAddress[NFTContractAddres...\n      DIV \t\t\tvaultAddress[NFTContractAddres...\n      PUSH FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF\t\t\tvaultAddress[NFTContractAddres...\n      AND \t\t\tvaultAddress[NFTContractAddres...\n      SWAP1 \t\t\treturn vaultAddress[NFTContrac...\n      POP \t\t\treturn vaultAddress[NFTContrac...\n      SWAP2 \t\t\tfunction getContractAddress(ad...\n      SWAP1 \t\t\tfunction getContractAddress(ad...\n      POP \t\t\tfunction getContractAddress(ad...\n      JUMP \t\t\tfunction getContractAddress(ad...\n    tag 41\t\t\tfunction depositFunds(address ...\n      JUMPDEST \t\t\tfunction depositFunds(address ...\n      PUSH 0\t\t\t0\n      PUSH FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF\t\t\tvaultAddress[NFTContractAddres...\n      AND \t\t\tvaultAddress[NFTContractAddres...\n      PUSH 1\t\t\tvaultAddress\n      PUSH 0\t\t\tvaultAddress[NFTContractAddres...\n      DUP6 \t\t\tNFTContractAddress\n      PUSH FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF\t\t\tvaultAddress[NFTContractAddres...\n      AND \t\t\tvaultAddress[NFTContractAddres...\n      PUSH FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF\t\t\tvaultAddress[NFTContractAddres...\n      AND \t\t\tvaultAddress[NFTContractAddres...\n      DUP2 \t\t\tvaultAddress[NFTContractAddres...\n      MSTORE \t\t\tvaultAddress[NFTContractAddres...\n      PUSH 20\t\t\tvaultAddress[NFTContractAddres...\n      ADD \t\t\tvaultAddress[NFTContractAddres...\n      SWAP1 \t\t\tvaultAddress[NFTContractAddres...\n      DUP2 \t\t\tvaultAddress[NFTContractAddres...\n      MSTORE \t\t\tvaultAddress[NFTContractAddres...\n      PUSH 20\t\t\tvaultAddress[NFTContractAddres...\n      ADD \t\t\tvaultAddress[NFTContractAddres...\n      PUSH 0\t\t\tvaultAddress[NFTContractAddres...\n      KECCAK256 \t\t\tvaultAddress[NFTContractAddres...\n      PUSH 0\t\t\tvaultAddress[NFTContractAddres...\n      SWAP1 \t\t\tvaultAddress[NFTContractAddres...\n      SLOAD \t\t\tvaultAddress[NFTContractAddres...\n      SWAP1 \t\t\tvaultAddress[NFTContractAddres...\n      PUSH 100\t\t\tvaultAddress[NFTContractAddres...\n      EXP \t\t\tvaultAddress[NFTContractAddres...\n      SWAP1 \t\t\tvaultAddress[NFTContractAddres...\n      DIV \t\t\tvaultAddress[NFTContractAddres...\n      PUSH FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF\t\t\tvaultAddress[NFTContractAddres...\n      AND \t\t\tvaultAddress[NFTContractAddres...\n      PUSH FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF\t\t\tvaultAddress[NFTContractAddres...\n      AND \t\t\tvaultAddress[NFTContractAddres...\n      SUB \t\t\tvaultAddress[NFTContractAddres...\n      PUSH [tag] 78\t\t\trequire(vaultAddress[NFTContra...\n      JUMPI \t\t\trequire(vaultAddress[NFTContra...\n      PUSH 40\t\t\trequire(vaultAddress[NFTContra...\n      MLOAD \t\t\trequire(vaultAddress[NFTContra...\n      PUSH 8C379A000000000000000000000000000000000000000000000000000000000\t\t\trequire(vaultAddress[NFTContra...\n      DUP2 \t\t\trequire(vaultAddress[NFTContra...\n      MSTORE \t\t\trequire(vaultAddress[NFTContra...\n      PUSH 4\t\t\trequire(vaultAddress[NFTContra...\n      ADD \t\t\trequire(vaultAddress[NFTContra...\n      PUSH [tag] 79\t\t\trequire(vaultAddress[NFTContra...\n      SWAP1 \t\t\trequire(vaultAddress[NFTContra...\n      PUSH [tag] 80\t\t\trequire(vaultAddress[NFTContra...\n      JUMP \t\t\trequire(vaultAddress[NFTContra...\n    tag 79\t\t\trequire(vaultAddress[NFTContra...\n      JUMPDEST \t\t\trequire(vaultAddress[NFTContra...\n      PUSH 40\t\t\trequire(vaultAddress[NFTContra...\n      MLOAD \t\t\trequire(vaultAddress[NFTContra...\n      DUP1 \t\t\trequire(vaultAddress[NFTContra...\n      SWAP2 \t\t\trequire(vaultAddress[NFTContra...\n      SUB \t\t\trequire(vaultAddress[NFTContra...\n      SWAP1 \t\t\trequire(vaultAddress[NFTContra...\n      REVERT \t\t\trequire(vaultAddress[NFTContra...\n    tag 78\t\t\trequire(vaultAddress[NFTContra...\n      JUMPDEST \t\t\trequire(vaultAddress[NFTContra...\n      PUSH 0\t\t\tuint256 useramount\n      CALLVALUE \t\t\tmsg.value\n      SWAP1 \t\t\tuint256 useramount = msg.value\n      POP \t\t\tuint256 useramount = msg.value\n      PUSH 0\t\t\taddress payable vaultContract_...\n      PUSH [tag] 81\t\t\tgetContractAddress(NFTContract...\n      DUP6 \t\t\tNFTContractAddress\n      PUSH [tag] 36\t\t\tgetContractAddress\n      JUMP \t\t\tgetContractAddress(NFTContract...\n    tag 81\t\t\tgetContractAddress(NFTContract...\n      JUMPDEST \t\t\tgetContractAddress(NFTContract...\n      SWAP1 \t\t\taddress payable vaultContract_...\n      POP \t\t\taddress payable vaultContract_...\n      DUP3 \t\t\tamounts\n      MLOAD \t\t\tamounts.length\n      DUP5 \t\t\t_tokenIDs\n      MLOAD \t\t\t_tokenIDs.length\n      EQ \t\t\t_tokenIDs.length == amounts.le...\n      PUSH [tag] 82\t\t\trequire(_tokenIDs.length == am...\n      JUMPI \t\t\trequire(_tokenIDs.length == am...\n      PUSH 40\t\t\trequire(_tokenIDs.length == am...\n      MLOAD \t\t\trequire(_tokenIDs.length == am...\n      PUSH 8C379A000000000000000000000000000000000000000000000000000000000\t\t\trequire(_tokenIDs.length == am...\n      DUP2 \t\t\trequire(_tokenIDs.length == am...\n      MSTORE \t\t\trequire(_tokenIDs.length == am...\n      PUSH 4\t\t\trequire(_tokenIDs.length == am...\n      ADD \t\t\trequire(_tokenIDs.length == am...\n      PUSH [tag] 83\t\t\trequire(_tokenIDs.length == am...\n      SWAP1 \t\t\trequire(_tokenIDs.length == am...\n      PUSH [tag] 84\t\t\trequire(_tokenIDs.length == am...\n      JUMP \t\t\trequire(_tokenIDs.length == am...\n    tag 83\t\t\trequire(_tokenIDs.length == am...\n      JUMPDEST \t\t\trequire(_tokenIDs.length == am...\n      PUSH 40\t\t\trequire(_tokenIDs.length == am...\n      MLOAD \t\t\trequire(_tokenIDs.length == am...\n      DUP1 \t\t\trequire(_tokenIDs.length == am...\n      SWAP2 \t\t\trequire(_tokenIDs.length == am...\n      SUB \t\t\trequire(_tokenIDs.length == am...\n      SWAP1 \t\t\trequire(_tokenIDs.length == am...\n      REVERT \t\t\trequire(_tokenIDs.length == am...\n    tag 82\t\t\trequire(_tokenIDs.length == am...\n      JUMPDEST \t\t\trequire(_tokenIDs.length == am...\n      PUSH 0\t\t\tuint256 totalAmount\n      DUP1 \t\t\tVault vault\n      DUP3 \t\t\tvaultContract_address\n      SWAP1 \t\t\tVault vault = Vault(vaultContr...\n      POP \t\t\tVault vault = Vault(vaultContr...\n      CALLER \t\t\tmsg.sender\n      PUSH FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF\t\t\tvault.admin() == msg.sender\n      AND \t\t\tvault.admin() == msg.sender\n      DUP2 \t\t\tvault\n      PUSH FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF\t\t\tvault.admin\n      AND \t\t\tvault.admin\n      PUSH F851A440\t\t\tvault.admin\n      PUSH 40\t\t\tvault.admin()\n      MLOAD \t\t\tvault.admin()\n      DUP2 \t\t\tvault.admin()\n      PUSH FFFFFFFF\t\t\tvault.admin()\n      AND \t\t\tvault.admin()\n      PUSH E0\t\t\tvault.admin()\n      SHL \t\t\tvault.admin()\n      DUP2 \t\t\tvault.admin()\n      MSTORE \t\t\tvault.admin()\n      PUSH 4\t\t\tvault.admin()\n      ADD \t\t\tvault.admin()\n      PUSH 20\t\t\tvault.admin()\n      PUSH 40\t\t\tvault.admin()\n      MLOAD \t\t\tvault.admin()\n      DUP1 \t\t\tvault.admin()\n      DUP4 \t\t\tvault.admin()\n      SUB \t\t\tvault.admin()\n      DUP2 \t\t\tvault.admin()\n      DUP7 \t\t\tvault.admin()\n      GAS \t\t\tvault.admin()\n      STATICCALL \t\t\tvault.admin()\n      ISZERO \t\t\tvault.admin()\n      DUP1 \t\t\tvault.admin()\n      ISZERO \t\t\tvault.admin()\n      PUSH [tag] 86\t\t\tvault.admin()\n      JUMPI \t\t\tvault.admin()\n      RETURNDATASIZE \t\t\tvault.admin()\n      PUSH 0\t\t\tvault.admin()\n      DUP1 \t\t\tvault.admin()\n      RETURNDATACOPY \t\t\tvault.admin()\n      RETURNDATASIZE \t\t\tvault.admin()\n      PUSH 0\t\t\tvault.admin()\n      REVERT \t\t\tvault.admin()\n    tag 86\t\t\tvault.admin()\n      JUMPDEST \t\t\tvault.admin()\n      POP \t\t\tvault.admin()\n      POP \t\t\tvault.admin()\n      POP \t\t\tvault.admin()\n      POP \t\t\tvault.admin()\n      PUSH 40\t\t\tvault.admin()\n      MLOAD \t\t\tvault.admin()\n      RETURNDATASIZE \t\t\tvault.admin()\n      PUSH 1F\t\t\tvault.admin()\n      NOT \t\t\tvault.admin()\n      PUSH 1F\t\t\tvault.admin()\n      DUP3 \t\t\tvault.admin()\n      ADD \t\t\tvault.admin()\n      AND \t\t\tvault.admin()\n      DUP3 \t\t\tvault.admin()\n      ADD \t\t\tvault.admin()\n      DUP1 \t\t\tvault.admin()\n      PUSH 40\t\t\tvault.admin()\n      MSTORE \t\t\tvault.admin()\n      POP \t\t\tvault.admin()\n      DUP2 \t\t\tvault.admin()\n      ADD \t\t\tvault.admin()\n      SWAP1 \t\t\tvault.admin()\n      PUSH [tag] 87\t\t\tvault.admin()\n      SWAP2 \t\t\tvault.admin()\n      SWAP1 \t\t\tvault.admin()\n      PUSH [tag] 88\t\t\tvault.admin()\n      JUMP \t\t\tvault.admin()\n    tag 87\t\t\tvault.admin()\n      JUMPDEST \t\t\tvault.admin()\n      PUSH FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF\t\t\tvault.admin() == msg.sender\n      AND \t\t\tvault.admin() == msg.sender\n      EQ \t\t\tvault.admin() == msg.sender\n      PUSH [tag] 89\t\t\trequire(vault.admin() == msg.s...\n      JUMPI \t\t\trequire(vault.admin() == msg.s...\n      PUSH 40\t\t\trequire(vault.admin() == msg.s...\n      MLOAD \t\t\trequire(vault.admin() == msg.s...\n      PUSH 8C379A000000000000000000000000000000000000000000000000000000000\t\t\trequire(vault.admin() == msg.s...\n      DUP2 \t\t\trequire(vault.admin() == msg.s...\n      MSTORE \t\t\trequire(vault.admin() == msg.s...\n      PUSH 4\t\t\trequire(vault.admin() == msg.s...\n      ADD \t\t\trequire(vault.admin() == msg.s...\n      PUSH [tag] 90\t\t\trequire(vault.admin() == msg.s...\n      SWAP1 \t\t\trequire(vault.admin() == msg.s...\n      PUSH [tag] 91\t\t\trequire(vault.admin() == msg.s...\n      JUMP \t\t\trequire(vault.admin() == msg.s...\n    tag 90\t\t\trequire(vault.admin() == msg.s...\n      JUMPDEST \t\t\trequire(vault.admin() == msg.s...\n      PUSH 40\t\t\trequire(vault.admin() == msg.s...\n      MLOAD \t\t\trequire(vault.admin() == msg.s...\n      DUP1 \t\t\trequire(vault.admin() == msg.s...\n      SWAP2 \t\t\trequire(vault.admin() == msg.s...\n      SUB \t\t\trequire(vault.admin() == msg.s...\n      SWAP1 \t\t\trequire(vault.admin() == msg.s...\n      REVERT \t\t\trequire(vault.admin() == msg.s...\n    tag 89\t\t\trequire(vault.admin() == msg.s...\n      JUMPDEST \t\t\trequire(vault.admin() == msg.s...\n      PUSH 0\t\t\tuint256 i\n    tag 92\t\t\tfor (uint256 i = 0; i < _token...\n      JUMPDEST \t\t\tfor (uint256 i = 0; i < _token...\n      DUP7 \t\t\t_tokenIDs\n      MLOAD \t\t\t_tokenIDs.length\n      DUP2 \t\t\ti\n      LT \t\t\ti < _tokenIDs.length\n      ISZERO \t\t\tfor (uint256 i = 0; i < _token...\n      PUSH [tag] 93\t\t\tfor (uint256 i = 0; i < _token...\n      JUMPI \t\t\tfor (uint256 i = 0; i < _token...\n      DUP6 \t\t\tamounts\n      DUP2 \t\t\ti\n      DUP2 \t\t\tamounts[i]\n      MLOAD \t\t\tamounts[i]\n      DUP2 \t\t\tamounts[i]\n      LT \t\t\tamounts[i]\n      PUSH [tag] 95\t\t\tamounts[i]\n      JUMPI \t\t\tamounts[i]\n      PUSH [tag] 96\t\t\tamounts[i]\n      PUSH [tag] 97\t\t\tamounts[i]\n      JUMP \t\t\tamounts[i]\n    tag 96\t\t\tamounts[i]\n      JUMPDEST \t\t\tamounts[i]\n    tag 95\t\t\tamounts[i]\n      JUMPDEST \t\t\tamounts[i]\n      PUSH 20\t\t\tamounts[i]\n      MUL \t\t\tamounts[i]\n      PUSH 20\t\t\tamounts[i]\n      ADD \t\t\tamounts[i]\n      ADD \t\t\tamounts[i]\n      MLOAD \t\t\tamounts[i]\n      DUP4 \t\t\ttotalAmount += amounts[i]\n      PUSH [tag] 98\t\t\ttotalAmount += amounts[i]\n      SWAP2 \t\t\ttotalAmount += amounts[i]\n      SWAP1 \t\t\ttotalAmount += amounts[i]\n      PUSH [tag] 99\t\t\ttotalAmount += amounts[i]\n      JUMP \t\t\ttotalAmount += amounts[i]\n    tag 98\t\t\ttotalAmount += amounts[i]\n      JUMPDEST \t\t\ttotalAmount += amounts[i]\n      SWAP3 \t\t\ttotalAmount += amounts[i]\n      POP \t\t\ttotalAmount += amounts[i]\n      DUP1 \t\t\ti++\n      DUP1 \t\t\ti++\n      PUSH [tag] 100\t\t\ti++\n      SWAP1 \t\t\ti++\n      PUSH [tag] 101\t\t\ti++\n      JUMP \t\t\ti++\n    tag 100\t\t\ti++\n      JUMPDEST \t\t\ti++\n      SWAP2 \t\t\ti++\n      POP \t\t\ti++\n      POP \t\t\ti++\n      PUSH [tag] 92\t\t\tfor (uint256 i = 0; i < _token...\n      JUMP \t\t\tfor (uint256 i = 0; i < _token...\n    tag 93\t\t\tfor (uint256 i = 0; i < _token...\n      JUMPDEST \t\t\tfor (uint256 i = 0; i < _token...\n      POP \t\t\tfor (uint256 i = 0; i < _token...\n      DUP2 \t\t\ttotalAmount\n      DUP5 \t\t\tuseramount\n      EQ \t\t\tuseramount == totalAmount\n      PUSH [tag] 102\t\t\trequire(useramount == totalAmo...\n      JUMPI \t\t\trequire(useramount == totalAmo...\n      PUSH 40\t\t\trequire(useramount == totalAmo...\n      MLOAD \t\t\trequire(useramount == totalAmo...\n      PUSH 8C379A000000000000000000000000000000000000000000000000000000000\t\t\trequire(useramount == totalAmo...\n      DUP2 \t\t\trequire(useramount == totalAmo...\n      MSTORE \t\t\trequire(useramount == totalAmo...\n      PUSH 4\t\t\trequire(useramount == totalAmo...\n      ADD \t\t\trequire(useramount == totalAmo...\n      PUSH [tag] 103\t\t\trequire(useramount == totalAmo...\n      SWAP1 \t\t\trequire(useramount == totalAmo...\n      PUSH [tag] 104\t\t\trequire(useramount == totalAmo...\n      JUMP \t\t\trequire(useramount == totalAmo...\n    tag 103\t\t\trequire(useramount == totalAmo...\n      JUMPDEST \t\t\trequire(useramount == totalAmo...\n      PUSH 40\t\t\trequire(useramount == totalAmo...\n      MLOAD \t\t\trequire(useramount == totalAmo...\n      DUP1 \t\t\trequire(useramount == totalAmo...\n      SWAP2 \t\t\trequire(useramount == totalAmo...\n      SUB \t\t\trequire(useramount == totalAmo...\n      SWAP1 \t\t\trequire(useramount == totalAmo...\n      REVERT \t\t\trequire(useramount == totalAmo...\n    tag 102\t\t\trequire(useramount == totalAmo...\n      JUMPDEST \t\t\trequire(useramount == totalAmo...\n      PUSH 0\t\t\tuint256 i\n    tag 105\t\t\tfor (uint256 i = 0; i < _token...\n      JUMPDEST \t\t\tfor (uint256 i = 0; i < _token...\n      DUP7 \t\t\t_tokenIDs\n      MLOAD \t\t\t_tokenIDs.length\n      DUP2 \t\t\ti\n      LT \t\t\ti < _tokenIDs.length\n      ISZERO \t\t\tfor (uint256 i = 0; i < _token...\n      PUSH [tag] 106\t\t\tfor (uint256 i = 0; i < _token...\n      JUMPI \t\t\tfor (uint256 i = 0; i < _token...\n      DUP2 \t\t\tvault\n      PUSH FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF\t\t\tvault.addBalance\n      AND \t\t\tvault.addBalance\n      PUSH A40398A6\t\t\tvault.addBalance\n      DUP9 \t\t\t_tokenIDs\n      DUP4 \t\t\ti\n      DUP2 \t\t\t_tokenIDs[i]\n      MLOAD \t\t\t_tokenIDs[i]\n      DUP2 \t\t\t_tokenIDs[i]\n      LT \t\t\t_tokenIDs[i]\n      PUSH [tag] 108\t\t\t_tokenIDs[i]\n      JUMPI \t\t\t_tokenIDs[i]\n      PUSH [tag] 109\t\t\t_tokenIDs[i]\n      PUSH [tag] 97\t\t\t_tokenIDs[i]\n      JUMP \t\t\t_tokenIDs[i]\n    tag 109\t\t\t_tokenIDs[i]\n      JUMPDEST \t\t\t_tokenIDs[i]\n    tag 108\t\t\t_tokenIDs[i]\n      JUMPDEST \t\t\t_tokenIDs[i]\n      PUSH 20\t\t\t_tokenIDs[i]\n      MUL \t\t\t_tokenIDs[i]\n      PUSH 20\t\t\t_tokenIDs[i]\n      ADD \t\t\t_tokenIDs[i]\n      ADD \t\t\t_tokenIDs[i]\n      MLOAD \t\t\t_tokenIDs[i]\n      DUP9 \t\t\tamounts\n      DUP5 \t\t\ti\n      DUP2 \t\t\tamounts[i]\n      MLOAD \t\t\tamounts[i]\n      DUP2 \t\t\tamounts[i]\n      LT \t\t\tamounts[i]\n      PUSH [tag] 110\t\t\tamounts[i]\n      JUMPI \t\t\tamounts[i]\n      PUSH [tag] 111\t\t\tamounts[i]\n      PUSH [tag] 97\t\t\tamounts[i]\n      JUMP \t\t\tamounts[i]\n    tag 111\t\t\tamounts[i]\n      JUMPDEST \t\t\tamounts[i]\n    tag 110\t\t\tamounts[i]\n      JUMPDEST \t\t\tamounts[i]\n      PUSH 20\t\t\tamounts[i]\n      MUL \t\t\tamounts[i]\n      PUSH 20\t\t\tamounts[i]\n      ADD \t\t\tamounts[i]\n      ADD \t\t\tamounts[i]\n      MLOAD \t\t\tamounts[i]\n      PUSH 40\t\t\tvault.addBalance(_tokenIDs[i],...\n      MLOAD \t\t\tvault.addBalance(_tokenIDs[i],...\n      DUP4 \t\t\tvault.addBalance(_tokenIDs[i],...\n      PUSH FFFFFFFF\t\t\tvault.addBalance(_tokenIDs[i],...\n      AND \t\t\tvault.addBalance(_tokenIDs[i],...\n      PUSH E0\t\t\tvault.addBalance(_tokenIDs[i],...\n      SHL \t\t\tvault.addBalance(_tokenIDs[i],...\n      DUP2 \t\t\tvault.addBalance(_tokenIDs[i],...\n      MSTORE \t\t\tvault.addBalance(_tokenIDs[i],...\n      PUSH 4\t\t\tvault.addBalance(_tokenIDs[i],...\n      ADD \t\t\tvault.addBalance(_tokenIDs[i],...\n      PUSH [tag] 112\t\t\tvault.addBalance(_tokenIDs[i],...\n      SWAP3 \t\t\tvault.addBalance(_tokenIDs[i],...\n      SWAP2 \t\t\tvault.addBalance(_tokenIDs[i],...\n      SWAP1 \t\t\tvault.addBalance(_tokenIDs[i],...\n      PUSH [tag] 113\t\t\tvault.addBalance(_tokenIDs[i],...\n      JUMP \t\t\tvault.addBalance(_tokenIDs[i],...\n    tag 112\t\t\tvault.addBalance(_tokenIDs[i],...\n      JUMPDEST \t\t\tvault.addBalance(_tokenIDs[i],...\n      PUSH 0\t\t\tvault.addBalance(_tokenIDs[i],...\n      PUSH 40\t\t\tvault.addBalance(_tokenIDs[i],...\n      MLOAD \t\t\tvault.addBalance(_tokenIDs[i],...\n      DUP1 \t\t\tvault.addBalance(_tokenIDs[i],...\n      DUP4 \t\t\tvault.addBalance(_tokenIDs[i],...\n      SUB \t\t\tvault.addBalance(_tokenIDs[i],...\n      DUP2 \t\t\tvault.addBalance(_tokenIDs[i],...\n      PUSH 0\t\t\tvault.addBalance(_tokenIDs[i],...\n      DUP8 \t\t\tvault.addBalance(_tokenIDs[i],...\n      DUP1 \t\t\tvault.addBalance(_tokenIDs[i],...\n      EXTCODESIZE \t\t\tvault.addBalance(_tokenIDs[i],...\n      ISZERO \t\t\tvault.addBalance(_tokenIDs[i],...\n      DUP1 \t\t\tvault.addBalance(_tokenIDs[i],...\n      ISZERO \t\t\tvault.addBalance(_tokenIDs[i],...\n      PUSH [tag] 114\t\t\tvault.addBalance(_tokenIDs[i],...\n      JUMPI \t\t\tvault.addBalance(_tokenIDs[i],...\n      PUSH 0\t\t\tvault.addBalance(_tokenIDs[i],...\n      DUP1 \t\t\tvault.addBalance(_tokenIDs[i],...\n      REVERT \t\t\tvault.addBalance(_tokenIDs[i],...\n    tag 114\t\t\tvault.addBalance(_tokenIDs[i],...\n      JUMPDEST \t\t\tvault.addBalance(_tokenIDs[i],...\n      POP \t\t\tvault.addBalance(_tokenIDs[i],...\n      GAS \t\t\tvault.addBalance(_tokenIDs[i],...\n      CALL \t\t\tvault.addBalance(_tokenIDs[i],...\n      ISZERO \t\t\tvault.addBalance(_tokenIDs[i],...\n      DUP1 \t\t\tvault.addBalance(_tokenIDs[i],...\n      ISZERO \t\t\tvault.addBalance(_tokenIDs[i],...\n      PUSH [tag] 116\t\t\tvault.addBalance(_tokenIDs[i],...\n      JUMPI \t\t\tvault.addBalance(_tokenIDs[i],...\n      RETURNDATASIZE \t\t\tvault.addBalance(_tokenIDs[i],...\n      PUSH 0\t\t\tvault.addBalance(_tokenIDs[i],...\n      DUP1 \t\t\tvault.addBalance(_tokenIDs[i],...\n      RETURNDATACOPY \t\t\tvault.addBalance(_tokenIDs[i],...\n      RETURNDATASIZE \t\t\tvault.addBalance(_tokenIDs[i],...\n      PUSH 0\t\t\tvault.addBalance(_tokenIDs[i],...\n      REVERT \t\t\tvault.addBalance(_tokenIDs[i],...\n    tag 116\t\t\tvault.addBalance(_tokenIDs[i],...\n      JUMPDEST \t\t\tvault.addBalance(_tokenIDs[i],...\n      POP \t\t\tvault.addBalance(_tokenIDs[i],...\n      POP \t\t\tvault.addBalance(_tokenIDs[i],...\n      POP \t\t\tvault.addBalance(_tokenIDs[i],...\n      POP \t\t\tvault.addBalance(_tokenIDs[i],...\n      DUP1 \t\t\ti++\n      DUP1 \t\t\ti++\n      PUSH [tag] 117\t\t\ti++\n      SWAP1 \t\t\ti++\n      PUSH [tag] 101\t\t\ti++\n      JUMP \t\t\ti++\n    tag 117\t\t\ti++\n      JUMPDEST \t\t\ti++\n      SWAP2 \t\t\ti++\n      POP \t\t\ti++\n      POP \t\t\ti++\n      PUSH [tag] 105\t\t\tfor (uint256 i = 0; i < _token...\n      JUMP \t\t\tfor (uint256 i = 0; i < _token...\n    tag 106\t\t\tfor (uint256 i = 0; i < _token...\n      JUMPDEST \t\t\tfor (uint256 i = 0; i < _token...\n      POP \t\t\tfor (uint256 i = 0; i < _token...\n      DUP3 \t\t\tvaultContract_address\n      PUSH FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF\t\t\tvaultContract_address.transfer\n      AND \t\t\tvaultContract_address.transfer\n      PUSH 8FC\t\t\tvaultContract_address.transfer...\n      DUP4 \t\t\ttotalAmount\n      SWAP1 \t\t\tvaultContract_address.transfer...\n      DUP2 \t\t\tvaultContract_address.transfer...\n      ISZERO \t\t\tvaultContract_address.transfer...\n      MUL \t\t\tvaultContract_address.transfer...\n      SWAP1 \t\t\tvaultContract_address.transfer...\n      PUSH 40\t\t\tvaultContract_address.transfer...\n      MLOAD \t\t\tvaultContract_address.transfer...\n      PUSH 0\t\t\tvaultContract_address.transfer...\n      PUSH 40\t\t\tvaultContract_address.transfer...\n      MLOAD \t\t\tvaultContract_address.transfer...\n      DUP1 \t\t\tvaultContract_address.transfer...\n      DUP4 \t\t\tvaultContract_address.transfer...\n      SUB \t\t\tvaultContract_address.transfer...\n      DUP2 \t\t\tvaultContract_address.transfer...\n      DUP6 \t\t\tvaultContract_address.transfer...\n      DUP9 \t\t\tvaultContract_address.transfer...\n      DUP9 \t\t\tvaultContract_address.transfer...\n      CALL \t\t\tvaultContract_address.transfer...\n      SWAP4 \t\t\tvaultContract_address.transfer...\n      POP \t\t\tvaultContract_address.transfer...\n      POP \t\t\tvaultContract_address.transfer...\n      POP \t\t\tvaultContract_address.transfer...\n      POP \t\t\tvaultContract_address.transfer...\n      ISZERO \t\t\tvaultContract_address.transfer...\n      DUP1 \t\t\tvaultContract_address.transfer...\n      ISZERO \t\t\tvaultContract_address.transfer...\n      PUSH [tag] 119\t\t\tvaultContract_address.transfer...\n      JUMPI \t\t\tvaultContract_address.transfer...\n      RETURNDATASIZE \t\t\tvaultContract_address.transfer...\n      PUSH 0\t\t\tvaultContract_address.transfer...\n      DUP1 \t\t\tvaultContract_address.transfer...\n      RETURNDATACOPY \t\t\tvaultContract_address.transfer...\n      RETURNDATASIZE \t\t\tvaultContract_address.transfer...\n      PUSH 0\t\t\tvaultContract_address.transfer...\n      REVERT \t\t\tvaultContract_address.transfer...\n    tag 119\t\t\tvaultContract_address.transfer...\n      JUMPDEST \t\t\tvaultContract_address.transfer...\n      POP \t\t\tvaultContract_address.transfer...\n      POP \t\t\t{\\r\\n        require(vaultAddr...\n      POP \t\t\t{\\r\\n        require(vaultAddr...\n      POP \t\t\t{\\r\\n        require(vaultAddr...\n      POP \t\t\t{\\r\\n        require(vaultAddr...\n      POP \t\t\tfunction depositFunds(address ...\n      POP \t\t\tfunction depositFunds(address ...\n      POP \t\t\tfunction depositFunds(address ...\n      JUMP \t\t\tfunction depositFunds(address ...\n    tag 45\t\t\tfunction withdrawFunds(address...\n      JUMPDEST \t\t\tfunction withdrawFunds(address...\n      PUSH 0\t\t\t0\n      PUSH FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF\t\t\tvaultAddress[NFTContractAddres...\n      AND \t\t\tvaultAddress[NFTContractAddres...\n      PUSH 1\t\t\tvaultAddress\n      PUSH 0\t\t\tvaultAddress[NFTContractAddres...\n      DUP5 \t\t\tNFTContractAddress\n      PUSH FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF\t\t\tvaultAddress[NFTContractAddres...\n      AND \t\t\tvaultAddress[NFTContractAddres...\n      PUSH FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF\t\t\tvaultAddress[NFTContractAddres...\n      AND \t\t\tvaultAddress[NFTContractAddres...\n      DUP2 \t\t\tvaultAddress[NFTContractAddres...\n      MSTORE \t\t\tvaultAddress[NFTContractAddres...\n      PUSH 20\t\t\tvaultAddress[NFTContractAddres...\n      ADD \t\t\tvaultAddress[NFTContractAddres...\n      SWAP1 \t\t\tvaultAddress[NFTContractAddres...\n      DUP2 \t\t\tvaultAddress[NFTContractAddres...\n      MSTORE \t\t\tvaultAddress[NFTContractAddres...\n      PUSH 20\t\t\tvaultAddress[NFTContractAddres...\n      ADD \t\t\tvaultAddress[NFTContractAddres...\n      PUSH 0\t\t\tvaultAddress[NFTContractAddres...\n      KECCAK256 \t\t\tvaultAddress[NFTContractAddres...\n      PUSH 0\t\t\tvaultAddress[NFTContractAddres...\n      SWAP1 \t\t\tvaultAddress[NFTContractAddres...\n      SLOAD \t\t\tvaultAddress[NFTContractAddres...\n      SWAP1 \t\t\tvaultAddress[NFTContractAddres...\n      PUSH 100\t\t\tvaultAddress[NFTContractAddres...\n      EXP \t\t\tvaultAddress[NFTContractAddres...\n      SWAP1 \t\t\tvaultAddress[NFTContractAddres...\n      DIV \t\t\tvaultAddress[NFTContractAddres...\n      PUSH FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF\t\t\tvaultAddress[NFTContractAddres...\n      AND \t\t\tvaultAddress[NFTContractAddres...\n      PUSH FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF\t\t\tvaultAddress[NFTContractAddres...\n      AND \t\t\tvaultAddress[NFTContractAddres...\n      SUB \t\t\tvaultAddress[NFTContractAddres...\n      PUSH [tag] 121\t\t\trequire(vaultAddress[NFTContra...\n      JUMPI \t\t\trequire(vaultAddress[NFTContra...\n      PUSH 40\t\t\trequire(vaultAddress[NFTContra...\n      MLOAD \t\t\trequire(vaultAddress[NFTContra...\n      PUSH 8C379A000000000000000000000000000000000000000000000000000000000\t\t\trequire(vaultAddress[NFTContra...\n      DUP2 \t\t\trequire(vaultAddress[NFTContra...\n      MSTORE \t\t\trequire(vaultAddress[NFTContra...\n      PUSH 4\t\t\trequire(vaultAddress[NFTContra...\n      ADD \t\t\trequire(vaultAddress[NFTContra...\n      PUSH [tag] 122\t\t\trequire(vaultAddress[NFTContra...\n      SWAP1 \t\t\trequire(vaultAddress[NFTContra...\n      PUSH [tag] 80\t\t\trequire(vaultAddress[NFTContra...\n      JUMP \t\t\trequire(vaultAddress[NFTContra...\n    tag 122\t\t\trequire(vaultAddress[NFTContra...\n      JUMPDEST \t\t\trequire(vaultAddress[NFTContra...\n      PUSH 40\t\t\trequire(vaultAddress[NFTContra...\n      MLOAD \t\t\trequire(vaultAddress[NFTContra...\n      DUP1 \t\t\trequire(vaultAddress[NFTContra...\n      SWAP2 \t\t\trequire(vaultAddress[NFTContra...\n      SUB \t\t\trequire(vaultAddress[NFTContra...\n      SWAP1 \t\t\trequire(vaultAddress[NFTContra...\n      REVERT \t\t\trequire(vaultAddress[NFTContra...\n    tag 121\t\t\trequire(vaultAddress[NFTContra...\n      JUMPDEST \t\t\trequire(vaultAddress[NFTContra...\n      PUSH 0\t\t\taddress payable vaultContract_...\n      PUSH [tag] 123\t\t\tgetContractAddress(NFTContract...\n      DUP4 \t\t\tNFTContractAddress\n      PUSH [tag] 36\t\t\tgetContractAddress\n      JUMP \t\t\tgetContractAddress(NFTContract...\n    tag 123\t\t\tgetContractAddress(NFTContract...\n      JUMPDEST \t\t\tgetContractAddress(NFTContract...\n      SWAP1 \t\t\taddress payable vaultContract_...\n      POP \t\t\taddress payable vaultContract_...\n      PUSH 0\t\t\tVault vault\n      DUP2 \t\t\tvaultContract_address\n      SWAP1 \t\t\tVault vault = Vault(vaultContr...\n      POP \t\t\tVault vault = Vault(vaultContr...\n      CALLER \t\t\tmsg.sender\n      PUSH FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF\t\t\tvault.admin() == msg.sender\n      AND \t\t\tvault.admin() == msg.sender\n      DUP2 \t\t\tvault\n      PUSH FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF\t\t\tvault.admin\n      AND \t\t\tvault.admin\n      PUSH F851A440\t\t\tvault.admin\n      PUSH 40\t\t\tvault.admin()\n      MLOAD \t\t\tvault.admin()\n      DUP2 \t\t\tvault.admin()\n      PUSH FFFFFFFF\t\t\tvault.admin()\n      AND \t\t\tvault.admin()\n      PUSH E0\t\t\tvault.admin()\n      SHL \t\t\tvault.admin()\n      DUP2 \t\t\tvault.admin()\n      MSTORE \t\t\tvault.admin()\n      PUSH 4\t\t\tvault.admin()\n      ADD \t\t\tvault.admin()\n      PUSH 20\t\t\tvault.admin()\n      PUSH 40\t\t\tvault.admin()\n      MLOAD \t\t\tvault.admin()\n      DUP1 \t\t\tvault.admin()\n      DUP4 \t\t\tvault.admin()\n      SUB \t\t\tvault.admin()\n      DUP2 \t\t\tvault.admin()\n      DUP7 \t\t\tvault.admin()\n      GAS \t\t\tvault.admin()\n      STATICCALL \t\t\tvault.admin()\n      ISZERO \t\t\tvault.admin()\n      DUP1 \t\t\tvault.admin()\n      ISZERO \t\t\tvault.admin()\n      PUSH [tag] 125\t\t\tvault.admin()\n      JUMPI \t\t\tvault.admin()\n      RETURNDATASIZE \t\t\tvault.admin()\n      PUSH 0\t\t\tvault.admin()\n      DUP1 \t\t\tvault.admin()\n      RETURNDATACOPY \t\t\tvault.admin()\n      RETURNDATASIZE \t\t\tvault.admin()\n      PUSH 0\t\t\tvault.admin()\n      REVERT \t\t\tvault.admin()\n    tag 125\t\t\tvault.admin()\n      JUMPDEST \t\t\tvault.admin()\n      POP \t\t\tvault.admin()\n      POP \t\t\tvault.admin()\n      POP \t\t\tvault.admin()\n      POP \t\t\tvault.admin()\n      PUSH 40\t\t\tvault.admin()\n      MLOAD \t\t\tvault.admin()\n      RETURNDATASIZE \t\t\tvault.admin()\n      PUSH 1F\t\t\tvault.admin()\n      NOT \t\t\tvault.admin()\n      PUSH 1F\t\t\tvault.admin()\n      DUP3 \t\t\tvault.admin()\n      ADD \t\t\tvault.admin()\n      AND \t\t\tvault.admin()\n      DUP3 \t\t\tvault.admin()\n      ADD \t\t\tvault.admin()\n      DUP1 \t\t\tvault.admin()\n      PUSH 40\t\t\tvault.admin()\n      MSTORE \t\t\tvault.admin()\n      POP \t\t\tvault.admin()\n      DUP2 \t\t\tvault.admin()\n      ADD \t\t\tvault.admin()\n      SWAP1 \t\t\tvault.admin()\n      PUSH [tag] 126\t\t\tvault.admin()\n      SWAP2 \t\t\tvault.admin()\n      SWAP1 \t\t\tvault.admin()\n      PUSH [tag] 88\t\t\tvault.admin()\n      JUMP \t\t\tvault.admin()\n    tag 126\t\t\tvault.admin()\n      JUMPDEST \t\t\tvault.admin()\n      PUSH FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF\t\t\tvault.admin() == msg.sender\n      AND \t\t\tvault.admin() == msg.sender\n      EQ \t\t\tvault.admin() == msg.sender\n      PUSH [tag] 127\t\t\trequire(vault.admin() == msg.s...\n      JUMPI \t\t\trequire(vault.admin() == msg.s...\n      PUSH 40\t\t\trequire(vault.admin() == msg.s...\n      MLOAD \t\t\trequire(vault.admin() == msg.s...\n      PUSH 8C379A000000000000000000000000000000000000000000000000000000000\t\t\trequire(vault.admin() == msg.s...\n      DUP2 \t\t\trequire(vault.admin() == msg.s...\n      MSTORE \t\t\trequire(vault.admin() == msg.s...\n      PUSH 4\t\t\trequire(vault.admin() == msg.s...\n      ADD \t\t\trequire(vault.admin() == msg.s...\n      PUSH [tag] 128\t\t\trequire(vault.admin() == msg.s...\n      SWAP1 \t\t\trequire(vault.admin() == msg.s...\n      PUSH [tag] 129\t\t\trequire(vault.admin() == msg.s...\n      JUMP \t\t\trequire(vault.admin() == msg.s...\n    tag 128\t\t\trequire(vault.admin() == msg.s...\n      JUMPDEST \t\t\trequire(vault.admin() == msg.s...\n      PUSH 40\t\t\trequire(vault.admin() == msg.s...\n      MLOAD \t\t\trequire(vault.admin() == msg.s...\n      DUP1 \t\t\trequire(vault.admin() == msg.s...\n      SWAP2 \t\t\trequire(vault.admin() == msg.s...\n      SUB \t\t\trequire(vault.admin() == msg.s...\n      SWAP1 \t\t\trequire(vault.admin() == msg.s...\n      REVERT \t\t\trequire(vault.admin() == msg.s...\n    tag 127\t\t\trequire(vault.admin() == msg.s...\n      JUMPDEST \t\t\trequire(vault.admin() == msg.s...\n      DUP1 \t\t\tvault\n      PUSH FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF\t\t\tvault.withdraw\n      AND \t\t\tvault.withdraw\n      PUSH 8293744B\t\t\tvault.withdraw\n      CALLER \t\t\tmsg.sender\n      DUP6 \t\t\ttokenIDs\n      PUSH 40\t\t\tvault.withdraw(payable(msg.sen...\n      MLOAD \t\t\tvault.withdraw(payable(msg.sen...\n      DUP4 \t\t\tvault.withdraw(payable(msg.sen...\n      PUSH FFFFFFFF\t\t\tvault.withdraw(payable(msg.sen...\n      AND \t\t\tvault.withdraw(payable(msg.sen...\n      PUSH E0\t\t\tvault.withdraw(payable(msg.sen...\n      SHL \t\t\tvault.withdraw(payable(msg.sen...\n      DUP2 \t\t\tvault.withdraw(payable(msg.sen...\n      MSTORE \t\t\tvault.withdraw(payable(msg.sen...\n      PUSH 4\t\t\tvault.withdraw(payable(msg.sen...\n      ADD \t\t\tvault.withdraw(payable(msg.sen...\n      PUSH [tag] 130\t\t\tvault.withdraw(payable(msg.sen...\n      SWAP3 \t\t\tvault.withdraw(payable(msg.sen...\n      SWAP2 \t\t\tvault.withdraw(payable(msg.sen...\n      SWAP1 \t\t\tvault.withdraw(payable(msg.sen...\n      PUSH [tag] 131\t\t\tvault.withdraw(payable(msg.sen...\n      JUMP \t\t\tvault.withdraw(payable(msg.sen...\n    tag 130\t\t\tvault.withdraw(payable(msg.sen...\n      JUMPDEST \t\t\tvault.withdraw(payable(msg.sen...\n      PUSH 0\t\t\tvault.withdraw(payable(msg.sen...\n      PUSH 40\t\t\tvault.withdraw(payable(msg.sen...\n      MLOAD \t\t\tvault.withdraw(payable(msg.sen...\n      DUP1 \t\t\tvault.withdraw(payable(msg.sen...\n      DUP4 \t\t\tvault.withdraw(payable(msg.sen...\n      SUB \t\t\tvault.withdraw(payable(msg.sen...\n      DUP2 \t\t\tvault.withdraw(payable(msg.sen...\n      PUSH 0\t\t\tvault.withdraw(payable(msg.sen...\n      DUP8 \t\t\tvault.withdraw(payable(msg.sen...\n      DUP1 \t\t\tvault.withdraw(payable(msg.sen...\n      EXTCODESIZE \t\t\tvault.withdraw(payable(msg.sen...\n      ISZERO \t\t\tvault.withdraw(payable(msg.sen...\n      DUP1 \t\t\tvault.withdraw(payable(msg.sen...\n      ISZERO \t\t\tvault.withdraw(payable(msg.sen...\n      PUSH [tag] 132\t\t\tvault.withdraw(payable(msg.sen...\n      JUMPI \t\t\tvault.withdraw(payable(msg.sen...\n      PUSH 0\t\t\tvault.withdraw(payable(msg.sen...\n      DUP1 \t\t\tvault.withdraw(payable(msg.sen...\n      REVERT \t\t\tvault.withdraw(payable(msg.sen...\n    tag 132\t\t\tvault.withdraw(payable(msg.sen...\n      JUMPDEST \t\t\tvault.withdraw(payable(msg.sen...\n      POP \t\t\tvault.withdraw(payable(msg.sen...\n      GAS \t\t\tvault.withdraw(payable(msg.sen...\n      CALL \t\t\tvault.withdraw(payable(msg.sen...\n      ISZERO \t\t\tvault.withdraw(payable(msg.sen...\n      DUP1 \t\t\tvault.withdraw(payable(msg.sen...\n      ISZERO \t\t\tvault.withdraw(payable(msg.sen...\n      PUSH [tag] 134\t\t\tvault.withdraw(payable(msg.sen...\n      JUMPI \t\t\tvault.withdraw(payable(msg.sen...\n      RETURNDATASIZE \t\t\tvault.withdraw(payable(msg.sen...\n      PUSH 0\t\t\tvault.withdraw(payable(msg.sen...\n      DUP1 \t\t\tvault.withdraw(payable(msg.sen...\n      RETURNDATACOPY \t\t\tvault.withdraw(payable(msg.sen...\n      RETURNDATASIZE \t\t\tvault.withdraw(payable(msg.sen...\n      PUSH 0\t\t\tvault.withdraw(payable(msg.sen...\n      REVERT \t\t\tvault.withdraw(payable(msg.sen...\n    tag 134\t\t\tvault.withdraw(payable(msg.sen...\n      JUMPDEST \t\t\tvault.withdraw(payable(msg.sen...\n      POP \t\t\tvault.withdraw(payable(msg.sen...\n      POP \t\t\tvault.withdraw(payable(msg.sen...\n      POP \t\t\tvault.withdraw(payable(msg.sen...\n      POP \t\t\tvault.withdraw(payable(msg.sen...\n      POP \t\t\t{\\r\\n        require(vaultAddr...\n      POP \t\t\t{\\r\\n        require(vaultAddr...\n      POP \t\t\tfunction withdrawFunds(address...\n      POP \t\t\tfunction withdrawFunds(address...\n      JUMP \t\t\tfunction withdrawFunds(address...\n    tag 48\t\t\tfunction claim(address NFTCont...\n      JUMPDEST \t\t\tfunction claim(address NFTCont...\n      PUSH 0\t\t\t0\n      PUSH FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF\t\t\tvaultAddress[NFTContractAddres...\n      AND \t\t\tvaultAddress[NFTContractAddres...\n      PUSH 1\t\t\tvaultAddress\n      PUSH 0\t\t\tvaultAddress[NFTContractAddres...\n      DUP5 \t\t\tNFTContractAddress\n      PUSH FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF\t\t\tvaultAddress[NFTContractAddres...\n      AND \t\t\tvaultAddress[NFTContractAddres...\n      PUSH FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF\t\t\tvaultAddress[NFTContractAddres...\n      AND \t\t\tvaultAddress[NFTContractAddres...\n      DUP2 \t\t\tvaultAddress[NFTContractAddres...\n      MSTORE \t\t\tvaultAddress[NFTContractAddres...\n      PUSH 20\t\t\tvaultAddress[NFTContractAddres...\n      ADD \t\t\tvaultAddress[NFTContractAddres...\n      SWAP1 \t\t\tvaultAddress[NFTContractAddres...\n      DUP2 \t\t\tvaultAddress[NFTContractAddres...\n      MSTORE \t\t\tvaultAddress[NFTContractAddres...\n      PUSH 20\t\t\tvaultAddress[NFTContractAddres...\n      ADD \t\t\tvaultAddress[NFTContractAddres...\n      PUSH 0\t\t\tvaultAddress[NFTContractAddres...\n      KECCAK256 \t\t\tvaultAddress[NFTContractAddres...\n      PUSH 0\t\t\tvaultAddress[NFTContractAddres...\n      SWAP1 \t\t\tvaultAddress[NFTContractAddres...\n      SLOAD \t\t\tvaultAddress[NFTContractAddres...\n      SWAP1 \t\t\tvaultAddress[NFTContractAddres...\n      PUSH 100\t\t\tvaultAddress[NFTContractAddres...\n      EXP \t\t\tvaultAddress[NFTContractAddres...\n      SWAP1 \t\t\tvaultAddress[NFTContractAddres...\n      DIV \t\t\tvaultAddress[NFTContractAddres...\n      PUSH FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF\t\t\tvaultAddress[NFTContractAddres...\n      AND \t\t\tvaultAddress[NFTContractAddres...\n      PUSH FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF\t\t\tvaultAddress[NFTContractAddres...\n      AND \t\t\tvaultAddress[NFTContractAddres...\n      SUB \t\t\tvaultAddress[NFTContractAddres...\n      PUSH [tag] 136\t\t\trequire(vaultAddress[NFTContra...\n      JUMPI \t\t\trequire(vaultAddress[NFTContra...\n      PUSH 40\t\t\trequire(vaultAddress[NFTContra...\n      MLOAD \t\t\trequire(vaultAddress[NFTContra...\n      PUSH 8C379A000000000000000000000000000000000000000000000000000000000\t\t\trequire(vaultAddress[NFTContra...\n      DUP2 \t\t\trequire(vaultAddress[NFTContra...\n      MSTORE \t\t\trequire(vaultAddress[NFTContra...\n      PUSH 4\t\t\trequire(vaultAddress[NFTContra...\n      ADD \t\t\trequire(vaultAddress[NFTContra...\n      PUSH [tag] 137\t\t\trequire(vaultAddress[NFTContra...\n      SWAP1 \t\t\trequire(vaultAddress[NFTContra...\n      PUSH [tag] 80\t\t\trequire(vaultAddress[NFTContra...\n      JUMP \t\t\trequire(vaultAddress[NFTContra...\n    tag 137\t\t\trequire(vaultAddress[NFTContra...\n      JUMPDEST \t\t\trequire(vaultAddress[NFTContra...\n      PUSH 40\t\t\trequire(vaultAddress[NFTContra...\n      MLOAD \t\t\trequire(vaultAddress[NFTContra...\n      DUP1 \t\t\trequire(vaultAddress[NFTContra...\n      SWAP2 \t\t\trequire(vaultAddress[NFTContra...\n      SUB \t\t\trequire(vaultAddress[NFTContra...\n      SWAP1 \t\t\trequire(vaultAddress[NFTContra...\n      REVERT \t\t\trequire(vaultAddress[NFTContra...\n    tag 136\t\t\trequire(vaultAddress[NFTContra...\n      JUMPDEST \t\t\trequire(vaultAddress[NFTContra...\n      PUSH 0\t\t\tERC721 token\n      DUP3 \t\t\tNFTContractAddress\n      SWAP1 \t\t\tERC721 token = ERC721(NFTContr...\n      POP \t\t\tERC721 token = ERC721(NFTContr...\n      PUSH 0\t\t\tERC721Burnable asset\n      DUP4 \t\t\tNFTContractAddress\n      SWAP1 \t\t\tERC721Burnable asset = ERC721B...\n      POP \t\t\tERC721Burnable asset = ERC721B...\n      PUSH 0\t\t\taddress payable vaultContract_...\n      PUSH [tag] 138\t\t\tgetContractAddress(NFTContract...\n      DUP6 \t\t\tNFTContractAddress\n      PUSH [tag] 36\t\t\tgetContractAddress\n      JUMP \t\t\tgetContractAddress(NFTContract...\n    tag 138\t\t\tgetContractAddress(NFTContract...\n      JUMPDEST \t\t\tgetContractAddress(NFTContract...\n      SWAP1 \t\t\taddress payable vaultContract_...\n      POP \t\t\taddress payable vaultContract_...\n      PUSH 0\t\t\taddress tokenOwner\n      DUP4 \t\t\ttoken\n      PUSH FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF\t\t\ttoken.ownerOf\n      AND \t\t\ttoken.ownerOf\n      PUSH 6352211E\t\t\ttoken.ownerOf\n      DUP7 \t\t\t_tokenID\n      PUSH 40\t\t\ttoken.ownerOf(_tokenID)\n      MLOAD \t\t\ttoken.ownerOf(_tokenID)\n      DUP3 \t\t\ttoken.ownerOf(_tokenID)\n      PUSH FFFFFFFF\t\t\ttoken.ownerOf(_tokenID)\n      AND \t\t\ttoken.ownerOf(_tokenID)\n      PUSH E0\t\t\ttoken.ownerOf(_tokenID)\n      SHL \t\t\ttoken.ownerOf(_tokenID)\n      DUP2 \t\t\ttoken.ownerOf(_tokenID)\n      MSTORE \t\t\ttoken.ownerOf(_tokenID)\n      PUSH 4\t\t\ttoken.ownerOf(_tokenID)\n      ADD \t\t\ttoken.ownerOf(_tokenID)\n      PUSH [tag] 139\t\t\ttoken.ownerOf(_tokenID)\n      SWAP2 \t\t\ttoken.ownerOf(_tokenID)\n      SWAP1 \t\t\ttoken.ownerOf(_tokenID)\n      PUSH [tag] 140\t\t\ttoken.ownerOf(_tokenID)\n      JUMP \t\t\ttoken.ownerOf(_tokenID)\n    tag 139\t\t\ttoken.ownerOf(_tokenID)\n      JUMPDEST \t\t\ttoken.ownerOf(_tokenID)\n      PUSH 20\t\t\ttoken.ownerOf(_tokenID)\n      PUSH 40\t\t\ttoken.ownerOf(_tokenID)\n      MLOAD \t\t\ttoken.ownerOf(_tokenID)\n      DUP1 \t\t\ttoken.ownerOf(_tokenID)\n      DUP4 \t\t\ttoken.ownerOf(_tokenID)\n      SUB \t\t\ttoken.ownerOf(_tokenID)\n      DUP2 \t\t\ttoken.ownerOf(_tokenID)\n      DUP7 \t\t\ttoken.ownerOf(_tokenID)\n      GAS \t\t\ttoken.ownerOf(_tokenID)\n      STATICCALL \t\t\ttoken.ownerOf(_tokenID)\n      ISZERO \t\t\ttoken.ownerOf(_tokenID)\n      DUP1 \t\t\ttoken.ownerOf(_tokenID)\n      ISZERO \t\t\ttoken.ownerOf(_tokenID)\n      PUSH [tag] 142\t\t\ttoken.ownerOf(_tokenID)\n      JUMPI \t\t\ttoken.ownerOf(_tokenID)\n      RETURNDATASIZE \t\t\ttoken.ownerOf(_tokenID)\n      PUSH 0\t\t\ttoken.ownerOf(_tokenID)\n      DUP1 \t\t\ttoken.ownerOf(_tokenID)\n      RETURNDATACOPY \t\t\ttoken.ownerOf(_tokenID)\n      RETURNDATASIZE \t\t\ttoken.ownerOf(_tokenID)\n      PUSH 0\t\t\ttoken.ownerOf(_tokenID)\n      REVERT \t\t\ttoken.ownerOf(_tokenID)\n    tag 142\t\t\ttoken.ownerOf(_tokenID)\n      JUMPDEST \t\t\ttoken.ownerOf(_tokenID)\n      POP \t\t\ttoken.ownerOf(_tokenID)\n      POP \t\t\ttoken.ownerOf(_tokenID)\n      POP \t\t\ttoken.ownerOf(_tokenID)\n      POP \t\t\ttoken.ownerOf(_tokenID)\n      PUSH 40\t\t\ttoken.ownerOf(_tokenID)\n      MLOAD \t\t\ttoken.ownerOf(_tokenID)\n      RETURNDATASIZE \t\t\ttoken.ownerOf(_tokenID)\n      PUSH 1F\t\t\ttoken.ownerOf(_tokenID)\n      NOT \t\t\ttoken.ownerOf(_tokenID)\n      PUSH 1F\t\t\ttoken.ownerOf(_tokenID)\n      DUP3 \t\t\ttoken.ownerOf(_tokenID)\n      ADD \t\t\ttoken.ownerOf(_tokenID)\n      AND \t\t\ttoken.ownerOf(_tokenID)\n      DUP3 \t\t\ttoken.ownerOf(_tokenID)\n      ADD \t\t\ttoken.ownerOf(_tokenID)\n      DUP1 \t\t\ttoken.ownerOf(_tokenID)\n      PUSH 40\t\t\ttoken.ownerOf(_tokenID)\n      MSTORE \t\t\ttoken.ownerOf(_tokenID)\n      POP \t\t\ttoken.ownerOf(_tokenID)\n      DUP2 \t\t\ttoken.ownerOf(_tokenID)\n      ADD \t\t\ttoken.ownerOf(_tokenID)\n      SWAP1 \t\t\ttoken.ownerOf(_tokenID)\n      PUSH [tag] 143\t\t\ttoken.ownerOf(_tokenID)\n      SWAP2 \t\t\ttoken.ownerOf(_tokenID)\n      SWAP1 \t\t\ttoken.ownerOf(_tokenID)\n      PUSH [tag] 88\t\t\ttoken.ownerOf(_tokenID)\n      JUMP \t\t\ttoken.ownerOf(_tokenID)\n    tag 143\t\t\ttoken.ownerOf(_tokenID)\n      JUMPDEST \t\t\ttoken.ownerOf(_tokenID)\n      SWAP1 \t\t\taddress tokenOwner = token.own...\n      POP \t\t\taddress tokenOwner = token.own...\n      CALLER \t\t\tmsg.sender\n      PUSH FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF\t\t\ttokenOwner == msg.sender\n      AND \t\t\ttokenOwner == msg.sender\n      DUP2 \t\t\ttokenOwner\n      PUSH FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF\t\t\ttokenOwner == msg.sender\n      AND \t\t\ttokenOwner == msg.sender\n      EQ \t\t\ttokenOwner == msg.sender\n      PUSH [tag] 144\t\t\trequire(tokenOwner == msg.send...\n      JUMPI \t\t\trequire(tokenOwner == msg.send...\n      PUSH 40\t\t\trequire(tokenOwner == msg.send...\n      MLOAD \t\t\trequire(tokenOwner == msg.send...\n      PUSH 8C379A000000000000000000000000000000000000000000000000000000000\t\t\trequire(tokenOwner == msg.send...\n      DUP2 \t\t\trequire(tokenOwner == msg.send...\n      MSTORE \t\t\trequire(tokenOwner == msg.send...\n      PUSH 4\t\t\trequire(tokenOwner == msg.send...\n      ADD \t\t\trequire(tokenOwner == msg.send...\n      PUSH [tag] 145\t\t\trequire(tokenOwner == msg.send...\n      SWAP1 \t\t\trequire(tokenOwner == msg.send...\n      PUSH [tag] 146\t\t\trequire(tokenOwner == msg.send...\n      JUMP \t\t\trequire(tokenOwner == msg.send...\n    tag 145\t\t\trequire(tokenOwner == msg.send...\n      JUMPDEST \t\t\trequire(tokenOwner == msg.send...\n      PUSH 40\t\t\trequire(tokenOwner == msg.send...\n      MLOAD \t\t\trequire(tokenOwner == msg.send...\n      DUP1 \t\t\trequire(tokenOwner == msg.send...\n      SWAP2 \t\t\trequire(tokenOwner == msg.send...\n      SUB \t\t\trequire(tokenOwner == msg.send...\n      SWAP1 \t\t\trequire(tokenOwner == msg.send...\n      REVERT \t\t\trequire(tokenOwner == msg.send...\n    tag 144\t\t\trequire(tokenOwner == msg.send...\n      JUMPDEST \t\t\trequire(tokenOwner == msg.send...\n      ADDRESS \t\t\tthis\n      PUSH FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF\t\t\ttoken.getApproved(_tokenID) ==...\n      AND \t\t\ttoken.getApproved(_tokenID) ==...\n      DUP5 \t\t\ttoken\n      PUSH FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF\t\t\ttoken.getApproved\n      AND \t\t\ttoken.getApproved\n      PUSH 81812FC\t\t\ttoken.getApproved\n      DUP8 \t\t\t_tokenID\n      PUSH 40\t\t\ttoken.getApproved(_tokenID)\n      MLOAD \t\t\ttoken.getApproved(_tokenID)\n      DUP3 \t\t\ttoken.getApproved(_tokenID)\n      PUSH FFFFFFFF\t\t\ttoken.getApproved(_tokenID)\n      AND \t\t\ttoken.getApproved(_tokenID)\n      PUSH E0\t\t\ttoken.getApproved(_tokenID)\n      SHL \t\t\ttoken.getApproved(_tokenID)\n      DUP2 \t\t\ttoken.getApproved(_tokenID)\n      MSTORE \t\t\ttoken.getApproved(_tokenID)\n      PUSH 4\t\t\ttoken.getApproved(_tokenID)\n      ADD \t\t\ttoken.getApproved(_tokenID)\n      PUSH [tag] 147\t\t\ttoken.getApproved(_tokenID)\n      SWAP2 \t\t\ttoken.getApproved(_tokenID)\n      SWAP1 \t\t\ttoken.getApproved(_tokenID)\n      PUSH [tag] 140\t\t\ttoken.getApproved(_tokenID)\n      JUMP \t\t\ttoken.getApproved(_tokenID)\n    tag 147\t\t\ttoken.getApproved(_tokenID)\n      JUMPDEST \t\t\ttoken.getApproved(_tokenID)\n      PUSH 20\t\t\ttoken.getApproved(_tokenID)\n      PUSH 40\t\t\ttoken.getApproved(_tokenID)\n      MLOAD \t\t\ttoken.getApproved(_tokenID)\n      DUP1 \t\t\ttoken.getApproved(_tokenID)\n      DUP4 \t\t\ttoken.getApproved(_tokenID)\n      SUB \t\t\ttoken.getApproved(_tokenID)\n      DUP2 \t\t\ttoken.getApproved(_tokenID)\n      DUP7 \t\t\ttoken.getApproved(_tokenID)\n      GAS \t\t\ttoken.getApproved(_tokenID)\n      STATICCALL \t\t\ttoken.getApproved(_tokenID)\n      ISZERO \t\t\ttoken.getApproved(_tokenID)\n      DUP1 \t\t\ttoken.getApproved(_tokenID)\n      ISZERO \t\t\ttoken.getApproved(_tokenID)\n      PUSH [tag] 149\t\t\ttoken.getApproved(_tokenID)\n      JUMPI \t\t\ttoken.getApproved(_tokenID)\n      RETURNDATASIZE \t\t\ttoken.getApproved(_tokenID)\n      PUSH 0\t\t\ttoken.getApproved(_tokenID)\n      DUP1 \t\t\ttoken.getApproved(_tokenID)\n      RETURNDATACOPY \t\t\ttoken.getApproved(_tokenID)\n      RETURNDATASIZE \t\t\ttoken.getApproved(_tokenID)\n      PUSH 0\t\t\ttoken.getApproved(_tokenID)\n      REVERT \t\t\ttoken.getApproved(_tokenID)\n    tag 149\t\t\ttoken.getApproved(_tokenID)\n      JUMPDEST \t\t\ttoken.getApproved(_tokenID)\n      POP \t\t\ttoken.getApproved(_tokenID)\n      POP \t\t\ttoken.getApproved(_tokenID)\n      POP \t\t\ttoken.getApproved(_tokenID)\n      POP \t\t\ttoken.getApproved(_tokenID)\n      PUSH 40\t\t\ttoken.getApproved(_tokenID)\n      MLOAD \t\t\ttoken.getApproved(_tokenID)\n      RETURNDATASIZE \t\t\ttoken.getApproved(_tokenID)\n      PUSH 1F\t\t\ttoken.getApproved(_tokenID)\n      NOT \t\t\ttoken.getApproved(_tokenID)\n      PUSH 1F\t\t\ttoken.getApproved(_tokenID)\n      DUP3 \t\t\ttoken.getApproved(_tokenID)\n      ADD \t\t\ttoken.getApproved(_tokenID)\n      AND \t\t\ttoken.getApproved(_tokenID)\n      DUP3 \t\t\ttoken.getApproved(_tokenID)\n      ADD \t\t\ttoken.getApproved(_tokenID)\n      DUP1 \t\t\ttoken.getApproved(_tokenID)\n      PUSH 40\t\t\ttoken.getApproved(_tokenID)\n      MSTORE \t\t\ttoken.getApproved(_tokenID)\n      POP \t\t\ttoken.getApproved(_tokenID)\n      DUP2 \t\t\ttoken.getApproved(_tokenID)\n      ADD \t\t\ttoken.getApproved(_tokenID)\n      SWAP1 \t\t\ttoken.getApproved(_tokenID)\n      PUSH [tag] 150\t\t\ttoken.getApproved(_tokenID)\n      SWAP2 \t\t\ttoken.getApproved(_tokenID)\n      SWAP1 \t\t\ttoken.getApproved(_tokenID)\n      PUSH [tag] 88\t\t\ttoken.getApproved(_tokenID)\n      JUMP \t\t\ttoken.getApproved(_tokenID)\n    tag 150\t\t\ttoken.getApproved(_tokenID)\n      JUMPDEST \t\t\ttoken.getApproved(_tokenID)\n      PUSH FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF\t\t\ttoken.getApproved(_tokenID) ==...\n      AND \t\t\ttoken.getApproved(_tokenID) ==...\n      EQ \t\t\ttoken.getApproved(_tokenID) ==...\n      PUSH [tag] 151\t\t\trequire(token.getApproved(_tok...\n      JUMPI \t\t\trequire(token.getApproved(_tok...\n      PUSH 40\t\t\trequire(token.getApproved(_tok...\n      MLOAD \t\t\trequire(token.getApproved(_tok...\n      PUSH 8C379A000000000000000000000000000000000000000000000000000000000\t\t\trequire(token.getApproved(_tok...\n      DUP2 \t\t\trequire(token.getApproved(_tok...\n      MSTORE \t\t\trequire(token.getApproved(_tok...\n      PUSH 4\t\t\trequire(token.getApproved(_tok...\n      ADD \t\t\trequire(token.getApproved(_tok...\n      PUSH [tag] 152\t\t\trequire(token.getApproved(_tok...\n      SWAP1 \t\t\trequire(token.getApproved(_tok...\n      PUSH [tag] 153\t\t\trequire(token.getApproved(_tok...\n      JUMP \t\t\trequire(token.getApproved(_tok...\n    tag 152\t\t\trequire(token.getApproved(_tok...\n      JUMPDEST \t\t\trequire(token.getApproved(_tok...\n      PUSH 40\t\t\trequire(token.getApproved(_tok...\n      MLOAD \t\t\trequire(token.getApproved(_tok...\n      DUP1 \t\t\trequire(token.getApproved(_tok...\n      SWAP2 \t\t\trequire(token.getApproved(_tok...\n      SUB \t\t\trequire(token.getApproved(_tok...\n      SWAP1 \t\t\trequire(token.getApproved(_tok...\n      REVERT \t\t\trequire(token.getApproved(_tok...\n    tag 151\t\t\trequire(token.getApproved(_tok...\n      JUMPDEST \t\t\trequire(token.getApproved(_tok...\n      DUP3 \t\t\tasset\n      PUSH FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF\t\t\tasset.burn\n      AND \t\t\tasset.burn\n      PUSH 42966C68\t\t\tasset.burn\n      DUP7 \t\t\t_tokenID\n      PUSH 40\t\t\tasset.burn(_tokenID)\n      MLOAD \t\t\tasset.burn(_tokenID)\n      DUP3 \t\t\tasset.burn(_tokenID)\n      PUSH FFFFFFFF\t\t\tasset.burn(_tokenID)\n      AND \t\t\tasset.burn(_tokenID)\n      PUSH E0\t\t\tasset.burn(_tokenID)\n      SHL \t\t\tasset.burn(_tokenID)\n      DUP2 \t\t\tasset.burn(_tokenID)\n      MSTORE \t\t\tasset.burn(_tokenID)\n      PUSH 4\t\t\tasset.burn(_tokenID)\n      ADD \t\t\tasset.burn(_tokenID)\n      PUSH [tag] 154\t\t\tasset.burn(_tokenID)\n      SWAP2 \t\t\tasset.burn(_tokenID)\n      SWAP1 \t\t\tasset.burn(_tokenID)\n      PUSH [tag] 140\t\t\tasset.burn(_tokenID)\n      JUMP \t\t\tasset.burn(_tokenID)\n    tag 154\t\t\tasset.burn(_tokenID)\n      JUMPDEST \t\t\tasset.burn(_tokenID)\n      PUSH 0\t\t\tasset.burn(_tokenID)\n      PUSH 40\t\t\tasset.burn(_tokenID)\n      MLOAD \t\t\tasset.burn(_tokenID)\n      DUP1 \t\t\tasset.burn(_tokenID)\n      DUP4 \t\t\tasset.burn(_tokenID)\n      SUB \t\t\tasset.burn(_tokenID)\n      DUP2 \t\t\tasset.burn(_tokenID)\n      PUSH 0\t\t\tasset.burn(_tokenID)\n      DUP8 \t\t\tasset.burn(_tokenID)\n      DUP1 \t\t\tasset.burn(_tokenID)\n      EXTCODESIZE \t\t\tasset.burn(_tokenID)\n      ISZERO \t\t\tasset.burn(_tokenID)\n      DUP1 \t\t\tasset.burn(_tokenID)\n      ISZERO \t\t\tasset.burn(_tokenID)\n      PUSH [tag] 155\t\t\tasset.burn(_tokenID)\n      JUMPI \t\t\tasset.burn(_tokenID)\n      PUSH 0\t\t\tasset.burn(_tokenID)\n      DUP1 \t\t\tasset.burn(_tokenID)\n      REVERT \t\t\tasset.burn(_tokenID)\n    tag 155\t\t\tasset.burn(_tokenID)\n      JUMPDEST \t\t\tasset.burn(_tokenID)\n      POP \t\t\tasset.burn(_tokenID)\n      GAS \t\t\tasset.burn(_tokenID)\n      CALL \t\t\tasset.burn(_tokenID)\n      ISZERO \t\t\tasset.burn(_tokenID)\n      DUP1 \t\t\tasset.burn(_tokenID)\n      ISZERO \t\t\tasset.burn(_tokenID)\n      PUSH [tag] 157\t\t\tasset.burn(_tokenID)\n      JUMPI \t\t\tasset.burn(_tokenID)\n      RETURNDATASIZE \t\t\tasset.burn(_tokenID)\n      PUSH 0\t\t\tasset.burn(_tokenID)\n      DUP1 \t\t\tasset.burn(_tokenID)\n      RETURNDATACOPY \t\t\tasset.burn(_tokenID)\n      RETURNDATASIZE \t\t\tasset.burn(_tokenID)\n      PUSH 0\t\t\tasset.burn(_tokenID)\n      REVERT \t\t\tasset.burn(_tokenID)\n    tag 157\t\t\tasset.burn(_tokenID)\n      JUMPDEST \t\t\tasset.burn(_tokenID)\n      POP \t\t\tasset.burn(_tokenID)\n      POP \t\t\tasset.burn(_tokenID)\n      POP \t\t\tasset.burn(_tokenID)\n      POP \t\t\tasset.burn(_tokenID)\n      PUSH 0\t\t\taddress payable recipient\n      CALLER \t\t\tmsg.sender\n      SWAP1 \t\t\taddress payable recipient = pa...\n      POP \t\t\taddress payable recipient = pa...\n      PUSH 0\t\t\tVault vault\n      DUP4 \t\t\tvaultContract_address\n      SWAP1 \t\t\tVault vault = Vault(vaultContr...\n      POP \t\t\tVault vault = Vault(vaultContr...\n      DUP1 \t\t\tvault\n      PUSH FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF\t\t\tvault.claimFunds\n      AND \t\t\tvault.claimFunds\n      PUSH ED2B40EA\t\t\tvault.claimFunds\n      DUP4 \t\t\trecipient\n      DUP10 \t\t\t_tokenID\n      PUSH 40\t\t\tvault.claimFunds(recipient, _t...\n      MLOAD \t\t\tvault.claimFunds(recipient, _t...\n      DUP4 \t\t\tvault.claimFunds(recipient, _t...\n      PUSH FFFFFFFF\t\t\tvault.claimFunds(recipient, _t...\n      AND \t\t\tvault.claimFunds(recipient, _t...\n      PUSH E0\t\t\tvault.claimFunds(recipient, _t...\n      SHL \t\t\tvault.claimFunds(recipient, _t...\n      DUP2 \t\t\tvault.claimFunds(recipient, _t...\n      MSTORE \t\t\tvault.claimFunds(recipient, _t...\n      PUSH 4\t\t\tvault.claimFunds(recipient, _t...\n      ADD \t\t\tvault.claimFunds(recipient, _t...\n      PUSH [tag] 158\t\t\tvault.claimFunds(recipient, _t...\n      SWAP3 \t\t\tvault.claimFunds(recipient, _t...\n      SWAP2 \t\t\tvault.claimFunds(recipient, _t...\n      SWAP1 \t\t\tvault.claimFunds(recipient, _t...\n      PUSH [tag] 159\t\t\tvault.claimFunds(recipient, _t...\n      JUMP \t\t\tvault.claimFunds(recipient, _t...\n    tag 158\t\t\tvault.claimFunds(recipient, _t...\n      JUMPDEST \t\t\tvault.claimFunds(recipient, _t...\n      PUSH 0\t\t\tvault.claimFunds(recipient, _t...\n      PUSH 40\t\t\tvault.claimFunds(recipient, _t...\n      MLOAD \t\t\tvault.claimFunds(recipient, _t...\n      DUP1 \t\t\tvault.claimFunds(recipient, _t...\n      DUP4 \t\t\tvault.claimFunds(recipient, _t...\n      SUB \t\t\tvault.claimFunds(recipient, _t...\n      DUP2 \t\t\tvault.claimFunds(recipient, _t...\n      PUSH 0\t\t\tvault.claimFunds(recipient, _t...\n      DUP8 \t\t\tvault.claimFunds(recipient, _t...\n      DUP1 \t\t\tvault.claimFunds(recipient, _t...\n      EXTCODESIZE \t\t\tvault.claimFunds(recipient, _t...\n      ISZERO \t\t\tvault.claimFunds(recipient, _t...\n      DUP1 \t\t\tvault.claimFunds(recipient, _t...\n      ISZERO \t\t\tvault.claimFunds(recipient, _t...\n      PUSH [tag] 160\t\t\tvault.claimFunds(recipient, _t...\n      JUMPI \t\t\tvault.claimFunds(recipient, _t...\n      PUSH 0\t\t\tvault.claimFunds(recipient, _t...\n      DUP1 \t\t\tvault.claimFunds(recipient, _t...\n      REVERT \t\t\tvault.claimFunds(recipient, _t...\n    tag 160\t\t\tvault.claimFunds(recipient, _t...\n      JUMPDEST \t\t\tvault.claimFunds(recipient, _t...\n      POP \t\t\tvault.claimFunds(recipient, _t...\n      GAS \t\t\tvault.claimFunds(recipient, _t...\n      CALL \t\t\tvault.claimFunds(recipient, _t...\n      ISZERO \t\t\tvault.claimFunds(recipient, _t...\n      DUP1 \t\t\tvault.claimFunds(recipient, _t...\n      ISZERO \t\t\tvault.claimFunds(recipient, _t...\n      PUSH [tag] 162\t\t\tvault.claimFunds(recipient, _t...\n      JUMPI \t\t\tvault.claimFunds(recipient, _t...\n      RETURNDATASIZE \t\t\tvault.claimFunds(recipient, _t...\n      PUSH 0\t\t\tvault.claimFunds(recipient, _t...\n      DUP1 \t\t\tvault.claimFunds(recipient, _t...\n      RETURNDATACOPY \t\t\tvault.claimFunds(recipient, _t...\n      RETURNDATASIZE \t\t\tvault.claimFunds(recipient, _t...\n      PUSH 0\t\t\tvault.claimFunds(recipient, _t...\n      REVERT \t\t\tvault.claimFunds(recipient, _t...\n    tag 162\t\t\tvault.claimFunds(recipient, _t...\n      JUMPDEST \t\t\tvault.claimFunds(recipient, _t...\n      POP \t\t\tvault.claimFunds(recipient, _t...\n      POP \t\t\tvault.claimFunds(recipient, _t...\n      POP \t\t\tvault.claimFunds(recipient, _t...\n      POP \t\t\tvault.claimFunds(recipient, _t...\n      POP \t\t\t{\\r\\n        require(vaultAddr...\n      POP \t\t\t{\\r\\n        require(vaultAddr...\n      POP \t\t\t{\\r\\n        require(vaultAddr...\n      POP \t\t\t{\\r\\n        require(vaultAddr...\n      POP \t\t\t{\\r\\n        require(vaultAddr...\n      POP \t\t\t{\\r\\n        require(vaultAddr...\n      POP \t\t\tfunction claim(address NFTCont...\n      POP \t\t\tfunction claim(address NFTCont...\n      JUMP \t\t\tfunction claim(address NFTCont...\n    tag 69\t\t\t\n      JUMPDEST \t\t\t\n      PUSH #[$] 0000000000000000000000000000000000000000000000000000000000000000\t\t\t\n      DUP1 \t\t\t\n      PUSH [$] 0000000000000000000000000000000000000000000000000000000000000000\t\t\t\n      DUP4 \t\t\t\n      CODECOPY \t\t\t\n      ADD \t\t\t\n      SWAP1 \t\t\t\n      JUMP \t\t\t\n    tag 163\t\t\t-License-Identifier: MIT\\r\\npr...\n      JUMPDEST \t\t\t-License-Identifier: MIT\\r\\npr...\n      PUSH 0\t\t\tdity ^0\n      DUP2 \t\t\tzeppe\n      SWAP1 \t\t\tport \"@openzeppe\n      POP \t\t\tport \"@openzeppe\n      SWAP2 \t\t\t-License-Identifier: MIT\\r\\npr...\n      SWAP1 \t\t\t-License-Identifier: MIT\\r\\npr...\n      POP \t\t\t-License-Identifier: MIT\\r\\npr...\n      JUMP \t\t\t-License-Identifier: MIT\\r\\npr...\n    tag 164\t\t\ts/token/ERC721/ERC721.sol\";\\r\\...\n      JUMPDEST \t\t\ts/token/ERC721/ERC721.sol\";\\r\\...\n      PUSH [tag] 222\t\t\tC721Burnable.sol\";\\r\\n\\r\\n/*\n      DUP2 \t\t\t\\r\\n\\r\\n/\n      PUSH [tag] 163\t\t\tC721Burnable.sol\";\\r\\n\\r\\n/*\n      JUMP \t\t\tC721Burnable.sol\";\\r\\n\\r\\n/*\n    tag 222\t\t\tC721Burnable.sol\";\\r\\n\\r\\n/*\n      JUMPDEST \t\t\tC721Burnable.sol\";\\r\\n\\r\\n/*\n      DUP3 \t\t\tns/\n      MSTORE \t\t\txtensions/ERC721Burnable.sol\";...\n      POP \t\t\ts/token/ERC721/ERC721.sol\";\\r\\...\n      POP \t\t\ts/token/ERC721/ERC721.sol\";\\r\\...\n      JUMP \t\t\ts/token/ERC721/ERC721.sol\";\\r\\...\n    tag 165\t\t\tVault\\r\\n * @dev Vault contrac...\n      JUMPDEST \t\t\tVault\\r\\n * @dev Vault contrac...\n      PUSH 0\t\t\tciated\n      DUP2 \t\t\tact V\n      MLOAD \t\t\t\\ncontract Va\n      SWAP1 \t\t\tIDs.\\r\\n */\\r\\ncontract Va\n      POP \t\t\tIDs.\\r\\n */\\r\\ncontract Va\n      SWAP2 \t\t\tVault\\r\\n * @dev Vault contrac...\n      SWAP1 \t\t\tVault\\r\\n * @dev Vault contrac...\n      POP \t\t\tVault\\r\\n * @dev Vault contrac...\n      JUMP \t\t\tVault\\r\\n * @dev Vault contrac...\n    tag 166\t\t\tdress public NFTContract;\\r\\n ...\n      JUMPDEST \t\t\tdress public NFTContract;\\r\\n ...\n      PUSH 0\t\t\tc minimumWi\n      DUP3 \t\t\t6 publ\n      DUP3 \t\t\tint\n      MSTORE \t\t\t\\r\\n    uint256 publi\n      PUSH 20\t\t\tic b\n      DUP3 \t\t\t pu\n      ADD \t\t\tress public bi\n      SWAP1 \t\t\tnTime;\\r\\n    address public b...\n      POP \t\t\tnTime;\\r\\n    address public b...\n      SWAP3 \t\t\tdress public NFTContract;\\r\\n ...\n      SWAP2 \t\t\tdress public NFTContract;\\r\\n ...\n      POP \t\t\tdress public NFTContract;\\r\\n ...\n      POP \t\t\tdress public NFTContract;\\r\\n ...\n      JUMP \t\t\tdress public NFTContract;\\r\\n ...\n    tag 167\t\t\t   address public admin;\\r\\n\\r...\n      JUMPDEST \t\t\t   address public admin;\\r\\n\\r...\n      PUSH 0\t\t\t ids\n      DUP2 \t\t\tlic\n      SWAP1 \t\t\t56[] public\n      POP \t\t\t56[] public\n      PUSH 20\t\t\tonly\n      DUP3 \t\t\tfie\n      ADD \t\t\tmodifier onlyB\n      SWAP1 \t\t\t\\r\\n\\r\\n    modifier onlyB\n      POP \t\t\t\\r\\n\\r\\n    modifier onlyB\n      SWAP2 \t\t\t   address public admin;\\r\\n\\r...\n      SWAP1 \t\t\t   address public admin;\\r\\n\\r...\n      POP \t\t\t   address public admin;\\r\\n\\r...\n      JUMP \t\t\t   address public admin;\\r\\n\\r...\n    tag 168\t\t\t       require(msg.sender == b...\n      JUMPDEST \t\t\t       require(msg.sender == b...\n      PUSH [tag] 227\t\t\this function\");\\r\\n       \n      DUP2 \t\t\t     \n      PUSH [tag] 163\t\t\this function\");\\r\\n       \n      JUMP \t\t\this function\");\\r\\n       \n    tag 227\t\t\this function\");\\r\\n       \n      JUMPDEST \t\t\this function\");\\r\\n       \n      DUP3 \t\t\tall\n      MSTORE \t\t\tt can call this function\");\\r\\...\n      POP \t\t\t       require(msg.sender == b...\n      POP \t\t\t       require(msg.sender == b...\n      JUMP \t\t\t       require(msg.sender == b...\n    tag 169\t\t\t\\n    /**\\r\\n     * @dev Contr...\n      JUMPDEST \t\t\t\\n    /**\\r\\n     * @dev Contr...\n      PUSH 0\t\t\t     * @pa\n      PUSH [tag] 229\t\t\tractAddress address of the NFT...\n      DUP4 \t\t\t   \n      DUP4 \t\t\ttract\\r\n      PUSH [tag] 168\t\t\tractAddress address of the NFT...\n      JUMP \t\t\tractAddress address of the NFT...\n    tag 229\t\t\tractAddress address of the NFT...\n      JUMPDEST \t\t\tractAddress address of the NFT...\n      PUSH 20\t\t\tfore\n      DUP4 \t\t\tme \n      ADD \t\t\tm time before \n      SWAP1 \t\t\tminTime minimum time before \n      POP \t\t\tminTime minimum time before \n      SWAP3 \t\t\t\\n    /**\\r\\n     * @dev Contr...\n      SWAP2 \t\t\t\\n    /**\\r\\n     * @dev Contr...\n      POP \t\t\t\\n    /**\\r\\n     * @dev Contr...\n      POP \t\t\t\\n    /**\\r\\n     * @dev Contr...\n      JUMP \t\t\t\\n    /**\\r\\n     * @dev Contr...\n    tag 170\t\t\t   * @param _admin admin addre...\n      JUMPDEST \t\t\t   * @param _admin admin addre...\n      PUSH 0\t\t\tCont\n      PUSH 20\t\t\t, ad\n      DUP3 \t\t\tnTi\n      ADD \t\t\t6 minTime, add\n      SWAP1 \t\t\t, uint256 minTime, add\n      POP \t\t\t, uint256 minTime, add\n      SWAP2 \t\t\t   * @param _admin admin addre...\n      SWAP1 \t\t\t   * @param _admin admin addre...\n      POP \t\t\t   * @param _admin admin addre...\n      JUMP \t\t\t   * @param _admin admin addre...\n    tag 171\t\t\tontractAddress;\\r\\n        min...\n      JUMPDEST \t\t\tontractAddress;\\r\\n        min...\n      PUSH 0\t\t\tp;\\r\n      PUSH [tag] 232\t\t\tsender;\\r\\n    }\\r\\n\\r\\n    fa...\n      DUP3 \t\t\te{}\\r\\n\n      PUSH [tag] 165\t\t\tsender;\\r\\n    }\\r\\n\\r\\n    fa...\n      JUMP \t\t\tsender;\\r\\n    }\\r\\n\\r\\n    fa...\n    tag 232\t\t\tsender;\\r\\n    }\\r\\n\\r\\n    fa...\n      JUMPDEST \t\t\tsender;\\r\\n    }\\r\\n\\r\\n    fa...\n      PUSH [tag] 233\t\t\ternal payable{}\\r\\n\\r\\n    /**...\n      DUP2 \t\t\ttoken \n      DUP6 \t\t\tifi\n      PUSH [tag] 166\t\t\ternal payable{}\\r\\n\\r\\n    /**...\n      JUMP \t\t\ternal payable{}\\r\\n\\r\\n    /**...\n    tag 233\t\t\ternal payable{}\\r\\n\\r\\n    /**...\n      JUMPDEST \t\t\ternal payable{}\\r\\n\\r\\n    /**...\n      SWAP4 \t\t\te() external payable{}\\r\\n\\r\\n...\n      POP \t\t\te() external payable{}\\r\\n\\r\\n...\n      PUSH [tag] 234\t\t\tD Token ID to which the balanc...\n      DUP4 \t\t\tparam\n      PUSH [tag] 167\t\t\tD Token ID to which the balanc...\n      JUMP \t\t\tD Token ID to which the balanc...\n    tag 234\t\t\tD Token ID to which the balanc...\n      JUMPDEST \t\t\tD Token ID to which the balanc...\n      DUP1 \t\t\t the ba\n      PUSH 0\t\t\tt\n    tag 235\t\t\t   */\\r\\n    function addBalan...\n      JUMPDEST \t\t\t   */\\r\\n    function addBalan...\n      DUP4 \t\t\tlance(\n      DUP2 \t\t\td\n      LT \t\t\t addBalance(u\n      ISZERO \t\t\t   */\\r\\n    function addBalan...\n      PUSH [tag] 237\t\t\t   */\\r\\n    function addBalan...\n      JUMPI \t\t\t   */\\r\\n    function addBalan...\n      DUP2 \t\t\tf (tok\n      MLOAD \t\t\t     if (toke\n      PUSH [tag] 238\t\t\t== 0) {\\r\\n            tokenId...\n      DUP9 \t\t\t   \n      DUP3 \t\t\t;\\r\\n        }\\r\n      PUSH [tag] 169\t\t\t== 0) {\\r\\n            tokenId...\n      JUMP \t\t\t== 0) {\\r\\n            tokenId...\n    tag 238\t\t\t== 0) {\\r\\n            tokenId...\n      JUMPDEST \t\t\t== 0) {\\r\\n            tokenId...\n      SWAP8 \t\t\tkenID] == 0) {\\r\\n            ...\n      POP \t\t\tkenID] == 0) {\\r\\n            ...\n      PUSH [tag] 239\t\t\tID] += amount;\\r\\n    }\\r\\n\\r\\...\n      DUP4 \t\t\tublic \n      PUSH [tag] 170\t\t\tID] += amount;\\r\\n    }\\r\\n\\r\\...\n      JUMP \t\t\tID] += amount;\\r\\n    }\\r\\n\\r\\...\n    tag 239\t\t\tID] += amount;\\r\\n    }\\r\\n\\r\\...\n      JUMPDEST \t\t\tID] += amount;\\r\\n    }\\r\\n\\r\\...\n      SWAP3 \t\t\tces[_tokenID] += amount;\\r\\n  ...\n      POP \t\t\tces[_tokenID] += amount;\\r\\n  ...\n      POP \t\t\tunt) external onlyBitsurance {...\n      PUSH 1\t\t\t,\n      DUP2 \t\t\tn\n      ADD \t\t\ttokenID, \n      SWAP1 \t\t\t256 _tokenID, \n      POP \t\t\t256 _tokenID, \n      PUSH [tag] 235\t\t\t   */\\r\\n    function addBalan...\n      JUMP \t\t\t   */\\r\\n    function addBalan...\n    tag 237\t\t\t   */\\r\\n    function addBalan...\n      JUMPDEST \t\t\t   */\\r\\n    function addBalan...\n      POP \t\t\t/\\r\\n    functio\n      DUP6 \t\t\try)\n      SWAP4 \t\t\t[] memory)\n      POP \t\t\t[] memory)\n      POP \t\t\t       bitsurance = msg.sender...\n      POP \t\t\t       bitsurance = msg.sender...\n      POP \t\t\t       bitsurance = msg.sender...\n      SWAP3 \t\t\tontractAddress;\\r\\n        min...\n      SWAP2 \t\t\tontractAddress;\\r\\n        min...\n      POP \t\t\tontractAddress;\\r\\n        min...\n      POP \t\t\tontractAddress;\\r\\n        min...\n      JUMP \t\t\tontractAddress;\\r\\n        min...\n    tag 172\t\t\treturn tokenIds;\\r\\n    }\\r\\n\\...\n      JUMPDEST \t\t\treturn tokenIds;\\r\\n    }\\r\\n\\...\n      PUSH 0\t\t\t    * @\n      PUSH FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF\t\t\tthe vault\\r\\n     * @param rec...\n      DUP3 \t\t\ts fro\n      AND \t\t\tfunds from the vault\\r\\n     *...\n      SWAP1 \t\t\tn to claim funds from the vaul...\n      POP \t\t\tn to claim funds from the vaul...\n      SWAP2 \t\t\treturn tokenIds;\\r\\n    }\\r\\n\\...\n      SWAP1 \t\t\treturn tokenIds;\\r\\n    }\\r\\n\\...\n      POP \t\t\treturn tokenIds;\\r\\n    }\\r\\n\\...\n      JUMP \t\t\treturn tokenIds;\\r\\n    }\\r\\n\\...\n    tag 173\t\t\t receive the funds\\r\\n     * @...\n      JUMPDEST \t\t\t receive the funds\\r\\n     * @...\n      PUSH 0\t\t\tkenID T\n      PUSH [tag] 242\t\t\t */\\r\\n    function claimF\n      DUP3 \t\t\tclaim\n      PUSH [tag] 172\t\t\t */\\r\\n    function claimF\n      JUMP \t\t\t */\\r\\n    function claimF\n    tag 242\t\t\t */\\r\\n    function claimF\n      JUMPDEST \t\t\t */\\r\\n    function claimF\n      SWAP1 \t\t\tclaim\\r\\n     */\\r\\n    functi...\n      POP \t\t\tclaim\\r\\n     */\\r\\n    functi...\n      SWAP2 \t\t\t receive the funds\\r\\n     * @...\n      SWAP1 \t\t\t receive the funds\\r\\n     * @...\n      POP \t\t\t receive the funds\\r\\n     * @...\n      JUMP \t\t\t receive the funds\\r\\n     * @...\n    tag 174\t\t\t payable recipient, uint256 _t...\n      JUMPDEST \t\t\t payable recipient, uint256 _t...\n      PUSH [tag] 244\t\t\te(tokenBalances[_tokenID\n      DUP2 \t\t\tokenI\n      PUSH [tag] 173\t\t\te(tokenBalances[_tokenID\n      JUMP \t\t\te(tokenBalances[_tokenID\n    tag 244\t\t\te(tokenBalances[_tokenID\n      JUMPDEST \t\t\te(tokenBalances[_tokenID\n      DUP3 \t\t\tequ\n      MSTORE \t\t\t      require(tokenBalances[_t...\n      POP \t\t\t payable recipient, uint256 _t...\n      POP \t\t\t payable recipient, uint256 _t...\n      JUMP \t\t\t payable recipient, uint256 _t...\n    tag 15\t\t\tlance for this tokenID\");\\r\\n ...\n      JUMPDEST \t\t\tlance for this tokenID\");\\r\\n ...\n      PUSH 0\t\t\tlanc\n      PUSH 80\t\t\tnt.\n      DUP3 \t\t\t    recip\n      ADD \t\t\t        recipient.t\n      SWAP1 \t\t\t] = 0;\\r\\n        recipient.t\n      POP \t\t\t] = 0;\\r\\n        recipient.t\n      PUSH [tag] 246\t\t\tount);\\r\\n    }\\r\\n\\r\\n    /**...\n      PUSH 0\t\t\tm\n      DUP4 \t\t\tw funds f\n      ADD \t\t\thdraw funds from \n      DUP8 \t\t\ton to \n      PUSH [tag] 164\t\t\tount);\\r\\n    }\\r\\n\\r\\n    /**...\n      JUMP \t\t\tount);\\r\\n    }\\r\\n\\r\\n    /**...\n    tag 246\t\t\tount);\\r\\n    }\\r\\n\\r\\n    /**...\n      JUMPDEST \t\t\tount);\\r\\n    }\\r\\n\\r\\n    /**...\n      PUSH [tag] 247\t\t\t     * @param recipient Recipi...\n      PUSH 20\t\t\t *\n      DUP4 \t\t\tfunds\\r\\n  \n      ADD \t\t\tthe funds\\r\\n     * \n      DUP7 \t\t\t recei\n      PUSH [tag] 164\t\t\t     * @param recipient Recipi...\n      JUMP \t\t\t     * @param recipient Recipi...\n    tag 247\t\t\t     * @param recipient Recipi...\n      JUMPDEST \t\t\t     * @param recipient Recipi...\n      DUP2 \t\t\t\\n     */\\r\n      DUP2 \t\t\thdra\n      SUB \t\t\t withdraw\\r\\n     */\\r\\n\n      PUSH 40\t\t\tDs\n      DUP4 \t\t\t of Token\n      ADD \t\t\trray of Token IDs \n      MSTORE \t\t\tenIDs Array of Token IDs to wi...\n      PUSH [tag] 248\t\t\traw(address payable recipient,...\n      DUP2 \t\t\tequi\n      DUP6 \t\t\t      \n      PUSH [tag] 171\t\t\traw(address payable recipient,...\n      JUMP \t\t\traw(address payable recipient,...\n    tag 248\t\t\traw(address payable recipient,...\n      JUMPDEST \t\t\traw(address payable recipient,...\n      SWAP1 \t\t\ton withdraw(address payable re...\n      POP \t\t\ton withdraw(address payable re...\n      PUSH [tag] 249\t\t\tmestamp - creationTime >= mini...\n      PUSH 60\t\t\tnc\n      DUP4 \t\t\tt access \n      ADD \t\t\tannot access funct\n      DUP5 \t\t\te * 2,\n      PUSH [tag] 174\t\t\tmestamp - creationTime >= mini...\n      JUMP \t\t\tmestamp - creationTime >= mini...\n    tag 249\t\t\tmestamp - creationTime >= mini...\n      JUMPDEST \t\t\tmestamp - creationTime >= mini...\n      SWAP6 \t\t\tlance for this tokenID\");\\r\\n ...\n      SWAP5 \t\t\tlance for this tokenID\");\\r\\n ...\n      POP \t\t\tlance for this tokenID\");\\r\\n ...\n      POP \t\t\tlance for this tokenID\");\\r\\n ...\n      POP \t\t\tlance for this tokenID\");\\r\\n ...\n      POP \t\t\tlance for this tokenID\");\\r\\n ...\n      POP \t\t\tlance for this tokenID\");\\r\\n ...\n      JUMP \t\t\tlance for this tokenID\");\\r\\n ...\n    tag 175\t\t\t minimum time has passed\");\\r\\...\n      JUMPDEST \t\t\t minimum time has passed\");\\r\\...\n      PUSH 0\t\t\t    ui\n      PUSH 40\t\t\t  \n      MLOAD \t\t\t;\\r\\n      \n      SWAP1 \t\t\tAmount = 0;\\r\\n      \n      POP \t\t\tAmount = 0;\\r\\n      \n      SWAP1 \t\t\t minimum time has passed\");\\r\\...\n      JUMP \t\t\t minimum time has passed\");\\r\\...\n    tag 176\t\t\t56 i = 0; i < _tokenIDs.length...\n      JUMPDEST \t\t\t56 i = 0; i < _tokenIDs.length...\n      PUSH 0\t\t\tt\n      DUP1 \t\t\to\n      REVERT \t\t\tlance for th\n    tag 177\t\t\t;\\r\\n            totalAmount +...\n      JUMPDEST \t\t\t;\\r\\n            totalAmount +...\n      PUSH 0\t\t\t \n      DUP1 \t\t\t \n      REVERT \t\t\t = 0;\\r\\n     \n    tag 178\t\t\t  recipient.transfer(totalAmou...\n      JUMPDEST \t\t\t  recipient.transfer(totalAmou...\n      PUSH [tag] 254\t\t\t * @dev Bitsurance contr\n      DUP2 \t\t\t cont\n      PUSH [tag] 173\t\t\t * @dev Bitsurance contr\n      JUMP \t\t\t * @dev Bitsurance contr\n    tag 254\t\t\t * @dev Bitsurance contr\n      JUMPDEST \t\t\t * @dev Bitsurance contr\n      DUP2 \t\t\trance\n      EQ \t\t\ttsurance\\r\\n * @dev Bitsurance...\n      PUSH [tag] 255\t\t\t @title Bitsurance\\r\\n * @dev ...\n      JUMPI \t\t\t @title Bitsurance\\r\\n * @dev ...\n      PUSH 0\t\t\tc\n      DUP1 \t\t\te\n      REVERT \t\t\that interact\n    tag 255\t\t\t @title Bitsurance\\r\\n * @dev ...\n      JUMPDEST \t\t\t @title Bitsurance\\r\\n * @dev ...\n      POP \t\t\t  recipient.transfer(totalAmou...\n      JUMP \t\t\t  recipient.transfer(totalAmou...\n    tag 179\t\t\tand manages the creation and o...\n      JUMPDEST \t\t\tand manages the creation and o...\n      PUSH 0\t\t\tm\\r\\n *\n      DUP2 \t\t\t/ An a\n      CALLDATALOAD \t\t\tce {\\r\\n\\r\\n    // An ar\n      SWAP1 \t\t\t Bitsurance {\\r\\n\\r\\n    // An...\n      POP \t\t\t Bitsurance {\\r\\n\\r\\n    // An...\n      PUSH [tag] 257\t\t\tults\\r\\n    Vault[] private va...\n      DUP2 \t\t\taults\n      PUSH [tag] 178\t\t\tults\\r\\n    Vault[] private va...\n      JUMP \t\t\tults\\r\\n    Vault[] private va...\n    tag 257\t\t\tults\\r\\n    Vault[] private va...\n      JUMPDEST \t\t\tults\\r\\n    Vault[] private va...\n      SWAP3 \t\t\tand manages the creation and o...\n      SWAP2 \t\t\tand manages the creation and o...\n      POP \t\t\tand manages the creation and o...\n      POP \t\t\tand manages the creation and o...\n      JUMP \t\t\tand manages the creation and o...\n    tag 19\t\t\t// Event to notify when a vaul...\n      JUMPDEST \t\t\t// Event to notify when a vaul...\n      PUSH 0\t\t\tCreate\n      PUSH 20\t\t\tss\n      DUP3 \t\t\tdress, ad\n      DUP5 \t\t\ts vault\n      SUB \t\t\tdress vaultAddress, add\n      SLT \t\t\t, address vaultAddress, addres...\n      ISZERO \t\t\tate, address vaultAddress, add...\n      PUSH [tag] 259\t\t\tate, address vaultAddress, add...\n      JUMPI \t\t\tate, address vaultAddress, add...\n      PUSH [tag] 260\t\t\t_address);\\r\\n\\r\\n    // Mappi...\n      PUSH [tag] 176\t\t\t_address);\\r\\n\\r\\n    // Mappi...\n      JUMP \t\t\t_address);\\r\\n\\r\\n    // Mappi...\n    tag 260\t\t\t_address);\\r\\n\\r\\n    // Mappi...\n      JUMPDEST \t\t\t_address);\\r\\n\\r\\n    // Mappi...\n    tag 259\t\t\tate, address vaultAddress, add...\n      JUMPDEST \t\t\tate, address vaultAddress, add...\n      PUSH 0\t\t\tl\n      PUSH [tag] 261\t\t\t    // Mapping of admins to NF...\n      DUP5 \t\t\t  mappi\n      DUP3 \t\t\tracts\\r\n      DUP6 \t\t\tto NFT co\n      ADD \t\t\tins to NFT contracts\\r\\n\n      PUSH [tag] 179\t\t\t    // Mapping of admins to NF...\n      JUMP \t\t\t    // Mapping of admins to NF...\n    tag 261\t\t\t    // Mapping of admins to NF...\n      JUMPDEST \t\t\t    // Mapping of admins to NF...\n      SWAP2 \t\t\ts;\\r\\n    \\r\\n    // Mapping o...\n      POP \t\t\ts;\\r\\n    \\r\\n    // Mapping o...\n      POP \t\t\tpping(address => address) publ...\n      SWAP3 \t\t\t// Event to notify when a vaul...\n      SWAP2 \t\t\t// Event to notify when a vaul...\n      POP \t\t\t// Event to notify when a vaul...\n      POP \t\t\t// Event to notify when a vaul...\n      JUMP \t\t\t// Event to notify when a vaul...\n    tag 22\t\t\tublic admins;\\r\\n\\r\\n    /**\\r...\n      JUMPDEST \t\t\tublic admins;\\r\\n\\r\\n    /**\\r...\n      PUSH 0\t\t\tactA\n      PUSH 20\t\t\t\\r\\n\n      DUP3 \t\t\tFT contra\n      ADD \t\t\the NFT contract\\r\\n \n      SWAP1 \t\t\tess of the NFT contract\\r\\n \n      POP \t\t\tess of the NFT contract\\r\\n \n      PUSH [tag] 263\t\t\tam _minTime minimum time befor...\n      PUSH 0\t\t\te\n      DUP4 \t\t\tfunction \n      ADD \t\t\t    function crea\n      DUP5 \t\t\t     *\n      PUSH [tag] 174\t\t\tam _minTime minimum time befor...\n      JUMP \t\t\tam _minTime minimum time befor...\n    tag 263\t\t\tam _minTime minimum time befor...\n      JUMPDEST \t\t\tam _minTime minimum time befor...\n      SWAP3 \t\t\tublic admins;\\r\\n\\r\\n    /**\\r...\n      SWAP2 \t\t\tublic admins;\\r\\n\\r\\n    /**\\r...\n      POP \t\t\tublic admins;\\r\\n\\r\\n    /**\\r...\n      POP \t\t\tublic admins;\\r\\n\\r\\n    /**\\r...\n      JUMP \t\t\tublic admins;\\r\\n\\r\\n    /**\\r...\n    tag 180\t\t\ts _NFTContractAddress, uint256...\n      JUMPDEST \t\t\ts _NFTContractAddress, uint256...\n      PUSH [tag] 265\t\t\tdress[_NFTContractAddres\n      DUP2 \t\t\tAddre\n      PUSH [tag] 163\t\t\tdress[_NFTContractAddres\n      JUMP \t\t\tdress[_NFTContractAddres\n    tag 265\t\t\tdress[_NFTContractAddres\n      JUMPDEST \t\t\tdress[_NFTContractAddres\n      DUP2 \t\t\tvault\n      EQ \t\t\tre(vaultAddress[_NFTContractAd...\n      PUSH [tag] 266\t\t\t     require(vaultAddress[_NFT...\n      JUMPI \t\t\t     require(vaultAddress[_NFT...\n      PUSH 0\t\t\t)\n      DUP1 \t\t\ts\n      REVERT \t\t\t address(0),\n    tag 266\t\t\t     require(vaultAddress[_NFT...\n      JUMPDEST \t\t\t     require(vaultAddress[_NFT...\n      POP \t\t\ts _NFTContractAddress, uint256...\n      JUMP \t\t\ts _NFTContractAddress, uint256...\n    tag 181\t\t\ty exists for this NFT contract...\n      JUMPDEST \t\t\ty exists for this NFT contract...\n      PUSH 0\t\t\tlt va\n      DUP2 \t\t\tss,_mi\n      CALLDATALOAD \t\t\tContractAddress,_min\n      SWAP1 \t\t\tault(_NFTContractAddress,_min\n      POP \t\t\tault(_NFTContractAddress,_min\n      PUSH [tag] 268\t\t\t.sender);\\r\\n        vaults.pu...\n      DUP2 \t\t\tush(v\n      PUSH [tag] 180\t\t\t.sender);\\r\\n        vaults.pu...\n      JUMP \t\t\t.sender);\\r\\n        vaults.pu...\n    tag 268\t\t\t.sender);\\r\\n        vaults.pu...\n      JUMPDEST \t\t\t.sender);\\r\\n        vaults.pu...\n      SWAP3 \t\t\ty exists for this NFT contract...\n      SWAP2 \t\t\ty exists for this NFT contract...\n      POP \t\t\ty exists for this NFT contract...\n      POP \t\t\ty exists for this NFT contract...\n      JUMP \t\t\ty exists for this NFT contract...\n    tag 31\t\t\t   vaultAddress[_NFTContractAd...\n      JUMPDEST \t\t\t   vaultAddress[_NFTContractAd...\n      PUSH 0\t\t\ts[msg.\n      DUP1 \t\t\tnder] \n      PUSH 40\t\t\tre\n      DUP4 \t\t\t emit Vau\n      DUP6 \t\t\t\\r\\n     \n      SUB \t\t\tess;\\r\\n        emit Vaul\n      SLT \t\t\tAddress;\\r\\n        emit Vault...\n      ISZERO \t\t\tactAddress;\\r\\n        emit Va...\n      PUSH [tag] 270\t\t\tactAddress;\\r\\n        emit Va...\n      JUMPI \t\t\tactAddress;\\r\\n        emit Va...\n      PUSH [tag] 271\t\t\t(block.timestamp,address(vault...\n      PUSH [tag] 176\t\t\t(block.timestamp,address(vault...\n      JUMP \t\t\t(block.timestamp,address(vault...\n    tag 271\t\t\t(block.timestamp,address(vault...\n      JUMPDEST \t\t\t(block.timestamp,address(vault...\n    tag 270\t\t\tactAddress;\\r\\n        emit Va...\n      JUMPDEST \t\t\tactAddress;\\r\\n        emit Va...\n      PUSH 0\t\t\tu\n      PUSH [tag] 272\t\t\ttractAddress address of the NF...\n      DUP6 \t\t\t  * @pa\n      DUP3 \t\t\tract\\r\\n\n      DUP7 \t\t\the NFT co\n      ADD \t\t\tof the NFT contract\\r\\n \n      PUSH [tag] 179\t\t\ttractAddress address of the NF...\n      JUMP \t\t\ttractAddress address of the NF...\n    tag 272\t\t\ttractAddress address of the NF...\n      JUMPDEST \t\t\ttractAddress address of the NF...\n      SWAP3 \t\t\tram NFTContractAddress address...\n      POP \t\t\tram NFTContractAddress address...\n      POP \t\t\ton to deposit funds into a vau...\n      PUSH 20\t\t\t *\n      PUSH [tag] 273\t\t\t corresponding amounts for dep...\n      DUP6 \t\t\t    fun\n      DUP3 \t\t\t     *\n      DUP7 \t\t\tr deposit\n      ADD \t\t\ts for deposit\\r\\n     */\n      PUSH [tag] 181\t\t\t corresponding amounts for dep...\n      JUMP \t\t\t corresponding amounts for dep...\n    tag 273\t\t\t corresponding amounts for dep...\n      JUMPDEST \t\t\t corresponding amounts for dep...\n      SWAP2 \t\t\ts Array of corresponding amoun...\n      POP \t\t\ts Array of corresponding amoun...\n      POP \t\t\tf Token IDs for deposit\\r\\n   ...\n      SWAP3 \t\t\t   vaultAddress[_NFTContractAd...\n      POP \t\t\t   vaultAddress[_NFTContractAd...\n      SWAP3 \t\t\t   vaultAddress[_NFTContractAd...\n      SWAP1 \t\t\t   vaultAddress[_NFTContractAd...\n      POP \t\t\t   vaultAddress[_NFTContractAd...\n      JUMP \t\t\t   vaultAddress[_NFTContractAd...\n    tag 182\t\t\tss NFTContractAddress, uint256...\n      JUMPDEST \t\t\tss NFTContractAddress, uint256...\n      PUSH 0\t\t\t(\n      DUP1 \t\t\ti\n      REVERT \t\t\t   require(v\n    tag 183\t\t\tNFTContractAddress] != address...\n      JUMPDEST \t\t\tNFTContractAddress] != address...\n      PUSH 0\t\t\t does \n      PUSH 1F\t\t\t  \n      NOT \t\t\t      u\n      PUSH 1F\t\t\t\\n\\r\n      DUP4 \t\t\tact\")\n      ADD \t\t\tontract\");\\r\\n\\r\\n\n      AND \t\t\tFT contract\");\\r\\n\\r\\n        ...\n      SWAP1 \t\t\tfor this NFT contract\");\\r\\n\\r...\n      POP \t\t\tfor this NFT contract\");\\r\\n\\r...\n      SWAP2 \t\t\tNFTContractAddress] != address...\n      SWAP1 \t\t\tNFTContractAddress] != address...\n      POP \t\t\tNFTContractAddress] != address...\n      JUMP \t\t\tNFTContractAddress] != address...\n    tag 184\t\t\tount = msg.value;\\r\\n        a...\n      JUMPDEST \t\t\tount = msg.value;\\r\\n        a...\n      PUSH 4E487B7100000000000000000000000000000000000000000000000000000000\t\t\tContract_address = payable(get...\n      PUSH 0\t\t\tu\n      MSTORE \t\t\table vaultContract_address = p...\n      PUSH 41\t\t\tngth\n      PUSH 4\t\t\t.\n      MSTORE \t\t\tokenIDs.length \n      PUSH 24\t\t\t\"Mis\n      PUSH 0\t\t\th\n      REVERT \t\t\ts.length, \"Mism\n    tag 185\t\t\ts\");\\r\\n        uint256 totalA...\n      JUMPDEST \t\t\ts\");\\r\\n        uint256 totalA...\n      PUSH [tag] 278\t\t\tddress);\\r\\n        require(v\n      DUP3 \t\t\tire(\n      PUSH [tag] 183\t\t\tddress);\\r\\n        require(v\n      JUMP \t\t\tddress);\\r\\n        require(v\n    tag 278\t\t\tddress);\\r\\n        require(v\n      JUMPDEST \t\t\tddress);\\r\\n        require(v\n      DUP2 \t\t\tntract\n      ADD \t\t\tltContract_address);\\r\\n      ...\n      DUP2 \t\t\tr (uin\n      DUP2 \t\t\t\\r\\n        \n      LT \t\t\t\");\\r\\n        for (uint\n      PUSH FFFFFFFFFFFFFFFF\t\t\tdeposit funds into\n      DUP3 \t\t\td vault ca\n      GT \t\t\tated vault can deposit funds i...\n      OR \t\t\tcreated vault can deposit fund...\n      ISZERO \t\t\tho created vault can deposit f...\n      PUSH [tag] 279\t\t\tho created vault can deposit f...\n      JUMPI \t\t\tho created vault can deposit f...\n      PUSH [tag] 280\t\t\ti = 0; i < _tokenI\n      PUSH [tag] 184\t\t\ti = 0; i < _tokenI\n      JUMP \t\t\ti = 0; i < _tokenI\n    tag 280\t\t\ti = 0; i < _tokenI\n      JUMPDEST \t\t\ti = 0; i < _tokenI\n    tag 279\t\t\tho created vault can deposit f...\n      JUMPDEST \t\t\tho created vault can deposit f...\n      DUP1 \t\t\t         t\n      PUSH 40\t\t\t\\n \n      MSTORE \t\t\ti++) {\\r\\n            to\n      POP \t\t\t     Vault vault = Vault(vault...\n      POP \t\t\ts\");\\r\\n        uint256 totalA...\n      POP \t\t\ts\");\\r\\n        uint256 totalA...\n      JUMP \t\t\ts\");\\r\\n        uint256 totalA...\n    tag 186\t\t\t amounts[i];\\r\\n        }\\r\\n ...\n      JUMPDEST \t\t\t amounts[i];\\r\\n        }\\r\\n ...\n      PUSH 0\t\t\tequire\n      PUSH [tag] 282\t\t\tmount, \"Mismatched t\n      PUSH [tag] 175\t\t\tmount, \"Mismatched t\n      JUMP \t\t\tmount, \"Mismatched t\n    tag 282\t\t\tmount, \"Mismatched t\n      JUMPDEST \t\t\tmount, \"Mismatched t\n      SWAP1 \t\t\t == totalAmount, \"Mismatched t\n      POP \t\t\t == totalAmount, \"Mismatched t\n      PUSH [tag] 283\t\t\tsit amount\");\\r\\n        for (...\n      DUP3 \t\t\tuint\n      DUP3 \t\t\t   for\n      PUSH [tag] 185\t\t\tsit amount\");\\r\\n        for (...\n      JUMP \t\t\tsit amount\");\\r\\n        for (...\n    tag 283\t\t\tsit amount\");\\r\\n        for (...\n      JUMPDEST \t\t\tsit amount\");\\r\\n        for (...\n      SWAP2 \t\t\t amounts[i];\\r\\n        }\\r\\n ...\n      SWAP1 \t\t\t amounts[i];\\r\\n        }\\r\\n ...\n      POP \t\t\t amounts[i];\\r\\n        }\\r\\n ...\n      JUMP \t\t\t amounts[i];\\r\\n        }\\r\\n ...\n    tag 187\t\t\t< _tokenIDs.length; i++) {\\r\\n...\n      JUMPDEST \t\t\t< _tokenIDs.length; i++) {\\r\\n...\n      PUSH 0\t\t\ts[i]\n      PUSH FFFFFFFFFFFFFFFF\t\t\t\\n     * @dev Funct\n      DUP3 \t\t\t    /*\n      GT \t\t\t\\n\\r\\n    /**\\r\\n     * @dev F...\n      ISZERO \t\t\t }\\r\\n\\r\\n    /**\\r\\n     * @d...\n      PUSH [tag] 285\t\t\t }\\r\\n\\r\\n    /**\\r\\n     * @d...\n      JUMPI \t\t\t }\\r\\n\\r\\n    /**\\r\\n     * @d...\n      PUSH [tag] 286\t\t\tto withdraw funds \n      PUSH [tag] 184\t\t\tto withdraw funds \n      JUMP \t\t\tto withdraw funds \n    tag 286\t\t\tto withdraw funds \n      JUMPDEST \t\t\tto withdraw funds \n    tag 285\t\t\t }\\r\\n\\r\\n    /**\\r\\n     * @d...\n      JUMPDEST \t\t\t }\\r\\n\\r\\n    /**\\r\\n     * @d...\n      PUSH 20\t\t\tontr\n      DUP3 \t\t\tram NF\n      MUL \t\t\t @param NFTContra\n      SWAP1 \t\t\t\\r\\n     * @param NFTContra\n      POP \t\t\t\\r\\n     * @param NFTContra\n      PUSH 20\t\t\tkenI\n      DUP2 \t\t\tram \n      ADD \t\t\t @param tokenID\n      SWAP1 \t\t\t\\r\\n     * @param tokenID\n      POP \t\t\t\\r\\n     * @param tokenID\n      SWAP2 \t\t\t< _tokenIDs.length; i++) {\\r\\n...\n      SWAP1 \t\t\t< _tokenIDs.length; i++) {\\r\\n...\n      POP \t\t\t< _tokenIDs.length; i++) {\\r\\n...\n      JUMP \t\t\t< _tokenIDs.length; i++) {\\r\\n...\n    tag 188\t\t\tken IDs for withdrawal\\r\\n    ...\n      JUMPDEST \t\t\tken IDs for withdrawal\\r\\n    ...\n      PUSH 0\t\t\tn\n      DUP1 \t\t\to\n      REVERT \t\t\temory tokenI\n    tag 189\t\t\trequire(vaultAddress[NFTContra...\n      JUMPDEST \t\t\trequire(vaultAddress[NFTContra...\n      PUSH 0\t\t\tract\"\n      PUSH [tag] 289\t\t\t  address payable vaultContrac...\n      PUSH [tag] 290\t\t\te vaultContract_address = paya...\n      DUP5 \t\t\tontrac\n      PUSH [tag] 187\t\t\te vaultContract_address = paya...\n      JUMP \t\t\te vaultContract_address = paya...\n    tag 290\t\t\te vaultContract_address = paya...\n      JUMPDEST \t\t\te vaultContract_address = paya...\n      PUSH [tag] 186\t\t\t  address payable vaultContrac...\n      JUMP \t\t\t  address payable vaultContrac...\n    tag 289\t\t\t  address payable vaultContrac...\n      JUMPDEST \t\t\t  address payable vaultContrac...\n      SWAP1 \t\t\t \\r\\n        address payable v...\n      POP \t\t\t \\r\\n        address payable v...\n      DUP1 \t\t\tault \n      DUP4 \t\t\tact_ad\n      DUP3 \t\t\tltCon\n      MSTORE \t\t\tult(vaultContract_add\n      PUSH 20\t\t\tlt.a\n      DUP3 \t\t\tire(v\n      ADD \t\t\trequire(vault.ad\n      SWAP1 \t\t\t       require(vault.ad\n      POP \t\t\t       require(vault.ad\n      PUSH 20\t\t\td va\n      DUP5 \t\t\to crea\n      MUL \t\t\tn who created vau\n      DUP4 \t\t\the per\n      ADD \t\t\tly the person who created vaul\n      DUP6 \t\t\t\\r\\n \n      DUP2 \t\t\tfunds\"\n      GT \t\t\taw funds\");\\r\\n  \n      ISZERO \t\t\thdraw funds\");\\r\\n        vaul...\n      PUSH [tag] 291\t\t\thdraw funds\");\\r\\n        vaul...\n      JUMPI \t\t\thdraw funds\");\\r\\n        vaul...\n      PUSH [tag] 292\t\t\thdraw(payable(msg.sender), tok...\n      PUSH [tag] 188\t\t\thdraw(payable(msg.sender), tok...\n      JUMP \t\t\thdraw(payable(msg.sender), tok...\n    tag 292\t\t\thdraw(payable(msg.sender), tok...\n      JUMPDEST \t\t\thdraw(payable(msg.sender), tok...\n    tag 291\t\t\thdraw funds\");\\r\\n        vaul...\n      JUMPDEST \t\t\thdraw funds\");\\r\\n        vaul...\n      DUP4 \t\t\t  * @p\n    tag 293\t\t\tfrom a vault\\r\\n     * @param ...\n      JUMPDEST \t\t\tfrom a vault\\r\\n     * @param ...\n      DUP2 \t\t\ttractA\n      DUP2 \t\t\tFTC\n      LT \t\t\tm NFTContractAd\n      ISZERO \t\t\tfrom a vault\\r\\n     * @param ...\n      PUSH [tag] 295\t\t\tfrom a vault\\r\\n     * @param ...\n      JUMPI \t\t\tfrom a vault\\r\\n     * @param ...\n      DUP1 \t\t\to c\n      PUSH [tag] 296\t\t\tn claim(address NFTContractAdd...\n      DUP9 \t\t\ts, \n      DUP3 \t\t\tntractAddr\n      PUSH [tag] 181\t\t\tn claim(address NFTContractAdd...\n      JUMP \t\t\tn claim(address NFTContractAdd...\n    tag 296\t\t\tn claim(address NFTContractAdd...\n      JUMPDEST \t\t\tn claim(address NFTContractAdd...\n      DUP5 \t\t\tnct\n      MSTORE \t\t\t\\n    function claim(address N...\n      PUSH 20\t\t\te {\\r\n      DUP5 \t\t\taya\n      ADD \t\t\tic payable {\\r\\n\n      SWAP4 \t\t\tD) public payable {\\r\\n\n      POP \t\t\tD) public payable {\\r\\n\n      POP \t\t\t     * @param _tokenID Token I...\n      PUSH 20\t\t\te NF\n      DUP2 \t\t\tof \n      ADD \t\t\tess of the NFT\n      SWAP1 \t\t\tss address of the NFT\n      POP \t\t\tss address of the NFT\n      PUSH [tag] 293\t\t\tfrom a vault\\r\\n     * @param ...\n      JUMP \t\t\tfrom a vault\\r\\n     * @param ...\n    tag 295\t\t\tfrom a vault\\r\\n     * @param ...\n      JUMPDEST \t\t\tfrom a vault\\r\\n     * @param ...\n      POP \t\t\t a vault\\r\\n     * @par\n      POP \t\t\t;\\r\\n        \\r\\n        addre...\n      POP \t\t\t;\\r\\n        \\r\\n        addre...\n      SWAP4 \t\t\trequire(vaultAddress[NFTContra...\n      SWAP3 \t\t\trequire(vaultAddress[NFTContra...\n      POP \t\t\trequire(vaultAddress[NFTContra...\n      POP \t\t\trequire(vaultAddress[NFTContra...\n      POP \t\t\trequire(vaultAddress[NFTContra...\n      JUMP \t\t\trequire(vaultAddress[NFTContra...\n    tag 190\t\t\ttAddress] != address(0), \"Vaul...\n      JUMPDEST \t\t\ttAddress] != address(0), \"Vaul...\n      PUSH 0\t\t\t;\\r\\n\\r\\n\n      DUP3 \t\t\tres\n      PUSH 1F\t\t\tract\n      DUP4 \t\t\t(NFTCo\n      ADD \t\t\tC721(NFTContractA\n      SLT \t\t\t= ERC721(NFTContractAddress\n      PUSH [tag] 298\t\t\t721 token = ERC721(NFTContract...\n      JUMPI \t\t\t721 token = ERC721(NFTContract...\n      PUSH [tag] 299\t\t\t        ERC721Burnable asset =...\n      PUSH [tag] 182\t\t\t        ERC721Burnable asset =...\n      JUMP \t\t\t        ERC721Burnable asset =...\n    tag 299\t\t\t        ERC721Burnable asset =...\n      JUMPDEST \t\t\t        ERC721Burnable asset =...\n    tag 298\t\t\t721 token = ERC721(NFTContract...\n      JUMPDEST \t\t\t721 token = ERC721(NFTContract...\n      DUP2 \t\t\t payab\n      CALLDATALOAD \t\t\tact_address = payabl\n      PUSH [tag] 300\t\t\tss(NFTContractAddress));\\r\\n  ...\n      DUP5 \t\t\t\\n  \n      DUP3 \t\t\t      \n      PUSH 20\t\t\tID);\n      DUP7 \t\t\tf(_tok\n      ADD \t\t\tnerOf(_tokenID);\\r\n      PUSH [tag] 189\t\t\tss(NFTContractAddress));\\r\\n  ...\n      JUMP \t\t\tss(NFTContractAddress));\\r\\n  ...\n    tag 300\t\t\tss(NFTContractAddress));\\r\\n  ...\n      JUMPDEST \t\t\tss(NFTContractAddress));\\r\\n  ...\n      SWAP2 \t\t\tractAddress(NFTContractAddress...\n      POP \t\t\tractAddress(NFTContractAddress...\n      POP \t\t\t       ERC721 token = ERC721(N...\n      SWAP3 \t\t\ttAddress] != address(0), \"Vaul...\n      SWAP2 \t\t\ttAddress] != address(0), \"Vaul...\n      POP \t\t\ttAddress] != address(0), \"Vaul...\n      POP \t\t\ttAddress] != address(0), \"Vaul...\n      JUMP \t\t\ttAddress] != address(0), \"Vaul...\n    tag 40\t\t\t(tokenOwner == msg.sender, \"Yo...\n      JUMPDEST \t\t\t(tokenOwner == msg.sender, \"Yo...\n      PUSH 0\t\t\ts), \"C\n      DUP1 \t\t\ttract \n      PUSH 0\t\t\tt appr\n      PUSH 60\t\t\t(_\n      DUP5 \t\t\t  asset.b\n      DUP7 \t\t\t\\n\\r\\n    \n      SUB \t\t\t\");\\r\\n\\r\\n        asset.bu\n      SLT \t\t\token\");\\r\\n\\r\\n        asset.b...\n      ISZERO \t\t\tn token\");\\r\\n\\r\\n        asse...\n      PUSH [tag] 302\t\t\tn token\");\\r\\n\\r\\n        asse...\n      JUMPI \t\t\tn token\");\\r\\n\\r\\n        asse...\n      PUSH [tag] 303\t\t\tnID);\\r\\n\\r\\n        address p...\n      PUSH [tag] 176\t\t\tnID);\\r\\n\\r\\n        address p...\n      JUMP \t\t\tnID);\\r\\n\\r\\n        address p...\n    tag 303\t\t\tnID);\\r\\n\\r\\n        address p...\n      JUMPDEST \t\t\tnID);\\r\\n\\r\\n        address p...\n    tag 302\t\t\tn token\");\\r\\n\\r\\n        asse...\n      JUMPDEST \t\t\tn token\");\\r\\n\\r\\n        asse...\n      PUSH 0\t\t\t\\r\n      PUSH [tag] 304\t\t\ts(recipient, _tokenID);\\r\\n   ...\n      DUP7 \t\t\t   * @d\n      DUP3 \t\t\t  /**\\r\n      DUP8 \t\t\t    }\\r\\n\\r\\n\n      ADD \t\t\t);\\r\\n    }\\r\\n\\r\\n    /**\\r\\n\n      PUSH [tag] 179\t\t\ts(recipient, _tokenID);\\r\\n   ...\n      JUMP \t\t\ts(recipient, _tokenID);\\r\\n   ...\n    tag 304\t\t\ts(recipient, _tokenID);\\r\\n   ...\n      JUMPDEST \t\t\ts(recipient, _tokenID);\\r\\n   ...\n      SWAP4 \t\t\t.claimFunds(recipient, _tokenI...\n      POP \t\t\t.claimFunds(recipient, _tokenI...\n      POP \t\t\tult(vaultContract_address);\\r\\...\n      PUSH 20\t\t\ttA\n      DUP5 \t\t\t NFTContr\n      ADD \t\t\taram NFTContractAd\n      CALLDATALOAD \t\t\tlt\\r\\n     * @param NFTContrac...\n      PUSH FFFFFFFFFFFFFFFF\t\t\ttract\\r\\n     * @ret\n      DUP2 \t\t\t NFT c\n      GT \t\t\tthe NFT contract\\r\\n     * @re...\n      ISZERO \t\t\tof the NFT contract\\r\\n     * ...\n      PUSH [tag] 305\t\t\tof the NFT contract\\r\\n     * ...\n      JUMPI \t\t\tof the NFT contract\\r\\n     * ...\n      PUSH [tag] 306\t\t\tAddress of the vault contract\\...\n      PUSH [tag] 177\t\t\tAddress of the vault contract\\...\n      JUMP \t\t\tAddress of the vault contract\\...\n    tag 306\t\t\tAddress of the vault contract\\...\n      JUMPDEST \t\t\tAddress of the vault contract\\...\n    tag 305\t\t\tof the NFT contract\\r\\n     * ...\n      JUMPDEST \t\t\tof the NFT contract\\r\\n     * ...\n      PUSH [tag] 307\t\t\tc view returns(address){\\r\\n  ...\n      DUP7 \t\t\tss];\\r\\n \n      DUP3 \t\t\tractAd\n      DUP8 \t\t\tess[NFTCo\n      ADD \t\t\tAddress[NFTContractAdd\n      PUSH [tag] 190\t\t\tc view returns(address){\\r\\n  ...\n      JUMP \t\t\tc view returns(address){\\r\\n  ...\n    tag 307\t\t\tc view returns(address){\\r\\n  ...\n      JUMPDEST \t\t\tc view returns(address){\\r\\n  ...\n      SWAP3 \t\t\tess) public view returns(addre...\n      POP \t\t\tess) public view returns(addre...\n      POP \t\t\te contract address of the vaul...\n      PUSH 40\t\t\tit\n      DUP5 \t\t\tssociated\n      ADD \t\t\tlt associated with\n      CALLDATALOAD \t\t\tls of the vault associated wit...\n      PUSH FFFFFFFFFFFFFFFF\t\t\tA tuple containing\n      DUP2 \t\t\t@retur\n      GT \t\t\t * @return A tuple containing \n      ISZERO \t\t\t    * @return A tuple containi...\n      PUSH [tag] 308\t\t\t    * @return A tuple containi...\n      JUMPI \t\t\t    * @return A tuple containi...\n      PUSH [tag] 309\t\t\t total balance of the vault, m...\n      PUSH [tag] 177\t\t\t total balance of the vault, m...\n      JUMP \t\t\t total balance of the vault, m...\n    tag 309\t\t\t total balance of the vault, m...\n      JUMPDEST \t\t\t total balance of the vault, m...\n    tag 308\t\t\t    * @return A tuple containi...\n      JUMPDEST \t\t\t    * @return A tuple containi...\n      PUSH [tag] 310\t\t\tssociated NFT contract address...\n      DUP7 \t\t\ts() pub\n      DUP3 \t\t\tultDet\n      DUP8 \t\t\tion getMy\n      ADD \t\t\tunction getMyVaultDeta\n      PUSH [tag] 190\t\t\tssociated NFT contract address...\n      JUMP \t\t\tssociated NFT contract address...\n    tag 310\t\t\tssociated NFT contract address...\n      JUMPDEST \t\t\tssociated NFT contract address...\n      SWAP2 \t\t\t and the associated NFT contra...\n      POP \t\t\t and the associated NFT contra...\n      POP \t\t\t * @dev Function to get detail...\n      SWAP3 \t\t\t(tokenOwner == msg.sender, \"Yo...\n      POP \t\t\t(tokenOwner == msg.sender, \"Yo...\n      SWAP3 \t\t\t(tokenOwner == msg.sender, \"Yo...\n      POP \t\t\t(tokenOwner == msg.sender, \"Yo...\n      SWAP3 \t\t\t(tokenOwner == msg.sender, \"Yo...\n      JUMP \t\t\t(tokenOwner == msg.sender, \"Yo...\n    tag 44\t\t\t6, uint256, uint256[] memory, ...\n      JUMPDEST \t\t\t6, uint256, uint256[] memory, ...\n      PUSH 0\t\t\tder];\\r\n      DUP1 \t\t\t      \n      PUSH 40\t\t\t\"N\n      DUP4 \t\t\taddress(0\n      DUP6 \t\t\tdress !\n      SUB \t\t\tctAddress != address(0)\n      SLT \t\t\tntractAddress != address(0), \"...\n      ISZERO \t\t\ttContractAddress != address(0)...\n      PUSH [tag] 312\t\t\ttContractAddress != address(0)...\n      JUMPI \t\t\ttContractAddress != address(0)...\n      PUSH [tag] 313\t\t\tT contract associated with cal...\n      PUSH [tag] 176\t\t\tT contract associated with cal...\n      JUMP \t\t\tT contract associated with cal...\n    tag 313\t\t\tT contract associated with cal...\n      JUMPDEST \t\t\tT contract associated with cal...\n    tag 312\t\t\ttContractAddress != address(0)...\n      JUMPDEST \t\t\ttContractAddress != address(0)...\n      PUSH 0\t\t\t \n      PUSH [tag] 314\t\t\tdress != address(0), \"No vault...\n      DUP6 \t\t\th calle\n      DUP3 \t\t\tiated \n      DUP7 \t\t\tvault ass\n      ADD \t\t\t\"No vault associated w\n      PUSH [tag] 179\t\t\tdress != address(0), \"No vault...\n      JUMP \t\t\tdress != address(0), \"No vault...\n    tag 314\t\t\tdress != address(0), \"No vault...\n      JUMPDEST \t\t\tdress != address(0), \"No vault...\n      SWAP3 \t\t\tContractAddress != address(0),...\n      POP \t\t\tContractAddress != address(0),...\n      POP \t\t\t[nftContractAddress];\\r\\n     ...\n      PUSH 20\t\t\ts)\n      DUP4 \t\t\ttractAddr\n      ADD \t\t\ttContractAddress))\n      CALLDATALOAD \t\t\t(payable(vaultContractAddress)...\n      PUSH FFFFFFFFFFFFFFFF\t\t\tnce = address(vaul\n      DUP2 \t\t\totalBa\n      GT \t\t\t6 totalBalance = address(vault\n      ISZERO \t\t\tt256 totalBalance = address(va...\n      PUSH [tag] 315\t\t\tt256 totalBalance = address(va...\n      JUMPI \t\t\tt256 totalBalance = address(va...\n      PUSH [tag] 316\t\t\talance;\\r\\n        uint256 min...\n      PUSH [tag] 177\t\t\talance;\\r\\n        uint256 min...\n      JUMP \t\t\talance;\\r\\n        uint256 min...\n    tag 316\t\t\talance;\\r\\n        uint256 min...\n      JUMPDEST \t\t\talance;\\r\\n        uint256 min...\n    tag 315\t\t\tt256 totalBalance = address(va...\n      JUMPDEST \t\t\tt256 totalBalance = address(va...\n      PUSH [tag] 317\t\t\turedTokenIds = vault.getTokenI...\n      DUP6 \t\t\tinimumW\n      DUP3 \t\t\talance\n      DUP7 \t\t\turn (tota\n      ADD \t\t\t return (totalBalance,\n      PUSH [tag] 190\t\t\turedTokenIds = vault.getTokenI...\n      JUMP \t\t\turedTokenIds = vault.getTokenI...\n    tag 317\t\t\turedTokenIds = vault.getTokenI...\n      JUMPDEST \t\t\turedTokenIds = vault.getTokenI...\n      SWAP2 \t\t\tmemory insuredTokenIds = vault...\n      POP \t\t\tmemory insuredTokenIds = vault...\n      POP \t\t\t\\r\\n        Vault vault = Vaul...\n      SWAP3 \t\t\t6, uint256, uint256[] memory, ...\n      POP \t\t\t6, uint256, uint256[] memory, ...\n      SWAP3 \t\t\t6, uint256, uint256[] memory, ...\n      SWAP1 \t\t\t6, uint256, uint256[] memory, ...\n      POP \t\t\t6, uint256, uint256[] memory, ...\n      JUMP \t\t\t6, uint256, uint256[] memory, ...\n    tag 191\t\t\tnIds, nftContractAddress);\\r\\n...\n      JUMPDEST \t\t\tnIds, nftContractAddress);\\r\\n...\n      PUSH 0\t\t\t\n      DUP3 \t\t\t\n      DUP3 \t\t\t\n      MSTORE \t\t\t\n      PUSH 20\t\t\t\n      DUP3 \t\t\t\n      ADD \t\t\t\n      SWAP1 \t\t\t\n      POP \t\t\t\n      SWAP3 \t\t\tnIds, nftContractAddress);\\r\\n...\n      SWAP2 \t\t\tnIds, nftContractAddress);\\r\\n...\n      POP \t\t\tnIds, nftContractAddress);\\r\\n...\n      POP \t\t\tnIds, nftContractAddress);\\r\\n...\n      JUMP \t\t\tnIds, nftContractAddress);\\r\\n...\n    tag 192\t\t\t\n      JUMPDEST \t\t\t\n      PUSH 4E6F204E465420636F6E7472616374206173736F636961746564207769746820\t\t\t\n      PUSH 0\t\t\t\n      DUP3 \t\t\t\n      ADD \t\t\t\n      MSTORE \t\t\t\n      PUSH 63616C6C65720000000000000000000000000000000000000000000000000000\t\t\t\n      PUSH 20\t\t\t\n      DUP3 \t\t\t\n      ADD \t\t\t\n      MSTORE \t\t\t\n      POP \t\t\t\n      JUMP \t\t\t\n    tag 193\t\t\t\n      JUMPDEST \t\t\t\n      PUSH 0\t\t\t\n      PUSH [tag] 321\t\t\t\n      PUSH 26\t\t\t\n      DUP4 \t\t\t\n      PUSH [tag] 191\t\t\t\n      JUMP \t\t\t\n    tag 321\t\t\t\n      JUMPDEST \t\t\t\n      SWAP2 \t\t\t\n      POP \t\t\t\n      PUSH [tag] 322\t\t\t\n      DUP3 \t\t\t\n      PUSH [tag] 192\t\t\t\n      JUMP \t\t\t\n    tag 322\t\t\t\n      JUMPDEST \t\t\t\n      PUSH 40\t\t\t\n      DUP3 \t\t\t\n      ADD \t\t\t\n      SWAP1 \t\t\t\n      POP \t\t\t\n      SWAP2 \t\t\t\n      SWAP1 \t\t\t\n      POP \t\t\t\n      JUMP \t\t\t\n    tag 52\t\t\t\n      JUMPDEST \t\t\t\n      PUSH 0\t\t\t\n      PUSH 20\t\t\t\n      DUP3 \t\t\t\n      ADD \t\t\t\n      SWAP1 \t\t\t\n      POP \t\t\t\n      DUP2 \t\t\t\n      DUP2 \t\t\t\n      SUB \t\t\t\n      PUSH 0\t\t\t\n      DUP4 \t\t\t\n      ADD \t\t\t\n      MSTORE \t\t\t\n      PUSH [tag] 324\t\t\t\n      DUP2 \t\t\t\n      PUSH [tag] 193\t\t\t\n      JUMP \t\t\t\n    tag 324\t\t\t\n      JUMPDEST \t\t\t\n      SWAP1 \t\t\t\n      POP \t\t\t\n      SWAP2 \t\t\t\n      SWAP1 \t\t\t\n      POP \t\t\t\n      JUMP \t\t\t\n    tag 194\t\t\t\n      JUMPDEST \t\t\t\n      PUSH 4E6F207661756C74206173736F63696174656420776974682063616C6C657227\t\t\t\n      PUSH 0\t\t\t\n      DUP3 \t\t\t\n      ADD \t\t\t\n      MSTORE \t\t\t\n      PUSH 73204E465420636F6E7472616374000000000000000000000000000000000000\t\t\t\n      PUSH 20\t\t\t\n      DUP3 \t\t\t\n      ADD \t\t\t\n      MSTORE \t\t\t\n      POP \t\t\t\n      JUMP \t\t\t\n    tag 195\t\t\t\n      JUMPDEST \t\t\t\n      PUSH 0\t\t\t\n      PUSH [tag] 327\t\t\t\n      PUSH 2E\t\t\t\n      DUP4 \t\t\t\n      PUSH [tag] 191\t\t\t\n      JUMP \t\t\t\n    tag 327\t\t\t\n      JUMPDEST \t\t\t\n      SWAP2 \t\t\t\n      POP \t\t\t\n      PUSH [tag] 328\t\t\t\n      DUP3 \t\t\t\n      PUSH [tag] 194\t\t\t\n      JUMP \t\t\t\n    tag 328\t\t\t\n      JUMPDEST \t\t\t\n      PUSH 40\t\t\t\n      DUP3 \t\t\t\n      ADD \t\t\t\n      SWAP1 \t\t\t\n      POP \t\t\t\n      SWAP2 \t\t\t\n      SWAP1 \t\t\t\n      POP \t\t\t\n      JUMP \t\t\t\n    tag 55\t\t\t\n      JUMPDEST \t\t\t\n      PUSH 0\t\t\t\n      PUSH 20\t\t\t\n      DUP3 \t\t\t\n      ADD \t\t\t\n      SWAP1 \t\t\t\n      POP \t\t\t\n      DUP2 \t\t\t\n      DUP2 \t\t\t\n      SUB \t\t\t\n      PUSH 0\t\t\t\n      DUP4 \t\t\t\n      ADD \t\t\t\n      MSTORE \t\t\t\n      PUSH [tag] 330\t\t\t\n      DUP2 \t\t\t\n      PUSH [tag] 195\t\t\t\n      JUMP \t\t\t\n    tag 330\t\t\t\n      JUMPDEST \t\t\t\n      SWAP1 \t\t\t\n      POP \t\t\t\n      SWAP2 \t\t\t\n      SWAP1 \t\t\t\n      POP \t\t\t\n      JUMP \t\t\t\n    tag 196\t\t\t\n      JUMPDEST \t\t\t\n      PUSH 0\t\t\t\n      DUP2 \t\t\t\n      MLOAD \t\t\t\n      SWAP1 \t\t\t\n      POP \t\t\t\n      PUSH [tag] 332\t\t\t\n      DUP2 \t\t\t\n      PUSH [tag] 180\t\t\t\n      JUMP \t\t\t\n    tag 332\t\t\t\n      JUMPDEST \t\t\t\n      SWAP3 \t\t\t\n      SWAP2 \t\t\t\n      POP \t\t\t\n      POP \t\t\t\n      JUMP \t\t\t\n    tag 59\t\t\t\n      JUMPDEST \t\t\t\n      PUSH 0\t\t\t\n      PUSH 20\t\t\t\n      DUP3 \t\t\t\n      DUP5 \t\t\t\n      SUB \t\t\t\n      SLT \t\t\t\n      ISZERO \t\t\t\n      PUSH [tag] 334\t\t\t\n      JUMPI \t\t\t\n      PUSH [tag] 335\t\t\t\n      PUSH [tag] 176\t\t\t\n      JUMP \t\t\t\n    tag 335\t\t\t\n      JUMPDEST \t\t\t\n    tag 334\t\t\t\n      JUMPDEST \t\t\t\n      PUSH 0\t\t\t\n      PUSH [tag] 336\t\t\t\n      DUP5 \t\t\t\n      DUP3 \t\t\t\n      DUP6 \t\t\t\n      ADD \t\t\t\n      PUSH [tag] 196\t\t\t\n      JUMP \t\t\t\n    tag 336\t\t\t\n      JUMPDEST \t\t\t\n      SWAP2 \t\t\t\n      POP \t\t\t\n      POP \t\t\t\n      SWAP3 \t\t\t\n      SWAP2 \t\t\t\n      POP \t\t\t\n      POP \t\t\t\n      JUMP \t\t\t\n    tag 197\t\t\t\n      JUMPDEST \t\t\t\n      PUSH 0\t\t\t\n      PUSH [tag] 338\t\t\t\n      PUSH [tag] 339\t\t\t\n      DUP5 \t\t\t\n      PUSH [tag] 187\t\t\t\n      JUMP \t\t\t\n    tag 339\t\t\t\n      JUMPDEST \t\t\t\n      PUSH [tag] 186\t\t\t\n      JUMP \t\t\t\n    tag 338\t\t\t\n      JUMPDEST \t\t\t\n      SWAP1 \t\t\t\n      POP \t\t\t\n      DUP1 \t\t\t\n      DUP4 \t\t\t\n      DUP3 \t\t\t\n      MSTORE \t\t\t\n      PUSH 20\t\t\t\n      DUP3 \t\t\t\n      ADD \t\t\t\n      SWAP1 \t\t\t\n      POP \t\t\t\n      PUSH 20\t\t\t\n      DUP5 \t\t\t\n      MUL \t\t\t\n      DUP4 \t\t\t\n      ADD \t\t\t\n      DUP6 \t\t\t\n      DUP2 \t\t\t\n      GT \t\t\t\n      ISZERO \t\t\t\n      PUSH [tag] 340\t\t\t\n      JUMPI \t\t\t\n      PUSH [tag] 341\t\t\t\n      PUSH [tag] 188\t\t\t\n      JUMP \t\t\t\n    tag 341\t\t\t\n      JUMPDEST \t\t\t\n    tag 340\t\t\t\n      JUMPDEST \t\t\t\n      DUP4 \t\t\t\n    tag 342\t\t\t\n      JUMPDEST \t\t\t\n      DUP2 \t\t\t\n      DUP2 \t\t\t\n      LT \t\t\t\n      ISZERO \t\t\t\n      PUSH [tag] 344\t\t\t\n      JUMPI \t\t\t\n      DUP1 \t\t\t\n      PUSH [tag] 345\t\t\t\n      DUP9 \t\t\t\n      DUP3 \t\t\t\n      PUSH [tag] 196\t\t\t\n      JUMP \t\t\t\n    tag 345\t\t\t\n      JUMPDEST \t\t\t\n      DUP5 \t\t\t\n      MSTORE \t\t\t\n      PUSH 20\t\t\t\n      DUP5 \t\t\t\n      ADD \t\t\t\n      SWAP4 \t\t\t\n      POP \t\t\t\n      POP \t\t\t\n      PUSH 20\t\t\t\n      DUP2 \t\t\t\n      ADD \t\t\t\n      SWAP1 \t\t\t\n      POP \t\t\t\n      PUSH [tag] 342\t\t\t\n      JUMP \t\t\t\n    tag 344\t\t\t\n      JUMPDEST \t\t\t\n      POP \t\t\t\n      POP \t\t\t\n      POP \t\t\t\n      SWAP4 \t\t\t\n      SWAP3 \t\t\t\n      POP \t\t\t\n      POP \t\t\t\n      POP \t\t\t\n      JUMP \t\t\t\n    tag 198\t\t\t\n      JUMPDEST \t\t\t\n      PUSH 0\t\t\t\n      DUP3 \t\t\t\n      PUSH 1F\t\t\t\n      DUP4 \t\t\t\n      ADD \t\t\t\n      SLT \t\t\t\n      PUSH [tag] 347\t\t\t\n      JUMPI \t\t\t\n      PUSH [tag] 348\t\t\t\n      PUSH [tag] 182\t\t\t\n      JUMP \t\t\t\n    tag 348\t\t\t\n      JUMPDEST \t\t\t\n    tag 347\t\t\t\n      JUMPDEST \t\t\t\n      DUP2 \t\t\t\n      MLOAD \t\t\t\n      PUSH [tag] 349\t\t\t\n      DUP5 \t\t\t\n      DUP3 \t\t\t\n      PUSH 20\t\t\t\n      DUP7 \t\t\t\n      ADD \t\t\t\n      PUSH [tag] 197\t\t\t\n      JUMP \t\t\t\n    tag 349\t\t\t\n      JUMPDEST \t\t\t\n      SWAP2 \t\t\t\n      POP \t\t\t\n      POP \t\t\t\n      SWAP3 \t\t\t\n      SWAP2 \t\t\t\n      POP \t\t\t\n      POP \t\t\t\n      JUMP \t\t\t\n    tag 63\t\t\t\n      JUMPDEST \t\t\t\n      PUSH 0\t\t\t\n      PUSH 20\t\t\t\n      DUP3 \t\t\t\n      DUP5 \t\t\t\n      SUB \t\t\t\n      SLT \t\t\t\n      ISZERO \t\t\t\n      PUSH [tag] 351\t\t\t\n      JUMPI \t\t\t\n      PUSH [tag] 352\t\t\t\n      PUSH [tag] 176\t\t\t\n      JUMP \t\t\t\n    tag 352\t\t\t\n      JUMPDEST \t\t\t\n    tag 351\t\t\t\n      JUMPDEST \t\t\t\n      PUSH 0\t\t\t\n      DUP3 \t\t\t\n      ADD \t\t\t\n      MLOAD \t\t\t\n      PUSH FFFFFFFFFFFFFFFF\t\t\t\n      DUP2 \t\t\t\n      GT \t\t\t\n      ISZERO \t\t\t\n      PUSH [tag] 353\t\t\t\n      JUMPI \t\t\t\n      PUSH [tag] 354\t\t\t\n      PUSH [tag] 177\t\t\t\n      JUMP \t\t\t\n    tag 354\t\t\t\n      JUMPDEST \t\t\t\n    tag 353\t\t\t\n      JUMPDEST \t\t\t\n      PUSH [tag] 355\t\t\t\n      DUP5 \t\t\t\n      DUP3 \t\t\t\n      DUP6 \t\t\t\n      ADD \t\t\t\n      PUSH [tag] 198\t\t\t\n      JUMP \t\t\t\n    tag 355\t\t\t\n      JUMPDEST \t\t\t\n      SWAP2 \t\t\t\n      POP \t\t\t\n      POP \t\t\t\n      SWAP3 \t\t\t\n      SWAP2 \t\t\t\n      POP \t\t\t\n      POP \t\t\t\n      JUMP \t\t\t\n    tag 199\t\t\t\n      JUMPDEST \t\t\t\n      PUSH 5661756C7420616C72656164792065786973747320666F722074686973204E46\t\t\t\n      PUSH 0\t\t\t\n      DUP3 \t\t\t\n      ADD \t\t\t\n      MSTORE \t\t\t\n      PUSH 5420636F6E747261637400000000000000000000000000000000000000000000\t\t\t\n      PUSH 20\t\t\t\n      DUP3 \t\t\t\n      ADD \t\t\t\n      MSTORE \t\t\t\n      POP \t\t\t\n      JUMP \t\t\t\n    tag 200\t\t\t\n      JUMPDEST \t\t\t\n      PUSH 0\t\t\t\n      PUSH [tag] 358\t\t\t\n      PUSH 2A\t\t\t\n      DUP4 \t\t\t\n      PUSH [tag] 191\t\t\t\n      JUMP \t\t\t\n    tag 358\t\t\t\n      JUMPDEST \t\t\t\n      SWAP2 \t\t\t\n      POP \t\t\t\n      PUSH [tag] 359\t\t\t\n      DUP3 \t\t\t\n      PUSH [tag] 199\t\t\t\n      JUMP \t\t\t\n    tag 359\t\t\t\n      JUMPDEST \t\t\t\n      PUSH 40\t\t\t\n      DUP3 \t\t\t\n      ADD \t\t\t\n      SWAP1 \t\t\t\n      POP \t\t\t\n      SWAP2 \t\t\t\n      SWAP1 \t\t\t\n      POP \t\t\t\n      JUMP \t\t\t\n    tag 67\t\t\t\n      JUMPDEST \t\t\t\n      PUSH 0\t\t\t\n      PUSH 20\t\t\t\n      DUP3 \t\t\t\n      ADD \t\t\t\n      SWAP1 \t\t\t\n      POP \t\t\t\n      DUP2 \t\t\t\n      DUP2 \t\t\t\n      SUB \t\t\t\n      PUSH 0\t\t\t\n      DUP4 \t\t\t\n      ADD \t\t\t\n      MSTORE \t\t\t\n      PUSH [tag] 361\t\t\t\n      DUP2 \t\t\t\n      PUSH [tag] 200\t\t\t\n      JUMP \t\t\t\n    tag 361\t\t\t\n      JUMPDEST \t\t\t\n      SWAP1 \t\t\t\n      POP \t\t\t\n      SWAP2 \t\t\t\n      SWAP1 \t\t\t\n      POP \t\t\t\n      JUMP \t\t\t\n    tag 71\t\t\t\n      JUMPDEST \t\t\t\n      PUSH 0\t\t\t\n      PUSH 60\t\t\t\n      DUP3 \t\t\t\n      ADD \t\t\t\n      SWAP1 \t\t\t\n      POP \t\t\t\n      PUSH [tag] 363\t\t\t\n      PUSH 0\t\t\t\n      DUP4 \t\t\t\n      ADD \t\t\t\n      DUP7 \t\t\t\n      PUSH [tag] 174\t\t\t\n      JUMP \t\t\t\n    tag 363\t\t\t\n      JUMPDEST \t\t\t\n      PUSH [tag] 364\t\t\t\n      PUSH 20\t\t\t\n      DUP4 \t\t\t\n      ADD \t\t\t\n      DUP6 \t\t\t\n      PUSH [tag] 164\t\t\t\n      JUMP \t\t\t\n    tag 364\t\t\t\n      JUMPDEST \t\t\t\n      PUSH [tag] 365\t\t\t\n      PUSH 40\t\t\t\n      DUP4 \t\t\t\n      ADD \t\t\t\n      DUP5 \t\t\t\n      PUSH [tag] 174\t\t\t\n      JUMP \t\t\t\n    tag 365\t\t\t\n      JUMPDEST \t\t\t\n      SWAP5 \t\t\t\n      SWAP4 \t\t\t\n      POP \t\t\t\n      POP \t\t\t\n      POP \t\t\t\n      POP \t\t\t\n      JUMP \t\t\t\n    tag 75\t\t\t\n      JUMPDEST \t\t\t\n      PUSH 0\t\t\t\n      PUSH 60\t\t\t\n      DUP3 \t\t\t\n      ADD \t\t\t\n      SWAP1 \t\t\t\n      POP \t\t\t\n      PUSH [tag] 367\t\t\t\n      PUSH 0\t\t\t\n      DUP4 \t\t\t\n      ADD \t\t\t\n      DUP7 \t\t\t\n      PUSH [tag] 164\t\t\t\n      JUMP \t\t\t\n    tag 367\t\t\t\n      JUMPDEST \t\t\t\n      PUSH [tag] 368\t\t\t\n      PUSH 20\t\t\t\n      DUP4 \t\t\t\n      ADD \t\t\t\n      DUP6 \t\t\t\n      PUSH [tag] 174\t\t\t\n      JUMP \t\t\t\n    tag 368\t\t\t\n      JUMPDEST \t\t\t\n      PUSH [tag] 369\t\t\t\n      PUSH 40\t\t\t\n      DUP4 \t\t\t\n      ADD \t\t\t\n      DUP5 \t\t\t\n      PUSH [tag] 174\t\t\t\n      JUMP \t\t\t\n    tag 369\t\t\t\n      JUMPDEST \t\t\t\n      SWAP5 \t\t\t\n      SWAP4 \t\t\t\n      POP \t\t\t\n      POP \t\t\t\n      POP \t\t\t\n      POP \t\t\t\n      JUMP \t\t\t\n    tag 201\t\t\t\n      JUMPDEST \t\t\t\n      PUSH 5661756C7420646F6573206E6F742065786973747320666F722074686973204E\t\t\t\n      PUSH 0\t\t\t\n      DUP3 \t\t\t\n      ADD \t\t\t\n      MSTORE \t\t\t\n      PUSH 465420636F6E7472616374000000000000000000000000000000000000000000\t\t\t\n      PUSH 20\t\t\t\n      DUP3 \t\t\t\n      ADD \t\t\t\n      MSTORE \t\t\t\n      POP \t\t\t\n      JUMP \t\t\t\n    tag 202\t\t\t\n      JUMPDEST \t\t\t\n      PUSH 0\t\t\t\n      PUSH [tag] 372\t\t\t\n      PUSH 2B\t\t\t\n      DUP4 \t\t\t\n      PUSH [tag] 191\t\t\t\n      JUMP \t\t\t\n    tag 372\t\t\t\n      JUMPDEST \t\t\t\n      SWAP2 \t\t\t\n      POP \t\t\t\n      PUSH [tag] 373\t\t\t\n      DUP3 \t\t\t\n      PUSH [tag] 201\t\t\t\n      JUMP \t\t\t\n    tag 373\t\t\t\n      JUMPDEST \t\t\t\n      PUSH 40\t\t\t\n      DUP3 \t\t\t\n      ADD \t\t\t\n      SWAP1 \t\t\t\n      POP \t\t\t\n      SWAP2 \t\t\t\n      SWAP1 \t\t\t\n      POP \t\t\t\n      JUMP \t\t\t\n    tag 80\t\t\t\n      JUMPDEST \t\t\t\n      PUSH 0\t\t\t\n      PUSH 20\t\t\t\n      DUP3 \t\t\t\n      ADD \t\t\t\n      SWAP1 \t\t\t\n      POP \t\t\t\n      DUP2 \t\t\t\n      DUP2 \t\t\t\n      SUB \t\t\t\n      PUSH 0\t\t\t\n      DUP4 \t\t\t\n      ADD \t\t\t\n      MSTORE \t\t\t\n      PUSH [tag] 375\t\t\t\n      DUP2 \t\t\t\n      PUSH [tag] 202\t\t\t\n      JUMP \t\t\t\n    tag 375\t\t\t\n      JUMPDEST \t\t\t\n      SWAP1 \t\t\t\n      POP \t\t\t\n      SWAP2 \t\t\t\n      SWAP1 \t\t\t\n      POP \t\t\t\n      JUMP \t\t\t\n    tag 203\t\t\t\n      JUMPDEST \t\t\t\n      PUSH 4D69736D61746368656420617272617973000000000000000000000000000000\t\t\t\n      PUSH 0\t\t\t\n      DUP3 \t\t\t\n      ADD \t\t\t\n      MSTORE \t\t\t\n      POP \t\t\t\n      JUMP \t\t\t\n    tag 204\t\t\t\n      JUMPDEST \t\t\t\n      PUSH 0\t\t\t\n      PUSH [tag] 378\t\t\t\n      PUSH 11\t\t\t\n      DUP4 \t\t\t\n      PUSH [tag] 191\t\t\t\n      JUMP \t\t\t\n    tag 378\t\t\t\n      JUMPDEST \t\t\t\n      SWAP2 \t\t\t\n      POP \t\t\t\n      PUSH [tag] 379\t\t\t\n      DUP3 \t\t\t\n      PUSH [tag] 203\t\t\t\n      JUMP \t\t\t\n    tag 379\t\t\t\n      JUMPDEST \t\t\t\n      PUSH 20\t\t\t\n      DUP3 \t\t\t\n      ADD \t\t\t\n      SWAP1 \t\t\t\n      POP \t\t\t\n      SWAP2 \t\t\t\n      SWAP1 \t\t\t\n      POP \t\t\t\n      JUMP \t\t\t\n    tag 84\t\t\t\n      JUMPDEST \t\t\t\n      PUSH 0\t\t\t\n      PUSH 20\t\t\t\n      DUP3 \t\t\t\n      ADD \t\t\t\n      SWAP1 \t\t\t\n      POP \t\t\t\n      DUP2 \t\t\t\n      DUP2 \t\t\t\n      SUB \t\t\t\n      PUSH 0\t\t\t\n      DUP4 \t\t\t\n      ADD \t\t\t\n      MSTORE \t\t\t\n      PUSH [tag] 381\t\t\t\n      DUP2 \t\t\t\n      PUSH [tag] 204\t\t\t\n      JUMP \t\t\t\n    tag 381\t\t\t\n      JUMPDEST \t\t\t\n      SWAP1 \t\t\t\n      POP \t\t\t\n      SWAP2 \t\t\t\n      SWAP1 \t\t\t\n      POP \t\t\t\n      JUMP \t\t\t\n    tag 205\t\t\t\n      JUMPDEST \t\t\t\n      PUSH 0\t\t\t\n      DUP2 \t\t\t\n      MLOAD \t\t\t\n      SWAP1 \t\t\t\n      POP \t\t\t\n      PUSH [tag] 383\t\t\t\n      DUP2 \t\t\t\n      PUSH [tag] 178\t\t\t\n      JUMP \t\t\t\n    tag 383\t\t\t\n      JUMPDEST \t\t\t\n      SWAP3 \t\t\t\n      SWAP2 \t\t\t\n      POP \t\t\t\n      POP \t\t\t\n      JUMP \t\t\t\n    tag 88\t\t\t\n      JUMPDEST \t\t\t\n      PUSH 0\t\t\t\n      PUSH 20\t\t\t\n      DUP3 \t\t\t\n      DUP5 \t\t\t\n      SUB \t\t\t\n      SLT \t\t\t\n      ISZERO \t\t\t\n      PUSH [tag] 385\t\t\t\n      JUMPI \t\t\t\n      PUSH [tag] 386\t\t\t\n      PUSH [tag] 176\t\t\t\n      JUMP \t\t\t\n    tag 386\t\t\t\n      JUMPDEST \t\t\t\n    tag 385\t\t\t\n      JUMPDEST \t\t\t\n      PUSH 0\t\t\t\n      PUSH [tag] 387\t\t\t\n      DUP5 \t\t\t\n      DUP3 \t\t\t\n      DUP6 \t\t\t\n      ADD \t\t\t\n      PUSH [tag] 205\t\t\t\n      JUMP \t\t\t\n    tag 387\t\t\t\n      JUMPDEST \t\t\t\n      SWAP2 \t\t\t\n      POP \t\t\t\n      POP \t\t\t\n      SWAP3 \t\t\t\n      SWAP2 \t\t\t\n      POP \t\t\t\n      POP \t\t\t\n      JUMP \t\t\t\n    tag 206\t\t\t\n      JUMPDEST \t\t\t\n      PUSH 4F6E6C792074686520706572736F6E2077686F2063726561746564207661756C\t\t\t\n      PUSH 0\t\t\t\n      DUP3 \t\t\t\n      ADD \t\t\t\n      MSTORE \t\t\t\n      PUSH 742063616E206465706F7369742066756E647320696E746F2069740000000000\t\t\t\n      PUSH 20\t\t\t\n      DUP3 \t\t\t\n      ADD \t\t\t\n      MSTORE \t\t\t\n      POP \t\t\t\n      JUMP \t\t\t\n    tag 207\t\t\t\n      JUMPDEST \t\t\t\n      PUSH 0\t\t\t\n      PUSH [tag] 390\t\t\t\n      PUSH 3B\t\t\t\n      DUP4 \t\t\t\n      PUSH [tag] 191\t\t\t\n      JUMP \t\t\t\n    tag 390\t\t\t\n      JUMPDEST \t\t\t\n      SWAP2 \t\t\t\n      POP \t\t\t\n      PUSH [tag] 391\t\t\t\n      DUP3 \t\t\t\n      PUSH [tag] 206\t\t\t\n      JUMP \t\t\t\n    tag 391\t\t\t\n      JUMPDEST \t\t\t\n      PUSH 40\t\t\t\n      DUP3 \t\t\t\n      ADD \t\t\t\n      SWAP1 \t\t\t\n      POP \t\t\t\n      SWAP2 \t\t\t\n      SWAP1 \t\t\t\n      POP \t\t\t\n      JUMP \t\t\t\n    tag 91\t\t\t\n      JUMPDEST \t\t\t\n      PUSH 0\t\t\t\n      PUSH 20\t\t\t\n      DUP3 \t\t\t\n      ADD \t\t\t\n      SWAP1 \t\t\t\n      POP \t\t\t\n      DUP2 \t\t\t\n      DUP2 \t\t\t\n      SUB \t\t\t\n      PUSH 0\t\t\t\n      DUP4 \t\t\t\n      ADD \t\t\t\n      MSTORE \t\t\t\n      PUSH [tag] 393\t\t\t\n      DUP2 \t\t\t\n      PUSH [tag] 207\t\t\t\n      JUMP \t\t\t\n    tag 393\t\t\t\n      JUMPDEST \t\t\t\n      SWAP1 \t\t\t\n      POP \t\t\t\n      SWAP2 \t\t\t\n      SWAP1 \t\t\t\n      POP \t\t\t\n      JUMP \t\t\t\n    tag 97\t\t\t\n      JUMPDEST \t\t\t\n      PUSH 4E487B7100000000000000000000000000000000000000000000000000000000\t\t\t\n      PUSH 0\t\t\t\n      MSTORE \t\t\t\n      PUSH 32\t\t\t\n      PUSH 4\t\t\t\n      MSTORE \t\t\t\n      PUSH 24\t\t\t\n      PUSH 0\t\t\t\n      REVERT \t\t\t\n    tag 208\t\t\t\n      JUMPDEST \t\t\t\n      PUSH 4E487B7100000000000000000000000000000000000000000000000000000000\t\t\t\n      PUSH 0\t\t\t\n      MSTORE \t\t\t\n      PUSH 11\t\t\t\n      PUSH 4\t\t\t\n      MSTORE \t\t\t\n      PUSH 24\t\t\t\n      PUSH 0\t\t\t\n      REVERT \t\t\t\n    tag 99\t\t\t\n      JUMPDEST \t\t\t\n      PUSH 0\t\t\t\n      PUSH [tag] 397\t\t\t\n      DUP3 \t\t\t\n      PUSH [tag] 163\t\t\t\n      JUMP \t\t\t\n    tag 397\t\t\t\n      JUMPDEST \t\t\t\n      SWAP2 \t\t\t\n      POP \t\t\t\n      PUSH [tag] 398\t\t\t\n      DUP4 \t\t\t\n      PUSH [tag] 163\t\t\t\n      JUMP \t\t\t\n    tag 398\t\t\t\n      JUMPDEST \t\t\t\n      SWAP3 \t\t\t\n      POP \t\t\t\n      DUP3 \t\t\t\n      DUP3 \t\t\t\n      ADD \t\t\t\n      SWAP1 \t\t\t\n      POP \t\t\t\n      DUP1 \t\t\t\n      DUP3 \t\t\t\n      GT \t\t\t\n      ISZERO \t\t\t\n      PUSH [tag] 399\t\t\t\n      JUMPI \t\t\t\n      PUSH [tag] 400\t\t\t\n      PUSH [tag] 208\t\t\t\n      JUMP \t\t\t\n    tag 400\t\t\t\n      JUMPDEST \t\t\t\n    tag 399\t\t\t\n      JUMPDEST \t\t\t\n      SWAP3 \t\t\t\n      SWAP2 \t\t\t\n      POP \t\t\t\n      POP \t\t\t\n      JUMP \t\t\t\n    tag 101\t\t\t\n      JUMPDEST \t\t\t\n      PUSH 0\t\t\t\n      PUSH [tag] 402\t\t\t\n      DUP3 \t\t\t\n      PUSH [tag] 163\t\t\t\n      JUMP \t\t\t\n    tag 402\t\t\t\n      JUMPDEST \t\t\t\n      SWAP2 \t\t\t\n      POP \t\t\t\n      PUSH FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF\t\t\t\n      DUP3 \t\t\t\n      SUB \t\t\t\n      PUSH [tag] 403\t\t\t\n      JUMPI \t\t\t\n      PUSH [tag] 404\t\t\t\n      PUSH [tag] 208\t\t\t\n      JUMP \t\t\t\n    tag 404\t\t\t\n      JUMPDEST \t\t\t\n    tag 403\t\t\t\n      JUMPDEST \t\t\t\n      PUSH 1\t\t\t\n      DUP3 \t\t\t\n      ADD \t\t\t\n      SWAP1 \t\t\t\n      POP \t\t\t\n      SWAP2 \t\t\t\n      SWAP1 \t\t\t\n      POP \t\t\t\n      JUMP \t\t\t\n    tag 209\t\t\t\n      JUMPDEST \t\t\t\n      PUSH 4D69736D61746368656420746F74616C206465706F73697420616D6F756E7400\t\t\t\n      PUSH 0\t\t\t\n      DUP3 \t\t\t\n      ADD \t\t\t\n      MSTORE \t\t\t\n      POP \t\t\t\n      JUMP \t\t\t\n    tag 210\t\t\t\n      JUMPDEST \t\t\t\n      PUSH 0\t\t\t\n      PUSH [tag] 407\t\t\t\n      PUSH 1F\t\t\t\n      DUP4 \t\t\t\n      PUSH [tag] 191\t\t\t\n      JUMP \t\t\t\n    tag 407\t\t\t\n      JUMPDEST \t\t\t\n      SWAP2 \t\t\t\n      POP \t\t\t\n      PUSH [tag] 408\t\t\t\n      DUP3 \t\t\t\n      PUSH [tag] 209\t\t\t\n      JUMP \t\t\t\n    tag 408\t\t\t\n      JUMPDEST \t\t\t\n      PUSH 20\t\t\t\n      DUP3 \t\t\t\n      ADD \t\t\t\n      SWAP1 \t\t\t\n      POP \t\t\t\n      SWAP2 \t\t\t\n      SWAP1 \t\t\t\n      POP \t\t\t\n      JUMP \t\t\t\n    tag 104\t\t\t\n      JUMPDEST \t\t\t\n      PUSH 0\t\t\t\n      PUSH 20\t\t\t\n      DUP3 \t\t\t\n      ADD \t\t\t\n      SWAP1 \t\t\t\n      POP \t\t\t\n      DUP2 \t\t\t\n      DUP2 \t\t\t\n      SUB \t\t\t\n      PUSH 0\t\t\t\n      DUP4 \t\t\t\n      ADD \t\t\t\n      MSTORE \t\t\t\n      PUSH [tag] 410\t\t\t\n      DUP2 \t\t\t\n      PUSH [tag] 210\t\t\t\n      JUMP \t\t\t\n    tag 410\t\t\t\n      JUMPDEST \t\t\t\n      SWAP1 \t\t\t\n      POP \t\t\t\n      SWAP2 \t\t\t\n      SWAP1 \t\t\t\n      POP \t\t\t\n      JUMP \t\t\t\n    tag 113\t\t\t\n      JUMPDEST \t\t\t\n      PUSH 0\t\t\t\n      PUSH 40\t\t\t\n      DUP3 \t\t\t\n      ADD \t\t\t\n      SWAP1 \t\t\t\n      POP \t\t\t\n      PUSH [tag] 412\t\t\t\n      PUSH 0\t\t\t\n      DUP4 \t\t\t\n      ADD \t\t\t\n      DUP6 \t\t\t\n      PUSH [tag] 164\t\t\t\n      JUMP \t\t\t\n    tag 412\t\t\t\n      JUMPDEST \t\t\t\n      PUSH [tag] 413\t\t\t\n      PUSH 20\t\t\t\n      DUP4 \t\t\t\n      ADD \t\t\t\n      DUP5 \t\t\t\n      PUSH [tag] 164\t\t\t\n      JUMP \t\t\t\n    tag 413\t\t\t\n      JUMPDEST \t\t\t\n      SWAP4 \t\t\t\n      SWAP3 \t\t\t\n      POP \t\t\t\n      POP \t\t\t\n      POP \t\t\t\n      JUMP \t\t\t\n    tag 211\t\t\t\n      JUMPDEST \t\t\t\n      PUSH 4F6E6C792074686520706572736F6E2077686F2063726561746564207661756C\t\t\t\n      PUSH 0\t\t\t\n      DUP3 \t\t\t\n      ADD \t\t\t\n      MSTORE \t\t\t\n      PUSH 742063616E2077697468647261772066756E6473000000000000000000000000\t\t\t\n      PUSH 20\t\t\t\n      DUP3 \t\t\t\n      ADD \t\t\t\n      MSTORE \t\t\t\n      POP \t\t\t\n      JUMP \t\t\t\n    tag 212\t\t\t\n      JUMPDEST \t\t\t\n      PUSH 0\t\t\t\n      PUSH [tag] 416\t\t\t\n      PUSH 34\t\t\t\n      DUP4 \t\t\t\n      PUSH [tag] 191\t\t\t\n      JUMP \t\t\t\n    tag 416\t\t\t\n      JUMPDEST \t\t\t\n      SWAP2 \t\t\t\n      POP \t\t\t\n      PUSH [tag] 417\t\t\t\n      DUP3 \t\t\t\n      PUSH [tag] 211\t\t\t\n      JUMP \t\t\t\n    tag 417\t\t\t\n      JUMPDEST \t\t\t\n      PUSH 40\t\t\t\n      DUP3 \t\t\t\n      ADD \t\t\t\n      SWAP1 \t\t\t\n      POP \t\t\t\n      SWAP2 \t\t\t\n      SWAP1 \t\t\t\n      POP \t\t\t\n      JUMP \t\t\t\n    tag 129\t\t\t\n      JUMPDEST \t\t\t\n      PUSH 0\t\t\t\n      PUSH 20\t\t\t\n      DUP3 \t\t\t\n      ADD \t\t\t\n      SWAP1 \t\t\t\n      POP \t\t\t\n      DUP2 \t\t\t\n      DUP2 \t\t\t\n      SUB \t\t\t\n      PUSH 0\t\t\t\n      DUP4 \t\t\t\n      ADD \t\t\t\n      MSTORE \t\t\t\n      PUSH [tag] 419\t\t\t\n      DUP2 \t\t\t\n      PUSH [tag] 212\t\t\t\n      JUMP \t\t\t\n    tag 419\t\t\t\n      JUMPDEST \t\t\t\n      SWAP1 \t\t\t\n      POP \t\t\t\n      SWAP2 \t\t\t\n      SWAP1 \t\t\t\n      POP \t\t\t\n      JUMP \t\t\t\n    tag 213\t\t\t\n      JUMPDEST \t\t\t\n      PUSH 0\t\t\t\n      PUSH [tag] 421\t\t\t\n      DUP3 \t\t\t\n      PUSH [tag] 172\t\t\t\n      JUMP \t\t\t\n    tag 421\t\t\t\n      JUMPDEST \t\t\t\n      SWAP1 \t\t\t\n      POP \t\t\t\n      SWAP2 \t\t\t\n      SWAP1 \t\t\t\n      POP \t\t\t\n      JUMP \t\t\t\n    tag 214\t\t\t\n      JUMPDEST \t\t\t\n      PUSH [tag] 423\t\t\t\n      DUP2 \t\t\t\n      PUSH [tag] 213\t\t\t\n      JUMP \t\t\t\n    tag 423\t\t\t\n      JUMPDEST \t\t\t\n      DUP3 \t\t\t\n      MSTORE \t\t\t\n      POP \t\t\t\n      POP \t\t\t\n      JUMP \t\t\t\n    tag 131\t\t\t\n      JUMPDEST \t\t\t\n      PUSH 0\t\t\t\n      PUSH 40\t\t\t\n      DUP3 \t\t\t\n      ADD \t\t\t\n      SWAP1 \t\t\t\n      POP \t\t\t\n      PUSH [tag] 425\t\t\t\n      PUSH 0\t\t\t\n      DUP4 \t\t\t\n      ADD \t\t\t\n      DUP6 \t\t\t\n      PUSH [tag] 214\t\t\t\n      JUMP \t\t\t\n    tag 425\t\t\t\n      JUMPDEST \t\t\t\n      DUP2 \t\t\t\n      DUP2 \t\t\t\n      SUB \t\t\t\n      PUSH 20\t\t\t\n      DUP4 \t\t\t\n      ADD \t\t\t\n      MSTORE \t\t\t\n      PUSH [tag] 426\t\t\t\n      DUP2 \t\t\t\n      DUP5 \t\t\t\n      PUSH [tag] 171\t\t\t\n      JUMP \t\t\t\n    tag 426\t\t\t\n      JUMPDEST \t\t\t\n      SWAP1 \t\t\t\n      POP \t\t\t\n      SWAP4 \t\t\t\n      SWAP3 \t\t\t\n      POP \t\t\t\n      POP \t\t\t\n      POP \t\t\t\n      JUMP \t\t\t\n    tag 140\t\t\t\n      JUMPDEST \t\t\t\n      PUSH 0\t\t\t\n      PUSH 20\t\t\t\n      DUP3 \t\t\t\n      ADD \t\t\t\n      SWAP1 \t\t\t\n      POP \t\t\t\n      PUSH [tag] 428\t\t\t\n      PUSH 0\t\t\t\n      DUP4 \t\t\t\n      ADD \t\t\t\n      DUP5 \t\t\t\n      PUSH [tag] 164\t\t\t\n      JUMP \t\t\t\n    tag 428\t\t\t\n      JUMPDEST \t\t\t\n      SWAP3 \t\t\t\n      SWAP2 \t\t\t\n      POP \t\t\t\n      POP \t\t\t\n      JUMP \t\t\t\n    tag 215\t\t\t\n      JUMPDEST \t\t\t\n      PUSH 596F7520617265206E6F7420746865206F776E6572206F66207468697320746F\t\t\t\n      PUSH 0\t\t\t\n      DUP3 \t\t\t\n      ADD \t\t\t\n      MSTORE \t\t\t\n      PUSH 6B656E2100000000000000000000000000000000000000000000000000000000\t\t\t\n      PUSH 20\t\t\t\n      DUP3 \t\t\t\n      ADD \t\t\t\n      MSTORE \t\t\t\n      POP \t\t\t\n      JUMP \t\t\t\n    tag 216\t\t\t\n      JUMPDEST \t\t\t\n      PUSH 0\t\t\t\n      PUSH [tag] 431\t\t\t\n      PUSH 24\t\t\t\n      DUP4 \t\t\t\n      PUSH [tag] 191\t\t\t\n      JUMP \t\t\t\n    tag 431\t\t\t\n      JUMPDEST \t\t\t\n      SWAP2 \t\t\t\n      POP \t\t\t\n      PUSH [tag] 432\t\t\t\n      DUP3 \t\t\t\n      PUSH [tag] 215\t\t\t\n      JUMP \t\t\t\n    tag 432\t\t\t\n      JUMPDEST \t\t\t\n      PUSH 40\t\t\t\n      DUP3 \t\t\t\n      ADD \t\t\t\n      SWAP1 \t\t\t\n      POP \t\t\t\n      SWAP2 \t\t\t\n      SWAP1 \t\t\t\n      POP \t\t\t\n      JUMP \t\t\t\n    tag 146\t\t\t\n      JUMPDEST \t\t\t\n      PUSH 0\t\t\t\n      PUSH 20\t\t\t\n      DUP3 \t\t\t\n      ADD \t\t\t\n      SWAP1 \t\t\t\n      POP \t\t\t\n      DUP2 \t\t\t\n      DUP2 \t\t\t\n      SUB \t\t\t\n      PUSH 0\t\t\t\n      DUP4 \t\t\t\n      ADD \t\t\t\n      MSTORE \t\t\t\n      PUSH [tag] 434\t\t\t\n      DUP2 \t\t\t\n      PUSH [tag] 216\t\t\t\n      JUMP \t\t\t\n    tag 434\t\t\t\n      JUMPDEST \t\t\t\n      SWAP1 \t\t\t\n      POP \t\t\t\n      SWAP2 \t\t\t\n      SWAP1 \t\t\t\n      POP \t\t\t\n      JUMP \t\t\t\n    tag 217\t\t\t\n      JUMPDEST \t\t\t\n      PUSH 436F6E7472616374206E6F7420617070726F76656420746F206275726E20746F\t\t\t\n      PUSH 0\t\t\t\n      DUP3 \t\t\t\n      ADD \t\t\t\n      MSTORE \t\t\t\n      PUSH 6B656E0000000000000000000000000000000000000000000000000000000000\t\t\t\n      PUSH 20\t\t\t\n      DUP3 \t\t\t\n      ADD \t\t\t\n      MSTORE \t\t\t\n      POP \t\t\t\n      JUMP \t\t\t\n    tag 218\t\t\t\n      JUMPDEST \t\t\t\n      PUSH 0\t\t\t\n      PUSH [tag] 437\t\t\t\n      PUSH 23\t\t\t\n      DUP4 \t\t\t\n      PUSH [tag] 191\t\t\t\n      JUMP \t\t\t\n    tag 437\t\t\t\n      JUMPDEST \t\t\t\n      SWAP2 \t\t\t\n      POP \t\t\t\n      PUSH [tag] 438\t\t\t\n      DUP3 \t\t\t\n      PUSH [tag] 217\t\t\t\n      JUMP \t\t\t\n    tag 438\t\t\t\n      JUMPDEST \t\t\t\n      PUSH 40\t\t\t\n      DUP3 \t\t\t\n      ADD \t\t\t\n      SWAP1 \t\t\t\n      POP \t\t\t\n      SWAP2 \t\t\t\n      SWAP1 \t\t\t\n      POP \t\t\t\n      JUMP \t\t\t\n    tag 153\t\t\t\n      JUMPDEST \t\t\t\n      PUSH 0\t\t\t\n      PUSH 20\t\t\t\n      DUP3 \t\t\t\n      ADD \t\t\t\n      SWAP1 \t\t\t\n      POP \t\t\t\n      DUP2 \t\t\t\n      DUP2 \t\t\t\n      SUB \t\t\t\n      PUSH 0\t\t\t\n      DUP4 \t\t\t\n      ADD \t\t\t\n      MSTORE \t\t\t\n      PUSH [tag] 440\t\t\t\n      DUP2 \t\t\t\n      PUSH [tag] 218\t\t\t\n      JUMP \t\t\t\n    tag 440\t\t\t\n      JUMPDEST \t\t\t\n      SWAP1 \t\t\t\n      POP \t\t\t\n      SWAP2 \t\t\t\n      SWAP1 \t\t\t\n      POP \t\t\t\n      JUMP \t\t\t\n    tag 159\t\t\t\n      JUMPDEST \t\t\t\n      PUSH 0\t\t\t\n      PUSH 40\t\t\t\n      DUP3 \t\t\t\n      ADD \t\t\t\n      SWAP1 \t\t\t\n      POP \t\t\t\n      PUSH [tag] 442\t\t\t\n      PUSH 0\t\t\t\n      DUP4 \t\t\t\n      ADD \t\t\t\n      DUP6 \t\t\t\n      PUSH [tag] 214\t\t\t\n      JUMP \t\t\t\n    tag 442\t\t\t\n      JUMPDEST \t\t\t\n      PUSH [tag] 443\t\t\t\n      PUSH 20\t\t\t\n      DUP4 \t\t\t\n      ADD \t\t\t\n      DUP5 \t\t\t\n      PUSH [tag] 164\t\t\t\n      JUMP \t\t\t\n    tag 443\t\t\t\n      JUMPDEST \t\t\t\n      SWAP4 \t\t\t\n      SWAP3 \t\t\t\n      POP \t\t\t\n      POP \t\t\t\n      POP \t\t\t\n      JUMP \t\t\t\n    .data\n      0:\n        .code\n          PUSH 80\t\t\tcontract Vault {\\r\\n    addres...\n          PUSH 40\t\t\tcontract Vault {\\r\\n    addres...\n          MSTORE \t\t\tcontract Vault {\\r\\n    addres...\n          CALLVALUE \t\t\tconstructor(address NFTContrac...\n          DUP1 \t\t\tconstructor(address NFTContrac...\n          ISZERO \t\t\tconstructor(address NFTContrac...\n          PUSH [tag] 1\t\t\tconstructor(address NFTContrac...\n          JUMPI \t\t\tconstructor(address NFTContrac...\n          PUSH 0\t\t\tconstructor(address NFTContrac...\n          DUP1 \t\t\tconstructor(address NFTContrac...\n          REVERT \t\t\tconstructor(address NFTContrac...\n        tag 1\t\t\tconstructor(address NFTContrac...\n          JUMPDEST \t\t\tconstructor(address NFTContrac...\n          POP \t\t\tconstructor(address NFTContrac...\n          PUSH 40\t\t\tconstructor(address NFTContrac...\n          MLOAD \t\t\tconstructor(address NFTContrac...\n          PUSHSIZE \t\t\tconstructor(address NFTContrac...\n          CODESIZE \t\t\tconstructor(address NFTContrac...\n          SUB \t\t\tconstructor(address NFTContrac...\n          DUP1 \t\t\tconstructor(address NFTContrac...\n          PUSHSIZE \t\t\tconstructor(address NFTContrac...\n          DUP4 \t\t\tconstructor(address NFTContrac...\n          CODECOPY \t\t\tconstructor(address NFTContrac...\n          DUP2 \t\t\tconstructor(address NFTContrac...\n          DUP2 \t\t\tconstructor(address NFTContrac...\n          ADD \t\t\tconstructor(address NFTContrac...\n          PUSH 40\t\t\tconstructor(address NFTContrac...\n          MSTORE \t\t\tconstructor(address NFTContrac...\n          DUP2 \t\t\tconstructor(address NFTContrac...\n          ADD \t\t\tconstructor(address NFTContrac...\n          SWAP1 \t\t\tconstructor(address NFTContrac...\n          PUSH [tag] 2\t\t\tconstructor(address NFTContrac...\n          SWAP2 \t\t\tconstructor(address NFTContrac...\n          SWAP1 \t\t\tconstructor(address NFTContrac...\n          PUSH [tag] 3\t\t\tconstructor(address NFTContrac...\n          JUMP \t\t\tconstructor(address NFTContrac...\n        tag 2\t\t\tconstructor(address NFTContrac...\n          JUMPDEST \t\t\tconstructor(address NFTContrac...\n          DUP3 \t\t\tNFTContractAddress\n          PUSH 0\t\t\tNFTContract\n          DUP1 \t\t\tNFTContract\n          PUSH 100\t\t\tNFTContract = NFTContractAddre...\n          EXP \t\t\tNFTContract = NFTContractAddre...\n          DUP2 \t\t\tNFTContract = NFTContractAddre...\n          SLOAD \t\t\tNFTContract = NFTContractAddre...\n          DUP2 \t\t\tNFTContract = NFTContractAddre...\n          PUSH FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF\t\t\tNFTContract = NFTContractAddre...\n          MUL \t\t\tNFTContract = NFTContractAddre...\n          NOT \t\t\tNFTContract = NFTContractAddre...\n          AND \t\t\tNFTContract = NFTContractAddre...\n          SWAP1 \t\t\tNFTContract = NFTContractAddre...\n          DUP4 \t\t\tNFTContract = NFTContractAddre...\n          PUSH FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF\t\t\tNFTContract = NFTContractAddre...\n          AND \t\t\tNFTContract = NFTContractAddre...\n          MUL \t\t\tNFTContract = NFTContractAddre...\n          OR \t\t\tNFTContract = NFTContractAddre...\n          SWAP1 \t\t\tNFTContract = NFTContractAddre...\n          SSTORE \t\t\tNFTContract = NFTContractAddre...\n          POP \t\t\tNFTContract = NFTContractAddre...\n          DUP2 \t\t\tminTime\n          PUSH 2\t\t\tminimumWithdrawTime\n          DUP2 \t\t\tminimumWithdrawTime = minTime\n          SWAP1 \t\t\tminimumWithdrawTime = minTime\n          SSTORE \t\t\tminimumWithdrawTime = minTime\n          POP \t\t\tminimumWithdrawTime = minTime\n          DUP1 \t\t\t_admin\n          PUSH 5\t\t\tadmin\n          PUSH 0\t\t\tadmin\n          PUSH 100\t\t\tadmin = _admin\n          EXP \t\t\tadmin = _admin\n          DUP2 \t\t\tadmin = _admin\n          SLOAD \t\t\tadmin = _admin\n          DUP2 \t\t\tadmin = _admin\n          PUSH FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF\t\t\tadmin = _admin\n          MUL \t\t\tadmin = _admin\n          NOT \t\t\tadmin = _admin\n          AND \t\t\tadmin = _admin\n          SWAP1 \t\t\tadmin = _admin\n          DUP4 \t\t\tadmin = _admin\n          PUSH FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF\t\t\tadmin = _admin\n          AND \t\t\tadmin = _admin\n          MUL \t\t\tadmin = _admin\n          OR \t\t\tadmin = _admin\n          SWAP1 \t\t\tadmin = _admin\n          SSTORE \t\t\tadmin = _admin\n          POP \t\t\tadmin = _admin\n          TIMESTAMP \t\t\tblock.timestamp\n          PUSH 3\t\t\tcreationTime\n          DUP2 \t\t\tcreationTime = block.timestamp\n          SWAP1 \t\t\tcreationTime = block.timestamp\n          SSTORE \t\t\tcreationTime = block.timestamp\n          POP \t\t\tcreationTime = block.timestamp\n          CALLER \t\t\tmsg.sender\n          PUSH 4\t\t\tbitsurance\n          PUSH 0\t\t\tbitsurance\n          PUSH 100\t\t\tbitsurance = msg.sender\n          EXP \t\t\tbitsurance = msg.sender\n          DUP2 \t\t\tbitsurance = msg.sender\n          SLOAD \t\t\tbitsurance = msg.sender\n          DUP2 \t\t\tbitsurance = msg.sender\n          PUSH FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF\t\t\tbitsurance = msg.sender\n          MUL \t\t\tbitsurance = msg.sender\n          NOT \t\t\tbitsurance = msg.sender\n          AND \t\t\tbitsurance = msg.sender\n          SWAP1 \t\t\tbitsurance = msg.sender\n          DUP4 \t\t\tbitsurance = msg.sender\n          PUSH FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF\t\t\tbitsurance = msg.sender\n          AND \t\t\tbitsurance = msg.sender\n          MUL \t\t\tbitsurance = msg.sender\n          OR \t\t\tbitsurance = msg.sender\n          SWAP1 \t\t\tbitsurance = msg.sender\n          SSTORE \t\t\tbitsurance = msg.sender\n          POP \t\t\tbitsurance = msg.sender\n          POP \t\t\tconstructor(address NFTContrac...\n          POP \t\t\tconstructor(address NFTContrac...\n          POP \t\t\tconstructor(address NFTContrac...\n          PUSH [tag] 6\t\t\tcontract Vault {\\r\\n    addres...\n          JUMP \t\t\tcontract Vault {\\r\\n    addres...\n        tag 8\t\t\tcts/token/ERC721/ERC721.sol\";\\...\n          JUMPDEST \t\t\tcts/token/ERC721/ERC721.sol\";\\...\n          PUSH 0\t\t\t\\r\n          DUP1 \t\t\t;\n          REVERT \t\t\tle.sol\";\\r\\n\\r\\n\n        tag 10\t\t\tdress public NFTContract;\\r\\n ...\n          JUMPDEST \t\t\tdress public NFTContract;\\r\\n ...\n          PUSH 0\t\t\tg(uint2\n          PUSH FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF\t\t\tes;\\r\\n    uint256 public mini...\n          DUP3 \t\t\tnBala\n          AND \t\t\ttokenBalances;\\r\\n    uint256 ...\n          SWAP1 \t\t\t56) public tokenBalances;\\r\\n ...\n          POP \t\t\t56) public tokenBalances;\\r\\n ...\n          SWAP2 \t\t\tdress public NFTContract;\\r\\n ...\n          SWAP1 \t\t\tdress public NFTContract;\\r\\n ...\n          POP \t\t\tdress public NFTContract;\\r\\n ...\n          JUMP \t\t\tdress public NFTContract;\\r\\n ...\n        tag 11\t\t\t56 public creationTime;\\r\\n   ...\n          JUMPDEST \t\t\t56 public creationTime;\\r\\n   ...\n          PUSH 0\t\t\tpublic \n          PUSH [tag] 23\t\t\tss public admin;\\r\\n\\r\\n    \n          DUP3 \t\t\t\\r\\n   \n          PUSH [tag] 10\t\t\tss public admin;\\r\\n\\r\\n    \n          JUMP \t\t\tss public admin;\\r\\n\\r\\n    \n        tag 23\t\t\tss public admin;\\r\\n\\r\\n    \n          JUMPDEST \t\t\tss public admin;\\r\\n\\r\\n    \n          SWAP1 \t\t\t\\r\\n    address public admin;\\...\n          POP \t\t\t\\r\\n    address public admin;\\...\n          SWAP2 \t\t\t56 public creationTime;\\r\\n   ...\n          SWAP1 \t\t\t56 public creationTime;\\r\\n   ...\n          POP \t\t\t56 public creationTime;\\r\\n   ...\n          JUMP \t\t\t56 public creationTime;\\r\\n   ...\n        tag 12\t\t\tstore all insured token ids\\r\\...\n          JUMPDEST \t\t\tstore all insured token ids\\r\\...\n          PUSH [tag] 25\t\t\ter onlyBitsurance{\\r\\n    \n          DUP2 \t\t\t\\r\\n   \n          PUSH [tag] 11\t\t\ter onlyBitsurance{\\r\\n    \n          JUMP \t\t\ter onlyBitsurance{\\r\\n    \n        tag 25\t\t\ter onlyBitsurance{\\r\\n    \n          JUMPDEST \t\t\ter onlyBitsurance{\\r\\n    \n          DUP2 \t\t\t modi\n          EQ \t\t\t    modifier onlyBitsurance{\\r...\n          PUSH [tag] 26\t\t\tenIds;\\r\\n\\r\\n    modifier onl...\n          JUMPI \t\t\tenIds;\\r\\n\\r\\n    modifier onl...\n          PUSH 0\t\t\t.\n          DUP1 \t\t\tm\n          REVERT \t\t\tequire(msg.s\n        tag 26\t\t\tenIds;\\r\\n\\r\\n    modifier onl...\n          JUMPDEST \t\t\tenIds;\\r\\n\\r\\n    modifier onl...\n          POP \t\t\tstore all insured token ids\\r\\...\n          JUMP \t\t\tstore all insured token ids\\r\\...\n        tag 13\t\t\trance, \"Only Bitsurance contra...\n          JUMPDEST \t\t\trance, \"Only Bitsurance contra...\n          PUSH 0\t\t\t;\\r\\n  \n          DUP2 \t\t\t\\r\\n    \n          MLOAD \t\t\t   /**\\r\\n     \n          SWAP1 \t\t\t   }\\r\\n\\r\\n    /**\\r\\n     \n          POP \t\t\t   }\\r\\n\\r\\n    /**\\r\\n     \n          PUSH [tag] 28\t\t\tntract constructor that sets i...\n          DUP2 \t\t\ts ini\n          PUSH [tag] 12\t\t\tntract constructor that sets i...\n          JUMP \t\t\tntract constructor that sets i...\n        tag 28\t\t\tntract constructor that sets i...\n          JUMPDEST \t\t\tntract constructor that sets i...\n          SWAP3 \t\t\trance, \"Only Bitsurance contra...\n          SWAP2 \t\t\trance, \"Only Bitsurance contra...\n          POP \t\t\trance, \"Only Bitsurance contra...\n          POP \t\t\trance, \"Only Bitsurance contra...\n          JUMP \t\t\trance, \"Only Bitsurance contra...\n        tag 14\t\t\t     * @param NFTContractAddre...\n          JUMPDEST \t\t\t     * @param NFTContractAddre...\n          PUSH 0\t\t\tess of \n          DUP2 \t\t\t * @p\n          SWAP1 \t\t\ttract\\r\\n     * @p\n          POP \t\t\ttract\\r\\n     * @p\n          SWAP2 \t\t\t     * @param NFTContractAddre...\n          SWAP1 \t\t\t     * @param NFTContractAddre...\n          POP \t\t\t     * @param NFTContractAddre...\n          JUMP \t\t\t     * @param NFTContractAddre...\n        tag 15\t\t\t minimum time before withdraw\\...\n          JUMPDEST \t\t\t minimum time before withdraw\\...\n          PUSH [tag] 31\t\t\t/\\r\\n    constructor(addre\n          DUP2 \t\t\t(addr\n          PUSH [tag] 14\t\t\t/\\r\\n    constructor(addre\n          JUMP \t\t\t/\\r\\n    constructor(addre\n        tag 31\t\t\t/\\r\\n    constructor(addre\n          JUMPDEST \t\t\t/\\r\\n    constructor(addre\n          DUP2 \t\t\t\\n    \n          EQ \t\t\tss\\r\\n     */\\r\\n    construct...\n          PUSH [tag] 32\t\t\tdmin address\\r\\n     */\\r\\n   ...\n          JUMPI \t\t\tdmin address\\r\\n     */\\r\\n   ...\n          PUSH 0\t\t\td\n          DUP1 \t\t\tc\n          REVERT \t\t\tTContractAdd\n        tag 32\t\t\tdmin address\\r\\n     */\\r\\n   ...\n          JUMPDEST \t\t\tdmin address\\r\\n     */\\r\\n   ...\n          POP \t\t\t minimum time before withdraw\\...\n          JUMP \t\t\t minimum time before withdraw\\...\n        tag 16\t\t\tminTime, address _admin) {\\r\\n...\n          JUMPDEST \t\t\tminTime, address _admin) {\\r\\n...\n          PUSH 0\t\t\tractA\n          DUP2 \t\t\tthdraw\n          MLOAD \t\t\timumWithdrawT\n          SWAP1 \t\t\t      minimumWithdrawT\n          POP \t\t\t      minimumWithdrawT\n          PUSH [tag] 34\t\t\tTime;\\r\\n        admin = _admi...\n          DUP2 \t\t\tin;\\r\\n\n          PUSH [tag] 15\t\t\tTime;\\r\\n        admin = _admi...\n          JUMP \t\t\tTime;\\r\\n        admin = _admi...\n        tag 34\t\t\tTime;\\r\\n        admin = _admi...\n          JUMPDEST \t\t\tTime;\\r\\n        admin = _admi...\n          SWAP3 \t\t\tminTime, address _admin) {\\r\\n...\n          SWAP2 \t\t\tminTime, address _admin) {\\r\\n...\n          POP \t\t\tminTime, address _admin) {\\r\\n...\n          POP \t\t\tminTime, address _admin) {\\r\\n...\n          JUMP \t\t\tminTime, address _admin) {\\r\\n...\n        tag 3\t\t\tionTime = block.timestamp;\\r\\n...\n          JUMPDEST \t\t\tionTime = block.timestamp;\\r\\n...\n          PUSH 0\t\t\tternal\n          DUP1 \t\t\tayable\n          PUSH 0\t\t\t\\r\\n    \n          PUSH 60\t\t\t  \n          DUP5 \t\t\t\\n    /**\\r\n          DUP7 \t\t\table{}\\r\n          SUB \t\t\t payable{}\\r\\n\\r\\n    /**\\r\\n\n          SLT \t\t\trnal payable{}\\r\\n\\r\\n    /**\\...\n          ISZERO \t\t\txternal payable{}\\r\\n\\r\\n    /...\n          PUSH [tag] 36\t\t\txternal payable{}\\r\\n\\r\\n    /...\n          JUMPI \t\t\txternal payable{}\\r\\n\\r\\n    /...\n          PUSH [tag] 37\t\t\tdev Function to add balance fo...\n          PUSH [tag] 8\t\t\tdev Function to add balance fo...\n          JUMP \t\t\tdev Function to add balance fo...\n        tag 37\t\t\tdev Function to add balance fo...\n          JUMPDEST \t\t\tdev Function to add balance fo...\n        tag 36\t\t\txternal payable{}\\r\\n\\r\\n    /...\n          JUMPDEST \t\t\txternal payable{}\\r\\n\\r\\n    /...\n          PUSH 0\t\t\t \n          PUSH [tag] 38\t\t\to add to the balance\\r\\n     *...\n          DUP7 \t\t\tint256 \n          DUP3 \t\t\tBalanc\n          DUP8 \t\t\tunction a\n          ADD \t\t\t   function addBalance\n          PUSH [tag] 13\t\t\to add to the balance\\r\\n     *...\n          JUMP \t\t\to add to the balance\\r\\n     *...\n        tag 38\t\t\to add to the balance\\r\\n     *...\n          JUMPDEST \t\t\to add to the balance\\r\\n     *...\n          SWAP4 \t\t\tt Amount to add to the balance...\n          POP \t\t\tt Amount to add to the balance...\n          POP \t\t\tch the balance is added\\r\\n   ...\n          PUSH 20\t\t\t{\\r\n          PUSH [tag] 39\t\t\tes[_tokenID] == 0) {\\r\\n      ...\n          DUP7 \t\t\t);\\r\\n   \n          DUP3 \t\t\t(_toke\n          DUP8 \t\t\tkenIds.pu\n          ADD \t\t\t  tokenIds.push(_token\n          PUSH [tag] 16\t\t\tes[_tokenID] == 0) {\\r\\n      ...\n          JUMP \t\t\tes[_tokenID] == 0) {\\r\\n      ...\n        tag 39\t\t\tes[_tokenID] == 0) {\\r\\n      ...\n          JUMPDEST \t\t\tes[_tokenID] == 0) {\\r\\n      ...\n          SWAP3 \t\t\tokenBalances[_tokenID] == 0) {...\n          POP \t\t\tokenBalances[_tokenID] == 0) {...\n          POP \t\t\tunt) external onlyBitsurance {...\n          PUSH 40\t\t\t\\r\\n\n          PUSH [tag] 40\t\t\ttTokenIds() public view return...\n          DUP7 \t\t\t     re\n          DUP3 \t\t\ty) {\\r\\n\n          DUP8 \t\t\t256[] mem\n          ADD \t\t\tuint256[] memory) {\\r\\n \n          PUSH [tag] 13\t\t\ttTokenIds() public view return...\n          JUMP \t\t\ttTokenIds() public view return...\n        tag 40\t\t\ttTokenIds() public view return...\n          JUMPDEST \t\t\ttTokenIds() public view return...\n          SWAP2 \t\t\tunction getTokenIds() public v...\n          POP \t\t\tunction getTokenIds() public v...\n          POP \t\t\tBalances[_tokenID] += amount;\\...\n          SWAP3 \t\t\tionTime = block.timestamp;\\r\\n...\n          POP \t\t\tionTime = block.timestamp;\\r\\n...\n          SWAP3 \t\t\tionTime = block.timestamp;\\r\\n...\n          POP \t\t\tionTime = block.timestamp;\\r\\n...\n          SWAP3 \t\t\tionTime = block.timestamp;\\r\\n...\n          JUMP \t\t\tionTime = block.timestamp;\\r\\n...\n        tag 6\t\t\tcontract Vault {\\r\\n    addres...\n          JUMPDEST \t\t\tcontract Vault {\\r\\n    addres...\n          PUSH #[$] 0000000000000000000000000000000000000000000000000000000000000000\t\t\tcontract Vault {\\r\\n    addres...\n          DUP1 \t\t\tcontract Vault {\\r\\n    addres...\n          PUSH [$] 0000000000000000000000000000000000000000000000000000000000000000\t\t\tcontract Vault {\\r\\n    addres...\n          PUSH 0\t\t\tcontract Vault {\\r\\n    addres...\n          CODECOPY \t\t\tcontract Vault {\\r\\n    addres...\n          PUSH 0\t\t\tcontract Vault {\\r\\n    addres...\n          RETURN \t\t\tcontract Vault {\\r\\n    addres...\n        .data\n          0:\n            .code\n              PUSH 80\t\t\tcontract Vault {\\r\\n    addres...\n              PUSH 40\t\t\tcontract Vault {\\r\\n    addres...\n              MSTORE \t\t\tcontract Vault {\\r\\n    addres...\n              PUSH 4\t\t\tcontract Vault {\\r\\n    addres...\n              CALLDATASIZE \t\t\tcontract Vault {\\r\\n    addres...\n              LT \t\t\tcontract Vault {\\r\\n    addres...\n              PUSH [tag] 1\t\t\tcontract Vault {\\r\\n    addres...\n              JUMPI \t\t\tcontract Vault {\\r\\n    addres...\n              PUSH 0\t\t\tcontract Vault {\\r\\n    addres...\n              CALLDATALOAD \t\t\tcontract Vault {\\r\\n    addres...\n              PUSH E0\t\t\tcontract Vault {\\r\\n    addres...\n              SHR \t\t\tcontract Vault {\\r\\n    addres...\n              DUP1 \t\t\tcontract Vault {\\r\\n    addres...\n              PUSH 8FD25165\t\t\tcontract Vault {\\r\\n    addres...\n              GT \t\t\tcontract Vault {\\r\\n    addres...\n              PUSH [tag] 14\t\t\tcontract Vault {\\r\\n    addres...\n              JUMPI \t\t\tcontract Vault {\\r\\n    addres...\n              DUP1 \t\t\tcontract Vault {\\r\\n    addres...\n              PUSH 8FD25165\t\t\tcontract Vault {\\r\\n    addres...\n              EQ \t\t\tcontract Vault {\\r\\n    addres...\n              PUSH [tag] 8\t\t\tcontract Vault {\\r\\n    addres...\n              JUMPI \t\t\tcontract Vault {\\r\\n    addres...\n              DUP1 \t\t\tcontract Vault {\\r\\n    addres...\n              PUSH A40398A6\t\t\tcontract Vault {\\r\\n    addres...\n              EQ \t\t\tcontract Vault {\\r\\n    addres...\n              PUSH [tag] 9\t\t\tcontract Vault {\\r\\n    addres...\n              JUMPI \t\t\tcontract Vault {\\r\\n    addres...\n              DUP1 \t\t\tcontract Vault {\\r\\n    addres...\n              PUSH D58778D6\t\t\tcontract Vault {\\r\\n    addres...\n              EQ \t\t\tcontract Vault {\\r\\n    addres...\n              PUSH [tag] 10\t\t\tcontract Vault {\\r\\n    addres...\n              JUMPI \t\t\tcontract Vault {\\r\\n    addres...\n              DUP1 \t\t\tcontract Vault {\\r\\n    addres...\n              PUSH D8270DCE\t\t\tcontract Vault {\\r\\n    addres...\n              EQ \t\t\tcontract Vault {\\r\\n    addres...\n              PUSH [tag] 11\t\t\tcontract Vault {\\r\\n    addres...\n              JUMPI \t\t\tcontract Vault {\\r\\n    addres...\n              DUP1 \t\t\tcontract Vault {\\r\\n    addres...\n              PUSH ED2B40EA\t\t\tcontract Vault {\\r\\n    addres...\n              EQ \t\t\tcontract Vault {\\r\\n    addres...\n              PUSH [tag] 12\t\t\tcontract Vault {\\r\\n    addres...\n              JUMPI \t\t\tcontract Vault {\\r\\n    addres...\n              DUP1 \t\t\tcontract Vault {\\r\\n    addres...\n              PUSH F851A440\t\t\tcontract Vault {\\r\\n    addres...\n              EQ \t\t\tcontract Vault {\\r\\n    addres...\n              PUSH [tag] 13\t\t\tcontract Vault {\\r\\n    addres...\n              JUMPI \t\t\tcontract Vault {\\r\\n    addres...\n              PUSH [tag] 2\t\t\tcontract Vault {\\r\\n    addres...\n              JUMP \t\t\tcontract Vault {\\r\\n    addres...\n            tag 14\t\t\tcontract Vault {\\r\\n    addres...\n              JUMPDEST \t\t\tcontract Vault {\\r\\n    addres...\n              DUP1 \t\t\tcontract Vault {\\r\\n    addres...\n              PUSH 31C2273B\t\t\tcontract Vault {\\r\\n    addres...\n              EQ \t\t\tcontract Vault {\\r\\n    addres...\n              PUSH [tag] 3\t\t\tcontract Vault {\\r\\n    addres...\n              JUMPI \t\t\tcontract Vault {\\r\\n    addres...\n              DUP1 \t\t\tcontract Vault {\\r\\n    addres...\n              PUSH 505658D9\t\t\tcontract Vault {\\r\\n    addres...\n              EQ \t\t\tcontract Vault {\\r\\n    addres...\n              PUSH [tag] 4\t\t\tcontract Vault {\\r\\n    addres...\n              JUMPI \t\t\tcontract Vault {\\r\\n    addres...\n              DUP1 \t\t\tcontract Vault {\\r\\n    addres...\n              PUSH 5E4F6CAB\t\t\tcontract Vault {\\r\\n    addres...\n              EQ \t\t\tcontract Vault {\\r\\n    addres...\n              PUSH [tag] 5\t\t\tcontract Vault {\\r\\n    addres...\n              JUMPI \t\t\tcontract Vault {\\r\\n    addres...\n              DUP1 \t\t\tcontract Vault {\\r\\n    addres...\n              PUSH 67F718A9\t\t\tcontract Vault {\\r\\n    addres...\n              EQ \t\t\tcontract Vault {\\r\\n    addres...\n              PUSH [tag] 6\t\t\tcontract Vault {\\r\\n    addres...\n              JUMPI \t\t\tcontract Vault {\\r\\n    addres...\n              DUP1 \t\t\tcontract Vault {\\r\\n    addres...\n              PUSH 8293744B\t\t\tcontract Vault {\\r\\n    addres...\n              EQ \t\t\tcontract Vault {\\r\\n    addres...\n              PUSH [tag] 7\t\t\tcontract Vault {\\r\\n    addres...\n              JUMPI \t\t\tcontract Vault {\\r\\n    addres...\n              PUSH [tag] 2\t\t\tcontract Vault {\\r\\n    addres...\n              JUMP \t\t\tcontract Vault {\\r\\n    addres...\n            tag 1\t\t\tcontract Vault {\\r\\n    addres...\n              JUMPDEST \t\t\tcontract Vault {\\r\\n    addres...\n              CALLDATASIZE \t\t\tcontract Vault {\\r\\n    addres...\n              PUSH [tag] 2\t\t\tcontract Vault {\\r\\n    addres...\n              JUMPI \t\t\tcontract Vault {\\r\\n    addres...\n              STOP \t\t\tcontract Vault {\\r\\n    addres...\n            tag 2\t\t\tcontract Vault {\\r\\n    addres...\n              JUMPDEST \t\t\tcontract Vault {\\r\\n    addres...\n              STOP \t\t\tcontract Vault {\\r\\n    addres...\n            tag 3\t\t\taddress public NFTContract\n              JUMPDEST \t\t\taddress public NFTContract\n              CALLVALUE \t\t\taddress public NFTContract\n              DUP1 \t\t\taddress public NFTContract\n              ISZERO \t\t\taddress public NFTContract\n              PUSH [tag] 19\t\t\taddress public NFTContract\n              JUMPI \t\t\taddress public NFTContract\n              PUSH 0\t\t\taddress public NFTContract\n              DUP1 \t\t\taddress public NFTContract\n              REVERT \t\t\taddress public NFTContract\n            tag 19\t\t\taddress public NFTContract\n              JUMPDEST \t\t\taddress public NFTContract\n              POP \t\t\taddress public NFTContract\n              PUSH [tag] 20\t\t\taddress public NFTContract\n              PUSH [tag] 21\t\t\taddress public NFTContract\n              JUMP \t\t\taddress public NFTContract\n            tag 20\t\t\taddress public NFTContract\n              JUMPDEST \t\t\taddress public NFTContract\n              PUSH 40\t\t\taddress public NFTContract\n              MLOAD \t\t\taddress public NFTContract\n              PUSH [tag] 22\t\t\taddress public NFTContract\n              SWAP2 \t\t\taddress public NFTContract\n              SWAP1 \t\t\taddress public NFTContract\n              PUSH [tag] 23\t\t\taddress public NFTContract\n              JUMP \t\t\taddress public NFTContract\n            tag 22\t\t\taddress public NFTContract\n              JUMPDEST \t\t\taddress public NFTContract\n              PUSH 40\t\t\taddress public NFTContract\n              MLOAD \t\t\taddress public NFTContract\n              DUP1 \t\t\taddress public NFTContract\n              SWAP2 \t\t\taddress public NFTContract\n              SUB \t\t\taddress public NFTContract\n              SWAP1 \t\t\taddress public NFTContract\n              RETURN \t\t\taddress public NFTContract\n            tag 4\t\t\taddress public bitsurance\n              JUMPDEST \t\t\taddress public bitsurance\n              CALLVALUE \t\t\taddress public bitsurance\n              DUP1 \t\t\taddress public bitsurance\n              ISZERO \t\t\taddress public bitsurance\n              PUSH [tag] 24\t\t\taddress public bitsurance\n              JUMPI \t\t\taddress public bitsurance\n              PUSH 0\t\t\taddress public bitsurance\n              DUP1 \t\t\taddress public bitsurance\n              REVERT \t\t\taddress public bitsurance\n            tag 24\t\t\taddress public bitsurance\n              JUMPDEST \t\t\taddress public bitsurance\n              POP \t\t\taddress public bitsurance\n              PUSH [tag] 25\t\t\taddress public bitsurance\n              PUSH [tag] 26\t\t\taddress public bitsurance\n              JUMP \t\t\taddress public bitsurance\n            tag 25\t\t\taddress public bitsurance\n              JUMPDEST \t\t\taddress public bitsurance\n              PUSH 40\t\t\taddress public bitsurance\n              MLOAD \t\t\taddress public bitsurance\n              PUSH [tag] 27\t\t\taddress public bitsurance\n              SWAP2 \t\t\taddress public bitsurance\n              SWAP1 \t\t\taddress public bitsurance\n              PUSH [tag] 23\t\t\taddress public bitsurance\n              JUMP \t\t\taddress public bitsurance\n            tag 27\t\t\taddress public bitsurance\n              JUMPDEST \t\t\taddress public bitsurance\n              PUSH 40\t\t\taddress public bitsurance\n              MLOAD \t\t\taddress public bitsurance\n              DUP1 \t\t\taddress public bitsurance\n              SWAP2 \t\t\taddress public bitsurance\n              SUB \t\t\taddress public bitsurance\n              SWAP1 \t\t\taddress public bitsurance\n              RETURN \t\t\taddress public bitsurance\n            tag 5\t\t\tmapping(uint256 => uint256) pu...\n              JUMPDEST \t\t\tmapping(uint256 => uint256) pu...\n              CALLVALUE \t\t\tmapping(uint256 => uint256) pu...\n              DUP1 \t\t\tmapping(uint256 => uint256) pu...\n              ISZERO \t\t\tmapping(uint256 => uint256) pu...\n              PUSH [tag] 28\t\t\tmapping(uint256 => uint256) pu...\n              JUMPI \t\t\tmapping(uint256 => uint256) pu...\n              PUSH 0\t\t\tmapping(uint256 => uint256) pu...\n              DUP1 \t\t\tmapping(uint256 => uint256) pu...\n              REVERT \t\t\tmapping(uint256 => uint256) pu...\n            tag 28\t\t\tmapping(uint256 => uint256) pu...\n              JUMPDEST \t\t\tmapping(uint256 => uint256) pu...\n              POP \t\t\tmapping(uint256 => uint256) pu...\n              PUSH [tag] 29\t\t\tmapping(uint256 => uint256) pu...\n              PUSH 4\t\t\tmapping(uint256 => uint256) pu...\n              DUP1 \t\t\tmapping(uint256 => uint256) pu...\n              CALLDATASIZE \t\t\tmapping(uint256 => uint256) pu...\n              SUB \t\t\tmapping(uint256 => uint256) pu...\n              DUP2 \t\t\tmapping(uint256 => uint256) pu...\n              ADD \t\t\tmapping(uint256 => uint256) pu...\n              SWAP1 \t\t\tmapping(uint256 => uint256) pu...\n              PUSH [tag] 30\t\t\tmapping(uint256 => uint256) pu...\n              SWAP2 \t\t\tmapping(uint256 => uint256) pu...\n              SWAP1 \t\t\tmapping(uint256 => uint256) pu...\n              PUSH [tag] 31\t\t\tmapping(uint256 => uint256) pu...\n              JUMP \t\t\tmapping(uint256 => uint256) pu...\n            tag 30\t\t\tmapping(uint256 => uint256) pu...\n              JUMPDEST \t\t\tmapping(uint256 => uint256) pu...\n              PUSH [tag] 32\t\t\tmapping(uint256 => uint256) pu...\n              JUMP \t\t\tmapping(uint256 => uint256) pu...\n            tag 29\t\t\tmapping(uint256 => uint256) pu...\n              JUMPDEST \t\t\tmapping(uint256 => uint256) pu...\n              PUSH 40\t\t\tmapping(uint256 => uint256) pu...\n              MLOAD \t\t\tmapping(uint256 => uint256) pu...\n              PUSH [tag] 33\t\t\tmapping(uint256 => uint256) pu...\n              SWAP2 \t\t\tmapping(uint256 => uint256) pu...\n              SWAP1 \t\t\tmapping(uint256 => uint256) pu...\n              PUSH [tag] 34\t\t\tmapping(uint256 => uint256) pu...\n              JUMP \t\t\tmapping(uint256 => uint256) pu...\n            tag 33\t\t\tmapping(uint256 => uint256) pu...\n              JUMPDEST \t\t\tmapping(uint256 => uint256) pu...\n              PUSH 40\t\t\tmapping(uint256 => uint256) pu...\n              MLOAD \t\t\tmapping(uint256 => uint256) pu...\n              DUP1 \t\t\tmapping(uint256 => uint256) pu...\n              SWAP2 \t\t\tmapping(uint256 => uint256) pu...\n              SUB \t\t\tmapping(uint256 => uint256) pu...\n              SWAP1 \t\t\tmapping(uint256 => uint256) pu...\n              RETURN \t\t\tmapping(uint256 => uint256) pu...\n            tag 6\t\t\tfunction getTokenIds() public ...\n              JUMPDEST \t\t\tfunction getTokenIds() public ...\n              CALLVALUE \t\t\tfunction getTokenIds() public ...\n              DUP1 \t\t\tfunction getTokenIds() public ...\n              ISZERO \t\t\tfunction getTokenIds() public ...\n              PUSH [tag] 35\t\t\tfunction getTokenIds() public ...\n              JUMPI \t\t\tfunction getTokenIds() public ...\n              PUSH 0\t\t\tfunction getTokenIds() public ...\n              DUP1 \t\t\tfunction getTokenIds() public ...\n              REVERT \t\t\tfunction getTokenIds() public ...\n            tag 35\t\t\tfunction getTokenIds() public ...\n              JUMPDEST \t\t\tfunction getTokenIds() public ...\n              POP \t\t\tfunction getTokenIds() public ...\n              PUSH [tag] 36\t\t\tfunction getTokenIds() public ...\n              PUSH [tag] 37\t\t\tfunction getTokenIds() public ...\n              JUMP \t\t\tfunction getTokenIds() public ...\n            tag 36\t\t\tfunction getTokenIds() public ...\n              JUMPDEST \t\t\tfunction getTokenIds() public ...\n              PUSH 40\t\t\tfunction getTokenIds() public ...\n              MLOAD \t\t\tfunction getTokenIds() public ...\n              PUSH [tag] 38\t\t\tfunction getTokenIds() public ...\n              SWAP2 \t\t\tfunction getTokenIds() public ...\n              SWAP1 \t\t\tfunction getTokenIds() public ...\n              PUSH [tag] 39\t\t\tfunction getTokenIds() public ...\n              JUMP \t\t\tfunction getTokenIds() public ...\n            tag 38\t\t\tfunction getTokenIds() public ...\n              JUMPDEST \t\t\tfunction getTokenIds() public ...\n              PUSH 40\t\t\tfunction getTokenIds() public ...\n              MLOAD \t\t\tfunction getTokenIds() public ...\n              DUP1 \t\t\tfunction getTokenIds() public ...\n              SWAP2 \t\t\tfunction getTokenIds() public ...\n              SUB \t\t\tfunction getTokenIds() public ...\n              SWAP1 \t\t\tfunction getTokenIds() public ...\n              RETURN \t\t\tfunction getTokenIds() public ...\n            tag 7\t\t\tfunction withdraw(address paya...\n              JUMPDEST \t\t\tfunction withdraw(address paya...\n              PUSH [tag] 40\t\t\tfunction withdraw(address paya...\n              PUSH 4\t\t\tfunction withdraw(address paya...\n              DUP1 \t\t\tfunction withdraw(address paya...\n              CALLDATASIZE \t\t\tfunction withdraw(address paya...\n              SUB \t\t\tfunction withdraw(address paya...\n              DUP2 \t\t\tfunction withdraw(address paya...\n              ADD \t\t\tfunction withdraw(address paya...\n              SWAP1 \t\t\tfunction withdraw(address paya...\n              PUSH [tag] 41\t\t\tfunction withdraw(address paya...\n              SWAP2 \t\t\tfunction withdraw(address paya...\n              SWAP1 \t\t\tfunction withdraw(address paya...\n              PUSH [tag] 42\t\t\tfunction withdraw(address paya...\n              JUMP \t\t\tfunction withdraw(address paya...\n            tag 41\t\t\tfunction withdraw(address paya...\n              JUMPDEST \t\t\tfunction withdraw(address paya...\n              PUSH [tag] 43\t\t\tfunction withdraw(address paya...\n              JUMP \t\t\tfunction withdraw(address paya...\n            tag 40\t\t\tfunction withdraw(address paya...\n              JUMPDEST \t\t\tfunction withdraw(address paya...\n              STOP \t\t\tfunction withdraw(address paya...\n            tag 8\t\t\tuint256 public minimumWithdraw...\n              JUMPDEST \t\t\tuint256 public minimumWithdraw...\n              CALLVALUE \t\t\tuint256 public minimumWithdraw...\n              DUP1 \t\t\tuint256 public minimumWithdraw...\n              ISZERO \t\t\tuint256 public minimumWithdraw...\n              PUSH [tag] 44\t\t\tuint256 public minimumWithdraw...\n              JUMPI \t\t\tuint256 public minimumWithdraw...\n              PUSH 0\t\t\tuint256 public minimumWithdraw...\n              DUP1 \t\t\tuint256 public minimumWithdraw...\n              REVERT \t\t\tuint256 public minimumWithdraw...\n            tag 44\t\t\tuint256 public minimumWithdraw...\n              JUMPDEST \t\t\tuint256 public minimumWithdraw...\n              POP \t\t\tuint256 public minimumWithdraw...\n              PUSH [tag] 45\t\t\tuint256 public minimumWithdraw...\n              PUSH [tag] 46\t\t\tuint256 public minimumWithdraw...\n              JUMP \t\t\tuint256 public minimumWithdraw...\n            tag 45\t\t\tuint256 public minimumWithdraw...\n              JUMPDEST \t\t\tuint256 public minimumWithdraw...\n              PUSH 40\t\t\tuint256 public minimumWithdraw...\n              MLOAD \t\t\tuint256 public minimumWithdraw...\n              PUSH [tag] 47\t\t\tuint256 public minimumWithdraw...\n              SWAP2 \t\t\tuint256 public minimumWithdraw...\n              SWAP1 \t\t\tuint256 public minimumWithdraw...\n              PUSH [tag] 34\t\t\tuint256 public minimumWithdraw...\n              JUMP \t\t\tuint256 public minimumWithdraw...\n            tag 47\t\t\tuint256 public minimumWithdraw...\n              JUMPDEST \t\t\tuint256 public minimumWithdraw...\n              PUSH 40\t\t\tuint256 public minimumWithdraw...\n              MLOAD \t\t\tuint256 public minimumWithdraw...\n              DUP1 \t\t\tuint256 public minimumWithdraw...\n              SWAP2 \t\t\tuint256 public minimumWithdraw...\n              SUB \t\t\tuint256 public minimumWithdraw...\n              SWAP1 \t\t\tuint256 public minimumWithdraw...\n              RETURN \t\t\tuint256 public minimumWithdraw...\n            tag 9\t\t\tfunction addBalance(uint256 _t...\n              JUMPDEST \t\t\tfunction addBalance(uint256 _t...\n              CALLVALUE \t\t\tfunction addBalance(uint256 _t...\n              DUP1 \t\t\tfunction addBalance(uint256 _t...\n              ISZERO \t\t\tfunction addBalance(uint256 _t...\n              PUSH [tag] 48\t\t\tfunction addBalance(uint256 _t...\n              JUMPI \t\t\tfunction addBalance(uint256 _t...\n              PUSH 0\t\t\tfunction addBalance(uint256 _t...\n              DUP1 \t\t\tfunction addBalance(uint256 _t...\n              REVERT \t\t\tfunction addBalance(uint256 _t...\n            tag 48\t\t\tfunction addBalance(uint256 _t...\n              JUMPDEST \t\t\tfunction addBalance(uint256 _t...\n              POP \t\t\tfunction addBalance(uint256 _t...\n              PUSH [tag] 49\t\t\tfunction addBalance(uint256 _t...\n              PUSH 4\t\t\tfunction addBalance(uint256 _t...\n              DUP1 \t\t\tfunction addBalance(uint256 _t...\n              CALLDATASIZE \t\t\tfunction addBalance(uint256 _t...\n              SUB \t\t\tfunction addBalance(uint256 _t...\n              DUP2 \t\t\tfunction addBalance(uint256 _t...\n              ADD \t\t\tfunction addBalance(uint256 _t...\n              SWAP1 \t\t\tfunction addBalance(uint256 _t...\n              PUSH [tag] 50\t\t\tfunction addBalance(uint256 _t...\n              SWAP2 \t\t\tfunction addBalance(uint256 _t...\n              SWAP1 \t\t\tfunction addBalance(uint256 _t...\n              PUSH [tag] 51\t\t\tfunction addBalance(uint256 _t...\n              JUMP \t\t\tfunction addBalance(uint256 _t...\n            tag 50\t\t\tfunction addBalance(uint256 _t...\n              JUMPDEST \t\t\tfunction addBalance(uint256 _t...\n              PUSH [tag] 52\t\t\tfunction addBalance(uint256 _t...\n              JUMP \t\t\tfunction addBalance(uint256 _t...\n            tag 49\t\t\tfunction addBalance(uint256 _t...\n              JUMPDEST \t\t\tfunction addBalance(uint256 _t...\n              STOP \t\t\tfunction addBalance(uint256 _t...\n            tag 10\t\t\tuint256[] public tokenIds\n              JUMPDEST \t\t\tuint256[] public tokenIds\n              CALLVALUE \t\t\tuint256[] public tokenIds\n              DUP1 \t\t\tuint256[] public tokenIds\n              ISZERO \t\t\tuint256[] public tokenIds\n              PUSH [tag] 53\t\t\tuint256[] public tokenIds\n              JUMPI \t\t\tuint256[] public tokenIds\n              PUSH 0\t\t\tuint256[] public tokenIds\n              DUP1 \t\t\tuint256[] public tokenIds\n              REVERT \t\t\tuint256[] public tokenIds\n            tag 53\t\t\tuint256[] public tokenIds\n              JUMPDEST \t\t\tuint256[] public tokenIds\n              POP \t\t\tuint256[] public tokenIds\n              PUSH [tag] 54\t\t\tuint256[] public tokenIds\n              PUSH 4\t\t\tuint256[] public tokenIds\n              DUP1 \t\t\tuint256[] public tokenIds\n              CALLDATASIZE \t\t\tuint256[] public tokenIds\n              SUB \t\t\tuint256[] public tokenIds\n              DUP2 \t\t\tuint256[] public tokenIds\n              ADD \t\t\tuint256[] public tokenIds\n              SWAP1 \t\t\tuint256[] public tokenIds\n              PUSH [tag] 55\t\t\tuint256[] public tokenIds\n              SWAP2 \t\t\tuint256[] public tokenIds\n              SWAP1 \t\t\tuint256[] public tokenIds\n              PUSH [tag] 31\t\t\tuint256[] public tokenIds\n              JUMP \t\t\tuint256[] public tokenIds\n            tag 55\t\t\tuint256[] public tokenIds\n              JUMPDEST \t\t\tuint256[] public tokenIds\n              PUSH [tag] 56\t\t\tuint256[] public tokenIds\n              JUMP \t\t\tuint256[] public tokenIds\n            tag 54\t\t\tuint256[] public tokenIds\n              JUMPDEST \t\t\tuint256[] public tokenIds\n              PUSH 40\t\t\tuint256[] public tokenIds\n              MLOAD \t\t\tuint256[] public tokenIds\n              PUSH [tag] 57\t\t\tuint256[] public tokenIds\n              SWAP2 \t\t\tuint256[] public tokenIds\n              SWAP1 \t\t\tuint256[] public tokenIds\n              PUSH [tag] 34\t\t\tuint256[] public tokenIds\n              JUMP \t\t\tuint256[] public tokenIds\n            tag 57\t\t\tuint256[] public tokenIds\n              JUMPDEST \t\t\tuint256[] public tokenIds\n              PUSH 40\t\t\tuint256[] public tokenIds\n              MLOAD \t\t\tuint256[] public tokenIds\n              DUP1 \t\t\tuint256[] public tokenIds\n              SWAP2 \t\t\tuint256[] public tokenIds\n              SUB \t\t\tuint256[] public tokenIds\n              SWAP1 \t\t\tuint256[] public tokenIds\n              RETURN \t\t\tuint256[] public tokenIds\n            tag 11\t\t\tuint256 public creationTime\n              JUMPDEST \t\t\tuint256 public creationTime\n              CALLVALUE \t\t\tuint256 public creationTime\n              DUP1 \t\t\tuint256 public creationTime\n              ISZERO \t\t\tuint256 public creationTime\n              PUSH [tag] 58\t\t\tuint256 public creationTime\n              JUMPI \t\t\tuint256 public creationTime\n              PUSH 0\t\t\tuint256 public creationTime\n              DUP1 \t\t\tuint256 public creationTime\n              REVERT \t\t\tuint256 public creationTime\n            tag 58\t\t\tuint256 public creationTime\n              JUMPDEST \t\t\tuint256 public creationTime\n              POP \t\t\tuint256 public creationTime\n              PUSH [tag] 59\t\t\tuint256 public creationTime\n              PUSH [tag] 60\t\t\tuint256 public creationTime\n              JUMP \t\t\tuint256 public creationTime\n            tag 59\t\t\tuint256 public creationTime\n              JUMPDEST \t\t\tuint256 public creationTime\n              PUSH 40\t\t\tuint256 public creationTime\n              MLOAD \t\t\tuint256 public creationTime\n              PUSH [tag] 61\t\t\tuint256 public creationTime\n              SWAP2 \t\t\tuint256 public creationTime\n              SWAP1 \t\t\tuint256 public creationTime\n              PUSH [tag] 34\t\t\tuint256 public creationTime\n              JUMP \t\t\tuint256 public creationTime\n            tag 61\t\t\tuint256 public creationTime\n              JUMPDEST \t\t\tuint256 public creationTime\n              PUSH 40\t\t\tuint256 public creationTime\n              MLOAD \t\t\tuint256 public creationTime\n              DUP1 \t\t\tuint256 public creationTime\n              SWAP2 \t\t\tuint256 public creationTime\n              SUB \t\t\tuint256 public creationTime\n              SWAP1 \t\t\tuint256 public creationTime\n              RETURN \t\t\tuint256 public creationTime\n            tag 12\t\t\tfunction claimFunds(address pa...\n              JUMPDEST \t\t\tfunction claimFunds(address pa...\n              PUSH [tag] 62\t\t\tfunction claimFunds(address pa...\n              PUSH 4\t\t\tfunction claimFunds(address pa...\n              DUP1 \t\t\tfunction claimFunds(address pa...\n              CALLDATASIZE \t\t\tfunction claimFunds(address pa...\n              SUB \t\t\tfunction claimFunds(address pa...\n              DUP2 \t\t\tfunction claimFunds(address pa...\n              ADD \t\t\tfunction claimFunds(address pa...\n              SWAP1 \t\t\tfunction claimFunds(address pa...\n              PUSH [tag] 63\t\t\tfunction claimFunds(address pa...\n              SWAP2 \t\t\tfunction claimFunds(address pa...\n              SWAP1 \t\t\tfunction claimFunds(address pa...\n              PUSH [tag] 64\t\t\tfunction claimFunds(address pa...\n              JUMP \t\t\tfunction claimFunds(address pa...\n            tag 63\t\t\tfunction claimFunds(address pa...\n              JUMPDEST \t\t\tfunction claimFunds(address pa...\n              PUSH [tag] 65\t\t\tfunction claimFunds(address pa...\n              JUMP \t\t\tfunction claimFunds(address pa...\n            tag 62\t\t\tfunction claimFunds(address pa...\n              JUMPDEST \t\t\tfunction claimFunds(address pa...\n              STOP \t\t\tfunction claimFunds(address pa...\n            tag 13\t\t\taddress public admin\n              JUMPDEST \t\t\taddress public admin\n              CALLVALUE \t\t\taddress public admin\n              DUP1 \t\t\taddress public admin\n              ISZERO \t\t\taddress public admin\n              PUSH [tag] 66\t\t\taddress public admin\n              JUMPI \t\t\taddress public admin\n              PUSH 0\t\t\taddress public admin\n              DUP1 \t\t\taddress public admin\n              REVERT \t\t\taddress public admin\n            tag 66\t\t\taddress public admin\n              JUMPDEST \t\t\taddress public admin\n              POP \t\t\taddress public admin\n              PUSH [tag] 67\t\t\taddress public admin\n              PUSH [tag] 68\t\t\taddress public admin\n              JUMP \t\t\taddress public admin\n            tag 67\t\t\taddress public admin\n              JUMPDEST \t\t\taddress public admin\n              PUSH 40\t\t\taddress public admin\n              MLOAD \t\t\taddress public admin\n              PUSH [tag] 69\t\t\taddress public admin\n              SWAP2 \t\t\taddress public admin\n              SWAP1 \t\t\taddress public admin\n              PUSH [tag] 23\t\t\taddress public admin\n              JUMP \t\t\taddress public admin\n            tag 69\t\t\taddress public admin\n              JUMPDEST \t\t\taddress public admin\n              PUSH 40\t\t\taddress public admin\n              MLOAD \t\t\taddress public admin\n              DUP1 \t\t\taddress public admin\n              SWAP2 \t\t\taddress public admin\n              SUB \t\t\taddress public admin\n              SWAP1 \t\t\taddress public admin\n              RETURN \t\t\taddress public admin\n            tag 21\t\t\taddress public NFTContract\n              JUMPDEST \t\t\taddress public NFTContract\n              PUSH 0\t\t\taddress public NFTContract\n              DUP1 \t\t\taddress public NFTContract\n              SLOAD \t\t\taddress public NFTContract\n              SWAP1 \t\t\taddress public NFTContract\n              PUSH 100\t\t\taddress public NFTContract\n              EXP \t\t\taddress public NFTContract\n              SWAP1 \t\t\taddress public NFTContract\n              DIV \t\t\taddress public NFTContract\n              PUSH FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF\t\t\taddress public NFTContract\n              AND \t\t\taddress public NFTContract\n              DUP2 \t\t\taddress public NFTContract\n              JUMP \t\t\taddress public NFTContract\n            tag 26\t\t\taddress public bitsurance\n              JUMPDEST \t\t\taddress public bitsurance\n              PUSH 4\t\t\taddress public bitsurance\n              PUSH 0\t\t\taddress public bitsurance\n              SWAP1 \t\t\taddress public bitsurance\n              SLOAD \t\t\taddress public bitsurance\n              SWAP1 \t\t\taddress public bitsurance\n              PUSH 100\t\t\taddress public bitsurance\n              EXP \t\t\taddress public bitsurance\n              SWAP1 \t\t\taddress public bitsurance\n              DIV \t\t\taddress public bitsurance\n              PUSH FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF\t\t\taddress public bitsurance\n              AND \t\t\taddress public bitsurance\n              DUP2 \t\t\taddress public bitsurance\n              JUMP \t\t\taddress public bitsurance\n            tag 32\t\t\tmapping(uint256 => uint256) pu...\n              JUMPDEST \t\t\tmapping(uint256 => uint256) pu...\n              PUSH 1\t\t\tmapping(uint256 => uint256) pu...\n              PUSH 20\t\t\tmapping(uint256 => uint256) pu...\n              MSTORE \t\t\tmapping(uint256 => uint256) pu...\n              DUP1 \t\t\tmapping(uint256 => uint256) pu...\n              PUSH 0\t\t\tmapping(uint256 => uint256) pu...\n              MSTORE \t\t\tmapping(uint256 => uint256) pu...\n              PUSH 40\t\t\tmapping(uint256 => uint256) pu...\n              PUSH 0\t\t\tmapping(uint256 => uint256) pu...\n              KECCAK256 \t\t\tmapping(uint256 => uint256) pu...\n              PUSH 0\t\t\tmapping(uint256 => uint256) pu...\n              SWAP2 \t\t\tmapping(uint256 => uint256) pu...\n              POP \t\t\tmapping(uint256 => uint256) pu...\n              SWAP1 \t\t\tmapping(uint256 => uint256) pu...\n              POP \t\t\tmapping(uint256 => uint256) pu...\n              SLOAD \t\t\tmapping(uint256 => uint256) pu...\n              DUP2 \t\t\tmapping(uint256 => uint256) pu...\n              JUMP \t\t\tmapping(uint256 => uint256) pu...\n            tag 37\t\t\tfunction getTokenIds() public ...\n              JUMPDEST \t\t\tfunction getTokenIds() public ...\n              PUSH 60\t\t\tuint256[] memory\n              PUSH 6\t\t\ttokenIds\n              DUP1 \t\t\treturn tokenIds\n              SLOAD \t\t\treturn tokenIds\n              DUP1 \t\t\treturn tokenIds\n              PUSH 20\t\t\treturn tokenIds\n              MUL \t\t\treturn tokenIds\n              PUSH 20\t\t\treturn tokenIds\n              ADD \t\t\treturn tokenIds\n              PUSH 40\t\t\treturn tokenIds\n              MLOAD \t\t\treturn tokenIds\n              SWAP1 \t\t\treturn tokenIds\n              DUP2 \t\t\treturn tokenIds\n              ADD \t\t\treturn tokenIds\n              PUSH 40\t\t\treturn tokenIds\n              MSTORE \t\t\treturn tokenIds\n              DUP1 \t\t\treturn tokenIds\n              SWAP3 \t\t\treturn tokenIds\n              SWAP2 \t\t\treturn tokenIds\n              SWAP1 \t\t\treturn tokenIds\n              DUP2 \t\t\treturn tokenIds\n              DUP2 \t\t\treturn tokenIds\n              MSTORE \t\t\treturn tokenIds\n              PUSH 20\t\t\treturn tokenIds\n              ADD \t\t\treturn tokenIds\n              DUP3 \t\t\treturn tokenIds\n              DUP1 \t\t\treturn tokenIds\n              SLOAD \t\t\treturn tokenIds\n              DUP1 \t\t\treturn tokenIds\n              ISZERO \t\t\treturn tokenIds\n              PUSH [tag] 71\t\t\treturn tokenIds\n              JUMPI \t\t\treturn tokenIds\n              PUSH 20\t\t\treturn tokenIds\n              MUL \t\t\treturn tokenIds\n              DUP3 \t\t\treturn tokenIds\n              ADD \t\t\treturn tokenIds\n              SWAP2 \t\t\treturn tokenIds\n              SWAP1 \t\t\treturn tokenIds\n              PUSH 0\t\t\treturn tokenIds\n              MSTORE \t\t\treturn tokenIds\n              PUSH 20\t\t\treturn tokenIds\n              PUSH 0\t\t\treturn tokenIds\n              KECCAK256 \t\t\treturn tokenIds\n              SWAP1 \t\t\treturn tokenIds\n            tag 72\t\t\treturn tokenIds\n              JUMPDEST \t\t\treturn tokenIds\n              DUP2 \t\t\treturn tokenIds\n              SLOAD \t\t\treturn tokenIds\n              DUP2 \t\t\treturn tokenIds\n              MSTORE \t\t\treturn tokenIds\n              PUSH 20\t\t\treturn tokenIds\n              ADD \t\t\treturn tokenIds\n              SWAP1 \t\t\treturn tokenIds\n              PUSH 1\t\t\treturn tokenIds\n              ADD \t\t\treturn tokenIds\n              SWAP1 \t\t\treturn tokenIds\n              DUP1 \t\t\treturn tokenIds\n              DUP4 \t\t\treturn tokenIds\n              GT \t\t\treturn tokenIds\n              PUSH [tag] 72\t\t\treturn tokenIds\n              JUMPI \t\t\treturn tokenIds\n            tag 71\t\t\treturn tokenIds\n              JUMPDEST \t\t\treturn tokenIds\n              POP \t\t\treturn tokenIds\n              POP \t\t\treturn tokenIds\n              POP \t\t\treturn tokenIds\n              POP \t\t\treturn tokenIds\n              POP \t\t\treturn tokenIds\n              SWAP1 \t\t\treturn tokenIds\n              POP \t\t\treturn tokenIds\n              SWAP1 \t\t\tfunction getTokenIds() public ...\n              JUMP \t\t\tfunction getTokenIds() public ...\n            tag 43\t\t\tfunction withdraw(address paya...\n              JUMPDEST \t\t\tfunction withdraw(address paya...\n              PUSH 4\t\t\tbitsurance\n              PUSH 0\t\t\tbitsurance\n              SWAP1 \t\t\tbitsurance\n              SLOAD \t\t\tbitsurance\n              SWAP1 \t\t\tbitsurance\n              PUSH 100\t\t\tbitsurance\n              EXP \t\t\tbitsurance\n              SWAP1 \t\t\tbitsurance\n              DIV \t\t\tbitsurance\n              PUSH FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF\t\t\tbitsurance\n              AND \t\t\tbitsurance\n              PUSH FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF\t\t\tmsg.sender == bitsurance\n              AND \t\t\tmsg.sender == bitsurance\n              CALLER \t\t\tmsg.sender\n              PUSH FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF\t\t\tmsg.sender == bitsurance\n              AND \t\t\tmsg.sender == bitsurance\n              EQ \t\t\tmsg.sender == bitsurance\n              PUSH [tag] 74\t\t\trequire(msg.sender == bitsuran...\n              JUMPI \t\t\trequire(msg.sender == bitsuran...\n              PUSH 40\t\t\trequire(msg.sender == bitsuran...\n              MLOAD \t\t\trequire(msg.sender == bitsuran...\n              PUSH 8C379A000000000000000000000000000000000000000000000000000000000\t\t\trequire(msg.sender == bitsuran...\n              DUP2 \t\t\trequire(msg.sender == bitsuran...\n              MSTORE \t\t\trequire(msg.sender == bitsuran...\n              PUSH 4\t\t\trequire(msg.sender == bitsuran...\n              ADD \t\t\trequire(msg.sender == bitsuran...\n              PUSH [tag] 75\t\t\trequire(msg.sender == bitsuran...\n              SWAP1 \t\t\trequire(msg.sender == bitsuran...\n              PUSH [tag] 76\t\t\trequire(msg.sender == bitsuran...\n              JUMP \t\t\trequire(msg.sender == bitsuran...\n            tag 75\t\t\trequire(msg.sender == bitsuran...\n              JUMPDEST \t\t\trequire(msg.sender == bitsuran...\n              PUSH 40\t\t\trequire(msg.sender == bitsuran...\n              MLOAD \t\t\trequire(msg.sender == bitsuran...\n              DUP1 \t\t\trequire(msg.sender == bitsuran...\n              SWAP2 \t\t\trequire(msg.sender == bitsuran...\n              SUB \t\t\trequire(msg.sender == bitsuran...\n              SWAP1 \t\t\trequire(msg.sender == bitsuran...\n              REVERT \t\t\trequire(msg.sender == bitsuran...\n            tag 74\t\t\trequire(msg.sender == bitsuran...\n              JUMPDEST \t\t\trequire(msg.sender == bitsuran...\n              PUSH 2\t\t\t2\n              DUP1 \t\t\tminimumWithdrawTime\n              SLOAD \t\t\tminimumWithdrawTime\n              PUSH [tag] 78\t\t\tminimumWithdrawTime * 2\n              SWAP2 \t\t\tminimumWithdrawTime * 2\n              SWAP1 \t\t\tminimumWithdrawTime * 2\n              PUSH [tag] 79\t\t\tminimumWithdrawTime * 2\n              JUMP \t\t\tminimumWithdrawTime * 2\n            tag 78\t\t\tminimumWithdrawTime * 2\n              JUMPDEST \t\t\tminimumWithdrawTime * 2\n              PUSH 3\t\t\tcreationTime\n              SLOAD \t\t\tcreationTime\n              TIMESTAMP \t\t\tblock.timestamp\n              PUSH [tag] 80\t\t\tblock.timestamp - creationTime\n              SWAP2 \t\t\tblock.timestamp - creationTime\n              SWAP1 \t\t\tblock.timestamp - creationTime\n              PUSH [tag] 81\t\t\tblock.timestamp - creationTime\n              JUMP \t\t\tblock.timestamp - creationTime\n            tag 80\t\t\tblock.timestamp - creationTime\n              JUMPDEST \t\t\tblock.timestamp - creationTime\n              LT \t\t\tblock.timestamp - creationTime...\n              ISZERO \t\t\tblock.timestamp - creationTime...\n              PUSH [tag] 82\t\t\trequire(block.timestamp - crea...\n              JUMPI \t\t\trequire(block.timestamp - crea...\n              PUSH 40\t\t\trequire(block.timestamp - crea...\n              MLOAD \t\t\trequire(block.timestamp - crea...\n              PUSH 8C379A000000000000000000000000000000000000000000000000000000000\t\t\trequire(block.timestamp - crea...\n              DUP2 \t\t\trequire(block.timestamp - crea...\n              MSTORE \t\t\trequire(block.timestamp - crea...\n              PUSH 4\t\t\trequire(block.timestamp - crea...\n              ADD \t\t\trequire(block.timestamp - crea...\n              PUSH [tag] 83\t\t\trequire(block.timestamp - crea...\n              SWAP1 \t\t\trequire(block.timestamp - crea...\n              PUSH [tag] 84\t\t\trequire(block.timestamp - crea...\n              JUMP \t\t\trequire(block.timestamp - crea...\n            tag 83\t\t\trequire(block.timestamp - crea...\n              JUMPDEST \t\t\trequire(block.timestamp - crea...\n              PUSH 40\t\t\trequire(block.timestamp - crea...\n              MLOAD \t\t\trequire(block.timestamp - crea...\n              DUP1 \t\t\trequire(block.timestamp - crea...\n              SWAP2 \t\t\trequire(block.timestamp - crea...\n              SUB \t\t\trequire(block.timestamp - crea...\n              SWAP1 \t\t\trequire(block.timestamp - crea...\n              REVERT \t\t\trequire(block.timestamp - crea...\n            tag 82\t\t\trequire(block.timestamp - crea...\n              JUMPDEST \t\t\trequire(block.timestamp - crea...\n              PUSH 0\t\t\tuint256 totalAmount\n              DUP1 \t\t\tuint256 i\n            tag 85\t\t\tfor (uint256 i = 0; i < _token...\n              JUMPDEST \t\t\tfor (uint256 i = 0; i < _token...\n              DUP3 \t\t\t_tokenIDs\n              MLOAD \t\t\t_tokenIDs.length\n              DUP2 \t\t\ti\n              LT \t\t\ti < _tokenIDs.length\n              ISZERO \t\t\tfor (uint256 i = 0; i < _token...\n              PUSH [tag] 86\t\t\tfor (uint256 i = 0; i < _token...\n              JUMPI \t\t\tfor (uint256 i = 0; i < _token...\n              PUSH 0\t\t\t0\n              PUSH 1\t\t\ttokenBalances\n              PUSH 0\t\t\ttokenBalances[_tokenIDs[i]]\n              DUP6 \t\t\t_tokenIDs\n              DUP5 \t\t\ti\n              DUP2 \t\t\t_tokenIDs[i]\n              MLOAD \t\t\t_tokenIDs[i]\n              DUP2 \t\t\t_tokenIDs[i]\n              LT \t\t\t_tokenIDs[i]\n              PUSH [tag] 88\t\t\t_tokenIDs[i]\n              JUMPI \t\t\t_tokenIDs[i]\n              PUSH [tag] 89\t\t\t_tokenIDs[i]\n              PUSH [tag] 90\t\t\t_tokenIDs[i]\n              JUMP \t\t\t_tokenIDs[i]\n            tag 89\t\t\t_tokenIDs[i]\n              JUMPDEST \t\t\t_tokenIDs[i]\n            tag 88\t\t\t_tokenIDs[i]\n              JUMPDEST \t\t\t_tokenIDs[i]\n              PUSH 20\t\t\t_tokenIDs[i]\n              MUL \t\t\t_tokenIDs[i]\n              PUSH 20\t\t\t_tokenIDs[i]\n              ADD \t\t\t_tokenIDs[i]\n              ADD \t\t\t_tokenIDs[i]\n              MLOAD \t\t\t_tokenIDs[i]\n              DUP2 \t\t\ttokenBalances[_tokenIDs[i]]\n              MSTORE \t\t\ttokenBalances[_tokenIDs[i]]\n              PUSH 20\t\t\ttokenBalances[_tokenIDs[i]]\n              ADD \t\t\ttokenBalances[_tokenIDs[i]]\n              SWAP1 \t\t\ttokenBalances[_tokenIDs[i]]\n              DUP2 \t\t\ttokenBalances[_tokenIDs[i]]\n              MSTORE \t\t\ttokenBalances[_tokenIDs[i]]\n              PUSH 20\t\t\ttokenBalances[_tokenIDs[i]]\n              ADD \t\t\ttokenBalances[_tokenIDs[i]]\n              PUSH 0\t\t\ttokenBalances[_tokenIDs[i]]\n              KECCAK256 \t\t\ttokenBalances[_tokenIDs[i]]\n              SLOAD \t\t\ttokenBalances[_tokenIDs[i]]\n              GT \t\t\ttokenBalances[_tokenIDs[i]] > ...\n              PUSH [tag] 91\t\t\trequire(tokenBalances[_tokenID...\n              JUMPI \t\t\trequire(tokenBalances[_tokenID...\n              PUSH 40\t\t\trequire(tokenBalances[_tokenID...\n              MLOAD \t\t\trequire(tokenBalances[_tokenID...\n              PUSH 8C379A000000000000000000000000000000000000000000000000000000000\t\t\trequire(tokenBalances[_tokenID...\n              DUP2 \t\t\trequire(tokenBalances[_tokenID...\n              MSTORE \t\t\trequire(tokenBalances[_tokenID...\n              PUSH 4\t\t\trequire(tokenBalances[_tokenID...\n              ADD \t\t\trequire(tokenBalances[_tokenID...\n              PUSH [tag] 92\t\t\trequire(tokenBalances[_tokenID...\n              SWAP1 \t\t\trequire(tokenBalances[_tokenID...\n              PUSH [tag] 93\t\t\trequire(tokenBalances[_tokenID...\n              JUMP \t\t\trequire(tokenBalances[_tokenID...\n            tag 92\t\t\trequire(tokenBalances[_tokenID...\n              JUMPDEST \t\t\trequire(tokenBalances[_tokenID...\n              PUSH 40\t\t\trequire(tokenBalances[_tokenID...\n              MLOAD \t\t\trequire(tokenBalances[_tokenID...\n              DUP1 \t\t\trequire(tokenBalances[_tokenID...\n              SWAP2 \t\t\trequire(tokenBalances[_tokenID...\n              SUB \t\t\trequire(tokenBalances[_tokenID...\n              SWAP1 \t\t\trequire(tokenBalances[_tokenID...\n              REVERT \t\t\trequire(tokenBalances[_tokenID...\n            tag 91\t\t\trequire(tokenBalances[_tokenID...\n              JUMPDEST \t\t\trequire(tokenBalances[_tokenID...\n              PUSH 1\t\t\ttokenBalances\n              PUSH 0\t\t\ttokenBalances[_tokenIDs[i]]\n              DUP5 \t\t\t_tokenIDs\n              DUP4 \t\t\ti\n              DUP2 \t\t\t_tokenIDs[i]\n              MLOAD \t\t\t_tokenIDs[i]\n              DUP2 \t\t\t_tokenIDs[i]\n              LT \t\t\t_tokenIDs[i]\n              PUSH [tag] 94\t\t\t_tokenIDs[i]\n              JUMPI \t\t\t_tokenIDs[i]\n              PUSH [tag] 95\t\t\t_tokenIDs[i]\n              PUSH [tag] 90\t\t\t_tokenIDs[i]\n              JUMP \t\t\t_tokenIDs[i]\n            tag 95\t\t\t_tokenIDs[i]\n              JUMPDEST \t\t\t_tokenIDs[i]\n            tag 94\t\t\t_tokenIDs[i]\n              JUMPDEST \t\t\t_tokenIDs[i]\n              PUSH 20\t\t\t_tokenIDs[i]\n              MUL \t\t\t_tokenIDs[i]\n              PUSH 20\t\t\t_tokenIDs[i]\n              ADD \t\t\t_tokenIDs[i]\n              ADD \t\t\t_tokenIDs[i]\n              MLOAD \t\t\t_tokenIDs[i]\n              DUP2 \t\t\ttokenBalances[_tokenIDs[i]]\n              MSTORE \t\t\ttokenBalances[_tokenIDs[i]]\n              PUSH 20\t\t\ttokenBalances[_tokenIDs[i]]\n              ADD \t\t\ttokenBalances[_tokenIDs[i]]\n              SWAP1 \t\t\ttokenBalances[_tokenIDs[i]]\n              DUP2 \t\t\ttokenBalances[_tokenIDs[i]]\n              MSTORE \t\t\ttokenBalances[_tokenIDs[i]]\n              PUSH 20\t\t\ttokenBalances[_tokenIDs[i]]\n              ADD \t\t\ttokenBalances[_tokenIDs[i]]\n              PUSH 0\t\t\ttokenBalances[_tokenIDs[i]]\n              KECCAK256 \t\t\ttokenBalances[_tokenIDs[i]]\n              SLOAD \t\t\ttokenBalances[_tokenIDs[i]]\n              DUP3 \t\t\ttotalAmount += tokenBalances[_...\n              PUSH [tag] 96\t\t\ttotalAmount += tokenBalances[_...\n              SWAP2 \t\t\ttotalAmount += tokenBalances[_...\n              SWAP1 \t\t\ttotalAmount += tokenBalances[_...\n              PUSH [tag] 97\t\t\ttotalAmount += tokenBalances[_...\n              JUMP \t\t\ttotalAmount += tokenBalances[_...\n            tag 96\t\t\ttotalAmount += tokenBalances[_...\n              JUMPDEST \t\t\ttotalAmount += tokenBalances[_...\n              SWAP2 \t\t\ttotalAmount += tokenBalances[_...\n              POP \t\t\ttotalAmount += tokenBalances[_...\n              PUSH 0\t\t\t0\n              PUSH 1\t\t\ttokenBalances\n              PUSH 0\t\t\ttokenBalances[_tokenIDs[i]]\n              DUP6 \t\t\t_tokenIDs\n              DUP5 \t\t\ti\n              DUP2 \t\t\t_tokenIDs[i]\n              MLOAD \t\t\t_tokenIDs[i]\n              DUP2 \t\t\t_tokenIDs[i]\n              LT \t\t\t_tokenIDs[i]\n              PUSH [tag] 98\t\t\t_tokenIDs[i]\n              JUMPI \t\t\t_tokenIDs[i]\n              PUSH [tag] 99\t\t\t_tokenIDs[i]\n              PUSH [tag] 90\t\t\t_tokenIDs[i]\n              JUMP \t\t\t_tokenIDs[i]\n            tag 99\t\t\t_tokenIDs[i]\n              JUMPDEST \t\t\t_tokenIDs[i]\n            tag 98\t\t\t_tokenIDs[i]\n              JUMPDEST \t\t\t_tokenIDs[i]\n              PUSH 20\t\t\t_tokenIDs[i]\n              MUL \t\t\t_tokenIDs[i]\n              PUSH 20\t\t\t_tokenIDs[i]\n              ADD \t\t\t_tokenIDs[i]\n              ADD \t\t\t_tokenIDs[i]\n              MLOAD \t\t\t_tokenIDs[i]\n              DUP2 \t\t\ttokenBalances[_tokenIDs[i]]\n              MSTORE \t\t\ttokenBalances[_tokenIDs[i]]\n              PUSH 20\t\t\ttokenBalances[_tokenIDs[i]]\n              ADD \t\t\ttokenBalances[_tokenIDs[i]]\n              SWAP1 \t\t\ttokenBalances[_tokenIDs[i]]\n              DUP2 \t\t\ttokenBalances[_tokenIDs[i]]\n              MSTORE \t\t\ttokenBalances[_tokenIDs[i]]\n              PUSH 20\t\t\ttokenBalances[_tokenIDs[i]]\n              ADD \t\t\ttokenBalances[_tokenIDs[i]]\n              PUSH 0\t\t\ttokenBalances[_tokenIDs[i]]\n              KECCAK256 \t\t\ttokenBalances[_tokenIDs[i]]\n              DUP2 \t\t\ttokenBalances[_tokenIDs[i]] = ...\n              SWAP1 \t\t\ttokenBalances[_tokenIDs[i]] = ...\n              SSTORE \t\t\ttokenBalances[_tokenIDs[i]] = ...\n              POP \t\t\ttokenBalances[_tokenIDs[i]] = ...\n              DUP1 \t\t\ti++\n              DUP1 \t\t\ti++\n              PUSH [tag] 100\t\t\ti++\n              SWAP1 \t\t\ti++\n              PUSH [tag] 101\t\t\ti++\n              JUMP \t\t\ti++\n            tag 100\t\t\ti++\n              JUMPDEST \t\t\ti++\n              SWAP2 \t\t\ti++\n              POP \t\t\ti++\n              POP \t\t\ti++\n              PUSH [tag] 85\t\t\tfor (uint256 i = 0; i < _token...\n              JUMP \t\t\tfor (uint256 i = 0; i < _token...\n            tag 86\t\t\tfor (uint256 i = 0; i < _token...\n              JUMPDEST \t\t\tfor (uint256 i = 0; i < _token...\n              POP \t\t\tfor (uint256 i = 0; i < _token...\n              DUP3 \t\t\trecipient\n              PUSH FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF\t\t\trecipient.transfer\n              AND \t\t\trecipient.transfer\n              PUSH 8FC\t\t\trecipient.transfer(totalAmount...\n              DUP3 \t\t\ttotalAmount\n              SWAP1 \t\t\trecipient.transfer(totalAmount...\n              DUP2 \t\t\trecipient.transfer(totalAmount...\n              ISZERO \t\t\trecipient.transfer(totalAmount...\n              MUL \t\t\trecipient.transfer(totalAmount...\n              SWAP1 \t\t\trecipient.transfer(totalAmount...\n              PUSH 40\t\t\trecipient.transfer(totalAmount...\n              MLOAD \t\t\trecipient.transfer(totalAmount...\n              PUSH 0\t\t\trecipient.transfer(totalAmount...\n              PUSH 40\t\t\trecipient.transfer(totalAmount...\n              MLOAD \t\t\trecipient.transfer(totalAmount...\n              DUP1 \t\t\trecipient.transfer(totalAmount...\n              DUP4 \t\t\trecipient.transfer(totalAmount...\n              SUB \t\t\trecipient.transfer(totalAmount...\n              DUP2 \t\t\trecipient.transfer(totalAmount...\n              DUP6 \t\t\trecipient.transfer(totalAmount...\n              DUP9 \t\t\trecipient.transfer(totalAmount...\n              DUP9 \t\t\trecipient.transfer(totalAmount...\n              CALL \t\t\trecipient.transfer(totalAmount...\n              SWAP4 \t\t\trecipient.transfer(totalAmount...\n              POP \t\t\trecipient.transfer(totalAmount...\n              POP \t\t\trecipient.transfer(totalAmount...\n              POP \t\t\trecipient.transfer(totalAmount...\n              POP \t\t\trecipient.transfer(totalAmount...\n              ISZERO \t\t\trecipient.transfer(totalAmount...\n              DUP1 \t\t\trecipient.transfer(totalAmount...\n              ISZERO \t\t\trecipient.transfer(totalAmount...\n              PUSH [tag] 103\t\t\trecipient.transfer(totalAmount...\n              JUMPI \t\t\trecipient.transfer(totalAmount...\n              RETURNDATASIZE \t\t\trecipient.transfer(totalAmount...\n              PUSH 0\t\t\trecipient.transfer(totalAmount...\n              DUP1 \t\t\trecipient.transfer(totalAmount...\n              RETURNDATACOPY \t\t\trecipient.transfer(totalAmount...\n              RETURNDATASIZE \t\t\trecipient.transfer(totalAmount...\n              PUSH 0\t\t\trecipient.transfer(totalAmount...\n              REVERT \t\t\trecipient.transfer(totalAmount...\n            tag 103\t\t\trecipient.transfer(totalAmount...\n              JUMPDEST \t\t\trecipient.transfer(totalAmount...\n              POP \t\t\trecipient.transfer(totalAmount...\n              POP \t\t\t{\\r\\n        require(block.tim...\n              POP \t\t\tfunction withdraw(address paya...\n              POP \t\t\tfunction withdraw(address paya...\n              JUMP \t\t\tfunction withdraw(address paya...\n            tag 46\t\t\tuint256 public minimumWithdraw...\n              JUMPDEST \t\t\tuint256 public minimumWithdraw...\n              PUSH 2\t\t\tuint256 public minimumWithdraw...\n              SLOAD \t\t\tuint256 public minimumWithdraw...\n              DUP2 \t\t\tuint256 public minimumWithdraw...\n              JUMP \t\t\tuint256 public minimumWithdraw...\n            tag 52\t\t\tfunction addBalance(uint256 _t...\n              JUMPDEST \t\t\tfunction addBalance(uint256 _t...\n              PUSH 4\t\t\tbitsurance\n              PUSH 0\t\t\tbitsurance\n              SWAP1 \t\t\tbitsurance\n              SLOAD \t\t\tbitsurance\n              SWAP1 \t\t\tbitsurance\n              PUSH 100\t\t\tbitsurance\n              EXP \t\t\tbitsurance\n              SWAP1 \t\t\tbitsurance\n              DIV \t\t\tbitsurance\n              PUSH FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF\t\t\tbitsurance\n              AND \t\t\tbitsurance\n              PUSH FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF\t\t\tmsg.sender == bitsurance\n              AND \t\t\tmsg.sender == bitsurance\n              CALLER \t\t\tmsg.sender\n              PUSH FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF\t\t\tmsg.sender == bitsurance\n              AND \t\t\tmsg.sender == bitsurance\n              EQ \t\t\tmsg.sender == bitsurance\n              PUSH [tag] 105\t\t\trequire(msg.sender == bitsuran...\n              JUMPI \t\t\trequire(msg.sender == bitsuran...\n              PUSH 40\t\t\trequire(msg.sender == bitsuran...\n              MLOAD \t\t\trequire(msg.sender == bitsuran...\n              PUSH 8C379A000000000000000000000000000000000000000000000000000000000\t\t\trequire(msg.sender == bitsuran...\n              DUP2 \t\t\trequire(msg.sender == bitsuran...\n              MSTORE \t\t\trequire(msg.sender == bitsuran...\n              PUSH 4\t\t\trequire(msg.sender == bitsuran...\n              ADD \t\t\trequire(msg.sender == bitsuran...\n              PUSH [tag] 106\t\t\trequire(msg.sender == bitsuran...\n              SWAP1 \t\t\trequire(msg.sender == bitsuran...\n              PUSH [tag] 76\t\t\trequire(msg.sender == bitsuran...\n              JUMP \t\t\trequire(msg.sender == bitsuran...\n            tag 106\t\t\trequire(msg.sender == bitsuran...\n              JUMPDEST \t\t\trequire(msg.sender == bitsuran...\n              PUSH 40\t\t\trequire(msg.sender == bitsuran...\n              MLOAD \t\t\trequire(msg.sender == bitsuran...\n              DUP1 \t\t\trequire(msg.sender == bitsuran...\n              SWAP2 \t\t\trequire(msg.sender == bitsuran...\n              SUB \t\t\trequire(msg.sender == bitsuran...\n              SWAP1 \t\t\trequire(msg.sender == bitsuran...\n              REVERT \t\t\trequire(msg.sender == bitsuran...\n            tag 105\t\t\trequire(msg.sender == bitsuran...\n              JUMPDEST \t\t\trequire(msg.sender == bitsuran...\n              PUSH 0\t\t\t0\n              PUSH 1\t\t\ttokenBalances\n              PUSH 0\t\t\ttokenBalances[_tokenID]\n              DUP5 \t\t\t_tokenID\n              DUP2 \t\t\ttokenBalances[_tokenID]\n              MSTORE \t\t\ttokenBalances[_tokenID]\n              PUSH 20\t\t\ttokenBalances[_tokenID]\n              ADD \t\t\ttokenBalances[_tokenID]\n              SWAP1 \t\t\ttokenBalances[_tokenID]\n              DUP2 \t\t\ttokenBalances[_tokenID]\n              MSTORE \t\t\ttokenBalances[_tokenID]\n              PUSH 20\t\t\ttokenBalances[_tokenID]\n              ADD \t\t\ttokenBalances[_tokenID]\n              PUSH 0\t\t\ttokenBalances[_tokenID]\n              KECCAK256 \t\t\ttokenBalances[_tokenID]\n              SLOAD \t\t\ttokenBalances[_tokenID]\n              SUB \t\t\ttokenBalances[_tokenID] == 0\n              PUSH [tag] 108\t\t\tif (tokenBalances[_tokenID] ==...\n              JUMPI \t\t\tif (tokenBalances[_tokenID] ==...\n              PUSH 6\t\t\ttokenIds\n              DUP3 \t\t\t_tokenID\n              SWAP1 \t\t\ttokenIds.push(_tokenID)\n              DUP1 \t\t\ttokenIds.push(_tokenID)\n              PUSH 1\t\t\ttokenIds.push(_tokenID)\n              DUP2 \t\t\ttokenIds.push(_tokenID)\n              SLOAD \t\t\ttokenIds.push(_tokenID)\n              ADD \t\t\ttokenIds.push(_tokenID)\n              DUP1 \t\t\ttokenIds.push(_tokenID)\n              DUP3 \t\t\ttokenIds.push(_tokenID)\n              SSTORE \t\t\ttokenIds.push(_tokenID)\n              DUP1 \t\t\ttokenIds.push(_tokenID)\n              SWAP2 \t\t\ttokenIds.push(_tokenID)\n              POP \t\t\ttokenIds.push(_tokenID)\n              POP \t\t\ttokenIds.push(_tokenID)\n              PUSH 1\t\t\ttokenIds.push(_tokenID)\n              SWAP1 \t\t\ttokenIds.push(_tokenID)\n              SUB \t\t\ttokenIds.push(_tokenID)\n              SWAP1 \t\t\ttokenIds.push(_tokenID)\n              PUSH 0\t\t\ttokenIds.push(_tokenID)\n              MSTORE \t\t\ttokenIds.push(_tokenID)\n              PUSH 20\t\t\ttokenIds.push(_tokenID)\n              PUSH 0\t\t\ttokenIds.push(_tokenID)\n              KECCAK256 \t\t\ttokenIds.push(_tokenID)\n              ADD \t\t\ttokenIds.push(_tokenID)\n              PUSH 0\t\t\ttokenIds.push(_tokenID)\n              SWAP1 \t\t\ttokenIds.push(_tokenID)\n              SWAP2 \t\t\ttokenIds.push(_tokenID)\n              SWAP1 \t\t\ttokenIds.push(_tokenID)\n              SWAP2 \t\t\ttokenIds.push(_tokenID)\n              SWAP1 \t\t\ttokenIds.push(_tokenID)\n              SWAP2 \t\t\ttokenIds.push(_tokenID)\n              POP \t\t\ttokenIds.push(_tokenID)\n              SSTORE \t\t\ttokenIds.push(_tokenID)\n            tag 108\t\t\tif (tokenBalances[_tokenID] ==...\n              JUMPDEST \t\t\tif (tokenBalances[_tokenID] ==...\n              DUP1 \t\t\tamount\n              PUSH 1\t\t\ttokenBalances\n              PUSH 0\t\t\ttokenBalances[_tokenID]\n              DUP5 \t\t\t_tokenID\n              DUP2 \t\t\ttokenBalances[_tokenID]\n              MSTORE \t\t\ttokenBalances[_tokenID]\n              PUSH 20\t\t\ttokenBalances[_tokenID]\n              ADD \t\t\ttokenBalances[_tokenID]\n              SWAP1 \t\t\ttokenBalances[_tokenID]\n              DUP2 \t\t\ttokenBalances[_tokenID]\n              MSTORE \t\t\ttokenBalances[_tokenID]\n              PUSH 20\t\t\ttokenBalances[_tokenID]\n              ADD \t\t\ttokenBalances[_tokenID]\n              PUSH 0\t\t\ttokenBalances[_tokenID]\n              KECCAK256 \t\t\ttokenBalances[_tokenID]\n              PUSH 0\t\t\ttokenBalances[_tokenID]\n              DUP3 \t\t\ttokenBalances[_tokenID] += amo...\n              DUP3 \t\t\ttokenBalances[_tokenID] += amo...\n              SLOAD \t\t\ttokenBalances[_tokenID] += amo...\n              PUSH [tag] 110\t\t\ttokenBalances[_tokenID] += amo...\n              SWAP2 \t\t\ttokenBalances[_tokenID] += amo...\n              SWAP1 \t\t\ttokenBalances[_tokenID] += amo...\n              PUSH [tag] 97\t\t\ttokenBalances[_tokenID] += amo...\n              JUMP \t\t\ttokenBalances[_tokenID] += amo...\n            tag 110\t\t\ttokenBalances[_tokenID] += amo...\n              JUMPDEST \t\t\ttokenBalances[_tokenID] += amo...\n              SWAP3 \t\t\ttokenBalances[_tokenID] += amo...\n              POP \t\t\ttokenBalances[_tokenID] += amo...\n              POP \t\t\ttokenBalances[_tokenID] += amo...\n              DUP2 \t\t\ttokenBalances[_tokenID] += amo...\n              SWAP1 \t\t\ttokenBalances[_tokenID] += amo...\n              SSTORE \t\t\ttokenBalances[_tokenID] += amo...\n              POP \t\t\ttokenBalances[_tokenID] += amo...\n              POP \t\t\tfunction addBalance(uint256 _t...\n              POP \t\t\tfunction addBalance(uint256 _t...\n              JUMP \t\t\tfunction addBalance(uint256 _t...\n            tag 56\t\t\tuint256[] public tokenIds\n              JUMPDEST \t\t\tuint256[] public tokenIds\n              PUSH 6\t\t\tuint256[] public tokenIds\n              DUP2 \t\t\tuint256[] public tokenIds\n              DUP2 \t\t\tuint256[] public tokenIds\n              SLOAD \t\t\tuint256[] public tokenIds\n              DUP2 \t\t\tuint256[] public tokenIds\n              LT \t\t\tuint256[] public tokenIds\n              PUSH [tag] 111\t\t\tuint256[] public tokenIds\n              JUMPI \t\t\tuint256[] public tokenIds\n              PUSH 0\t\t\tuint256[] public tokenIds\n              DUP1 \t\t\tuint256[] public tokenIds\n              REVERT \t\t\tuint256[] public tokenIds\n            tag 111\t\t\tuint256[] public tokenIds\n              JUMPDEST \t\t\tuint256[] public tokenIds\n              SWAP1 \t\t\tuint256[] public tokenIds\n              PUSH 0\t\t\tuint256[] public tokenIds\n              MSTORE \t\t\tuint256[] public tokenIds\n              PUSH 20\t\t\tuint256[] public tokenIds\n              PUSH 0\t\t\tuint256[] public tokenIds\n              KECCAK256 \t\t\tuint256[] public tokenIds\n              ADD \t\t\tuint256[] public tokenIds\n              PUSH 0\t\t\tuint256[] public tokenIds\n              SWAP2 \t\t\tuint256[] public tokenIds\n              POP \t\t\tuint256[] public tokenIds\n              SWAP1 \t\t\tuint256[] public tokenIds\n              POP \t\t\tuint256[] public tokenIds\n              SLOAD \t\t\tuint256[] public tokenIds\n              DUP2 \t\t\tuint256[] public tokenIds\n              JUMP \t\t\tuint256[] public tokenIds\n            tag 60\t\t\tuint256 public creationTime\n              JUMPDEST \t\t\tuint256 public creationTime\n              PUSH 3\t\t\tuint256 public creationTime\n              SLOAD \t\t\tuint256 public creationTime\n              DUP2 \t\t\tuint256 public creationTime\n              JUMP \t\t\tuint256 public creationTime\n            tag 65\t\t\tfunction claimFunds(address pa...\n              JUMPDEST \t\t\tfunction claimFunds(address pa...\n              PUSH 4\t\t\tbitsurance\n              PUSH 0\t\t\tbitsurance\n              SWAP1 \t\t\tbitsurance\n              SLOAD \t\t\tbitsurance\n              SWAP1 \t\t\tbitsurance\n              PUSH 100\t\t\tbitsurance\n              EXP \t\t\tbitsurance\n              SWAP1 \t\t\tbitsurance\n              DIV \t\t\tbitsurance\n              PUSH FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF\t\t\tbitsurance\n              AND \t\t\tbitsurance\n              PUSH FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF\t\t\tmsg.sender == bitsurance\n              AND \t\t\tmsg.sender == bitsurance\n              CALLER \t\t\tmsg.sender\n              PUSH FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF\t\t\tmsg.sender == bitsurance\n              AND \t\t\tmsg.sender == bitsurance\n              EQ \t\t\tmsg.sender == bitsurance\n              PUSH [tag] 114\t\t\trequire(msg.sender == bitsuran...\n              JUMPI \t\t\trequire(msg.sender == bitsuran...\n              PUSH 40\t\t\trequire(msg.sender == bitsuran...\n              MLOAD \t\t\trequire(msg.sender == bitsuran...\n              PUSH 8C379A000000000000000000000000000000000000000000000000000000000\t\t\trequire(msg.sender == bitsuran...\n              DUP2 \t\t\trequire(msg.sender == bitsuran...\n              MSTORE \t\t\trequire(msg.sender == bitsuran...\n              PUSH 4\t\t\trequire(msg.sender == bitsuran...\n              ADD \t\t\trequire(msg.sender == bitsuran...\n              PUSH [tag] 115\t\t\trequire(msg.sender == bitsuran...\n              SWAP1 \t\t\trequire(msg.sender == bitsuran...\n              PUSH [tag] 76\t\t\trequire(msg.sender == bitsuran...\n              JUMP \t\t\trequire(msg.sender == bitsuran...\n            tag 115\t\t\trequire(msg.sender == bitsuran...\n              JUMPDEST \t\t\trequire(msg.sender == bitsuran...\n              PUSH 40\t\t\trequire(msg.sender == bitsuran...\n              MLOAD \t\t\trequire(msg.sender == bitsuran...\n              DUP1 \t\t\trequire(msg.sender == bitsuran...\n              SWAP2 \t\t\trequire(msg.sender == bitsuran...\n              SUB \t\t\trequire(msg.sender == bitsuran...\n              SWAP1 \t\t\trequire(msg.sender == bitsuran...\n              REVERT \t\t\trequire(msg.sender == bitsuran...\n            tag 114\t\t\trequire(msg.sender == bitsuran...\n              JUMPDEST \t\t\trequire(msg.sender == bitsuran...\n              PUSH 0\t\t\t0\n              PUSH 1\t\t\ttokenBalances\n              PUSH 0\t\t\ttokenBalances[_tokenID]\n              DUP4 \t\t\t_tokenID\n              DUP2 \t\t\ttokenBalances[_tokenID]\n              MSTORE \t\t\ttokenBalances[_tokenID]\n              PUSH 20\t\t\ttokenBalances[_tokenID]\n              ADD \t\t\ttokenBalances[_tokenID]\n              SWAP1 \t\t\ttokenBalances[_tokenID]\n              DUP2 \t\t\ttokenBalances[_tokenID]\n              MSTORE \t\t\ttokenBalances[_tokenID]\n              PUSH 20\t\t\ttokenBalances[_tokenID]\n              ADD \t\t\ttokenBalances[_tokenID]\n              PUSH 0\t\t\ttokenBalances[_tokenID]\n              KECCAK256 \t\t\ttokenBalances[_tokenID]\n              SLOAD \t\t\ttokenBalances[_tokenID]\n              GT \t\t\ttokenBalances[_tokenID] > 0\n              PUSH [tag] 117\t\t\trequire(tokenBalances[_tokenID...\n              JUMPI \t\t\trequire(tokenBalances[_tokenID...\n              PUSH 40\t\t\trequire(tokenBalances[_tokenID...\n              MLOAD \t\t\trequire(tokenBalances[_tokenID...\n              PUSH 8C379A000000000000000000000000000000000000000000000000000000000\t\t\trequire(tokenBalances[_tokenID...\n              DUP2 \t\t\trequire(tokenBalances[_tokenID...\n              MSTORE \t\t\trequire(tokenBalances[_tokenID...\n              PUSH 4\t\t\trequire(tokenBalances[_tokenID...\n              ADD \t\t\trequire(tokenBalances[_tokenID...\n              PUSH [tag] 118\t\t\trequire(tokenBalances[_tokenID...\n              SWAP1 \t\t\trequire(tokenBalances[_tokenID...\n              PUSH [tag] 93\t\t\trequire(tokenBalances[_tokenID...\n              JUMP \t\t\trequire(tokenBalances[_tokenID...\n            tag 118\t\t\trequire(tokenBalances[_tokenID...\n              JUMPDEST \t\t\trequire(tokenBalances[_tokenID...\n              PUSH 40\t\t\trequire(tokenBalances[_tokenID...\n              MLOAD \t\t\trequire(tokenBalances[_tokenID...\n              DUP1 \t\t\trequire(tokenBalances[_tokenID...\n              SWAP2 \t\t\trequire(tokenBalances[_tokenID...\n              SUB \t\t\trequire(tokenBalances[_tokenID...\n              SWAP1 \t\t\trequire(tokenBalances[_tokenID...\n              REVERT \t\t\trequire(tokenBalances[_tokenID...\n            tag 117\t\t\trequire(tokenBalances[_tokenID...\n              JUMPDEST \t\t\trequire(tokenBalances[_tokenID...\n              PUSH 2\t\t\tminimumWithdrawTime\n              SLOAD \t\t\tminimumWithdrawTime\n              PUSH 3\t\t\tcreationTime\n              SLOAD \t\t\tcreationTime\n              TIMESTAMP \t\t\tblock.timestamp\n              PUSH [tag] 119\t\t\tblock.timestamp - creationTime\n              SWAP2 \t\t\tblock.timestamp - creationTime\n              SWAP1 \t\t\tblock.timestamp - creationTime\n              PUSH [tag] 81\t\t\tblock.timestamp - creationTime\n              JUMP \t\t\tblock.timestamp - creationTime\n            tag 119\t\t\tblock.timestamp - creationTime\n              JUMPDEST \t\t\tblock.timestamp - creationTime\n              LT \t\t\tblock.timestamp - creationTime...\n              ISZERO \t\t\tblock.timestamp - creationTime...\n              PUSH [tag] 120\t\t\trequire(block.timestamp - crea...\n              JUMPI \t\t\trequire(block.timestamp - crea...\n              PUSH 40\t\t\trequire(block.timestamp - crea...\n              MLOAD \t\t\trequire(block.timestamp - crea...\n              PUSH 8C379A000000000000000000000000000000000000000000000000000000000\t\t\trequire(block.timestamp - crea...\n              DUP2 \t\t\trequire(block.timestamp - crea...\n              MSTORE \t\t\trequire(block.timestamp - crea...\n              PUSH 4\t\t\trequire(block.timestamp - crea...\n              ADD \t\t\trequire(block.timestamp - crea...\n              PUSH [tag] 121\t\t\trequire(block.timestamp - crea...\n              SWAP1 \t\t\trequire(block.timestamp - crea...\n              PUSH [tag] 84\t\t\trequire(block.timestamp - crea...\n              JUMP \t\t\trequire(block.timestamp - crea...\n            tag 121\t\t\trequire(block.timestamp - crea...\n              JUMPDEST \t\t\trequire(block.timestamp - crea...\n              PUSH 40\t\t\trequire(block.timestamp - crea...\n              MLOAD \t\t\trequire(block.timestamp - crea...\n              DUP1 \t\t\trequire(block.timestamp - crea...\n              SWAP2 \t\t\trequire(block.timestamp - crea...\n              SUB \t\t\trequire(block.timestamp - crea...\n              SWAP1 \t\t\trequire(block.timestamp - crea...\n              REVERT \t\t\trequire(block.timestamp - crea...\n            tag 120\t\t\trequire(block.timestamp - crea...\n              JUMPDEST \t\t\trequire(block.timestamp - crea...\n              PUSH 0\t\t\tuint256 amount\n              PUSH 1\t\t\ttokenBalances\n              PUSH 0\t\t\ttokenBalances[_tokenID]\n              DUP4 \t\t\t_tokenID\n              DUP2 \t\t\ttokenBalances[_tokenID]\n              MSTORE \t\t\ttokenBalances[_tokenID]\n              PUSH 20\t\t\ttokenBalances[_tokenID]\n              ADD \t\t\ttokenBalances[_tokenID]\n              SWAP1 \t\t\ttokenBalances[_tokenID]\n              DUP2 \t\t\ttokenBalances[_tokenID]\n              MSTORE \t\t\ttokenBalances[_tokenID]\n              PUSH 20\t\t\ttokenBalances[_tokenID]\n              ADD \t\t\ttokenBalances[_tokenID]\n              PUSH 0\t\t\ttokenBalances[_tokenID]\n              KECCAK256 \t\t\ttokenBalances[_tokenID]\n              SLOAD \t\t\ttokenBalances[_tokenID]\n              SWAP1 \t\t\tuint256 amount = tokenBalances...\n              POP \t\t\tuint256 amount = tokenBalances...\n              PUSH 0\t\t\t0\n              PUSH 1\t\t\ttokenBalances\n              PUSH 0\t\t\ttokenBalances[_tokenID]\n              DUP5 \t\t\t_tokenID\n              DUP2 \t\t\ttokenBalances[_tokenID]\n              MSTORE \t\t\ttokenBalances[_tokenID]\n              PUSH 20\t\t\ttokenBalances[_tokenID]\n              ADD \t\t\ttokenBalances[_tokenID]\n              SWAP1 \t\t\ttokenBalances[_tokenID]\n              DUP2 \t\t\ttokenBalances[_tokenID]\n              MSTORE \t\t\ttokenBalances[_tokenID]\n              PUSH 20\t\t\ttokenBalances[_tokenID]\n              ADD \t\t\ttokenBalances[_tokenID]\n              PUSH 0\t\t\ttokenBalances[_tokenID]\n              KECCAK256 \t\t\ttokenBalances[_tokenID]\n              DUP2 \t\t\ttokenBalances[_tokenID] = 0\n              SWAP1 \t\t\ttokenBalances[_tokenID] = 0\n              SSTORE \t\t\ttokenBalances[_tokenID] = 0\n              POP \t\t\ttokenBalances[_tokenID] = 0\n              DUP3 \t\t\trecipient\n              PUSH FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF\t\t\trecipient.transfer\n              AND \t\t\trecipient.transfer\n              PUSH 8FC\t\t\trecipient.transfer(amount)\n              DUP3 \t\t\tamount\n              SWAP1 \t\t\trecipient.transfer(amount)\n              DUP2 \t\t\trecipient.transfer(amount)\n              ISZERO \t\t\trecipient.transfer(amount)\n              MUL \t\t\trecipient.transfer(amount)\n              SWAP1 \t\t\trecipient.transfer(amount)\n              PUSH 40\t\t\trecipient.transfer(amount)\n              MLOAD \t\t\trecipient.transfer(amount)\n              PUSH 0\t\t\trecipient.transfer(amount)\n              PUSH 40\t\t\trecipient.transfer(amount)\n              MLOAD \t\t\trecipient.transfer(amount)\n              DUP1 \t\t\trecipient.transfer(amount)\n              DUP4 \t\t\trecipient.transfer(amount)\n              SUB \t\t\trecipient.transfer(amount)\n              DUP2 \t\t\trecipient.transfer(amount)\n              DUP6 \t\t\trecipient.transfer(amount)\n              DUP9 \t\t\trecipient.transfer(amount)\n              DUP9 \t\t\trecipient.transfer(amount)\n              CALL \t\t\trecipient.transfer(amount)\n              SWAP4 \t\t\trecipient.transfer(amount)\n              POP \t\t\trecipient.transfer(amount)\n              POP \t\t\trecipient.transfer(amount)\n              POP \t\t\trecipient.transfer(amount)\n              POP \t\t\trecipient.transfer(amount)\n              ISZERO \t\t\trecipient.transfer(amount)\n              DUP1 \t\t\trecipient.transfer(amount)\n              ISZERO \t\t\trecipient.transfer(amount)\n              PUSH [tag] 123\t\t\trecipient.transfer(amount)\n              JUMPI \t\t\trecipient.transfer(amount)\n              RETURNDATASIZE \t\t\trecipient.transfer(amount)\n              PUSH 0\t\t\trecipient.transfer(amount)\n              DUP1 \t\t\trecipient.transfer(amount)\n              RETURNDATACOPY \t\t\trecipient.transfer(amount)\n              RETURNDATASIZE \t\t\trecipient.transfer(amount)\n              PUSH 0\t\t\trecipient.transfer(amount)\n              REVERT \t\t\trecipient.transfer(amount)\n            tag 123\t\t\trecipient.transfer(amount)\n              JUMPDEST \t\t\trecipient.transfer(amount)\n              POP \t\t\trecipient.transfer(amount)\n              POP \t\t\t{\\r\\n        require(tokenBala...\n              POP \t\t\tfunction claimFunds(address pa...\n              POP \t\t\tfunction claimFunds(address pa...\n              JUMP \t\t\tfunction claimFunds(address pa...\n            tag 68\t\t\taddress public admin\n              JUMPDEST \t\t\taddress public admin\n              PUSH 5\t\t\taddress public admin\n              PUSH 0\t\t\taddress public admin\n              SWAP1 \t\t\taddress public admin\n              SLOAD \t\t\taddress public admin\n              SWAP1 \t\t\taddress public admin\n              PUSH 100\t\t\taddress public admin\n              EXP \t\t\taddress public admin\n              SWAP1 \t\t\taddress public admin\n              DIV \t\t\taddress public admin\n              PUSH FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF\t\t\taddress public admin\n              AND \t\t\taddress public admin\n              DUP2 \t\t\taddress public admin\n              JUMP \t\t\taddress public admin\n            tag 124\t\t\t-License-Identifier: MIT\\r\\npr...\n              JUMPDEST \t\t\t-License-Identifier: MIT\\r\\npr...\n              PUSH 0\t\t\tdity ^0\n              PUSH FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF\t\t\tntracts/token/ERC721/ERC721.so...\n              DUP3 \t\t\telin/\n              AND \t\t\tzeppelin/contracts/token/ERC72...\n              SWAP1 \t\t\tport \"@openzeppelin/contracts/...\n              POP \t\t\tport \"@openzeppelin/contracts/...\n              SWAP2 \t\t\t-License-Identifier: MIT\\r\\npr...\n              SWAP1 \t\t\t-License-Identifier: MIT\\r\\npr...\n              POP \t\t\t-License-Identifier: MIT\\r\\npr...\n              JUMP \t\t\t-License-Identifier: MIT\\r\\npr...\n            tag 125\t\t\tn/contracts/token/ERC721/exten...\n              JUMPDEST \t\t\tn/contracts/token/ERC721/exten...\n              PUSH 0\t\t\tRC721Bu\n              PUSH [tag] 164\t\t\t* @title Vault\\r\\n * @dev \n              DUP3 \t\t\t @dev\n              PUSH [tag] 124\t\t\t* @title Vault\\r\\n * @dev \n              JUMP \t\t\t* @title Vault\\r\\n * @dev \n            tag 164\t\t\t* @title Vault\\r\\n * @dev \n              JUMPDEST \t\t\t* @title Vault\\r\\n * @dev \n              SWAP1 \t\t\t;\\r\\n\\r\\n/**\\r\\n * @title Vaul...\n              POP \t\t\t;\\r\\n\\r\\n/**\\r\\n * @title Vaul...\n              SWAP2 \t\t\tn/contracts/token/ERC721/exten...\n              SWAP1 \t\t\tn/contracts/token/ERC721/exten...\n              POP \t\t\tn/contracts/token/ERC721/exten...\n              JUMP \t\t\tn/contracts/token/ERC721/exten...\n            tag 126\t\t\tct that allows for storing bal...\n              JUMPDEST \t\t\tct that allows for storing bal...\n              PUSH [tag] 166\t\t\t    address public NFTCo\n              DUP2 \t\t\t NFTC\n              PUSH [tag] 125\t\t\t    address public NFTCo\n              JUMP \t\t\t    address public NFTCo\n            tag 166\t\t\t    address public NFTCo\n              JUMPDEST \t\t\t    address public NFTCo\n              DUP3 \t\t\tt {\n              MSTORE \t\t\tct Vault {\\r\\n    address publ...\n              POP \t\t\tct that allows for storing bal...\n              POP \t\t\tct that allows for storing bal...\n              JUMP \t\t\tct that allows for storing bal...\n            tag 23\t\t\tmapping(uint256 => uint256) pu...\n              JUMPDEST \t\t\tmapping(uint256 => uint256) pu...\n              PUSH 0\t\t\t   u\n              PUSH 20\t\t\tdd\n              DUP3 \t\t\time;\\r\\n   \n              ADD \t\t\tionTime;\\r\\n    addr\n              SWAP1 \t\t\tic creationTime;\\r\\n    addr\n              POP \t\t\tic creationTime;\\r\\n    addr\n              PUSH [tag] 168\t\t\t bitsurance;\\r\\n    address pu...\n              PUSH 0\t\t\t \n              DUP4 \t\t\to store a\n              ADD \t\t\tay to store all i\n              DUP5 \t\t\t   // \n              PUSH [tag] 126\t\t\t bitsurance;\\r\\n    address pu...\n              JUMP \t\t\t bitsurance;\\r\\n    address pu...\n            tag 168\t\t\t bitsurance;\\r\\n    address pu...\n              JUMPDEST \t\t\t bitsurance;\\r\\n    address pu...\n              SWAP3 \t\t\tmapping(uint256 => uint256) pu...\n              SWAP2 \t\t\tmapping(uint256 => uint256) pu...\n              POP \t\t\tmapping(uint256 => uint256) pu...\n              POP \t\t\tmapping(uint256 => uint256) pu...\n              JUMP \t\t\tmapping(uint256 => uint256) pu...\n            tag 127\t\t\tds\\r\\n    uint256[] public tok...\n              JUMPDEST \t\t\tds\\r\\n    uint256[] public tok...\n              PUSH 0\t\t\t;\\r\\n\\r\\n \n              PUSH 40\t\t\t\\r\\n\n              MLOAD \t\t\trance{\\r\\n \n              SWAP1 \t\t\t onlyBitsurance{\\r\\n \n              POP \t\t\t onlyBitsurance{\\r\\n \n              SWAP1 \t\t\tds\\r\\n    uint256[] public tok...\n              JUMP \t\t\tds\\r\\n    uint256[] public tok...\n            tag 128\t\t\tre(msg.sender == bitsurance, \"...\n              JUMPDEST \t\t\tre(msg.sender == bitsurance, \"...\n              PUSH 0\t\t\t*\n              DUP1 \t\t\t \n              REVERT \t\t\t\\r\\n\\r\\n    /**\\r\n            tag 129\t\t\t Contract constructor that set...\n              JUMPDEST \t\t\t Contract constructor that set...\n              PUSH 0\t\t\t\\n\n              DUP1 \t\t\tc\n              REVERT \t\t\t contract\\r\\n \n            tag 130\t\t\t minTime minimum time before w...\n              JUMPDEST \t\t\t minTime minimum time before w...\n              PUSH 0\t\t\t\\r\\n     \n              DUP2 \t\t\taddre\n              SWAP1 \t\t\tdmin admin addre\n              POP \t\t\tdmin admin addre\n              SWAP2 \t\t\t minTime minimum time before w...\n              SWAP1 \t\t\t minTime minimum time before w...\n              POP \t\t\t minTime minimum time before w...\n              JUMP \t\t\t minTime minimum time before w...\n            tag 131\t\t\t\\n    constructor(address NFTC...\n              JUMPDEST \t\t\t\\n    constructor(address NFTC...\n              PUSH [tag] 174\t\t\tmin) {\\r\\n        NFTContr\n              DUP2 \t\t\tTCont\n              PUSH [tag] 130\t\t\tmin) {\\r\\n        NFTContr\n              JUMP \t\t\tmin) {\\r\\n        NFTContr\n            tag 174\t\t\tmin) {\\r\\n        NFTContr\n              JUMPDEST \t\t\tmin) {\\r\\n        NFTContr\n              DUP2 \t\t\tess _\n              EQ \t\t\tddress _admin) {\\r\\n        NF...\n              PUSH [tag] 175\t\t\tminTime, address _admin) {\\r\\n...\n              JUMPI \t\t\tminTime, address _admin) {\\r\\n...\n              PUSH 0\t\t\tc\n              DUP1 \t\t\tt\n              REVERT \t\t\t NFTContract\n            tag 175\t\t\tminTime, address _admin) {\\r\\n...\n              JUMPDEST \t\t\tminTime, address _admin) {\\r\\n...\n              POP \t\t\t\\n    constructor(address NFTC...\n              JUMP \t\t\t\\n    constructor(address NFTC...\n            tag 132\t\t\t    minimumWithdrawTime = minT...\n              JUMPDEST \t\t\t    minimumWithdrawTime = minT...\n              PUSH 0\t\t\tmin =\n              DUP2 \t\t\tblock.\n              CALLDATALOAD \t\t\teationTime = block.t\n              SWAP1 \t\t\t       creationTime = block.t\n              POP \t\t\t       creationTime = block.t\n              PUSH [tag] 177\t\t\t\\r\\n        bitsurance = msg.s...\n              DUP2 \t\t\tsende\n              PUSH [tag] 131\t\t\t\\r\\n        bitsurance = msg.s...\n              JUMP \t\t\t\\r\\n        bitsurance = msg.s...\n            tag 177\t\t\t\\r\\n        bitsurance = msg.s...\n              JUMPDEST \t\t\t\\r\\n        bitsurance = msg.s...\n              SWAP3 \t\t\t    minimumWithdrawTime = minT...\n              SWAP2 \t\t\t    minimumWithdrawTime = minT...\n              POP \t\t\t    minimumWithdrawTime = minT...\n              POP \t\t\t    minimumWithdrawTime = minT...\n              JUMP \t\t\t    minimumWithdrawTime = minT...\n            tag 31\t\t\t    fallback() external payabl...\n              JUMPDEST \t\t\t    fallback() external payabl...\n              PUSH 0\t\t\tayable\n              PUSH 20\t\t\tba\n              DUP3 \t\t\ttion to a\n              DUP5 \t\t\t@dev Fu\n              SUB \t\t\t  * @dev Function to ad\n              SLT \t\t\t\\n     * @dev Function to add ...\n              ISZERO \t\t\t**\\r\\n     * @dev Function to ...\n              PUSH [tag] 179\t\t\t**\\r\\n     * @dev Function to ...\n              JUMPI \t\t\t**\\r\\n     * @dev Function to ...\n              PUSH [tag] 180\t\t\te for a specific token ID\\r\\n ...\n              PUSH [tag] 128\t\t\te for a specific token ID\\r\\n ...\n              JUMP \t\t\te for a specific token ID\\r\\n ...\n            tag 180\t\t\te for a specific token ID\\r\\n ...\n              JUMPDEST \t\t\te for a specific token ID\\r\\n ...\n            tag 179\t\t\t**\\r\\n     * @dev Function to ...\n              JUMPDEST \t\t\t**\\r\\n     * @dev Function to ...\n              PUSH 0\t\t\t \n              PUSH [tag] 181\t\t\t */\\r\\n    function addBalance...\n              DUP5 \t\t\t, uint2\n              DUP3 \t\t\t _toke\n              DUP6 \t\t\tnce(uint2\n              ADD \t\t\tBalance(uint256 _token\n              PUSH [tag] 132\t\t\t */\\r\\n    function addBalance...\n              JUMP \t\t\t */\\r\\n    function addBalance...\n            tag 181\t\t\t */\\r\\n    function addBalance...\n              JUMPDEST \t\t\t */\\r\\n    function addBalance...\n              SWAP2 \t\t\tance\\r\\n     */\\r\\n    functio...\n              POP \t\t\tance\\r\\n     */\\r\\n    functio...\n              POP \t\t\t    * @param amount Amount to ...\n              SWAP3 \t\t\t    fallback() external payabl...\n              SWAP2 \t\t\t    fallback() external payabl...\n              POP \t\t\t    fallback() external payabl...\n              POP \t\t\t    fallback() external payabl...\n              JUMP \t\t\t    fallback() external payabl...\n            tag 133\t\t\tBitsurance {\\r\\n        if (to...\n              JUMPDEST \t\t\tBitsurance {\\r\\n        if (to...\n              PUSH [tag] 183\t\t\tokenID);\\r\\n        }\\r\\n   \n              DUP2 \t\t\t}\\r\\n  \n              PUSH [tag] 130\t\t\tokenID);\\r\\n        }\\r\\n   \n              JUMP \t\t\tokenID);\\r\\n        }\\r\\n   \n            tag 183\t\t\tokenID);\\r\\n        }\\r\\n   \n              JUMPDEST \t\t\tokenID);\\r\\n        }\\r\\n   \n              DUP3 \t\t\tsh(\n              MSTORE \t\t\tnIds.push(_tokenID);\\r\\n      ...\n              POP \t\t\tBitsurance {\\r\\n        if (to...\n              POP \t\t\tBitsurance {\\r\\n        if (to...\n              JUMP \t\t\tBitsurance {\\r\\n        if (to...\n            tag 34\t\t\tances[_tokenID] += amount;\\r\\n...\n              JUMPDEST \t\t\tances[_tokenID] += amount;\\r\\n...\n              PUSH 0\t\t\t mem\n              PUSH 20\t\t\t  \n              DUP3 \t\t\ttokenIds;\n              ADD \t\t\turn tokenIds;\\r\\n   \n              SWAP1 \t\t\t     return tokenIds;\\r\\n   \n              POP \t\t\t     return tokenIds;\\r\\n   \n              PUSH [tag] 185\t\t\t/**\\r\\n     * @dev Function to...\n              PUSH 0\t\t\ta\n              DUP4 \t\t\t     * @p\n              ADD \t\t\tlt\\r\\n     * @param\n              DUP5 \t\t\tm the \n              PUSH [tag] 133\t\t\t/**\\r\\n     * @dev Function to...\n              JUMP \t\t\t/**\\r\\n     * @dev Function to...\n            tag 185\t\t\t/**\\r\\n     * @dev Function to...\n              JUMPDEST \t\t\t/**\\r\\n     * @dev Function to...\n              SWAP3 \t\t\tances[_tokenID] += amount;\\r\\n...\n              SWAP2 \t\t\tances[_tokenID] += amount;\\r\\n...\n              POP \t\t\tances[_tokenID] += amount;\\r\\n...\n              POP \t\t\tances[_tokenID] += amount;\\r\\n...\n              JUMP \t\t\tances[_tokenID] += amount;\\r\\n...\n            tag 134\t\t\tipient address to receive the ...\n              JUMPDEST \t\t\tipient address to receive the ...\n              PUSH 0\t\t\tD to c\n              DUP2 \t\t\tclaim\n              MLOAD \t\t\tction claimF\n              SWAP1 \t\t\t/\\r\\n    function claimF\n              POP \t\t\t/\\r\\n    function claimF\n              SWAP2 \t\t\tipient address to receive the ...\n              SWAP1 \t\t\tipient address to receive the ...\n              POP \t\t\tipient address to receive the ...\n              JUMP \t\t\tipient address to receive the ...\n            tag 135\t\t\tpayable recipient, uint256 _to...\n              JUMPDEST \t\t\tpayable recipient, uint256 _to...\n              PUSH 0\t\t\tes[_tokenID\n              DUP3 \t\t\tthis t\n              DUP3 \t\t\t fo\n              MSTORE \t\t\tbalance for this to\n              PUSH 20\t\t\times\n              DUP3 \t\t\tock\n              ADD \t\t\te(block.timest\n              SWAP1 \t\t\t\\n        require(block.timest\n              POP \t\t\t\\n        require(block.timest\n              SWAP3 \t\t\tpayable recipient, uint256 _to...\n              SWAP2 \t\t\tpayable recipient, uint256 _to...\n              POP \t\t\tpayable recipient, uint256 _to...\n              POP \t\t\tpayable recipient, uint256 _to...\n              JUMP \t\t\tpayable recipient, uint256 _to...\n            tag 136\t\t\tonTime >= minimumWithdrawTime,...\n              JUMPDEST \t\t\tonTime >= minimumWithdrawTime,...\n              PUSH 0\t\t\tinim\n              DUP2 \t\t\t);\\r\n              SWAP1 \t\t\t passed\");\\r\n              POP \t\t\t passed\");\\r\n              PUSH 20\t\t\token\n              DUP3 \t\t\tt =\n              ADD \t\t\tmount = tokenB\n              SWAP1 \t\t\tint256 amount = tokenB\n              POP \t\t\tint256 amount = tokenB\n              SWAP2 \t\t\tonTime >= minimumWithdrawTime,...\n              SWAP1 \t\t\tonTime >= minimumWithdrawTime,...\n              POP \t\t\tonTime >= minimumWithdrawTime,...\n              JUMP \t\t\tonTime >= minimumWithdrawTime,...\n            tag 137\t\t\tnID];\\r\\n        tokenBalances...\n              JUMPDEST \t\t\tnID];\\r\\n        tokenBalances...\n              PUSH [tag] 190\t\t\tt);\\r\\n    }\\r\\n\\r\\n    /**\\r\\...\n              DUP2 \t\t\t/**\\r\\n\n              PUSH [tag] 130\t\t\tt);\\r\\n    }\\r\\n\\r\\n    /**\\r\\...\n              JUMP \t\t\tt);\\r\\n    }\\r\\n\\r\\n    /**\\r\\...\n            tag 190\t\t\tt);\\r\\n    }\\r\\n\\r\\n    /**\\r\\...\n              JUMPDEST \t\t\tt);\\r\\n    }\\r\\n\\r\\n    /**\\r\\...\n              DUP3 \t\t\tamo\n              MSTORE \t\t\tansfer(amount);\\r\\n    }\\r\\n\\r...\n              POP \t\t\tnID];\\r\\n        tokenBalances...\n              POP \t\t\tnID];\\r\\n        tokenBalances...\n              JUMP \t\t\tnID];\\r\\n        tokenBalances...\n            tag 138\t\t\tnction to withdraw funds from ...\n              JUMPDEST \t\t\tnction to withdraw funds from ...\n              PUSH 0\t\t\tpient addr\n              PUSH [tag] 192\t\t\tive the funds\\r\\n     * @param...\n              DUP4 \t\t\tay \n              DUP4 \t\t\tnIDs A\n              PUSH [tag] 137\t\t\tive the funds\\r\\n     * @param...\n              JUMP \t\t\tive the funds\\r\\n     * @param...\n            tag 192\t\t\tive the funds\\r\\n     * @param...\n              JUMPDEST \t\t\tive the funds\\r\\n     * @param...\n              PUSH 20\t\t\t\\r\\n  \n              DUP4 \t\t\t   \n              ADD \t\t\t\\r\\n     */\\r\\n   \n              SWAP1 \t\t\tDs to withdraw\\r\\n     */\\r\\n ...\n              POP \t\t\tDs to withdraw\\r\\n     */\\r\\n ...\n              SWAP3 \t\t\tnction to withdraw funds from ...\n              SWAP2 \t\t\tnction to withdraw funds from ...\n              POP \t\t\tnction to withdraw funds from ...\n              POP \t\t\tnction to withdraw funds from ...\n              JUMP \t\t\tnction to withdraw funds from ...\n            tag 139\t\t\tthdraw(address payable recipie...\n              JUMPDEST \t\t\tthdraw(address payable recipie...\n              PUSH 0\t\t\t pay\n              PUSH 20\t\t\t   r\n              DUP3 \t\t\t   \n              ADD \t\t\t {\\r\\n        re\n              SWAP1 \t\t\ttsurance {\\r\\n        re\n              POP \t\t\ttsurance {\\r\\n        re\n              SWAP2 \t\t\tthdraw(address payable recipie...\n              SWAP1 \t\t\tthdraw(address payable recipie...\n              POP \t\t\tthdraw(address payable recipie...\n              JUMP \t\t\tthdraw(address payable recipie...\n            tag 140\t\t\tnimumWithdrawTime * 2, \"Cannot...\n              JUMPDEST \t\t\tnimumWithdrawTime * 2, \"Cannot...\n              PUSH 0\t\t\t\\n  \n              PUSH [tag] 195\t\t\ti < _tokenIDs.length; i++) {\\r...\n              DUP3 \t\t\te(tok\n              PUSH [tag] 134\t\t\ti < _tokenIDs.length; i++) {\\r...\n              JUMP \t\t\ti < _tokenIDs.length; i++) {\\r...\n            tag 195\t\t\ti < _tokenIDs.length; i++) {\\r...\n              JUMPDEST \t\t\ti < _tokenIDs.length; i++) {\\r...\n              PUSH [tag] 196\t\t\tIDs[i]] > 0, \"No balance for t...\n              DUP2 \t\t\talance\n              DUP6 \t\t\toke\n              PUSH [tag] 135\t\t\tIDs[i]] > 0, \"No balance for t...\n              JUMP \t\t\tIDs[i]] > 0, \"No balance for t...\n            tag 196\t\t\tIDs[i]] > 0, \"No balance for t...\n              JUMPDEST \t\t\tIDs[i]] > 0, \"No balance for t...\n              SWAP4 \t\t\t[_tokenIDs[i]] > 0, \"No balanc...\n              POP \t\t\t[_tokenIDs[i]] > 0, \"No balanc...\n              PUSH [tag] 197\t\t\t     tokenBalances[_tokenIDs[i...\n              DUP4 \t\t\t     \n              PUSH [tag] 136\t\t\t     tokenBalances[_tokenIDs[i...\n              JUMP \t\t\t     tokenBalances[_tokenIDs[i...\n            tag 197\t\t\t     tokenBalances[_tokenIDs[i...\n              JUMPDEST \t\t\t     tokenBalances[_tokenIDs[i...\n              DUP1 \t\t\ttalAmou\n              PUSH 0\t\t\t@\n            tag 198\t\t\t }\\r\\n}\\r\\n/**\\r\\n * @title Bi...\n              JUMPDEST \t\t\t }\\r\\n}\\r\\n/**\\r\\n * @title Bi...\n              DUP4 \t\t\tsuranc\n              DUP2 \t\t\tB\n              LT \t\t\tle Bitsurance\n              ISZERO \t\t\t }\\r\\n}\\r\\n/**\\r\\n * @title Bi...\n              PUSH [tag] 200\t\t\t }\\r\\n}\\r\\n/**\\r\\n * @title Bi...\n              JUMPI \t\t\t }\\r\\n}\\r\\n/**\\r\\n * @title Bi...\n              DUP2 \t\t\tthe cr\n              MLOAD \t\t\tnages the cre\n              PUSH [tag] 201\t\t\t on them\\r\\n */\\r\\ncontract Bi...\n              DUP9 \t\t\tvau\n              DUP3 \t\t\t// An array o\n              PUSH [tag] 138\t\t\t on them\\r\\n */\\r\\ncontract Bi...\n              JUMP \t\t\t on them\\r\\n */\\r\\ncontract Bi...\n            tag 201\t\t\t on them\\r\\n */\\r\\ncontract Bi...\n              JUMPDEST \t\t\t on them\\r\\n */\\r\\ncontract Bi...\n              SWAP8 \t\t\trations on them\\r\\n */\\r\\ncont...\n              POP \t\t\trations on them\\r\\n */\\r\\ncont...\n              PUSH [tag] 202\t\t\t vaults;\\r\\n    \\r\\n    // Eve...\n              DUP4 \t\t\ts crea\n              PUSH [tag] 139\t\t\t vaults;\\r\\n    \\r\\n    // Eve...\n              JUMP \t\t\t vaults;\\r\\n    \\r\\n    // Eve...\n            tag 202\t\t\t vaults;\\r\\n    \\r\\n    // Eve...\n              JUMPDEST \t\t\t vaults;\\r\\n    \\r\\n    // Eve...\n              SWAP3 \t\t\t[] private vaults;\\r\\n    \\r\\n...\n              POP \t\t\t[] private vaults;\\r\\n    \\r\\n...\n              POP \t\t\tt that interacts with Vaults a...\n              PUSH 1\t\t\tr\n              DUP2 \t\t\tt\n              ADD \t\t\tv Bitsura\n              SWAP1 \t\t\t* @dev Bitsura\n              POP \t\t\t* @dev Bitsura\n              PUSH [tag] 198\t\t\t }\\r\\n}\\r\\n/**\\r\\n * @title Bi...\n              JUMP \t\t\t }\\r\\n}\\r\\n/**\\r\\n * @title Bi...\n            tag 200\t\t\t }\\r\\n}\\r\\n/**\\r\\n * @title Bi...\n              JUMPDEST \t\t\t }\\r\\n}\\r\\n/**\\r\\n * @title Bi...\n              POP \t\t\t}\\r\\n/**\\r\\n * @ti\n              DUP6 \t\t\t(ui\n              SWAP4 \t\t\tCreated(ui\n              POP \t\t\tCreated(ui\n              POP \t\t\t    for (uint256 i = 0; i < _t...\n              POP \t\t\t    for (uint256 i = 0; i < _t...\n              POP \t\t\t    for (uint256 i = 0; i < _t...\n              SWAP3 \t\t\tnimumWithdrawTime * 2, \"Cannot...\n              SWAP2 \t\t\tnimumWithdrawTime * 2, \"Cannot...\n              POP \t\t\tnimumWithdrawTime * 2, \"Cannot...\n              POP \t\t\tnimumWithdrawTime * 2, \"Cannot...\n              JUMP \t\t\tnimumWithdrawTime * 2, \"Cannot...\n            tag 39\t\t\taddress vaultAddress, address ...\n              JUMPDEST \t\t\taddress vaultAddress, address ...\n              PUSH 0\t\t\tdres\n              PUSH 20\t\t\t /\n              DUP3 \t\t\t\\r\\n    \\r\\n \n              ADD \t\t\tess;\\r\\n    \\r\\n    //\n              SWAP1 \t\t\taultAddress;\\r\\n    \\r\\n    //\n              POP \t\t\taultAddress;\\r\\n    \\r\\n    //\n              DUP2 \t\t\tng(addres\n              DUP2 \t\t\t map\n              SUB \t\t\t\\n    mapping(address\n              PUSH 0\t\t\tc\n              DUP4 \t\t\t NFT cont\n              ADD \t\t\ts to NFT contract\n              MSTORE \t\t\tf admins to NFT contracts\\r\\n ...\n              PUSH [tag] 204\t\t\tc admins;\\r\\n\\r\\n    /**\\r\\n  ...\n              DUP2 \t\t\tress\n              DUP5 \t\t\tdress \n              PUSH [tag] 140\t\t\tc admins;\\r\\n\\r\\n    /**\\r\\n  ...\n              JUMP \t\t\tc admins;\\r\\n\\r\\n    /**\\r\\n  ...\n            tag 204\t\t\tc admins;\\r\\n\\r\\n    /**\\r\\n  ...\n              JUMPDEST \t\t\tc admins;\\r\\n\\r\\n    /**\\r\\n  ...\n              SWAP1 \t\t\ts) public admins;\\r\\n\\r\\n    /...\n              POP \t\t\ts) public admins;\\r\\n\\r\\n    /...\n              SWAP3 \t\t\taddress vaultAddress, address ...\n              SWAP2 \t\t\taddress vaultAddress, address ...\n              POP \t\t\taddress vaultAddress, address ...\n              POP \t\t\taddress vaultAddress, address ...\n              JUMP \t\t\taddress vaultAddress, address ...\n            tag 141\t\t\tntract\\r\\n     * @param _minTi...\n              JUMPDEST \t\t\tntract\\r\\n     * @param _minTi...\n              PUSH 0\t\t\tefore w\n              PUSH [tag] 206\t\t\t  function createVault(a\n              DUP3 \t\t\tault(\n              PUSH [tag] 124\t\t\t  function createVault(a\n              JUMP \t\t\t  function createVault(a\n            tag 206\t\t\t  function createVault(a\n              JUMPDEST \t\t\t  function createVault(a\n              SWAP1 \t\t\t     */\\r\\n    function create...\n              POP \t\t\t     */\\r\\n    function create...\n              SWAP2 \t\t\tntract\\r\\n     * @param _minTi...\n              SWAP1 \t\t\tntract\\r\\n     * @param _minTi...\n              POP \t\t\tntract\\r\\n     * @param _minTi...\n              JUMP \t\t\tntract\\r\\n     * @param _minTi...\n            tag 142\t\t\tontractAddress, uint256 _minTi...\n              JUMPDEST \t\t\tontractAddress, uint256 _minTi...\n              PUSH [tag] 208\t\t\tactAddress] == address(0), \"Va...\n              DUP2 \t\t\t \"Vau\n              PUSH [tag] 141\t\t\tactAddress] == address(0), \"Va...\n              JUMP \t\t\tactAddress] == address(0), \"Va...\n            tag 208\t\t\tactAddress] == address(0), \"Va...\n              JUMPDEST \t\t\tactAddress] == address(0), \"Va...\n              DUP2 \t\t\tFTCon\n              EQ \t\t\t[_NFTContractAddress] == addre...\n              PUSH [tag] 209\t\t\tultAddress[_NFTContractAddress...\n              JUMPI \t\t\tultAddress[_NFTContractAddress...\n              PUSH 0\t\t\ts\n              DUP1 \t\t\ti\n              REVERT \t\t\teady exists \n            tag 209\t\t\tultAddress[_NFTContractAddress...\n              JUMPDEST \t\t\tultAddress[_NFTContractAddress...\n              POP \t\t\tontractAddress, uint256 _minTi...\n              JUMP \t\t\tontractAddress, uint256 _minTi...\n            tag 143\t\t\tontract\");\\r\\n        Vault va...\n              JUMPDEST \t\t\tontract\");\\r\\n        Vault va...\n              PUSH 0\t\t\tctAdd\n              DUP2 \t\t\t    va\n              CALLDATALOAD \t\t\tender);\\r\\n        vau\n              SWAP1 \t\t\tme, msg.sender);\\r\\n        va...\n              POP \t\t\tme, msg.sender);\\r\\n        va...\n              PUSH [tag] 211\t\t\tvault);\\r\\n        vaultAddres...\n              DUP2 \t\t\tontra\n              PUSH [tag] 142\t\t\tvault);\\r\\n        vaultAddres...\n              JUMP \t\t\tvault);\\r\\n        vaultAddres...\n            tag 211\t\t\tvault);\\r\\n        vaultAddres...\n              JUMPDEST \t\t\tvault);\\r\\n        vaultAddres...\n              SWAP3 \t\t\tontract\");\\r\\n        Vault va...\n              SWAP2 \t\t\tontract\");\\r\\n        Vault va...\n              POP \t\t\tontract\");\\r\\n        Vault va...\n              POP \t\t\tontract\");\\r\\n        Vault va...\n              JUMP \t\t\tontract\");\\r\\n        Vault va...\n            tag 144\t\t\tddress(vault);\\r\\n        admi...\n              JUMPDEST \t\t\tddress(vault);\\r\\n        admi...\n              PUSH 0\t\t\ta\n              DUP1 \t\t\tm\n              REVERT \t\t\ttimestamp,ad\n            tag 145\t\t\t,_NFTContractAddress);\\r\\n    ...\n              JUMPDEST \t\t\t,_NFTContractAddress);\\r\\n    ...\n              PUSH 0\t\t\t\\n     \n              PUSH 1F\t\t\t\\r\\n\n              NOT \t\t\tault\\r\\n \n              PUSH 1F\t\t\to \n              DUP4 \t\t\tnds i\n              ADD \t\t\tt funds into a\n              AND \t\t\tposit funds into a vault\\r\\n  \n              SWAP1 \t\t\ttion to deposit funds into a v...\n              POP \t\t\ttion to deposit funds into a v...\n              SWAP2 \t\t\t,_NFTContractAddress);\\r\\n    ...\n              SWAP1 \t\t\t,_NFTContractAddress);\\r\\n    ...\n              POP \t\t\t,_NFTContractAddress);\\r\\n    ...\n              JUMP \t\t\t,_NFTContractAddress);\\r\\n    ...\n            tag 146\t\t\tNFTContractAddress address of ...\n              JUMPDEST \t\t\tNFTContractAddress address of ...\n              PUSH 4E487B7100000000000000000000000000000000000000000000000000000000\t\t\t     * @param _tokenIDs Array ...\n              PUSH 0\t\t\tt\n              MSTORE \t\t\tcontract\\r\\n     * @param _tok...\n              PUSH 41\t\t\ting \n              PUSH 4\t\t\to\n              MSTORE \t\t\tcorresponding a\n              PUSH 24\t\t\t\\n   \n              PUSH 0\t\t\ti\n              REVERT \t\t\tr deposit\\r\\n    \n            tag 147\t\t\tction depositFunds(address NFT...\n              JUMPDEST \t\t\tction depositFunds(address NFT...\n              PUSH [tag] 216\t\t\t] memory amounts) public pa\n              DUP3 \t\t\tic p\n              PUSH [tag] 145\t\t\t] memory amounts) public pa\n              JUMP \t\t\t] memory amounts) public pa\n            tag 216\t\t\t] memory amounts) public pa\n              JUMPDEST \t\t\t] memory amounts) public pa\n              DUP2 \t\t\tuint25\n              ADD \t\t\tDs, uint256[] memory amounts) ...\n              DUP2 \t\t\t NFT c\n              DUP2 \t\t\tsts for th\n              LT \t\t\texists for this NFT co\n              PUSH FFFFFFFFFFFFFFFF\t\t\t(0), \"Vault does n\n              DUP3 \t\t\t] != addre\n              GT \t\t\tess] != address(0), \"Vault doe...\n              OR \t\t\tddress] != address(0), \"Vault ...\n              ISZERO \t\t\tctAddress] != address(0), \"Vau...\n              PUSH [tag] 217\t\t\tctAddress] != address(0), \"Vau...\n              JUMPI \t\t\tctAddress] != address(0), \"Vau...\n              PUSH [tag] 218\t\t\tct\");\\r\\n\\r\\n        u\n              PUSH [tag] 146\t\t\tct\");\\r\\n\\r\\n        u\n              JUMP \t\t\tct\");\\r\\n\\r\\n        u\n            tag 218\t\t\tct\");\\r\\n\\r\\n        u\n              JUMPDEST \t\t\tct\");\\r\\n\\r\\n        u\n            tag 217\t\t\tctAddress] != address(0), \"Vau...\n              JUMPDEST \t\t\tctAddress] != address(0), \"Vau...\n              DUP1 \t\t\tg.value;\\r\\n\n              PUSH 40\t\t\t= \n              MSTORE \t\t\tamount = msg.value;\\r\\n \n              POP \t\t\tss, uint256[] memory _tokenIDs...\n              POP \t\t\tction depositFunds(address NFT...\n              POP \t\t\tction depositFunds(address NFT...\n              JUMP \t\t\tction depositFunds(address NFT...\n            tag 148\t\t\tss payable vaultContract_addre...\n              JUMPDEST \t\t\tss payable vaultContract_addre...\n              PUSH 0\t\t\t payab\n              PUSH [tag] 220\t\t\t(NFTContractAddress)\n              PUSH [tag] 127\t\t\t(NFTContractAddress)\n              JUMP \t\t\t(NFTContractAddress)\n            tag 220\t\t\t(NFTContractAddress)\n              JUMPDEST \t\t\t(NFTContractAddress)\n              SWAP1 \t\t\tactAddress(NFTContractAddress)\n              POP \t\t\tactAddress(NFTContractAddress)\n              PUSH [tag] 221\t\t\t   require(_tokenIDs.length ==...\n              DUP3 \t\t\t== a\n              DUP3 \t\t\t.lengt\n              PUSH [tag] 147\t\t\t   require(_tokenIDs.length ==...\n              JUMP \t\t\t   require(_tokenIDs.length ==...\n            tag 221\t\t\t   require(_tokenIDs.length ==...\n              JUMPDEST \t\t\t   require(_tokenIDs.length ==...\n              SWAP2 \t\t\tss payable vaultContract_addre...\n              SWAP1 \t\t\tss payable vaultContract_addre...\n              POP \t\t\tss payable vaultContract_addre...\n              JUMP \t\t\tss payable vaultContract_addre...\n            tag 149\t\t\t, \"Mismatched arrays\");\\r\\n   ...\n              JUMPDEST \t\t\t, \"Mismatched arrays\");\\r\\n   ...\n              PUSH 0\t\t\tt = \n              PUSH FFFFFFFFFFFFFFFF\t\t\tperson who created\n              DUP3 \t\t\tnly th\n              GT \t\t\t \"Only the person who created \n              ISZERO \t\t\ter, \"Only the person who creat...\n              PUSH [tag] 223\t\t\ter, \"Only the person who creat...\n              JUMPI \t\t\ter, \"Only the person who creat...\n              PUSH [tag] 224\t\t\tlt can deposit fun\n              PUSH [tag] 146\t\t\tlt can deposit fun\n              JUMP \t\t\tlt can deposit fun\n            tag 224\t\t\tlt can deposit fun\n              JUMPDEST \t\t\tlt can deposit fun\n            tag 223\t\t\ter, \"Only the person who creat...\n              JUMPDEST \t\t\ter, \"Only the person who creat...\n              PUSH 20\t\t\t256 \n              DUP3 \t\t\tor (ui\n              MUL \t\t\t   for (uint256 i\n              SWAP1 \t\t\t;\\r\\n        for (uint256 i\n              POP \t\t\t;\\r\\n        for (uint256 i\n              PUSH 20\t\t\tount\n              DUP2 \t\t\total\n              ADD \t\t\t   totalAmount \n              SWAP1 \t\t\t           totalAmount \n              POP \t\t\t           totalAmount \n              SWAP2 \t\t\t, \"Mismatched arrays\");\\r\\n   ...\n              SWAP1 \t\t\t, \"Mismatched arrays\");\\r\\n   ...\n              POP \t\t\t, \"Mismatched arrays\");\\r\\n   ...\n              JUMP \t\t\t, \"Mismatched arrays\");\\r\\n   ...\n            tag 150\t\t\t;\\r\\n        }\\r\\n        requ...\n              JUMPDEST \t\t\t;\\r\\n        }\\r\\n        requ...\n              PUSH 0\t\t\tn\n              DUP1 \t\t\t(\n              REVERT \t\t\t   for (uint\n            tag 151\t\t\tth; i++) {\\r\\n            vaul...\n              JUMPDEST \t\t\tth; i++) {\\r\\n            vaul...\n              PUSH 0\t\t\ttract\n              PUSH [tag] 227\t\t\ttalAmount);\\r\\n    }\\r\\n\\r\\n  ...\n              PUSH [tag] 228\t\t\t }\\r\\n\\r\\n    /**\\r\\n     * @d...\n              DUP5 \t\t\tm a va\n              PUSH [tag] 149\t\t\t }\\r\\n\\r\\n    /**\\r\\n     * @d...\n              JUMP \t\t\t }\\r\\n\\r\\n    /**\\r\\n     * @d...\n            tag 228\t\t\t }\\r\\n\\r\\n    /**\\r\\n     * @d...\n              JUMPDEST \t\t\t }\\r\\n\\r\\n    /**\\r\\n     * @d...\n              PUSH [tag] 148\t\t\ttalAmount);\\r\\n    }\\r\\n\\r\\n  ...\n              JUMP \t\t\ttalAmount);\\r\\n    }\\r\\n\\r\\n  ...\n            tag 227\t\t\ttalAmount);\\r\\n    }\\r\\n\\r\\n  ...\n              JUMPDEST \t\t\ttalAmount);\\r\\n    }\\r\\n\\r\\n  ...\n              SWAP1 \t\t\tansfer(totalAmount);\\r\\n    }\\...\n              POP \t\t\tansfer(totalAmount);\\r\\n    }\\...\n              DUP1 \t\t\tContr\n              DUP4 \t\t\te NFT \n              DUP3 \t\t\ts of \n              MSTORE \t\t\t address of the NFT c\n              PUSH 20\t\t\tnIDs\n              DUP3 \t\t\tam to\n              ADD \t\t\t@param tokenIDs \n              SWAP1 \t\t\t     * @param tokenIDs \n              POP \t\t\t     * @param tokenIDs \n              PUSH 20\t\t\tfunc\n              DUP5 \t\t\t*/\\r\\n  \n              MUL \t\t\t    */\\r\\n    funct\n              DUP4 \t\t\trawal\\r\n              ADD \t\t\tithdrawal\\r\\n     */\\r\\n    fu...\n              DUP6 \t\t\ts N\n              DUP2 \t\t\ts(addr\n              GT \t\t\tunds(address NF\n              ISZERO \t\t\tawFunds(address NFTContractAdd...\n              PUSH [tag] 229\t\t\tawFunds(address NFTContractAdd...\n              JUMPI \t\t\tawFunds(address NFTContractAdd...\n              PUSH [tag] 230\t\t\ts, uint256[] memory tokenIDs) ...\n              PUSH [tag] 150\t\t\ts, uint256[] memory tokenIDs) ...\n              JUMP \t\t\ts, uint256[] memory tokenIDs) ...\n            tag 230\t\t\ts, uint256[] memory tokenIDs) ...\n              JUMPDEST \t\t\ts, uint256[] memory tokenIDs) ...\n            tag 229\t\t\tawFunds(address NFTContractAdd...\n              JUMPDEST \t\t\tawFunds(address NFTContractAdd...\n              DUP4 \t\t\tlt doe\n            tag 231\t\t\t address(0), \"Vault does not e...\n              JUMPDEST \t\t\t address(0), \"Vault does not e...\n              DUP2 \t\t\ts for \n              DUP2 \t\t\texi\n              LT \t\t\tot exists for t\n              ISZERO \t\t\t address(0), \"Vault does not e...\n              PUSH [tag] 233\t\t\t address(0), \"Vault does not e...\n              JUMPI \t\t\t address(0), \"Vault does not e...\n              DUP1 \t\t\t_ad\n              PUSH [tag] 234\t\t\ttAddress(NFTContractAddress));...\n              DUP9 \t\t\t   \n              DUP3 \t\t\tddress));\\r\n              PUSH [tag] 132\t\t\ttAddress(NFTContractAddress));...\n              JUMP \t\t\ttAddress(NFTContractAddress));...\n            tag 234\t\t\ttAddress(NFTContractAddress));...\n              JUMPDEST \t\t\ttAddress(NFTContractAddress));...\n              DUP5 \t\t\tntr\n              MSTORE \t\t\te(getContractAddress(NFTContra...\n              PUSH 20\t\t\tntra\n              DUP5 \t\t\tult\n              ADD \t\t\tt(vaultContrac\n              SWAP4 \t\t\t = Vault(vaultContrac\n              POP \t\t\t = Vault(vaultContrac\n              POP \t\t\t    address payable vaultContr...\n              PUSH 20\t\t\t\\r\\n  \n              DUP2 \t\t\tct\"\n              ADD \t\t\tntract\");\\r\\n   \n              SWAP1 \t\t\t NFT contract\");\\r\\n   \n              POP \t\t\t NFT contract\");\\r\\n   \n              PUSH [tag] 231\t\t\t address(0), \"Vault does not e...\n              JUMP \t\t\t address(0), \"Vault does not e...\n            tag 233\t\t\t address(0), \"Vault does not e...\n              JUMPDEST \t\t\t address(0), \"Vault does not e...\n              POP \t\t\tress(0), \"Vault does \n              POP \t\t\taddress.transfer(totalAmount);...\n              POP \t\t\taddress.transfer(totalAmount);...\n              SWAP4 \t\t\tth; i++) {\\r\\n            vaul...\n              SWAP3 \t\t\tth; i++) {\\r\\n            vaul...\n              POP \t\t\tth; i++) {\\r\\n            vaul...\n              POP \t\t\tth; i++) {\\r\\n            vaul...\n              POP \t\t\tth; i++) {\\r\\n            vaul...\n              JUMP \t\t\tth; i++) {\\r\\n            vaul...\n            tag 152\t\t\tn() == msg.sender, \"Only the p...\n              JUMPDEST \t\t\tn() == msg.sender, \"Only the p...\n              PUSH 0\t\t\ts\");\\r\n              DUP3 \t\t\t to\n              PUSH 1F\t\t\tende\n              DUP4 \t\t\tle(msg\n              ADD \t\t\tayable(msg.sender\n              SLT \t\t\taw(payable(msg.sender), tok\n              PUSH [tag] 236\t\t\tult.withdraw(payable(msg.sende...\n              JUMPI \t\t\tult.withdraw(payable(msg.sende...\n              PUSH [tag] 237\t\t\ts);\\r\\n    }\\r\\n\\r\\n    /**\\r\\...\n              PUSH [tag] 144\t\t\ts);\\r\\n    }\\r\\n\\r\\n    /**\\r\\...\n              JUMP \t\t\ts);\\r\\n    }\\r\\n\\r\\n    /**\\r\\...\n            tag 237\t\t\ts);\\r\\n    }\\r\\n\\r\\n    /**\\r\\...\n              JUMPDEST \t\t\ts);\\r\\n    }\\r\\n\\r\\n    /**\\r\\...\n            tag 236\t\t\tult.withdraw(payable(msg.sende...\n              JUMPDEST \t\t\tult.withdraw(payable(msg.sende...\n              DUP2 \t\t\ts of t\n              CALLDATALOAD \t\t\tddress address of th\n              PUSH [tag] 238\t\t\t   * @param _tokenID Token ID ...\n              DUP5 \t\t\tres\n              DUP3 \t\t\ttractA\n              PUSH 20\t\t\t NFT\n              DUP7 \t\t\t(addre\n              ADD \t\t\tlaim(address NFTC\n              PUSH [tag] 151\t\t\t   * @param _tokenID Token ID ...\n              JUMP \t\t\t   * @param _tokenID Token ID ...\n            tag 238\t\t\t   * @param _tokenID Token ID ...\n              JUMPDEST \t\t\t   * @param _tokenID Token ID ...\n              SWAP2 \t\t\ttract\\r\\n     * @param _tokenI...\n              POP \t\t\ttract\\r\\n     * @param _tokenI...\n              POP \t\t\t        vault.withdraw(payable...\n              SWAP3 \t\t\tn() == msg.sender, \"Only the p...\n              SWAP2 \t\t\tn() == msg.sender, \"Only the p...\n              POP \t\t\tn() == msg.sender, \"Only the p...\n              POP \t\t\tn() == msg.sender, \"Only the p...\n              JUMP \t\t\tn() == msg.sender, \"Only the p...\n            tag 42\t\t\tokenID) public payable {\\r\\n  ...\n              JUMPDEST \t\t\tokenID) public payable {\\r\\n  ...\n              PUSH 0\t\t\t not e\n              DUP1 \t\t\tsts fo\n              PUSH 40\t\t\tke\n              DUP4 \t\t\t   ERC721\n              DUP6 \t\t\t\\r\\n\\r\\n   \n              SUB \t\t\tt\");\\r\\n\\r\\n        ERC721 \n              SLT \t\t\ttract\");\\r\\n\\r\\n        ERC721...\n              ISZERO \t\t\tcontract\");\\r\\n\\r\\n        ERC...\n              PUSH [tag] 240\t\t\tcontract\");\\r\\n\\r\\n        ERC...\n              JUMPI \t\t\tcontract\");\\r\\n\\r\\n        ERC...\n              PUSH [tag] 241\t\t\tERC721(NFTContractAddress);\\r\\...\n              PUSH [tag] 128\t\t\tERC721(NFTContractAddress);\\r\\...\n              JUMP \t\t\tERC721(NFTContractAddress);\\r\\...\n            tag 241\t\t\tERC721(NFTContractAddress);\\r\\...\n              JUMPDEST \t\t\tERC721(NFTContractAddress);\\r\\...\n            tag 240\t\t\tcontract\");\\r\\n\\r\\n        ERC...\n              JUMPDEST \t\t\tcontract\");\\r\\n\\r\\n        ERC...\n              PUSH 0\t\t\tl\n              PUSH [tag] 242\t\t\t= payable(getContractAddress(N...\n              DUP6 \t\t\t       \n              DUP3 \t\t\tess));\n              DUP7 \t\t\tontractAd\n              ADD \t\t\tNFTContractAddress));\\r\n              PUSH [tag] 143\t\t\t= payable(getContractAddress(N...\n              JUMP \t\t\t= payable(getContractAddress(N...\n            tag 242\t\t\t= payable(getContractAddress(N...\n              JUMPDEST \t\t\t= payable(getContractAddress(N...\n              SWAP3 \t\t\tt_address = payable(getContrac...\n              POP \t\t\tt_address = payable(getContrac...\n              POP \t\t\tss);\\r\\n\\r\\n        address pa...\n              PUSH 20\t\t\tOw\n              DUP4 \t\t\tquire(tok\n              ADD \t\t\t  require(tokenOwn\n              CALLDATALOAD \t\t\t     \\r\\n        require(token...\n              PUSH FFFFFFFFFFFFFFFF\t\t\tot the owner of th\n              DUP2 \t\t\tou are\n              GT \t\t\t \"You are not the owner of thi\n              ISZERO \t\t\ter, \"You are not the owner of ...\n              PUSH [tag] 243\t\t\ter, \"You are not the owner of ...\n              JUMPI \t\t\ter, \"You are not the owner of ...\n              PUSH [tag] 244\t\t\token!\");\\r\\n        require(to...\n              PUSH [tag] 129\t\t\token!\");\\r\\n        require(to...\n              JUMP \t\t\token!\");\\r\\n        require(to...\n            tag 244\t\t\token!\");\\r\\n        require(to...\n              JUMPDEST \t\t\token!\");\\r\\n        require(to...\n            tag 243\t\t\ter, \"You are not the owner of ...\n              JUMPDEST \t\t\ter, \"You are not the owner of ...\n              PUSH [tag] 245\t\t\tken\");\\r\\n\\r\\n        asset.bu...\n              DUP6 \t\t\tipient \n              DUP3 \t\t\tyable \n              DUP7 \t\t\t address \n              ADD \t\t\t     address payable r\n              PUSH [tag] 152\t\t\tken\");\\r\\n\\r\\n        asset.bu...\n              JUMP \t\t\tken\");\\r\\n\\r\\n        asset.bu...\n            tag 245\t\t\tken\");\\r\\n\\r\\n        asset.bu...\n              JUMPDEST \t\t\tken\");\\r\\n\\r\\n        asset.bu...\n              SWAP2 \t\t\tto burn token\");\\r\\n\\r\\n      ...\n              POP \t\t\tto burn token\");\\r\\n\\r\\n      ...\n              POP \t\t\ttoken.ownerOf(_tokenID);\\r\\n  ...\n              SWAP3 \t\t\tokenID) public payable {\\r\\n  ...\n              POP \t\t\tokenID) public payable {\\r\\n  ...\n              SWAP3 \t\t\tokenID) public payable {\\r\\n  ...\n              SWAP1 \t\t\tokenID) public payable {\\r\\n  ...\n              POP \t\t\tokenID) public payable {\\r\\n  ...\n              JUMP \t\t\tokenID) public payable {\\r\\n  ...\n            tag 51\t\t\t        Vault vault = Vault(va...\n              JUMPDEST \t\t\t        Vault vault = Vault(va...\n              PUSH 0\t\t\t.claim\n              DUP1 \t\t\tnds(re\n              PUSH 40\t\t\t *\n              DUP4 \t\t\t   /**\\r\\n \n              DUP6 \t\t\t   }\\r\\n\\r\n              SUB \t\t\t;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n ...\n              SLT \t\t\tnID);\\r\\n    }\\r\\n\\r\\n    /**\\...\n              ISZERO \t\t\tokenID);\\r\\n    }\\r\\n\\r\\n    /...\n              PUSH [tag] 247\t\t\tokenID);\\r\\n    }\\r\\n\\r\\n    /...\n              JUMPI \t\t\tokenID);\\r\\n    }\\r\\n\\r\\n    /...\n              PUSH [tag] 248\t\t\tv Function to get the contract...\n              PUSH [tag] 128\t\t\tv Function to get the contract...\n              JUMP \t\t\tv Function to get the contract...\n            tag 248\t\t\tv Function to get the contract...\n              JUMPDEST \t\t\tv Function to get the contract...\n            tag 247\t\t\tokenID);\\r\\n    }\\r\\n\\r\\n    /...\n              JUMPDEST \t\t\tokenID);\\r\\n    }\\r\\n\\r\\n    /...\n              PUSH 0\t\t\t*\n              PUSH [tag] 249\t\t\tvault contract\\r\\n     */\\r\\n ...\n              DUP6 \t\t\tractAdd\n              DUP3 \t\t\tn getC\n              DUP7 \t\t\t    funct\n              ADD \t\t\t*/\\r\\n    function getCo\n              PUSH [tag] 132\t\t\tvault contract\\r\\n     */\\r\\n ...\n              JUMP \t\t\tvault contract\\r\\n     */\\r\\n ...\n            tag 249\t\t\tvault contract\\r\\n     */\\r\\n ...\n              JUMPDEST \t\t\tvault contract\\r\\n     */\\r\\n ...\n              SWAP3 \t\t\tss of the vault contract\\r\\n  ...\n              POP \t\t\tss of the vault contract\\r\\n  ...\n              POP \t\t\tss of the NFT contract\\r\\n    ...\n              PUSH 20\t\t\tns\n              PUSH [tag] 250\t\t\trn vaultAddress[NFTContractAdd...\n              DUP6 \t\t\t\\r\\n    /\n              DUP3 \t\t\t\\r\\n    \n              DUP7 \t\t\tctAddress\n              ADD \t\t\tntractAddress];\\r\\n    }\n              PUSH [tag] 132\t\t\trn vaultAddress[NFTContractAdd...\n              JUMP \t\t\trn vaultAddress[NFTContractAdd...\n            tag 250\t\t\trn vaultAddress[NFTContractAdd...\n              JUMPDEST \t\t\trn vaultAddress[NFTContractAdd...\n              SWAP2 \t\t\t      return vaultAddress[NFTC...\n              POP \t\t\t      return vaultAddress[NFTC...\n              POP \t\t\tactAddress) public view return...\n              SWAP3 \t\t\t        Vault vault = Vault(va...\n              POP \t\t\t        Vault vault = Vault(va...\n              SWAP3 \t\t\t        Vault vault = Vault(va...\n              SWAP1 \t\t\t        Vault vault = Vault(va...\n              POP \t\t\t        Vault vault = Vault(va...\n              JUMP \t\t\t        Vault vault = Vault(va...\n            tag 64\t\t\t to get details of the vault a...\n              JUMPDEST \t\t\t to get details of the vault a...\n              PUSH 0\t\t\tple co\n              DUP1 \t\t\taining\n              PUSH 40\t\t\tme\n              DUP4 \t\t\t, minimum\n              DUP6 \t\t\tthe vau\n              SUB \t\t\t of the vault, minimum \n              SLT \t\t\tance of the vault, minimum tim...\n              ISZERO \t\t\tbalance of the vault, minimum ...\n              PUSH [tag] 252\t\t\tbalance of the vault, minimum ...\n              JUMPI \t\t\tbalance of the vault, minimum ...\n              PUSH [tag] 253\t\t\tore withdraw, \\r\\n     * array...\n              PUSH [tag] 128\t\t\tore withdraw, \\r\\n     * array...\n              JUMP \t\t\tore withdraw, \\r\\n     * array...\n            tag 253\t\t\tore withdraw, \\r\\n     * array...\n              JUMPDEST \t\t\tore withdraw, \\r\\n     * array...\n            tag 252\t\t\tbalance of the vault, minimum ...\n              JUMPDEST \t\t\tbalance of the vault, minimum ...\n              PUSH 0\t\t\ta\n              PUSH [tag] 254\t\t\t returns (uint256, uint256, ui...\n              DUP6 \t\t\t) {\\r\\n  \n              DUP3 \t\t\t, addr\n              DUP7 \t\t\t56[] memo\n              ADD \t\t\tint256[] memory, addre\n              PUSH [tag] 143\t\t\t returns (uint256, uint256, ui...\n              JUMP \t\t\t returns (uint256, uint256, ui...\n            tag 254\t\t\t returns (uint256, uint256, ui...\n              JUMPDEST \t\t\t returns (uint256, uint256, ui...\n              SWAP3 \t\t\tublic view returns (uint256, u...\n              POP \t\t\tublic view returns (uint256, u...\n              POP \t\t\t\\n     */\\r\\n    function getM...\n              PUSH 20\t\t\ter\n              PUSH [tag] 255\t\t\tontractAddress != address(0), ...\n              DUP6 \t\t\tt assoc\n              DUP3 \t\t\tT cont\n              DUP7 \t\t\t(0), \"No \n              ADD \t\t\tress(0), \"No NFT contr\n              PUSH [tag] 132\t\t\tontractAddress != address(0), ...\n              JUMP \t\t\tontractAddress != address(0), ...\n            tag 255\t\t\tontractAddress != address(0), ...\n              JUMPDEST \t\t\tontractAddress != address(0), ...\n              SWAP2 \t\t\tquire(nftContractAddress != ad...\n              POP \t\t\tquire(nftContractAddress != ad...\n              POP \t\t\tractAddress = admins[msg.sende...\n              SWAP3 \t\t\t to get details of the vault a...\n              POP \t\t\t to get details of the vault a...\n              SWAP3 \t\t\t to get details of the vault a...\n              SWAP1 \t\t\t to get details of the vault a...\n              POP \t\t\t to get details of the vault a...\n              JUMP \t\t\t to get details of the vault a...\n            tag 153\t\t\t        address vaultContractA...\n              JUMPDEST \t\t\t        address vaultContractA...\n              PUSH 0\t\t\tquire(vault\n              DUP3 \t\t\tess(0)\n              DUP3 \t\t\t ad\n              MSTORE \t\t\tress != address(0),\n              PUSH 20\t\t\t's N\n              DUP3 \t\t\tall\n              ADD \t\t\tth caller's NF\n              SWAP1 \t\t\tt associated with caller's NF\n              POP \t\t\tt associated with caller's NF\n              SWAP3 \t\t\t        address vaultContractA...\n              SWAP2 \t\t\t        address vaultContractA...\n              POP \t\t\t        address vaultContractA...\n              POP \t\t\t        address vaultContractA...\n              JUMP \t\t\t        address vaultContractA...\n            tag 154\t\t\t;\\r\\n\\r\\n        Vault vault =...\n              JUMPDEST \t\t\t;\\r\\n\\r\\n        Vault vault =...\n              PUSH 4F6E6C7920426974737572616E636520636F6E74726163742063616E2063616C\t\t\tnimumWithdrawTime = vault.mini...\n              PUSH 0\t\t\t6\n              DUP3 \t\t\t  uint\n              ADD \t\t\t      uint256 \n              MSTORE \t\t\tce;\\r\\n        uint256 minimum...\n              PUSH 6C20746869732066756E6374696F6E0000000000000000000000000000000000\t\t\temory insuredToke\n              PUSH 20\t\t\t6[\n              DUP3 \t\t\t  uint\n              ADD \t\t\t      uint256[]\n              MSTORE \t\t\t();\\r\\n        uint256[] memor...\n              POP \t\t\t;\\r\\n\\r\\n        Vault vault =...\n              JUMP \t\t\t;\\r\\n\\r\\n        Vault vault =...\n            tag 155\t\t\tetTokenIds();\\r\\n\\r\\n        r...\n              JUMPDEST \t\t\tetTokenIds();\\r\\n\\r\\n        r...\n              PUSH 0\t\t\t\n              PUSH [tag] 259\t\t\t\n              PUSH 2F\t\t\t\n              DUP4 \t\t\t\n              PUSH [tag] 153\t\t\t\n              JUMP \t\t\t\n            tag 259\t\t\t\n              JUMPDEST \t\t\t\n              SWAP2 \t\t\t\n              POP \t\t\t\n              PUSH [tag] 260\t\t\t\n              DUP3 \t\t\t\n              PUSH [tag] 154\t\t\t\n              JUMP \t\t\t\n            tag 260\t\t\t\n              JUMPDEST \t\t\t\n              PUSH 40\t\t\t\n              DUP3 \t\t\t\n              ADD \t\t\t\n              SWAP1 \t\t\t\n              POP \t\t\t\n              SWAP2 \t\t\tetTokenIds();\\r\\n\\r\\n        r...\n              SWAP1 \t\t\tetTokenIds();\\r\\n\\r\\n        r...\n              POP \t\t\tetTokenIds();\\r\\n\\r\\n        r...\n              JUMP \t\t\tetTokenIds();\\r\\n\\r\\n        r...\n            tag 76\t\t\t\n              JUMPDEST \t\t\t\n              PUSH 0\t\t\t\n              PUSH 20\t\t\t\n              DUP3 \t\t\t\n              ADD \t\t\t\n              SWAP1 \t\t\t\n              POP \t\t\t\n              DUP2 \t\t\t\n              DUP2 \t\t\t\n              SUB \t\t\t\n              PUSH 0\t\t\t\n              DUP4 \t\t\t\n              ADD \t\t\t\n              MSTORE \t\t\t\n              PUSH [tag] 262\t\t\t\n              DUP2 \t\t\t\n              PUSH [tag] 155\t\t\t\n              JUMP \t\t\t\n            tag 262\t\t\t\n              JUMPDEST \t\t\t\n              SWAP1 \t\t\t\n              POP \t\t\t\n              SWAP2 \t\t\t\n              SWAP1 \t\t\t\n              POP \t\t\t\n              JUMP \t\t\t\n            tag 156\t\t\t\n              JUMPDEST \t\t\t\n              PUSH 4E487B7100000000000000000000000000000000000000000000000000000000\t\t\t\n              PUSH 0\t\t\t\n              MSTORE \t\t\t\n              PUSH 11\t\t\t\n              PUSH 4\t\t\t\n              MSTORE \t\t\t\n              PUSH 24\t\t\t\n              PUSH 0\t\t\t\n              REVERT \t\t\t\n            tag 79\t\t\t\n              JUMPDEST \t\t\t\n              PUSH 0\t\t\t\n              PUSH [tag] 265\t\t\t\n              DUP3 \t\t\t\n              PUSH [tag] 130\t\t\t\n              JUMP \t\t\t\n            tag 265\t\t\t\n              JUMPDEST \t\t\t\n              SWAP2 \t\t\t\n              POP \t\t\t\n              PUSH [tag] 266\t\t\t\n              DUP4 \t\t\t\n              PUSH [tag] 130\t\t\t\n              JUMP \t\t\t\n            tag 266\t\t\t\n              JUMPDEST \t\t\t\n              SWAP3 \t\t\t\n              POP \t\t\t\n              DUP3 \t\t\t\n              DUP3 \t\t\t\n              MUL \t\t\t\n              PUSH [tag] 267\t\t\t\n              DUP2 \t\t\t\n              PUSH [tag] 130\t\t\t\n              JUMP \t\t\t\n            tag 267\t\t\t\n              JUMPDEST \t\t\t\n              SWAP2 \t\t\t\n              POP \t\t\t\n              DUP3 \t\t\t\n              DUP3 \t\t\t\n              DIV \t\t\t\n              DUP5 \t\t\t\n              EQ \t\t\t\n              DUP4 \t\t\t\n              ISZERO \t\t\t\n              OR \t\t\t\n              PUSH [tag] 268\t\t\t\n              JUMPI \t\t\t\n              PUSH [tag] 269\t\t\t\n              PUSH [tag] 156\t\t\t\n              JUMP \t\t\t\n            tag 269\t\t\t\n              JUMPDEST \t\t\t\n            tag 268\t\t\t\n              JUMPDEST \t\t\t\n              POP \t\t\t\n              SWAP3 \t\t\t\n              SWAP2 \t\t\t\n              POP \t\t\t\n              POP \t\t\t\n              JUMP \t\t\t\n            tag 81\t\t\t\n              JUMPDEST \t\t\t\n              PUSH 0\t\t\t\n              PUSH [tag] 271\t\t\t\n              DUP3 \t\t\t\n              PUSH [tag] 130\t\t\t\n              JUMP \t\t\t\n            tag 271\t\t\t\n              JUMPDEST \t\t\t\n              SWAP2 \t\t\t\n              POP \t\t\t\n              PUSH [tag] 272\t\t\t\n              DUP4 \t\t\t\n              PUSH [tag] 130\t\t\t\n              JUMP \t\t\t\n            tag 272\t\t\t\n              JUMPDEST \t\t\t\n              SWAP3 \t\t\t\n              POP \t\t\t\n              DUP3 \t\t\t\n              DUP3 \t\t\t\n              SUB \t\t\t\n              SWAP1 \t\t\t\n              POP \t\t\t\n              DUP2 \t\t\t\n              DUP2 \t\t\t\n              GT \t\t\t\n              ISZERO \t\t\t\n              PUSH [tag] 273\t\t\t\n              JUMPI \t\t\t\n              PUSH [tag] 274\t\t\t\n              PUSH [tag] 156\t\t\t\n              JUMP \t\t\t\n            tag 274\t\t\t\n              JUMPDEST \t\t\t\n            tag 273\t\t\t\n              JUMPDEST \t\t\t\n              SWAP3 \t\t\t\n              SWAP2 \t\t\t\n              POP \t\t\t\n              POP \t\t\t\n              JUMP \t\t\t\n            tag 157\t\t\t\n              JUMPDEST \t\t\t\n              PUSH 43616E6E6F74206163636573732066756E6374696F6E206265666F7265207468\t\t\t\n              PUSH 0\t\t\t\n              DUP3 \t\t\t\n              ADD \t\t\t\n              MSTORE \t\t\t\n              PUSH 65206D696E696D756D2074696D65206861732070617373656400000000000000\t\t\t\n              PUSH 20\t\t\t\n              DUP3 \t\t\t\n              ADD \t\t\t\n              MSTORE \t\t\t\n              POP \t\t\t\n              JUMP \t\t\t\n            tag 158\t\t\t\n              JUMPDEST \t\t\t\n              PUSH 0\t\t\t\n              PUSH [tag] 277\t\t\t\n              PUSH 39\t\t\t\n              DUP4 \t\t\t\n              PUSH [tag] 153\t\t\t\n              JUMP \t\t\t\n            tag 277\t\t\t\n              JUMPDEST \t\t\t\n              SWAP2 \t\t\t\n              POP \t\t\t\n              PUSH [tag] 278\t\t\t\n              DUP3 \t\t\t\n              PUSH [tag] 157\t\t\t\n              JUMP \t\t\t\n            tag 278\t\t\t\n              JUMPDEST \t\t\t\n              PUSH 40\t\t\t\n              DUP3 \t\t\t\n              ADD \t\t\t\n              SWAP1 \t\t\t\n              POP \t\t\t\n              SWAP2 \t\t\t\n              SWAP1 \t\t\t\n              POP \t\t\t\n              JUMP \t\t\t\n            tag 84\t\t\t\n              JUMPDEST \t\t\t\n              PUSH 0\t\t\t\n              PUSH 20\t\t\t\n              DUP3 \t\t\t\n              ADD \t\t\t\n              SWAP1 \t\t\t\n              POP \t\t\t\n              DUP2 \t\t\t\n              DUP2 \t\t\t\n              SUB \t\t\t\n              PUSH 0\t\t\t\n              DUP4 \t\t\t\n              ADD \t\t\t\n              MSTORE \t\t\t\n              PUSH [tag] 280\t\t\t\n              DUP2 \t\t\t\n              PUSH [tag] 158\t\t\t\n              JUMP \t\t\t\n            tag 280\t\t\t\n              JUMPDEST \t\t\t\n              SWAP1 \t\t\t\n              POP \t\t\t\n              SWAP2 \t\t\t\n              SWAP1 \t\t\t\n              POP \t\t\t\n              JUMP \t\t\t\n            tag 90\t\t\t\n              JUMPDEST \t\t\t\n              PUSH 4E487B7100000000000000000000000000000000000000000000000000000000\t\t\t\n              PUSH 0\t\t\t\n              MSTORE \t\t\t\n              PUSH 32\t\t\t\n              PUSH 4\t\t\t\n              MSTORE \t\t\t\n              PUSH 24\t\t\t\n              PUSH 0\t\t\t\n              REVERT \t\t\t\n            tag 159\t\t\t\n              JUMPDEST \t\t\t\n              PUSH 4E6F2062616C616E636520666F72207468697320746F6B656E49440000000000\t\t\t\n              PUSH 0\t\t\t\n              DUP3 \t\t\t\n              ADD \t\t\t\n              MSTORE \t\t\t\n              POP \t\t\t\n              JUMP \t\t\t\n            tag 160\t\t\t\n              JUMPDEST \t\t\t\n              PUSH 0\t\t\t\n              PUSH [tag] 284\t\t\t\n              PUSH 1B\t\t\t\n              DUP4 \t\t\t\n              PUSH [tag] 153\t\t\t\n              JUMP \t\t\t\n            tag 284\t\t\t\n              JUMPDEST \t\t\t\n              SWAP2 \t\t\t\n              POP \t\t\t\n              PUSH [tag] 285\t\t\t\n              DUP3 \t\t\t\n              PUSH [tag] 159\t\t\t\n              JUMP \t\t\t\n            tag 285\t\t\t\n              JUMPDEST \t\t\t\n              PUSH 20\t\t\t\n              DUP3 \t\t\t\n              ADD \t\t\t\n              SWAP1 \t\t\t\n              POP \t\t\t\n              SWAP2 \t\t\t\n              SWAP1 \t\t\t\n              POP \t\t\t\n              JUMP \t\t\t\n            tag 93\t\t\t\n              JUMPDEST \t\t\t\n              PUSH 0\t\t\t\n              PUSH 20\t\t\t\n              DUP3 \t\t\t\n              ADD \t\t\t\n              SWAP1 \t\t\t\n              POP \t\t\t\n              DUP2 \t\t\t\n              DUP2 \t\t\t\n              SUB \t\t\t\n              PUSH 0\t\t\t\n              DUP4 \t\t\t\n              ADD \t\t\t\n              MSTORE \t\t\t\n              PUSH [tag] 287\t\t\t\n              DUP2 \t\t\t\n              PUSH [tag] 160\t\t\t\n              JUMP \t\t\t\n            tag 287\t\t\t\n              JUMPDEST \t\t\t\n              SWAP1 \t\t\t\n              POP \t\t\t\n              SWAP2 \t\t\t\n              SWAP1 \t\t\t\n              POP \t\t\t\n              JUMP \t\t\t\n            tag 97\t\t\t\n              JUMPDEST \t\t\t\n              PUSH 0\t\t\t\n              PUSH [tag] 289\t\t\t\n              DUP3 \t\t\t\n              PUSH [tag] 130\t\t\t\n              JUMP \t\t\t\n            tag 289\t\t\t\n              JUMPDEST \t\t\t\n              SWAP2 \t\t\t\n              POP \t\t\t\n              PUSH [tag] 290\t\t\t\n              DUP4 \t\t\t\n              PUSH [tag] 130\t\t\t\n              JUMP \t\t\t\n            tag 290\t\t\t\n              JUMPDEST \t\t\t\n              SWAP3 \t\t\t\n              POP \t\t\t\n              DUP3 \t\t\t\n              DUP3 \t\t\t\n              ADD \t\t\t\n              SWAP1 \t\t\t\n              POP \t\t\t\n              DUP1 \t\t\t\n              DUP3 \t\t\t\n              GT \t\t\t\n              ISZERO \t\t\t\n              PUSH [tag] 291\t\t\t\n              JUMPI \t\t\t\n              PUSH [tag] 292\t\t\t\n              PUSH [tag] 156\t\t\t\n              JUMP \t\t\t\n            tag 292\t\t\t\n              JUMPDEST \t\t\t\n            tag 291\t\t\t\n              JUMPDEST \t\t\t\n              SWAP3 \t\t\t\n              SWAP2 \t\t\t\n              POP \t\t\t\n              POP \t\t\t\n              JUMP \t\t\t\n            tag 101\t\t\t\n              JUMPDEST \t\t\t\n              PUSH 0\t\t\t\n              PUSH [tag] 294\t\t\t\n              DUP3 \t\t\t\n              PUSH [tag] 130\t\t\t\n              JUMP \t\t\t\n            tag 294\t\t\t\n              JUMPDEST \t\t\t\n              SWAP2 \t\t\t\n              POP \t\t\t\n              PUSH FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF\t\t\t\n              DUP3 \t\t\t\n              SUB \t\t\t\n              PUSH [tag] 295\t\t\t\n              JUMPI \t\t\t\n              PUSH [tag] 296\t\t\t\n              PUSH [tag] 156\t\t\t\n              JUMP \t\t\t\n            tag 296\t\t\t\n              JUMPDEST \t\t\t\n            tag 295\t\t\t\n              JUMPDEST \t\t\t\n              PUSH 1\t\t\t\n              DUP3 \t\t\t\n              ADD \t\t\t\n              SWAP1 \t\t\t\n              POP \t\t\t\n              SWAP2 \t\t\t\n              SWAP1 \t\t\t\n              POP \t\t\t\n              JUMP \t\t\t\n            .data\n"
}