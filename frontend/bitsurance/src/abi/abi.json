{
	"compilerInput": "{\"language\":\"Solidity\",\"sources\":{\"BitSurance.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.9;\\n\\nimport \\\"@openzeppelin/contracts/token/ERC721/ERC721.sol\\\";\\nimport \\\"@openzeppelin/contracts/token/ERC721/extensions/ERC721Burnable.sol\\\";\\n\\n/**\\n * @title Vault\\n * @dev Vault contract that allows for storing balances associated with Token IDs.\\n */\\ncontract Vault {\\n    address public NFTContract;\\n    mapping(uint256 => uint256) public tokenBalances;\\n    uint256 public minTime;\\n    uint256 public creationTime;\\n    address public bitsurance;\\n    address public admin;\\n\\n    // array to store all insured token ids\\n    uint256[] public tokenIds;\\n\\n    modifier onlyBitsurance{\\n        require(msg.sender == bitsurance, \\\"Only Bitsurance contract can call this function\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @dev Contract constructor that sets initial values\\n     * @param NFTContractAddress address of the NFT contract\\n     * @param _minTime minimum time before claim and 2 * minTime before withdraw\\n     * @param _admin admin address\\n     */\\n    constructor(address NFTContractAddress, uint256 _minTime, address _admin) {\\n        NFTContract = NFTContractAddress;\\n        minTime = _minTime;\\n        admin = _admin;\\n        creationTime = block.timestamp;\\n        bitsurance = msg.sender;\\n    }\\n\\n    fallback() external payable{}\\n    receive() external payable{}\\n\\n    /**\\n     * @dev Function to add balance for a specific token ID\\n     * @param _tokenID Token ID to which the balance is added\\n     * @param amount Amount to add to the balance\\n     */\\n    function addBalance(uint256 _tokenID, uint256 amount) external onlyBitsurance {\\n        if (tokenBalances[_tokenID] == 0) {\\n            tokenIds.push(_tokenID);\\n        }\\n        tokenBalances[_tokenID] += amount;\\n    }\\n\\n    function getTokenIds() public view returns(uint256[] memory) {\\n        return tokenIds;\\n    }\\n\\n    /**\\n     * @dev Function to claim funds from the vault\\n     * @param recipient Recipient address to receive the funds\\n     * @param _tokenID Token ID to claim\\n     */\\n    function claimFunds(address payable recipient, uint256 _tokenID) external payable onlyBitsurance {\\n        require(tokenBalances[_tokenID] > 0, \\\"No balance for this tokenID\\\");\\n        require(block.timestamp - creationTime >= minTime, \\\"Cannot access function before the minimum time has passed\\\");\\n        uint256 amount = tokenBalances[_tokenID];\\n        tokenBalances[_tokenID] = 0;\\n        recipient.transfer(amount);\\n    }\\n\\n    /**\\n     * @dev Function to withdraw funds from the vault\\n     * @param recipient Recipient address to receive the funds\\n     * @param _tokenIDs Array of Token IDs to withdraw\\n     */\\n    function withdraw(address payable recipient, uint256[] memory _tokenIDs) external payable onlyBitsurance {\\n        require(block.timestamp - creationTime >= 2 * minTime, \\\"Cannot access function before the minimum time has passed\\\");\\n        uint256 totalAmount = 0;\\n        for (uint256 i = 0; i < _tokenIDs.length; i++) {\\n            require(tokenBalances[_tokenIDs[i]] > 0, \\\"No balance for this tokenID\\\");\\n            totalAmount += tokenBalances[_tokenIDs[i]];\\n            tokenBalances[_tokenIDs[i]] = 0;\\n        }\\n        recipient.transfer(totalAmount);\\n    }\\n}\\n/**\\n * @title Bitsurance\\n * @dev Bitsurance contract that interacts with Vaults and manages the creation and operations on them\\n */\\ncontract Bitsurance {\\n\\n    struct VaultDetails {\\n        uint256 totalBalance;\\n        uint256 minimumWithdrawTime;\\n        uint256[] insuredTokenIds;\\n        address nftContractAddress;\\n    }\\n    \\n    // An array of vaults\\n    Vault[] private vaults;\\n    \\n    // Event to notify when a vault is created\\n    event VaultCreated(uint256 date, address vaultAddress, address NFT_address);\\n\\n    // Mapping of NFT contract address to corresponding vault address\\n    mapping(address => address) public vaultAddress;\\n    \\n    // Mapping of admins to NFT contracts\\n    mapping(address => address[]) public adminToNFTContracts;\\n\\n    /**\\n     * @dev Function to create a new vault\\n     * @param _NFTContractAddress address of the NFT contract\\n     * @param _minTime minimum time before withdrawal\\n     */\\n    function createVault(address _NFTContractAddress, uint256 _minTime) public{\\n        require(vaultAddress[_NFTContractAddress] == address(0), \\\"Vault already exists for this NFT contract\\\");\\n        Vault vault = new Vault(_NFTContractAddress,_minTime, msg.sender);\\n        vaults.push(vault);\\n        vaultAddress[_NFTContractAddress]= address(vault);\\n        adminToNFTContracts[msg.sender].push(_NFTContractAddress);\\n        emit VaultCreated(block.timestamp,address(vault),_NFTContractAddress);\\n    }\\n\\n    /**\\n     * @dev Function to deposit funds into a vault\\n     * @param NFTContractAddress address of the NFT contract\\n     * @param _tokenIDs Array of Token IDs for deposit\\n     * @param amounts Array of corresponding amounts for deposit\\n     */\\n    function depositFunds(address NFTContractAddress, uint256[] memory _tokenIDs, uint256[] memory amounts) public payable{\\n        require(vaultAddress[NFTContractAddress] != address(0), \\\"Vault does not exists for this NFT contract\\\");\\n        require(_tokenIDs.length == amounts.length, \\\"Mismatched arrays\\\");\\n        \\n        uint256 useramount = msg.value;\\n        address payable vaultContract_address = payable(getContractAddress(NFTContractAddress));\\n\\n        Vault vault = Vault(vaultContract_address);\\n        require(vault.admin() == msg.sender, \\\"Only the person who created vault can deposit funds into it\\\");\\n\\n        uint256 totalAmount = 0;        \\n        for (uint256 i = 0; i < _tokenIDs.length; i++) {\\n            totalAmount += amounts[i];\\n        }\\n        require(useramount == totalAmount, \\\"Mismatched total deposit amount\\\");\\n        for (uint256 i = 0; i < _tokenIDs.length; i++) {\\n            vault.addBalance(_tokenIDs[i], amounts[i]);\\n        }\\n        vaultContract_address.transfer(totalAmount);\\n    }\\n\\n    /**\\n     * @dev Function to withdraw funds from a vault\\n     * @param NFTContractAddress address of the NFT contract\\n     * @param tokenIDs Array of Token IDs for withdrawal\\n     */\\n    function withdrawFunds(address NFTContractAddress, uint256[] memory tokenIDs) public payable{\\n        require(vaultAddress[NFTContractAddress] != address(0), \\\"Vault does not exists for this NFT contract\\\");\\n        \\n        address payable vaultContract_address = payable(getContractAddress(NFTContractAddress));\\n        Vault vault = Vault(vaultContract_address);\\n        require(vault.admin() == msg.sender, \\\"Only the person who created vault can withdraw funds\\\");\\n\\n        vault.withdraw(payable(msg.sender), tokenIDs);\\n    }\\n\\n    /**\\n     * @dev Function to claim a Token ID from a vault\\n     * @param NFTContractAddress address of the NFT contract\\n     * @param _tokenID Token ID to claim\\n     */\\n    function claim(address NFTContractAddress, uint256 _tokenID) public payable {\\n        require(vaultAddress[NFTContractAddress] != address(0), \\\"Vault does not exists for this NFT contract\\\");\\n\\n        ERC721Burnable asset = ERC721Burnable(NFTContractAddress);\\n\\n        address payable vaultContract_address = payable(getContractAddress(NFTContractAddress));\\n        address tokenOwner = asset.ownerOf(_tokenID);\\n        \\n        require(tokenOwner == msg.sender, \\\"You are not the owner of this token!\\\");\\n        require(asset.getApproved(_tokenID) == address(this), \\\"Contract not approved to burn token\\\");\\n\\n        asset.burn(_tokenID);\\n\\n        address payable recipient = payable(msg.sender);\\n        Vault vault = Vault(vaultContract_address);\\n\\n        vault.claimFunds(recipient, _tokenID);\\n    }\\n\\n    /**\\n     * @dev Function to get the contract address of the vault\\n     * @param NFTContractAddress address of the NFT contract\\n     * @return Address of the vault contract\\n     */\\n    function getContractAddress(address NFTContractAddress) public view returns(address){\\n        return vaultAddress[NFTContractAddress];\\n    }\\n\\n    /**\\n     * @dev Function to get details of all vaults associated with the caller\\n     * @return An array of structures containing the total balance of each vault, minimum time before withdraw, \\n     * array of token ids insured, and the associated NFT contract address\\n     */\\n    function getVaultDetails() public view returns (VaultDetails[] memory) {\\n        address[] memory nftContracts = adminToNFTContracts[msg.sender];\\n        VaultDetails[] memory vaultDetailArray = new VaultDetails[](nftContracts.length);\\n\\n        for (uint i = 0; i < nftContracts.length; i++) {\\n            Vault vault = Vault(payable(vaultAddress[nftContracts[i]]));\\n            uint256[] memory insuredTokenIds = vault.getTokenIds();\\n            VaultDetails memory vaultDetails = VaultDetails({\\n                totalBalance: address(vault).balance,\\n                minimumWithdrawTime: 2 * vault.minTime(),\\n                insuredTokenIds: insuredTokenIds,\\n                nftContractAddress: nftContracts[i]\\n            });\\n            vaultDetailArray[i] = vaultDetails;\\n        }\\n        return vaultDetailArray;\\n    }\\n}\"},\"@openzeppelin/contracts/token/ERC721/extensions/ERC721Burnable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.8.0) (token/ERC721/extensions/ERC721Burnable.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../ERC721.sol\\\";\\nimport \\\"../../../utils/Context.sol\\\";\\n\\n/**\\n * @title ERC721 Burnable Token\\n * @dev ERC721 Token that can be burned (destroyed).\\n */\\nabstract contract ERC721Burnable is Context, ERC721 {\\n    /**\\n     * @dev Burns `tokenId`. See {ERC721-_burn}.\\n     *\\n     * Requirements:\\n     *\\n     * - The caller must own `tokenId` or be an approved operator.\\n     */\\n    function burn(uint256 tokenId) public virtual {\\n        //solhint-disable-next-line max-line-length\\n        require(_isApprovedOrOwner(_msgSender(), tokenId), \\\"ERC721: caller is not token owner or approved\\\");\\n        _burn(tokenId);\\n    }\\n}\\n\"},\"@openzeppelin/contracts/token/ERC721/ERC721.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (token/ERC721/ERC721.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./IERC721.sol\\\";\\nimport \\\"./IERC721Receiver.sol\\\";\\nimport \\\"./extensions/IERC721Metadata.sol\\\";\\nimport \\\"../../utils/Address.sol\\\";\\nimport \\\"../../utils/Context.sol\\\";\\nimport \\\"../../utils/Strings.sol\\\";\\nimport \\\"../../utils/introspection/ERC165.sol\\\";\\n\\n/**\\n * @dev Implementation of https://eips.ethereum.org/EIPS/eip-721[ERC721] Non-Fungible Token Standard, including\\n * the Metadata extension, but not including the Enumerable extension, which is available separately as\\n * {ERC721Enumerable}.\\n */\\ncontract ERC721 is Context, ERC165, IERC721, IERC721Metadata {\\n    using Address for address;\\n    using Strings for uint256;\\n\\n    // Token name\\n    string private _name;\\n\\n    // Token symbol\\n    string private _symbol;\\n\\n    // Mapping from token ID to owner address\\n    mapping(uint256 => address) private _owners;\\n\\n    // Mapping owner address to token count\\n    mapping(address => uint256) private _balances;\\n\\n    // Mapping from token ID to approved address\\n    mapping(uint256 => address) private _tokenApprovals;\\n\\n    // Mapping from owner to operator approvals\\n    mapping(address => mapping(address => bool)) private _operatorApprovals;\\n\\n    /**\\n     * @dev Initializes the contract by setting a `name` and a `symbol` to the token collection.\\n     */\\n    constructor(string memory name_, string memory symbol_) {\\n        _name = name_;\\n        _symbol = symbol_;\\n    }\\n\\n    /**\\n     * @dev See {IERC165-supportsInterface}.\\n     */\\n    function supportsInterface(bytes4 interfaceId) public view virtual override(ERC165, IERC165) returns (bool) {\\n        return\\n            interfaceId == type(IERC721).interfaceId ||\\n            interfaceId == type(IERC721Metadata).interfaceId ||\\n            super.supportsInterface(interfaceId);\\n    }\\n\\n    /**\\n     * @dev See {IERC721-balanceOf}.\\n     */\\n    function balanceOf(address owner) public view virtual override returns (uint256) {\\n        require(owner != address(0), \\\"ERC721: address zero is not a valid owner\\\");\\n        return _balances[owner];\\n    }\\n\\n    /**\\n     * @dev See {IERC721-ownerOf}.\\n     */\\n    function ownerOf(uint256 tokenId) public view virtual override returns (address) {\\n        address owner = _ownerOf(tokenId);\\n        require(owner != address(0), \\\"ERC721: invalid token ID\\\");\\n        return owner;\\n    }\\n\\n    /**\\n     * @dev See {IERC721Metadata-name}.\\n     */\\n    function name() public view virtual override returns (string memory) {\\n        return _name;\\n    }\\n\\n    /**\\n     * @dev See {IERC721Metadata-symbol}.\\n     */\\n    function symbol() public view virtual override returns (string memory) {\\n        return _symbol;\\n    }\\n\\n    /**\\n     * @dev See {IERC721Metadata-tokenURI}.\\n     */\\n    function tokenURI(uint256 tokenId) public view virtual override returns (string memory) {\\n        _requireMinted(tokenId);\\n\\n        string memory baseURI = _baseURI();\\n        return bytes(baseURI).length > 0 ? string(abi.encodePacked(baseURI, tokenId.toString())) : \\\"\\\";\\n    }\\n\\n    /**\\n     * @dev Base URI for computing {tokenURI}. If set, the resulting URI for each\\n     * token will be the concatenation of the `baseURI` and the `tokenId`. Empty\\n     * by default, can be overridden in child contracts.\\n     */\\n    function _baseURI() internal view virtual returns (string memory) {\\n        return \\\"\\\";\\n    }\\n\\n    /**\\n     * @dev See {IERC721-approve}.\\n     */\\n    function approve(address to, uint256 tokenId) public virtual override {\\n        address owner = ERC721.ownerOf(tokenId);\\n        require(to != owner, \\\"ERC721: approval to current owner\\\");\\n\\n        require(\\n            _msgSender() == owner || isApprovedForAll(owner, _msgSender()),\\n            \\\"ERC721: approve caller is not token owner or approved for all\\\"\\n        );\\n\\n        _approve(to, tokenId);\\n    }\\n\\n    /**\\n     * @dev See {IERC721-getApproved}.\\n     */\\n    function getApproved(uint256 tokenId) public view virtual override returns (address) {\\n        _requireMinted(tokenId);\\n\\n        return _tokenApprovals[tokenId];\\n    }\\n\\n    /**\\n     * @dev See {IERC721-setApprovalForAll}.\\n     */\\n    function setApprovalForAll(address operator, bool approved) public virtual override {\\n        _setApprovalForAll(_msgSender(), operator, approved);\\n    }\\n\\n    /**\\n     * @dev See {IERC721-isApprovedForAll}.\\n     */\\n    function isApprovedForAll(address owner, address operator) public view virtual override returns (bool) {\\n        return _operatorApprovals[owner][operator];\\n    }\\n\\n    /**\\n     * @dev See {IERC721-transferFrom}.\\n     */\\n    function transferFrom(address from, address to, uint256 tokenId) public virtual override {\\n        //solhint-disable-next-line max-line-length\\n        require(_isApprovedOrOwner(_msgSender(), tokenId), \\\"ERC721: caller is not token owner or approved\\\");\\n\\n        _transfer(from, to, tokenId);\\n    }\\n\\n    /**\\n     * @dev See {IERC721-safeTransferFrom}.\\n     */\\n    function safeTransferFrom(address from, address to, uint256 tokenId) public virtual override {\\n        safeTransferFrom(from, to, tokenId, \\\"\\\");\\n    }\\n\\n    /**\\n     * @dev See {IERC721-safeTransferFrom}.\\n     */\\n    function safeTransferFrom(address from, address to, uint256 tokenId, bytes memory data) public virtual override {\\n        require(_isApprovedOrOwner(_msgSender(), tokenId), \\\"ERC721: caller is not token owner or approved\\\");\\n        _safeTransfer(from, to, tokenId, data);\\n    }\\n\\n    /**\\n     * @dev Safely transfers `tokenId` token from `from` to `to`, checking first that contract recipients\\n     * are aware of the ERC721 protocol to prevent tokens from being forever locked.\\n     *\\n     * `data` is additional data, it has no specified format and it is sent in call to `to`.\\n     *\\n     * This internal function is equivalent to {safeTransferFrom}, and can be used to e.g.\\n     * implement alternative mechanisms to perform token transfer, such as signature-based.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must exist and be owned by `from`.\\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function _safeTransfer(address from, address to, uint256 tokenId, bytes memory data) internal virtual {\\n        _transfer(from, to, tokenId);\\n        require(_checkOnERC721Received(from, to, tokenId, data), \\\"ERC721: transfer to non ERC721Receiver implementer\\\");\\n    }\\n\\n    /**\\n     * @dev Returns the owner of the `tokenId`. Does NOT revert if token doesn't exist\\n     */\\n    function _ownerOf(uint256 tokenId) internal view virtual returns (address) {\\n        return _owners[tokenId];\\n    }\\n\\n    /**\\n     * @dev Returns whether `tokenId` exists.\\n     *\\n     * Tokens can be managed by their owner or approved accounts via {approve} or {setApprovalForAll}.\\n     *\\n     * Tokens start existing when they are minted (`_mint`),\\n     * and stop existing when they are burned (`_burn`).\\n     */\\n    function _exists(uint256 tokenId) internal view virtual returns (bool) {\\n        return _ownerOf(tokenId) != address(0);\\n    }\\n\\n    /**\\n     * @dev Returns whether `spender` is allowed to manage `tokenId`.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must exist.\\n     */\\n    function _isApprovedOrOwner(address spender, uint256 tokenId) internal view virtual returns (bool) {\\n        address owner = ERC721.ownerOf(tokenId);\\n        return (spender == owner || isApprovedForAll(owner, spender) || getApproved(tokenId) == spender);\\n    }\\n\\n    /**\\n     * @dev Safely mints `tokenId` and transfers it to `to`.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must not exist.\\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function _safeMint(address to, uint256 tokenId) internal virtual {\\n        _safeMint(to, tokenId, \\\"\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-ERC721-_safeMint-address-uint256-}[`_safeMint`], with an additional `data` parameter which is\\n     * forwarded in {IERC721Receiver-onERC721Received} to contract recipients.\\n     */\\n    function _safeMint(address to, uint256 tokenId, bytes memory data) internal virtual {\\n        _mint(to, tokenId);\\n        require(\\n            _checkOnERC721Received(address(0), to, tokenId, data),\\n            \\\"ERC721: transfer to non ERC721Receiver implementer\\\"\\n        );\\n    }\\n\\n    /**\\n     * @dev Mints `tokenId` and transfers it to `to`.\\n     *\\n     * WARNING: Usage of this method is discouraged, use {_safeMint} whenever possible\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must not exist.\\n     * - `to` cannot be the zero address.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function _mint(address to, uint256 tokenId) internal virtual {\\n        require(to != address(0), \\\"ERC721: mint to the zero address\\\");\\n        require(!_exists(tokenId), \\\"ERC721: token already minted\\\");\\n\\n        _beforeTokenTransfer(address(0), to, tokenId, 1);\\n\\n        // Check that tokenId was not minted by `_beforeTokenTransfer` hook\\n        require(!_exists(tokenId), \\\"ERC721: token already minted\\\");\\n\\n        unchecked {\\n            // Will not overflow unless all 2**256 token ids are minted to the same owner.\\n            // Given that tokens are minted one by one, it is impossible in practice that\\n            // this ever happens. Might change if we allow batch minting.\\n            // The ERC fails to describe this case.\\n            _balances[to] += 1;\\n        }\\n\\n        _owners[tokenId] = to;\\n\\n        emit Transfer(address(0), to, tokenId);\\n\\n        _afterTokenTransfer(address(0), to, tokenId, 1);\\n    }\\n\\n    /**\\n     * @dev Destroys `tokenId`.\\n     * The approval is cleared when the token is burned.\\n     * This is an internal function that does not check if the sender is authorized to operate on the token.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must exist.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function _burn(uint256 tokenId) internal virtual {\\n        address owner = ERC721.ownerOf(tokenId);\\n\\n        _beforeTokenTransfer(owner, address(0), tokenId, 1);\\n\\n        // Update ownership in case tokenId was transferred by `_beforeTokenTransfer` hook\\n        owner = ERC721.ownerOf(tokenId);\\n\\n        // Clear approvals\\n        delete _tokenApprovals[tokenId];\\n\\n        unchecked {\\n            // Cannot overflow, as that would require more tokens to be burned/transferred\\n            // out than the owner initially received through minting and transferring in.\\n            _balances[owner] -= 1;\\n        }\\n        delete _owners[tokenId];\\n\\n        emit Transfer(owner, address(0), tokenId);\\n\\n        _afterTokenTransfer(owner, address(0), tokenId, 1);\\n    }\\n\\n    /**\\n     * @dev Transfers `tokenId` from `from` to `to`.\\n     *  As opposed to {transferFrom}, this imposes no restrictions on msg.sender.\\n     *\\n     * Requirements:\\n     *\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must be owned by `from`.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function _transfer(address from, address to, uint256 tokenId) internal virtual {\\n        require(ERC721.ownerOf(tokenId) == from, \\\"ERC721: transfer from incorrect owner\\\");\\n        require(to != address(0), \\\"ERC721: transfer to the zero address\\\");\\n\\n        _beforeTokenTransfer(from, to, tokenId, 1);\\n\\n        // Check that tokenId was not transferred by `_beforeTokenTransfer` hook\\n        require(ERC721.ownerOf(tokenId) == from, \\\"ERC721: transfer from incorrect owner\\\");\\n\\n        // Clear approvals from the previous owner\\n        delete _tokenApprovals[tokenId];\\n\\n        unchecked {\\n            // `_balances[from]` cannot overflow for the same reason as described in `_burn`:\\n            // `from`'s balance is the number of token held, which is at least one before the current\\n            // transfer.\\n            // `_balances[to]` could overflow in the conditions described in `_mint`. That would require\\n            // all 2**256 token ids to be minted, which in practice is impossible.\\n            _balances[from] -= 1;\\n            _balances[to] += 1;\\n        }\\n        _owners[tokenId] = to;\\n\\n        emit Transfer(from, to, tokenId);\\n\\n        _afterTokenTransfer(from, to, tokenId, 1);\\n    }\\n\\n    /**\\n     * @dev Approve `to` to operate on `tokenId`\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function _approve(address to, uint256 tokenId) internal virtual {\\n        _tokenApprovals[tokenId] = to;\\n        emit Approval(ERC721.ownerOf(tokenId), to, tokenId);\\n    }\\n\\n    /**\\n     * @dev Approve `operator` to operate on all of `owner` tokens\\n     *\\n     * Emits an {ApprovalForAll} event.\\n     */\\n    function _setApprovalForAll(address owner, address operator, bool approved) internal virtual {\\n        require(owner != operator, \\\"ERC721: approve to caller\\\");\\n        _operatorApprovals[owner][operator] = approved;\\n        emit ApprovalForAll(owner, operator, approved);\\n    }\\n\\n    /**\\n     * @dev Reverts if the `tokenId` has not been minted yet.\\n     */\\n    function _requireMinted(uint256 tokenId) internal view virtual {\\n        require(_exists(tokenId), \\\"ERC721: invalid token ID\\\");\\n    }\\n\\n    /**\\n     * @dev Internal function to invoke {IERC721Receiver-onERC721Received} on a target address.\\n     * The call is not executed if the target address is not a contract.\\n     *\\n     * @param from address representing the previous owner of the given token ID\\n     * @param to target address that will receive the tokens\\n     * @param tokenId uint256 ID of the token to be transferred\\n     * @param data bytes optional data to send along with the call\\n     * @return bool whether the call correctly returned the expected magic value\\n     */\\n    function _checkOnERC721Received(\\n        address from,\\n        address to,\\n        uint256 tokenId,\\n        bytes memory data\\n    ) private returns (bool) {\\n        if (to.isContract()) {\\n            try IERC721Receiver(to).onERC721Received(_msgSender(), from, tokenId, data) returns (bytes4 retval) {\\n                return retval == IERC721Receiver.onERC721Received.selector;\\n            } catch (bytes memory reason) {\\n                if (reason.length == 0) {\\n                    revert(\\\"ERC721: transfer to non ERC721Receiver implementer\\\");\\n                } else {\\n                    /// @solidity memory-safe-assembly\\n                    assembly {\\n                        revert(add(32, reason), mload(reason))\\n                    }\\n                }\\n            }\\n        } else {\\n            return true;\\n        }\\n    }\\n\\n    /**\\n     * @dev Hook that is called before any token transfer. This includes minting and burning. If {ERC721Consecutive} is\\n     * used, the hook may be called as part of a consecutive (batch) mint, as indicated by `batchSize` greater than 1.\\n     *\\n     * Calling conditions:\\n     *\\n     * - When `from` and `to` are both non-zero, ``from``'s tokens will be transferred to `to`.\\n     * - When `from` is zero, the tokens will be minted for `to`.\\n     * - When `to` is zero, ``from``'s tokens will be burned.\\n     * - `from` and `to` are never both zero.\\n     * - `batchSize` is non-zero.\\n     *\\n     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\\n     */\\n    function _beforeTokenTransfer(address from, address to, uint256 firstTokenId, uint256 batchSize) internal virtual {}\\n\\n    /**\\n     * @dev Hook that is called after any token transfer. This includes minting and burning. If {ERC721Consecutive} is\\n     * used, the hook may be called as part of a consecutive (batch) mint, as indicated by `batchSize` greater than 1.\\n     *\\n     * Calling conditions:\\n     *\\n     * - When `from` and `to` are both non-zero, ``from``'s tokens were transferred to `to`.\\n     * - When `from` is zero, the tokens were minted for `to`.\\n     * - When `to` is zero, ``from``'s tokens were burned.\\n     * - `from` and `to` are never both zero.\\n     * - `batchSize` is non-zero.\\n     *\\n     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\\n     */\\n    function _afterTokenTransfer(address from, address to, uint256 firstTokenId, uint256 batchSize) internal virtual {}\\n\\n    /**\\n     * @dev Unsafe write access to the balances, used by extensions that \\\"mint\\\" tokens using an {ownerOf} override.\\n     *\\n     * WARNING: Anyone calling this MUST ensure that the balances remain consistent with the ownership. The invariant\\n     * being that for any address `a` the value returned by `balanceOf(a)` must be equal to the number of tokens such\\n     * that `ownerOf(tokenId)` is `a`.\\n     */\\n    // solhint-disable-next-line func-name-mixedcase\\n    function __unsafe_increaseBalance(address account, uint256 amount) internal {\\n        _balances[account] += amount;\\n    }\\n}\\n\"},\"@openzeppelin/contracts/utils/Context.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/Context.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract Context {\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        return msg.data;\\n    }\\n}\\n\"},\"@openzeppelin/contracts/utils/introspection/ERC165.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/introspection/ERC165.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./IERC165.sol\\\";\\n\\n/**\\n * @dev Implementation of the {IERC165} interface.\\n *\\n * Contracts that want to implement ERC165 should inherit from this contract and override {supportsInterface} to check\\n * for the additional interface id that will be supported. For example:\\n *\\n * ```solidity\\n * function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\\n *     return interfaceId == type(MyInterface).interfaceId || super.supportsInterface(interfaceId);\\n * }\\n * ```\\n *\\n * Alternatively, {ERC165Storage} provides an easier to use but more expensive implementation.\\n */\\nabstract contract ERC165 is IERC165 {\\n    /**\\n     * @dev See {IERC165-supportsInterface}.\\n     */\\n    function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\\n        return interfaceId == type(IERC165).interfaceId;\\n    }\\n}\\n\"},\"@openzeppelin/contracts/utils/Strings.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (utils/Strings.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./math/Math.sol\\\";\\nimport \\\"./math/SignedMath.sol\\\";\\n\\n/**\\n * @dev String operations.\\n */\\nlibrary Strings {\\n    bytes16 private constant _SYMBOLS = \\\"0123456789abcdef\\\";\\n    uint8 private constant _ADDRESS_LENGTH = 20;\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` decimal representation.\\n     */\\n    function toString(uint256 value) internal pure returns (string memory) {\\n        unchecked {\\n            uint256 length = Math.log10(value) + 1;\\n            string memory buffer = new string(length);\\n            uint256 ptr;\\n            /// @solidity memory-safe-assembly\\n            assembly {\\n                ptr := add(buffer, add(32, length))\\n            }\\n            while (true) {\\n                ptr--;\\n                /// @solidity memory-safe-assembly\\n                assembly {\\n                    mstore8(ptr, byte(mod(value, 10), _SYMBOLS))\\n                }\\n                value /= 10;\\n                if (value == 0) break;\\n            }\\n            return buffer;\\n        }\\n    }\\n\\n    /**\\n     * @dev Converts a `int256` to its ASCII `string` decimal representation.\\n     */\\n    function toString(int256 value) internal pure returns (string memory) {\\n        return string(abi.encodePacked(value < 0 ? \\\"-\\\" : \\\"\\\", toString(SignedMath.abs(value))));\\n    }\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation.\\n     */\\n    function toHexString(uint256 value) internal pure returns (string memory) {\\n        unchecked {\\n            return toHexString(value, Math.log256(value) + 1);\\n        }\\n    }\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation with fixed length.\\n     */\\n    function toHexString(uint256 value, uint256 length) internal pure returns (string memory) {\\n        bytes memory buffer = new bytes(2 * length + 2);\\n        buffer[0] = \\\"0\\\";\\n        buffer[1] = \\\"x\\\";\\n        for (uint256 i = 2 * length + 1; i > 1; --i) {\\n            buffer[i] = _SYMBOLS[value & 0xf];\\n            value >>= 4;\\n        }\\n        require(value == 0, \\\"Strings: hex length insufficient\\\");\\n        return string(buffer);\\n    }\\n\\n    /**\\n     * @dev Converts an `address` with fixed length of 20 bytes to its not checksummed ASCII `string` hexadecimal representation.\\n     */\\n    function toHexString(address addr) internal pure returns (string memory) {\\n        return toHexString(uint256(uint160(addr)), _ADDRESS_LENGTH);\\n    }\\n\\n    /**\\n     * @dev Returns true if the two strings are equal.\\n     */\\n    function equal(string memory a, string memory b) internal pure returns (bool) {\\n        return keccak256(bytes(a)) == keccak256(bytes(b));\\n    }\\n}\\n\"},\"@openzeppelin/contracts/utils/Address.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (utils/Address.sol)\\n\\npragma solidity ^0.8.1;\\n\\n/**\\n * @dev Collection of functions related to the address type\\n */\\nlibrary Address {\\n    /**\\n     * @dev Returns true if `account` is a contract.\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * It is unsafe to assume that an address for which this function returns\\n     * false is an externally-owned account (EOA) and not a contract.\\n     *\\n     * Among others, `isContract` will return false for the following\\n     * types of addresses:\\n     *\\n     *  - an externally-owned account\\n     *  - a contract in construction\\n     *  - an address where a contract will be created\\n     *  - an address where a contract lived, but was destroyed\\n     *\\n     * Furthermore, `isContract` will also return true if the target contract within\\n     * the same transaction is already scheduled for destruction by `SELFDESTRUCT`,\\n     * which only has an effect at the end of a transaction.\\n     * ====\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * You shouldn't rely on `isContract` to protect against flash loan attacks!\\n     *\\n     * Preventing calls from contracts is highly discouraged. It breaks composability, breaks support for smart wallets\\n     * like Gnosis Safe, and does not provide security since it can be circumvented by calling from a contract\\n     * constructor.\\n     * ====\\n     */\\n    function isContract(address account) internal view returns (bool) {\\n        // This method relies on extcodesize/address.code.length, which returns 0\\n        // for contracts in construction, since the code is only stored at the end\\n        // of the constructor execution.\\n\\n        return account.code.length > 0;\\n    }\\n\\n    /**\\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\\n     * `recipient`, forwarding all available gas and reverting on errors.\\n     *\\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\\n     * imposed by `transfer`, making them unable to receive funds via\\n     * `transfer`. {sendValue} removes this limitation.\\n     *\\n     * https://consensys.net/diligence/blog/2019/09/stop-using-soliditys-transfer-now/[Learn more].\\n     *\\n     * IMPORTANT: because control is transferred to `recipient`, care must be\\n     * taken to not create reentrancy vulnerabilities. Consider using\\n     * {ReentrancyGuard} or the\\n     * https://solidity.readthedocs.io/en/v0.8.0/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\\n     */\\n    function sendValue(address payable recipient, uint256 amount) internal {\\n        require(address(this).balance >= amount, \\\"Address: insufficient balance\\\");\\n\\n        (bool success, ) = recipient.call{value: amount}(\\\"\\\");\\n        require(success, \\\"Address: unable to send value, recipient may have reverted\\\");\\n    }\\n\\n    /**\\n     * @dev Performs a Solidity function call using a low level `call`. A\\n     * plain `call` is an unsafe replacement for a function call: use this\\n     * function instead.\\n     *\\n     * If `target` reverts with a revert reason, it is bubbled up by this\\n     * function (like regular Solidity function calls).\\n     *\\n     * Returns the raw returned data. To convert to the expected return value,\\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\\n     *\\n     * Requirements:\\n     *\\n     * - `target` must be a contract.\\n     * - calling `target` with `data` must not revert.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, \\\"Address: low-level call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\\n     * `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but also transferring `value` wei to `target`.\\n     *\\n     * Requirements:\\n     *\\n     * - the calling contract must have an ETH balance of at least `value`.\\n     * - the called Solidity function must be `payable`.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(address target, bytes memory data, uint256 value) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, value, \\\"Address: low-level call with value failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(address(this).balance >= value, \\\"Address: insufficient balance for call\\\");\\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\\n        return functionStaticCall(target, data, \\\"Address: low-level static call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        (bool success, bytes memory returndata) = target.staticcall(data);\\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionDelegateCall(target, data, \\\"Address: low-level delegate call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        (bool success, bytes memory returndata) = target.delegatecall(data);\\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Tool to verify that a low level call to smart-contract was successful, and revert (either by bubbling\\n     * the revert reason or using the provided one) in case of unsuccessful call or if target was not a contract.\\n     *\\n     * _Available since v4.8._\\n     */\\n    function verifyCallResultFromTarget(\\n        address target,\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        if (success) {\\n            if (returndata.length == 0) {\\n                // only check isContract if the call was successful and the return data is empty\\n                // otherwise we already know that it was a contract\\n                require(isContract(target), \\\"Address: call to non-contract\\\");\\n            }\\n            return returndata;\\n        } else {\\n            _revert(returndata, errorMessage);\\n        }\\n    }\\n\\n    /**\\n     * @dev Tool to verify that a low level call was successful, and revert if it wasn't, either by bubbling the\\n     * revert reason or using the provided one.\\n     *\\n     * _Available since v4.3._\\n     */\\n    function verifyCallResult(\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal pure returns (bytes memory) {\\n        if (success) {\\n            return returndata;\\n        } else {\\n            _revert(returndata, errorMessage);\\n        }\\n    }\\n\\n    function _revert(bytes memory returndata, string memory errorMessage) private pure {\\n        // Look for revert reason and bubble it up if present\\n        if (returndata.length > 0) {\\n            // The easiest way to bubble the revert reason is using memory via assembly\\n            /// @solidity memory-safe-assembly\\n            assembly {\\n                let returndata_size := mload(returndata)\\n                revert(add(32, returndata), returndata_size)\\n            }\\n        } else {\\n            revert(errorMessage);\\n        }\\n    }\\n}\\n\"},\"@openzeppelin/contracts/token/ERC721/extensions/IERC721Metadata.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (token/ERC721/extensions/IERC721Metadata.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../IERC721.sol\\\";\\n\\n/**\\n * @title ERC-721 Non-Fungible Token Standard, optional metadata extension\\n * @dev See https://eips.ethereum.org/EIPS/eip-721\\n */\\ninterface IERC721Metadata is IERC721 {\\n    /**\\n     * @dev Returns the token collection name.\\n     */\\n    function name() external view returns (string memory);\\n\\n    /**\\n     * @dev Returns the token collection symbol.\\n     */\\n    function symbol() external view returns (string memory);\\n\\n    /**\\n     * @dev Returns the Uniform Resource Identifier (URI) for `tokenId` token.\\n     */\\n    function tokenURI(uint256 tokenId) external view returns (string memory);\\n}\\n\"},\"@openzeppelin/contracts/token/ERC721/IERC721Receiver.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.6.0) (token/ERC721/IERC721Receiver.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @title ERC721 token receiver interface\\n * @dev Interface for any contract that wants to support safeTransfers\\n * from ERC721 asset contracts.\\n */\\ninterface IERC721Receiver {\\n    /**\\n     * @dev Whenever an {IERC721} `tokenId` token is transferred to this contract via {IERC721-safeTransferFrom}\\n     * by `operator` from `from`, this function is called.\\n     *\\n     * It must return its Solidity selector to confirm the token transfer.\\n     * If any other value is returned or the interface is not implemented by the recipient, the transfer will be reverted.\\n     *\\n     * The selector can be obtained in Solidity with `IERC721Receiver.onERC721Received.selector`.\\n     */\\n    function onERC721Received(\\n        address operator,\\n        address from,\\n        uint256 tokenId,\\n        bytes calldata data\\n    ) external returns (bytes4);\\n}\\n\"},\"@openzeppelin/contracts/token/ERC721/IERC721.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (token/ERC721/IERC721.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../../utils/introspection/IERC165.sol\\\";\\n\\n/**\\n * @dev Required interface of an ERC721 compliant contract.\\n */\\ninterface IERC721 is IERC165 {\\n    /**\\n     * @dev Emitted when `tokenId` token is transferred from `from` to `to`.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 indexed tokenId);\\n\\n    /**\\n     * @dev Emitted when `owner` enables `approved` to manage the `tokenId` token.\\n     */\\n    event Approval(address indexed owner, address indexed approved, uint256 indexed tokenId);\\n\\n    /**\\n     * @dev Emitted when `owner` enables or disables (`approved`) `operator` to manage all of its assets.\\n     */\\n    event ApprovalForAll(address indexed owner, address indexed operator, bool approved);\\n\\n    /**\\n     * @dev Returns the number of tokens in ``owner``'s account.\\n     */\\n    function balanceOf(address owner) external view returns (uint256 balance);\\n\\n    /**\\n     * @dev Returns the owner of the `tokenId` token.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must exist.\\n     */\\n    function ownerOf(uint256 tokenId) external view returns (address owner);\\n\\n    /**\\n     * @dev Safely transfers `tokenId` token from `from` to `to`.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must exist and be owned by `from`.\\n     * - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}.\\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function safeTransferFrom(address from, address to, uint256 tokenId, bytes calldata data) external;\\n\\n    /**\\n     * @dev Safely transfers `tokenId` token from `from` to `to`, checking first that contract recipients\\n     * are aware of the ERC721 protocol to prevent tokens from being forever locked.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must exist and be owned by `from`.\\n     * - If the caller is not `from`, it must have been allowed to move this token by either {approve} or {setApprovalForAll}.\\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function safeTransferFrom(address from, address to, uint256 tokenId) external;\\n\\n    /**\\n     * @dev Transfers `tokenId` token from `from` to `to`.\\n     *\\n     * WARNING: Note that the caller is responsible to confirm that the recipient is capable of receiving ERC721\\n     * or else they may be permanently lost. Usage of {safeTransferFrom} prevents loss, though the caller must\\n     * understand this adds an external call which potentially creates a reentrancy vulnerability.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must be owned by `from`.\\n     * - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(address from, address to, uint256 tokenId) external;\\n\\n    /**\\n     * @dev Gives permission to `to` to transfer `tokenId` token to another account.\\n     * The approval is cleared when the token is transferred.\\n     *\\n     * Only a single account can be approved at a time, so approving the zero address clears previous approvals.\\n     *\\n     * Requirements:\\n     *\\n     * - The caller must own the token or be an approved operator.\\n     * - `tokenId` must exist.\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address to, uint256 tokenId) external;\\n\\n    /**\\n     * @dev Approve or remove `operator` as an operator for the caller.\\n     * Operators can call {transferFrom} or {safeTransferFrom} for any token owned by the caller.\\n     *\\n     * Requirements:\\n     *\\n     * - The `operator` cannot be the caller.\\n     *\\n     * Emits an {ApprovalForAll} event.\\n     */\\n    function setApprovalForAll(address operator, bool approved) external;\\n\\n    /**\\n     * @dev Returns the account approved for `tokenId` token.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must exist.\\n     */\\n    function getApproved(uint256 tokenId) external view returns (address operator);\\n\\n    /**\\n     * @dev Returns if the `operator` is allowed to manage all of the assets of `owner`.\\n     *\\n     * See {setApprovalForAll}\\n     */\\n    function isApprovedForAll(address owner, address operator) external view returns (bool);\\n}\\n\"},\"@openzeppelin/contracts/utils/introspection/IERC165.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/introspection/IERC165.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC165 standard, as defined in the\\n * https://eips.ethereum.org/EIPS/eip-165[EIP].\\n *\\n * Implementers can declare support of contract interfaces, which can then be\\n * queried by others ({ERC165Checker}).\\n *\\n * For an implementation, see {ERC165}.\\n */\\ninterface IERC165 {\\n    /**\\n     * @dev Returns true if this contract implements the interface defined by\\n     * `interfaceId`. See the corresponding\\n     * https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[EIP section]\\n     * to learn more about how these ids are created.\\n     *\\n     * This function call must use less than 30 000 gas.\\n     */\\n    function supportsInterface(bytes4 interfaceId) external view returns (bool);\\n}\\n\"},\"@openzeppelin/contracts/utils/math/SignedMath.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.8.0) (utils/math/SignedMath.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Standard signed math utilities missing in the Solidity language.\\n */\\nlibrary SignedMath {\\n    /**\\n     * @dev Returns the largest of two signed numbers.\\n     */\\n    function max(int256 a, int256 b) internal pure returns (int256) {\\n        return a > b ? a : b;\\n    }\\n\\n    /**\\n     * @dev Returns the smallest of two signed numbers.\\n     */\\n    function min(int256 a, int256 b) internal pure returns (int256) {\\n        return a < b ? a : b;\\n    }\\n\\n    /**\\n     * @dev Returns the average of two signed numbers without overflow.\\n     * The result is rounded towards zero.\\n     */\\n    function average(int256 a, int256 b) internal pure returns (int256) {\\n        // Formula from the book \\\"Hacker's Delight\\\"\\n        int256 x = (a & b) + ((a ^ b) >> 1);\\n        return x + (int256(uint256(x) >> 255) & (a ^ b));\\n    }\\n\\n    /**\\n     * @dev Returns the absolute unsigned value of a signed value.\\n     */\\n    function abs(int256 n) internal pure returns (uint256) {\\n        unchecked {\\n            // must be unchecked in order to support `n = type(int256).min`\\n            return uint256(n >= 0 ? n : -n);\\n        }\\n    }\\n}\\n\"},\"@openzeppelin/contracts/utils/math/Math.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (utils/math/Math.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Standard math utilities missing in the Solidity language.\\n */\\nlibrary Math {\\n    enum Rounding {\\n        Down, // Toward negative infinity\\n        Up, // Toward infinity\\n        Zero // Toward zero\\n    }\\n\\n    /**\\n     * @dev Returns the largest of two numbers.\\n     */\\n    function max(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a > b ? a : b;\\n    }\\n\\n    /**\\n     * @dev Returns the smallest of two numbers.\\n     */\\n    function min(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a < b ? a : b;\\n    }\\n\\n    /**\\n     * @dev Returns the average of two numbers. The result is rounded towards\\n     * zero.\\n     */\\n    function average(uint256 a, uint256 b) internal pure returns (uint256) {\\n        // (a + b) / 2 can overflow.\\n        return (a & b) + (a ^ b) / 2;\\n    }\\n\\n    /**\\n     * @dev Returns the ceiling of the division of two numbers.\\n     *\\n     * This differs from standard division with `/` in that it rounds up instead\\n     * of rounding down.\\n     */\\n    function ceilDiv(uint256 a, uint256 b) internal pure returns (uint256) {\\n        // (a + b - 1) / b can overflow on addition, so we distribute.\\n        return a == 0 ? 0 : (a - 1) / b + 1;\\n    }\\n\\n    /**\\n     * @notice Calculates floor(x * y / denominator) with full precision. Throws if result overflows a uint256 or denominator == 0\\n     * @dev Original credit to Remco Bloemen under MIT license (https://xn--2-umb.com/21/muldiv)\\n     * with further edits by Uniswap Labs also under MIT license.\\n     */\\n    function mulDiv(uint256 x, uint256 y, uint256 denominator) internal pure returns (uint256 result) {\\n        unchecked {\\n            // 512-bit multiply [prod1 prod0] = x * y. Compute the product mod 2^256 and mod 2^256 - 1, then use\\n            // use the Chinese Remainder Theorem to reconstruct the 512 bit result. The result is stored in two 256\\n            // variables such that product = prod1 * 2^256 + prod0.\\n            uint256 prod0; // Least significant 256 bits of the product\\n            uint256 prod1; // Most significant 256 bits of the product\\n            assembly {\\n                let mm := mulmod(x, y, not(0))\\n                prod0 := mul(x, y)\\n                prod1 := sub(sub(mm, prod0), lt(mm, prod0))\\n            }\\n\\n            // Handle non-overflow cases, 256 by 256 division.\\n            if (prod1 == 0) {\\n                // Solidity will revert if denominator == 0, unlike the div opcode on its own.\\n                // The surrounding unchecked block does not change this fact.\\n                // See https://docs.soliditylang.org/en/latest/control-structures.html#checked-or-unchecked-arithmetic.\\n                return prod0 / denominator;\\n            }\\n\\n            // Make sure the result is less than 2^256. Also prevents denominator == 0.\\n            require(denominator > prod1, \\\"Math: mulDiv overflow\\\");\\n\\n            ///////////////////////////////////////////////\\n            // 512 by 256 division.\\n            ///////////////////////////////////////////////\\n\\n            // Make division exact by subtracting the remainder from [prod1 prod0].\\n            uint256 remainder;\\n            assembly {\\n                // Compute remainder using mulmod.\\n                remainder := mulmod(x, y, denominator)\\n\\n                // Subtract 256 bit number from 512 bit number.\\n                prod1 := sub(prod1, gt(remainder, prod0))\\n                prod0 := sub(prod0, remainder)\\n            }\\n\\n            // Factor powers of two out of denominator and compute largest power of two divisor of denominator. Always >= 1.\\n            // See https://cs.stackexchange.com/q/138556/92363.\\n\\n            // Does not overflow because the denominator cannot be zero at this stage in the function.\\n            uint256 twos = denominator & (~denominator + 1);\\n            assembly {\\n                // Divide denominator by twos.\\n                denominator := div(denominator, twos)\\n\\n                // Divide [prod1 prod0] by twos.\\n                prod0 := div(prod0, twos)\\n\\n                // Flip twos such that it is 2^256 / twos. If twos is zero, then it becomes one.\\n                twos := add(div(sub(0, twos), twos), 1)\\n            }\\n\\n            // Shift in bits from prod1 into prod0.\\n            prod0 |= prod1 * twos;\\n\\n            // Invert denominator mod 2^256. Now that denominator is an odd number, it has an inverse modulo 2^256 such\\n            // that denominator * inv = 1 mod 2^256. Compute the inverse by starting with a seed that is correct for\\n            // four bits. That is, denominator * inv = 1 mod 2^4.\\n            uint256 inverse = (3 * denominator) ^ 2;\\n\\n            // Use the Newton-Raphson iteration to improve the precision. Thanks to Hensel's lifting lemma, this also works\\n            // in modular arithmetic, doubling the correct bits in each step.\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^8\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^16\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^32\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^64\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^128\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^256\\n\\n            // Because the division is now exact we can divide by multiplying with the modular inverse of denominator.\\n            // This will give us the correct result modulo 2^256. Since the preconditions guarantee that the outcome is\\n            // less than 2^256, this is the final result. We don't need to compute the high bits of the result and prod1\\n            // is no longer required.\\n            result = prod0 * inverse;\\n            return result;\\n        }\\n    }\\n\\n    /**\\n     * @notice Calculates x * y / denominator with full precision, following the selected rounding direction.\\n     */\\n    function mulDiv(uint256 x, uint256 y, uint256 denominator, Rounding rounding) internal pure returns (uint256) {\\n        uint256 result = mulDiv(x, y, denominator);\\n        if (rounding == Rounding.Up && mulmod(x, y, denominator) > 0) {\\n            result += 1;\\n        }\\n        return result;\\n    }\\n\\n    /**\\n     * @dev Returns the square root of a number. If the number is not a perfect square, the value is rounded down.\\n     *\\n     * Inspired by Henry S. Warren, Jr.'s \\\"Hacker's Delight\\\" (Chapter 11).\\n     */\\n    function sqrt(uint256 a) internal pure returns (uint256) {\\n        if (a == 0) {\\n            return 0;\\n        }\\n\\n        // For our first guess, we get the biggest power of 2 which is smaller than the square root of the target.\\n        //\\n        // We know that the \\\"msb\\\" (most significant bit) of our target number `a` is a power of 2 such that we have\\n        // `msb(a) <= a < 2*msb(a)`. This value can be written `msb(a)=2**k` with `k=log2(a)`.\\n        //\\n        // This can be rewritten `2**log2(a) <= a < 2**(log2(a) + 1)`\\n        // → `sqrt(2**k) <= sqrt(a) < sqrt(2**(k+1))`\\n        // → `2**(k/2) <= sqrt(a) < 2**((k+1)/2) <= 2**(k/2 + 1)`\\n        //\\n        // Consequently, `2**(log2(a) / 2)` is a good first approximation of `sqrt(a)` with at least 1 correct bit.\\n        uint256 result = 1 << (log2(a) >> 1);\\n\\n        // At this point `result` is an estimation with one bit of precision. We know the true value is a uint128,\\n        // since it is the square root of a uint256. Newton's method converges quadratically (precision doubles at\\n        // every iteration). We thus need at most 7 iteration to turn our partial result with one bit of precision\\n        // into the expected uint128 result.\\n        unchecked {\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            return min(result, a / result);\\n        }\\n    }\\n\\n    /**\\n     * @notice Calculates sqrt(a), following the selected rounding direction.\\n     */\\n    function sqrt(uint256 a, Rounding rounding) internal pure returns (uint256) {\\n        unchecked {\\n            uint256 result = sqrt(a);\\n            return result + (rounding == Rounding.Up && result * result < a ? 1 : 0);\\n        }\\n    }\\n\\n    /**\\n     * @dev Return the log in base 2, rounded down, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log2(uint256 value) internal pure returns (uint256) {\\n        uint256 result = 0;\\n        unchecked {\\n            if (value >> 128 > 0) {\\n                value >>= 128;\\n                result += 128;\\n            }\\n            if (value >> 64 > 0) {\\n                value >>= 64;\\n                result += 64;\\n            }\\n            if (value >> 32 > 0) {\\n                value >>= 32;\\n                result += 32;\\n            }\\n            if (value >> 16 > 0) {\\n                value >>= 16;\\n                result += 16;\\n            }\\n            if (value >> 8 > 0) {\\n                value >>= 8;\\n                result += 8;\\n            }\\n            if (value >> 4 > 0) {\\n                value >>= 4;\\n                result += 4;\\n            }\\n            if (value >> 2 > 0) {\\n                value >>= 2;\\n                result += 2;\\n            }\\n            if (value >> 1 > 0) {\\n                result += 1;\\n            }\\n        }\\n        return result;\\n    }\\n\\n    /**\\n     * @dev Return the log in base 2, following the selected rounding direction, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log2(uint256 value, Rounding rounding) internal pure returns (uint256) {\\n        unchecked {\\n            uint256 result = log2(value);\\n            return result + (rounding == Rounding.Up && 1 << result < value ? 1 : 0);\\n        }\\n    }\\n\\n    /**\\n     * @dev Return the log in base 10, rounded down, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log10(uint256 value) internal pure returns (uint256) {\\n        uint256 result = 0;\\n        unchecked {\\n            if (value >= 10 ** 64) {\\n                value /= 10 ** 64;\\n                result += 64;\\n            }\\n            if (value >= 10 ** 32) {\\n                value /= 10 ** 32;\\n                result += 32;\\n            }\\n            if (value >= 10 ** 16) {\\n                value /= 10 ** 16;\\n                result += 16;\\n            }\\n            if (value >= 10 ** 8) {\\n                value /= 10 ** 8;\\n                result += 8;\\n            }\\n            if (value >= 10 ** 4) {\\n                value /= 10 ** 4;\\n                result += 4;\\n            }\\n            if (value >= 10 ** 2) {\\n                value /= 10 ** 2;\\n                result += 2;\\n            }\\n            if (value >= 10 ** 1) {\\n                result += 1;\\n            }\\n        }\\n        return result;\\n    }\\n\\n    /**\\n     * @dev Return the log in base 10, following the selected rounding direction, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log10(uint256 value, Rounding rounding) internal pure returns (uint256) {\\n        unchecked {\\n            uint256 result = log10(value);\\n            return result + (rounding == Rounding.Up && 10 ** result < value ? 1 : 0);\\n        }\\n    }\\n\\n    /**\\n     * @dev Return the log in base 256, rounded down, of a positive value.\\n     * Returns 0 if given 0.\\n     *\\n     * Adding one to the result gives the number of pairs of hex symbols needed to represent `value` as a hex string.\\n     */\\n    function log256(uint256 value) internal pure returns (uint256) {\\n        uint256 result = 0;\\n        unchecked {\\n            if (value >> 128 > 0) {\\n                value >>= 128;\\n                result += 16;\\n            }\\n            if (value >> 64 > 0) {\\n                value >>= 64;\\n                result += 8;\\n            }\\n            if (value >> 32 > 0) {\\n                value >>= 32;\\n                result += 4;\\n            }\\n            if (value >> 16 > 0) {\\n                value >>= 16;\\n                result += 2;\\n            }\\n            if (value >> 8 > 0) {\\n                result += 1;\\n            }\\n        }\\n        return result;\\n    }\\n\\n    /**\\n     * @dev Return the log in base 256, following the selected rounding direction, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log256(uint256 value, Rounding rounding) internal pure returns (uint256) {\\n        unchecked {\\n            uint256 result = log256(value);\\n            return result + (rounding == Rounding.Up && 1 << (result << 3) < value ? 1 : 0);\\n        }\\n    }\\n}\\n\"}},\"settings\":{\"optimizer\":{\"enabled\":false,\"runs\":200},\"outputSelection\":{\"*\":{\"\":[\"ast\"],\"*\":[\"abi\",\"metadata\",\"devdoc\",\"userdoc\",\"storageLayout\",\"evm.legacyAssembly\",\"evm.bytecode\",\"evm.deployedBytecode\",\"evm.methodIdentifiers\",\"evm.gasEstimates\",\"evm.assembly\"]}}}}",
	"name": "Bitsurance",
	"metadata": "{\"compiler\":{\"version\":\"0.8.18+commit.87f61d96\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"date\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"vaultAddress\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"NFT_address\",\"type\":\"address\"}],\"name\":\"VaultCreated\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"adminToNFTContracts\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"NFTContractAddress\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_tokenID\",\"type\":\"uint256\"}],\"name\":\"claim\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_NFTContractAddress\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_minTime\",\"type\":\"uint256\"}],\"name\":\"createVault\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"NFTContractAddress\",\"type\":\"address\"},{\"internalType\":\"uint256[]\",\"name\":\"_tokenIDs\",\"type\":\"uint256[]\"},{\"internalType\":\"uint256[]\",\"name\":\"amounts\",\"type\":\"uint256[]\"}],\"name\":\"depositFunds\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"NFTContractAddress\",\"type\":\"address\"}],\"name\":\"getContractAddress\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getVaultDetails\",\"outputs\":[{\"components\":[{\"internalType\":\"uint256\",\"name\":\"totalBalance\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"minimumWithdrawTime\",\"type\":\"uint256\"},{\"internalType\":\"uint256[]\",\"name\":\"insuredTokenIds\",\"type\":\"uint256[]\"},{\"internalType\":\"address\",\"name\":\"nftContractAddress\",\"type\":\"address\"}],\"internalType\":\"struct Bitsurance.VaultDetails[]\",\"name\":\"\",\"type\":\"tuple[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"vaultAddress\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"NFTContractAddress\",\"type\":\"address\"},{\"internalType\":\"uint256[]\",\"name\":\"tokenIDs\",\"type\":\"uint256[]\"}],\"name\":\"withdrawFunds\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"}],\"devdoc\":{\"details\":\"Bitsurance contract that interacts with Vaults and manages the creation and operations on them\",\"kind\":\"dev\",\"methods\":{\"claim(address,uint256)\":{\"details\":\"Function to claim a Token ID from a vault\",\"params\":{\"NFTContractAddress\":\"address of the NFT contract\",\"_tokenID\":\"Token ID to claim\"}},\"createVault(address,uint256)\":{\"details\":\"Function to create a new vault\",\"params\":{\"_NFTContractAddress\":\"address of the NFT contract\",\"_minTime\":\"minimum time before withdrawal\"}},\"depositFunds(address,uint256[],uint256[])\":{\"details\":\"Function to deposit funds into a vault\",\"params\":{\"NFTContractAddress\":\"address of the NFT contract\",\"_tokenIDs\":\"Array of Token IDs for deposit\",\"amounts\":\"Array of corresponding amounts for deposit\"}},\"getContractAddress(address)\":{\"details\":\"Function to get the contract address of the vault\",\"params\":{\"NFTContractAddress\":\"address of the NFT contract\"},\"returns\":{\"_0\":\"Address of the vault contract\"}},\"getVaultDetails()\":{\"details\":\"Function to get details of all vaults associated with the caller\",\"returns\":{\"_0\":\"An array of structures containing the total balance of each vault, minimum time before withdraw,  array of token ids insured, and the associated NFT contract address\"}},\"withdrawFunds(address,uint256[])\":{\"details\":\"Function to withdraw funds from a vault\",\"params\":{\"NFTContractAddress\":\"address of the NFT contract\",\"tokenIDs\":\"Array of Token IDs for withdrawal\"}}},\"title\":\"Bitsurance\",\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"BitSurance.sol\":\"Bitsurance\"},\"evmVersion\":\"paris\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\"},\"optimizer\":{\"enabled\":false,\"runs\":200},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts/token/ERC721/ERC721.sol\":{\"keccak256\":\"0x2c309e7df9e05e6ce15bedfe74f3c61b467fc37e0fae9eab496acf5ea0bbd7ff\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://7063b5c98711a98018ba4635ac74cee1c1cfa2ea01099498e062699ed9530005\",\"dweb:/ipfs/QmeJ8rGXkcv7RrqLdAW8PCXPAykxVsddfYY6g5NaTwmRFE\"]},\"@openzeppelin/contracts/token/ERC721/IERC721.sol\":{\"keccak256\":\"0x5bce51e11f7d194b79ea59fe00c9e8de9fa2c5530124960f29a24d4c740a3266\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://7e66dfde185df46104c11bc89d08fa0760737aa59a2b8546a656473d810a8ea4\",\"dweb:/ipfs/QmXvyqtXPaPss2PD7eqPoSao5Szm2n6UMoiG8TZZDjmChR\"]},\"@openzeppelin/contracts/token/ERC721/IERC721Receiver.sol\":{\"keccak256\":\"0xa82b58eca1ee256be466e536706850163d2ec7821945abd6b4778cfb3bee37da\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://6e75cf83beb757b8855791088546b8337e9d4684e169400c20d44a515353b708\",\"dweb:/ipfs/QmYvPafLfoquiDMEj7CKHtvbgHu7TJNPSVPSCjrtjV8HjV\"]},\"@openzeppelin/contracts/token/ERC721/extensions/ERC721Burnable.sol\":{\"keccak256\":\"0x52da94e59d870f54ca0eb4f485c3d9602011f668ba34d72c88124a1496ebaab1\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://09656a37963a61e79df0b718ad0ec323cd29d409d6ead33dbb91d0770ff87fa4\",\"dweb:/ipfs/QmXLWCYoMpZ4SecK4kVaL53LZWXZNbQG8gUzACmZ6A64rE\"]},\"@openzeppelin/contracts/token/ERC721/extensions/IERC721Metadata.sol\":{\"keccak256\":\"0x75b829ff2f26c14355d1cba20e16fe7b29ca58eb5fef665ede48bc0f9c6c74b9\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://a0a107160525724f9e1bbbab031defc2f298296dd9e331f16a6f7130cec32146\",\"dweb:/ipfs/QmemujxSd7gX8A9M8UwmNbz4Ms3U9FG9QfudUgxwvTmPWf\"]},\"@openzeppelin/contracts/utils/Address.sol\":{\"keccak256\":\"0x006dd67219697fe68d7fbfdea512e7c4cb64a43565ed86171d67e844982da6fa\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://2455248c8ddd9cc6a7af76a13973cddf222072427e7b0e2a7d1aff345145e931\",\"dweb:/ipfs/QmfYjnjRbWqYpuxurqveE6HtzsY1Xx323J428AKQgtBJZm\"]},\"@openzeppelin/contracts/utils/Context.sol\":{\"keccak256\":\"0xe2e337e6dde9ef6b680e07338c493ebea1b5fd09b43424112868e9cc1706bca7\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://6df0ddf21ce9f58271bdfaa85cde98b200ef242a05a3f85c2bc10a8294800a92\",\"dweb:/ipfs/QmRK2Y5Yc6BK7tGKkgsgn3aJEQGi5aakeSPZvS65PV8Xp3\"]},\"@openzeppelin/contracts/utils/Strings.sol\":{\"keccak256\":\"0x3088eb2868e8d13d89d16670b5f8612c4ab9ff8956272837d8e90106c59c14a0\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://b81d9ff6559ea5c47fc573e17ece6d9ba5d6839e213e6ebc3b4c5c8fe4199d7f\",\"dweb:/ipfs/QmPCW1bFisUzJkyjroY3yipwfism9RRCigCcK1hbXtVM8n\"]},\"@openzeppelin/contracts/utils/introspection/ERC165.sol\":{\"keccak256\":\"0xd10975de010d89fd1c78dc5e8a9a7e7f496198085c151648f20cba166b32582b\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://fb0048dee081f6fffa5f74afc3fb328483c2a30504e94a0ddd2a5114d731ec4d\",\"dweb:/ipfs/QmZptt1nmYoA5SgjwnSgWqgUSDgm4q52Yos3xhnMv3MV43\"]},\"@openzeppelin/contracts/utils/introspection/IERC165.sol\":{\"keccak256\":\"0x447a5f3ddc18419d41ff92b3773fb86471b1db25773e07f877f548918a185bf1\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://be161e54f24e5c6fae81a12db1a8ae87bc5ae1b0ddc805d82a1440a68455088f\",\"dweb:/ipfs/QmP7C3CHdY9urF4dEMb9wmsp1wMxHF6nhA2yQE5SKiPAdy\"]},\"@openzeppelin/contracts/utils/math/Math.sol\":{\"keccak256\":\"0xe4455ac1eb7fc497bb7402579e7b4d64d928b846fce7d2b6fde06d366f21c2b3\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://cc8841b3cd48ad125e2f46323c8bad3aa0e88e399ec62acb9e57efa7e7c8058c\",\"dweb:/ipfs/QmSqE4mXHA2BXW58deDbXE8MTcsL5JSKNDbm23sVQxRLPS\"]},\"@openzeppelin/contracts/utils/math/SignedMath.sol\":{\"keccak256\":\"0xf92515413956f529d95977adc9b0567d583c6203fc31ab1c23824c35187e3ddc\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://c50fcc459e49a9858b6d8ad5f911295cb7c9ab57567845a250bf0153f84a95c7\",\"dweb:/ipfs/QmcEW85JRzvDkQggxiBBLVAasXWdkhEysqypj9EaB6H2g6\"]},\"BitSurance.sol\":{\"keccak256\":\"0xaf0b8acc678d0f8a2e6ce0ddefebcda7d7e972884322b5be80920564fb5b72a0\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://596ecf5a8d6156be323ba0d23d35907e95e876a1f05a42decadeaff175e7f490\",\"dweb:/ipfs/QmNefnsVjHB99R52UJWfsowDevTcbvGYce4AEJt4PvJreG\"]}},\"version\":1}",
	"bytecode": {
		"functionDebugData": {},
		"generatedSources": [],
		"linkReferences": {},
		"object": "608060405234801561001057600080fd5b506134c4806100206000396000f3fe608060405260043610620000865760003560e01c80637f30952311620000555780637f3095231462000171578063a3648ec01462000191578063aad3ec9614620001b1578063f7c7349014620001d15762000086565b80631cb3d314146200008b578063533092ef14620000cf5780635f76dfc014620000ff578063622bc90e146200012d575b600080fd5b3480156200009857600080fd5b50620000b76004803603810190620000b19190620013c4565b62000215565b604051620000c6919062001407565b60405180910390f35b348015620000dc57600080fd5b50620000e762000248565b604051620000f6919062001648565b60405180910390f35b3480156200010c57600080fd5b506200012b60048036038101906200012591906200169d565b620005af565b005b3480156200013a57600080fd5b50620001596004803603810190620001539190620013c4565b62000884565b60405162000168919062001407565b60405180910390f35b6200018f600480360381019062000189919062001859565b620008ed565b005b620001af6004803603810190620001a99190620018f3565b62000cb7565b005b620001cf6004803603810190620001c991906200169d565b62000ef5565b005b348015620001de57600080fd5b50620001fd6004803603810190620001f791906200169d565b620012b0565b6040516200020c919062001407565b60405180910390f35b60016020528060005260406000206000915054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b60606000600260003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000208054806020026020016040519081016040528092919081815260200182805480156200030d57602002820191906000526020600020905b8160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019060010190808311620002c2575b505050505090506000815167ffffffffffffffff811115620003345762000333620016fa565b5b6040519080825280602002602001820160405280156200037157816020015b6200035d620012ff565b815260200190600190039081620003535790505b50905060005b8251811015620005a6576000600160008584815181106200039d576200039c62001959565b5b602002602001015173ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16905060008173ffffffffffffffffffffffffffffffffffffffff166367f718a96040518163ffffffff1660e01b8152600401600060405180830381865afa15801562000450573d6000803e3d6000fd5b505050506040513d6000823e3d601f19601f820116820180604052508101906200047b919062001a46565b9050600060405180608001604052808473ffffffffffffffffffffffffffffffffffffffff163181526020018473ffffffffffffffffffffffffffffffffffffffff16631aa430786040518163ffffffff1660e01b8152600401602060405180830381865afa158015620004f3573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019062000519919062001a97565b600262000527919062001af8565b815260200183815260200187868151811062000548576200054762001959565b5b602002602001015173ffffffffffffffffffffffffffffffffffffffff1681525090508085858151811062000582576200058162001959565b5b602002602001018190525050505080806200059d9062001b43565b91505062000377565b50809250505090565b600073ffffffffffffffffffffffffffffffffffffffff16600160008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff161462000680576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401620006779062001c17565b60405180910390fd5b600082823360405162000693906200133d565b620006a19392919062001c4a565b604051809103906000f080158015620006be573d6000803e3d6000fd5b5090506000819080600181540180825580915050600190039060005260206000200160009091909190916101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555080600160008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff160217905550600260003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020839080600181540180825580915050600190039060005260206000200160009091909190916101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055507fa8596cc4a052ecc7656e9ca0fb7a10472573699e3aa34ac5659bc37c1b0a44fc428285604051620008779392919062001c87565b60405180910390a1505050565b6000600160008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff169050919050565b600073ffffffffffffffffffffffffffffffffffffffff16600160008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1603620009be576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401620009b59062001d3a565b60405180910390fd5b805182511462000a05576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401620009fc9062001dac565b60405180910390fd5b6000349050600062000a178562000884565b905060008190503373ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff1663f851a4406040518163ffffffff1660e01b8152600401602060405180830381865afa15801562000a81573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019062000aa7919062001de5565b73ffffffffffffffffffffffffffffffffffffffff161462000b00576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040162000af79062001e8d565b60405180910390fd5b6000805b865181101562000b515785818151811062000b245762000b2362001959565b5b60200260200101518262000b39919062001eaf565b9150808062000b489062001b43565b91505062000b04565b5080841462000b97576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040162000b8e9062001f3a565b60405180910390fd5b60005b865181101562000c65578273ffffffffffffffffffffffffffffffffffffffff1663a40398a688838151811062000bd65762000bd562001959565b5b602002602001015188848151811062000bf45762000bf362001959565b5b60200260200101516040518363ffffffff1660e01b815260040162000c1b92919062001f5c565b600060405180830381600087803b15801562000c3657600080fd5b505af115801562000c4b573d6000803e3d6000fd5b50505050808062000c5c9062001b43565b91505062000b9a565b508273ffffffffffffffffffffffffffffffffffffffff166108fc829081150290604051600060405180830381858888f1935050505015801562000cad573d6000803e3d6000fd5b5050505050505050565b600073ffffffffffffffffffffffffffffffffffffffff16600160008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff160362000d88576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040162000d7f9062001d3a565b60405180910390fd5b600062000d958362000884565b905060008190503373ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff1663f851a4406040518163ffffffff1660e01b8152600401602060405180830381865afa15801562000dff573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019062000e25919062001de5565b73ffffffffffffffffffffffffffffffffffffffff161462000e7e576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040162000e759062001fff565b60405180910390fd5b8073ffffffffffffffffffffffffffffffffffffffff16638293744b33856040518363ffffffff1660e01b815260040162000ebb929190620020c1565b600060405180830381600087803b15801562000ed657600080fd5b505af115801562000eeb573d6000803e3d6000fd5b5050505050505050565b600073ffffffffffffffffffffffffffffffffffffffff16600160008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff160362000fc6576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040162000fbd9062001d3a565b60405180910390fd5b6000829050600062000fd88462000884565b905060008273ffffffffffffffffffffffffffffffffffffffff16636352211e856040518263ffffffff1660e01b8152600401620010179190620020f5565b602060405180830381865afa15801562001035573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906200105b919062001de5565b90503373ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff1614620010ce576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401620010c59062002188565b60405180910390fd5b3073ffffffffffffffffffffffffffffffffffffffff168373ffffffffffffffffffffffffffffffffffffffff1663081812fc866040518263ffffffff1660e01b8152600401620011209190620020f5565b602060405180830381865afa1580156200113e573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019062001164919062001de5565b73ffffffffffffffffffffffffffffffffffffffff1614620011bd576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401620011b49062002220565b60405180910390fd5b8273ffffffffffffffffffffffffffffffffffffffff166342966c68856040518263ffffffff1660e01b8152600401620011f89190620020f5565b600060405180830381600087803b1580156200121357600080fd5b505af115801562001228573d6000803e3d6000fd5b50505050600033905060008390508073ffffffffffffffffffffffffffffffffffffffff1663ed2b40ea83886040518363ffffffff1660e01b81526004016200127392919062002242565b600060405180830381600087803b1580156200128e57600080fd5b505af1158015620012a3573d6000803e3d6000fd5b5050505050505050505050565b60026020528160005260406000208181548110620012cd57600080fd5b906000526020600020016000915091509054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b6040518060800160405280600081526020016000815260200160608152602001600073ffffffffffffffffffffffffffffffffffffffff1681525090565b61121f806200227083390190565b6000604051905090565b600080fd5b600080fd5b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b60006200138c826200135f565b9050919050565b6200139e816200137f565b8114620013aa57600080fd5b50565b600081359050620013be8162001393565b92915050565b600060208284031215620013dd57620013dc62001355565b5b6000620013ed84828501620013ad565b91505092915050565b62001401816200137f565b82525050565b60006020820190506200141e6000830184620013f6565b92915050565b600081519050919050565b600082825260208201905092915050565b6000819050602082019050919050565b6000819050919050565b620014658162001450565b82525050565b600081519050919050565b600082825260208201905092915050565b6000819050602082019050919050565b6000620014a583836200145a565b60208301905092915050565b6000602082019050919050565b6000620014cb826200146b565b620014d7818562001476565b9350620014e48362001487565b8060005b838110156200151b578151620014ff888262001497565b97506200150c83620014b1565b925050600181019050620014e8565b5085935050505092915050565b62001533816200137f565b82525050565b60006080830160008301516200155360008601826200145a565b5060208301516200156860208601826200145a565b5060408301518482036040860152620015828282620014be565b915050606083015162001599606086018262001528565b508091505092915050565b6000620015b2838362001539565b905092915050565b6000602082019050919050565b6000620015d48262001424565b620015e081856200142f565b935083602082028501620015f48562001440565b8060005b85811015620016365784840389528151620016148582620015a4565b94506200162183620015ba565b925060208a01995050600181019050620015f8565b50829750879550505050505092915050565b60006020820190508181036000830152620016648184620015c7565b905092915050565b620016778162001450565b81146200168357600080fd5b50565b60008135905062001697816200166c565b92915050565b60008060408385031215620016b757620016b662001355565b5b6000620016c785828601620013ad565b9250506020620016da8582860162001686565b9150509250929050565b600080fd5b6000601f19601f8301169050919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b6200173482620016e9565b810181811067ffffffffffffffff82111715620017565762001755620016fa565b5b80604052505050565b60006200176b6200134b565b905062001779828262001729565b919050565b600067ffffffffffffffff8211156200179c576200179b620016fa565b5b602082029050602081019050919050565b600080fd5b6000620017c9620017c3846200177e565b6200175f565b90508083825260208201905060208402830185811115620017ef57620017ee620017ad565b5b835b818110156200181c578062001807888262001686565b845260208401935050602081019050620017f1565b5050509392505050565b600082601f8301126200183e576200183d620016e4565b5b813562001850848260208601620017b2565b91505092915050565b60008060006060848603121562001875576200187462001355565b5b60006200188586828701620013ad565b935050602084013567ffffffffffffffff811115620018a957620018a86200135a565b5b620018b78682870162001826565b925050604084013567ffffffffffffffff811115620018db57620018da6200135a565b5b620018e98682870162001826565b9150509250925092565b600080604083850312156200190d576200190c62001355565b5b60006200191d85828601620013ad565b925050602083013567ffffffffffffffff8111156200194157620019406200135a565b5b6200194f8582860162001826565b9150509250929050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b60008151905062001999816200166c565b92915050565b6000620019b6620019b0846200177e565b6200175f565b90508083825260208201905060208402830185811115620019dc57620019db620017ad565b5b835b8181101562001a095780620019f4888262001988565b845260208401935050602081019050620019de565b5050509392505050565b600082601f83011262001a2b5762001a2a620016e4565b5b815162001a3d8482602086016200199f565b91505092915050565b60006020828403121562001a5f5762001a5e62001355565b5b600082015167ffffffffffffffff81111562001a805762001a7f6200135a565b5b62001a8e8482850162001a13565b91505092915050565b60006020828403121562001ab05762001aaf62001355565b5b600062001ac08482850162001988565b91505092915050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b600062001b058262001450565b915062001b128362001450565b925082820262001b228162001450565b9150828204841483151762001b3c5762001b3b62001ac9565b5b5092915050565b600062001b508262001450565b91507fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff820362001b855762001b8462001ac9565b5b600182019050919050565b600082825260208201905092915050565b7f5661756c7420616c72656164792065786973747320666f722074686973204e4660008201527f5420636f6e747261637400000000000000000000000000000000000000000000602082015250565b600062001bff602a8362001b90565b915062001c0c8262001ba1565b604082019050919050565b6000602082019050818103600083015262001c328162001bf0565b9050919050565b62001c448162001450565b82525050565b600060608201905062001c616000830186620013f6565b62001c70602083018562001c39565b62001c7f6040830184620013f6565b949350505050565b600060608201905062001c9e600083018662001c39565b62001cad6020830185620013f6565b62001cbc6040830184620013f6565b949350505050565b7f5661756c7420646f6573206e6f742065786973747320666f722074686973204e60008201527f465420636f6e7472616374000000000000000000000000000000000000000000602082015250565b600062001d22602b8362001b90565b915062001d2f8262001cc4565b604082019050919050565b6000602082019050818103600083015262001d558162001d13565b9050919050565b7f4d69736d61746368656420617272617973000000000000000000000000000000600082015250565b600062001d9460118362001b90565b915062001da18262001d5c565b602082019050919050565b6000602082019050818103600083015262001dc78162001d85565b9050919050565b60008151905062001ddf8162001393565b92915050565b60006020828403121562001dfe5762001dfd62001355565b5b600062001e0e8482850162001dce565b91505092915050565b7f4f6e6c792074686520706572736f6e2077686f2063726561746564207661756c60008201527f742063616e206465706f7369742066756e647320696e746f2069740000000000602082015250565b600062001e75603b8362001b90565b915062001e828262001e17565b604082019050919050565b6000602082019050818103600083015262001ea88162001e66565b9050919050565b600062001ebc8262001450565b915062001ec98362001450565b925082820190508082111562001ee45762001ee362001ac9565b5b92915050565b7f4d69736d61746368656420746f74616c206465706f73697420616d6f756e7400600082015250565b600062001f22601f8362001b90565b915062001f2f8262001eea565b602082019050919050565b6000602082019050818103600083015262001f558162001f13565b9050919050565b600060408201905062001f73600083018562001c39565b62001f82602083018462001c39565b9392505050565b7f4f6e6c792074686520706572736f6e2077686f2063726561746564207661756c60008201527f742063616e2077697468647261772066756e6473000000000000000000000000602082015250565b600062001fe760348362001b90565b915062001ff48262001f89565b604082019050919050565b600060208201905081810360008301526200201a8162001fd8565b9050919050565b60006200202e826200135f565b9050919050565b620020408162002021565b82525050565b600082825260208201905092915050565b600062002064826200146b565b62002070818562002046565b93506200207d8362001487565b8060005b83811015620020b457815162002098888262001497565b9750620020a583620014b1565b92505060018101905062002081565b5085935050505092915050565b6000604082019050620020d8600083018562002035565b8181036020830152620020ec818462002057565b90509392505050565b60006020820190506200210c600083018462001c39565b92915050565b7f596f7520617265206e6f7420746865206f776e6572206f66207468697320746f60008201527f6b656e2100000000000000000000000000000000000000000000000000000000602082015250565b60006200217060248362001b90565b91506200217d8262002112565b604082019050919050565b60006020820190508181036000830152620021a38162002161565b9050919050565b7f436f6e7472616374206e6f7420617070726f76656420746f206275726e20746f60008201527f6b656e0000000000000000000000000000000000000000000000000000000000602082015250565b60006200220860238362001b90565b91506200221582620021aa565b604082019050919050565b600060208201905081810360008301526200223b81620021f9565b9050919050565b600060408201905062002259600083018562002035565b62002268602083018462001c39565b939250505056fe60806040523480156200001157600080fd5b506040516200121f3803806200121f8339818101604052810190620000379190620001b5565b826000806101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055508160028190555080600560006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055504260038190555033600460006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555050505062000211565b600080fd5b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b6000620001428262000115565b9050919050565b620001548162000135565b81146200016057600080fd5b50565b600081519050620001748162000149565b92915050565b6000819050919050565b6200018f816200017a565b81146200019b57600080fd5b50565b600081519050620001af8162000184565b92915050565b600080600060608486031215620001d157620001d062000110565b5b6000620001e18682870162000163565b9350506020620001f4868287016200019e565b9250506040620002078682870162000163565b9150509250925092565b610ffe80620002216000396000f3fe6080604052600436106100a05760003560e01c80638293744b116100645780638293744b14610192578063a40398a6146101ae578063d58778d6146101d7578063d8270dce14610214578063ed2b40ea1461023f578063f851a4401461025b576100a7565b80631aa43078146100a957806331c2273b146100d4578063505658d9146100ff5780635e4f6cab1461012a57806367f718a914610167576100a7565b366100a757005b005b3480156100b557600080fd5b506100be610286565b6040516100cb91906108a0565b60405180910390f35b3480156100e057600080fd5b506100e961028c565b6040516100f691906108fc565b60405180910390f35b34801561010b57600080fd5b506101146102b0565b60405161012191906108fc565b60405180910390f35b34801561013657600080fd5b50610151600480360381019061014c9190610957565b6102d6565b60405161015e91906108a0565b60405180910390f35b34801561017357600080fd5b5061017c6102ee565b6040516101899190610a42565b60405180910390f35b6101ac60048036038101906101a79190610bfb565b610346565b005b3480156101ba57600080fd5b506101d560048036038101906101d09190610c57565b61057f565b005b3480156101e357600080fd5b506101fe60048036038101906101f99190610957565b610682565b60405161020b91906108a0565b60405180910390f35b34801561022057600080fd5b506102296106a6565b60405161023691906108a0565b60405180910390f35b61025960048036038101906102549190610c97565b6106ac565b005b34801561026757600080fd5b50610270610861565b60405161027d91906108fc565b60405180910390f35b60025481565b60008054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b600460009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b60016020528060005260406000206000915090505481565b6060600680548060200260200160405190810160405280929190818152602001828054801561033c57602002820191906000526020600020905b815481526020019060010190808311610328575b5050505050905090565b600460009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff16146103d6576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016103cd90610d5a565b60405180910390fd5b60025460026103e59190610da9565b600354426103f39190610deb565b1015610434576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161042b90610e91565b60405180910390fd5b6000805b82518110156105325760006001600085848151811061045a57610459610eb1565b5b6020026020010151815260200190815260200160002054116104b1576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016104a890610f2c565b60405180910390fd5b600160008483815181106104c8576104c7610eb1565b5b6020026020010151815260200190815260200160002054826104ea9190610f4c565b915060006001600085848151811061050557610504610eb1565b5b6020026020010151815260200190815260200160002081905550808061052a90610f80565b915050610438565b508273ffffffffffffffffffffffffffffffffffffffff166108fc829081150290604051600060405180830381858888f19350505050158015610579573d6000803e3d6000fd5b50505050565b600460009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff161461060f576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161060690610d5a565b60405180910390fd5b60006001600084815260200190815260200160002054036106545760068290806001815401808255809150506001900390600052602060002001600090919091909150555b806001600084815260200190815260200160002060008282546106779190610f4c565b925050819055505050565b6006818154811061069257600080fd5b906000526020600020016000915090505481565b60035481565b600460009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff161461073c576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161073390610d5a565b60405180910390fd5b6000600160008381526020019081526020016000205411610792576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161078990610f2c565b60405180910390fd5b600254600354426107a39190610deb565b10156107e4576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016107db90610e91565b60405180910390fd5b600060016000838152602001908152602001600020549050600060016000848152602001908152602001600020819055508273ffffffffffffffffffffffffffffffffffffffff166108fc829081150290604051600060405180830381858888f1935050505015801561085b573d6000803e3d6000fd5b50505050565b600560009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b6000819050919050565b61089a81610887565b82525050565b60006020820190506108b56000830184610891565b92915050565b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b60006108e6826108bb565b9050919050565b6108f6816108db565b82525050565b600060208201905061091160008301846108ed565b92915050565b6000604051905090565b600080fd5b600080fd5b61093481610887565b811461093f57600080fd5b50565b6000813590506109518161092b565b92915050565b60006020828403121561096d5761096c610921565b5b600061097b84828501610942565b91505092915050565b600081519050919050565b600082825260208201905092915050565b6000819050602082019050919050565b6109b981610887565b82525050565b60006109cb83836109b0565b60208301905092915050565b6000602082019050919050565b60006109ef82610984565b6109f9818561098f565b9350610a04836109a0565b8060005b83811015610a35578151610a1c88826109bf565b9750610a27836109d7565b925050600181019050610a08565b5085935050505092915050565b60006020820190508181036000830152610a5c81846109e4565b905092915050565b6000610a6f826108bb565b9050919050565b610a7f81610a64565b8114610a8a57600080fd5b50565b600081359050610a9c81610a76565b92915050565b600080fd5b6000601f19601f8301169050919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b610af082610aa7565b810181811067ffffffffffffffff82111715610b0f57610b0e610ab8565b5b80604052505050565b6000610b22610917565b9050610b2e8282610ae7565b919050565b600067ffffffffffffffff821115610b4e57610b4d610ab8565b5b602082029050602081019050919050565b600080fd5b6000610b77610b7284610b33565b610b18565b90508083825260208201905060208402830185811115610b9a57610b99610b5f565b5b835b81811015610bc35780610baf8882610942565b845260208401935050602081019050610b9c565b5050509392505050565b600082601f830112610be257610be1610aa2565b5b8135610bf2848260208601610b64565b91505092915050565b60008060408385031215610c1257610c11610921565b5b6000610c2085828601610a8d565b925050602083013567ffffffffffffffff811115610c4157610c40610926565b5b610c4d85828601610bcd565b9150509250929050565b60008060408385031215610c6e57610c6d610921565b5b6000610c7c85828601610942565b9250506020610c8d85828601610942565b9150509250929050565b60008060408385031215610cae57610cad610921565b5b6000610cbc85828601610a8d565b9250506020610ccd85828601610942565b9150509250929050565b600082825260208201905092915050565b7f4f6e6c7920426974737572616e636520636f6e74726163742063616e2063616c60008201527f6c20746869732066756e6374696f6e0000000000000000000000000000000000602082015250565b6000610d44602f83610cd7565b9150610d4f82610ce8565b604082019050919050565b60006020820190508181036000830152610d7381610d37565b9050919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b6000610db482610887565b9150610dbf83610887565b9250828202610dcd81610887565b91508282048414831517610de457610de3610d7a565b5b5092915050565b6000610df682610887565b9150610e0183610887565b9250828203905081811115610e1957610e18610d7a565b5b92915050565b7f43616e6e6f74206163636573732066756e6374696f6e206265666f726520746860008201527f65206d696e696d756d2074696d65206861732070617373656400000000000000602082015250565b6000610e7b603983610cd7565b9150610e8682610e1f565b604082019050919050565b60006020820190508181036000830152610eaa81610e6e565b9050919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b7f4e6f2062616c616e636520666f72207468697320746f6b656e49440000000000600082015250565b6000610f16601b83610cd7565b9150610f2182610ee0565b602082019050919050565b60006020820190508181036000830152610f4581610f09565b9050919050565b6000610f5782610887565b9150610f6283610887565b9250828201905080821115610f7a57610f79610d7a565b5b92915050565b6000610f8b82610887565b91507fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff8203610fbd57610fbc610d7a565b5b60018201905091905056fea264697066735822122011a10ff03714d958d5e29459cfbe1e6c94ebc24593150cd74968d15922ca2c4964736f6c63430008120033a2646970667358221220f9d91ebbc88cb5d1f59f55bb9a1a28895dbc444bd4b85d62c925d516aa83f4fc64736f6c63430008120033",
		"opcodes": "PUSH1 0x80 PUSH1 0x40 MSTORE CALLVALUE DUP1 ISZERO PUSH2 0x10 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x34C4 DUP1 PUSH2 0x20 PUSH1 0x0 CODECOPY PUSH1 0x0 RETURN INVALID PUSH1 0x80 PUSH1 0x40 MSTORE PUSH1 0x4 CALLDATASIZE LT PUSH3 0x86 JUMPI PUSH1 0x0 CALLDATALOAD PUSH1 0xE0 SHR DUP1 PUSH4 0x7F309523 GT PUSH3 0x55 JUMPI DUP1 PUSH4 0x7F309523 EQ PUSH3 0x171 JUMPI DUP1 PUSH4 0xA3648EC0 EQ PUSH3 0x191 JUMPI DUP1 PUSH4 0xAAD3EC96 EQ PUSH3 0x1B1 JUMPI DUP1 PUSH4 0xF7C73490 EQ PUSH3 0x1D1 JUMPI PUSH3 0x86 JUMP JUMPDEST DUP1 PUSH4 0x1CB3D314 EQ PUSH3 0x8B JUMPI DUP1 PUSH4 0x533092EF EQ PUSH3 0xCF JUMPI DUP1 PUSH4 0x5F76DFC0 EQ PUSH3 0xFF JUMPI DUP1 PUSH4 0x622BC90E EQ PUSH3 0x12D JUMPI JUMPDEST PUSH1 0x0 DUP1 REVERT JUMPDEST CALLVALUE DUP1 ISZERO PUSH3 0x98 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH3 0xB7 PUSH1 0x4 DUP1 CALLDATASIZE SUB DUP2 ADD SWAP1 PUSH3 0xB1 SWAP2 SWAP1 PUSH3 0x13C4 JUMP JUMPDEST PUSH3 0x215 JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH3 0xC6 SWAP2 SWAP1 PUSH3 0x1407 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 RETURN JUMPDEST CALLVALUE DUP1 ISZERO PUSH3 0xDC JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH3 0xE7 PUSH3 0x248 JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH3 0xF6 SWAP2 SWAP1 PUSH3 0x1648 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 RETURN JUMPDEST CALLVALUE DUP1 ISZERO PUSH3 0x10C JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH3 0x12B PUSH1 0x4 DUP1 CALLDATASIZE SUB DUP2 ADD SWAP1 PUSH3 0x125 SWAP2 SWAP1 PUSH3 0x169D JUMP JUMPDEST PUSH3 0x5AF JUMP JUMPDEST STOP JUMPDEST CALLVALUE DUP1 ISZERO PUSH3 0x13A JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH3 0x159 PUSH1 0x4 DUP1 CALLDATASIZE SUB DUP2 ADD SWAP1 PUSH3 0x153 SWAP2 SWAP1 PUSH3 0x13C4 JUMP JUMPDEST PUSH3 0x884 JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH3 0x168 SWAP2 SWAP1 PUSH3 0x1407 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 RETURN JUMPDEST PUSH3 0x18F PUSH1 0x4 DUP1 CALLDATASIZE SUB DUP2 ADD SWAP1 PUSH3 0x189 SWAP2 SWAP1 PUSH3 0x1859 JUMP JUMPDEST PUSH3 0x8ED JUMP JUMPDEST STOP JUMPDEST PUSH3 0x1AF PUSH1 0x4 DUP1 CALLDATASIZE SUB DUP2 ADD SWAP1 PUSH3 0x1A9 SWAP2 SWAP1 PUSH3 0x18F3 JUMP JUMPDEST PUSH3 0xCB7 JUMP JUMPDEST STOP JUMPDEST PUSH3 0x1CF PUSH1 0x4 DUP1 CALLDATASIZE SUB DUP2 ADD SWAP1 PUSH3 0x1C9 SWAP2 SWAP1 PUSH3 0x169D JUMP JUMPDEST PUSH3 0xEF5 JUMP JUMPDEST STOP JUMPDEST CALLVALUE DUP1 ISZERO PUSH3 0x1DE JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH3 0x1FD PUSH1 0x4 DUP1 CALLDATASIZE SUB DUP2 ADD SWAP1 PUSH3 0x1F7 SWAP2 SWAP1 PUSH3 0x169D JUMP JUMPDEST PUSH3 0x12B0 JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH3 0x20C SWAP2 SWAP1 PUSH3 0x1407 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 RETURN JUMPDEST PUSH1 0x1 PUSH1 0x20 MSTORE DUP1 PUSH1 0x0 MSTORE PUSH1 0x40 PUSH1 0x0 KECCAK256 PUSH1 0x0 SWAP2 POP SLOAD SWAP1 PUSH2 0x100 EXP SWAP1 DIV PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP2 JUMP JUMPDEST PUSH1 0x60 PUSH1 0x0 PUSH1 0x2 PUSH1 0x0 CALLER PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP2 MSTORE PUSH1 0x20 ADD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 KECCAK256 DUP1 SLOAD DUP1 PUSH1 0x20 MUL PUSH1 0x20 ADD PUSH1 0x40 MLOAD SWAP1 DUP2 ADD PUSH1 0x40 MSTORE DUP1 SWAP3 SWAP2 SWAP1 DUP2 DUP2 MSTORE PUSH1 0x20 ADD DUP3 DUP1 SLOAD DUP1 ISZERO PUSH3 0x30D JUMPI PUSH1 0x20 MUL DUP3 ADD SWAP2 SWAP1 PUSH1 0x0 MSTORE PUSH1 0x20 PUSH1 0x0 KECCAK256 SWAP1 JUMPDEST DUP2 PUSH1 0x0 SWAP1 SLOAD SWAP1 PUSH2 0x100 EXP SWAP1 DIV PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP2 MSTORE PUSH1 0x20 ADD SWAP1 PUSH1 0x1 ADD SWAP1 DUP1 DUP4 GT PUSH3 0x2C2 JUMPI JUMPDEST POP POP POP POP POP SWAP1 POP PUSH1 0x0 DUP2 MLOAD PUSH8 0xFFFFFFFFFFFFFFFF DUP2 GT ISZERO PUSH3 0x334 JUMPI PUSH3 0x333 PUSH3 0x16FA JUMP JUMPDEST JUMPDEST PUSH1 0x40 MLOAD SWAP1 DUP1 DUP3 MSTORE DUP1 PUSH1 0x20 MUL PUSH1 0x20 ADD DUP3 ADD PUSH1 0x40 MSTORE DUP1 ISZERO PUSH3 0x371 JUMPI DUP2 PUSH1 0x20 ADD JUMPDEST PUSH3 0x35D PUSH3 0x12FF JUMP JUMPDEST DUP2 MSTORE PUSH1 0x20 ADD SWAP1 PUSH1 0x1 SWAP1 SUB SWAP1 DUP2 PUSH3 0x353 JUMPI SWAP1 POP JUMPDEST POP SWAP1 POP PUSH1 0x0 JUMPDEST DUP3 MLOAD DUP2 LT ISZERO PUSH3 0x5A6 JUMPI PUSH1 0x0 PUSH1 0x1 PUSH1 0x0 DUP6 DUP5 DUP2 MLOAD DUP2 LT PUSH3 0x39D JUMPI PUSH3 0x39C PUSH3 0x1959 JUMP JUMPDEST JUMPDEST PUSH1 0x20 MUL PUSH1 0x20 ADD ADD MLOAD PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP2 MSTORE PUSH1 0x20 ADD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 KECCAK256 PUSH1 0x0 SWAP1 SLOAD SWAP1 PUSH2 0x100 EXP SWAP1 DIV PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND SWAP1 POP PUSH1 0x0 DUP2 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH4 0x67F718A9 PUSH1 0x40 MLOAD DUP2 PUSH4 0xFFFFFFFF AND PUSH1 0xE0 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH1 0x0 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 DUP7 GAS STATICCALL ISZERO DUP1 ISZERO PUSH3 0x450 JUMPI RETURNDATASIZE PUSH1 0x0 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH1 0x0 REVERT JUMPDEST POP POP POP POP PUSH1 0x40 MLOAD RETURNDATASIZE PUSH1 0x0 DUP3 RETURNDATACOPY RETURNDATASIZE PUSH1 0x1F NOT PUSH1 0x1F DUP3 ADD AND DUP3 ADD DUP1 PUSH1 0x40 MSTORE POP DUP2 ADD SWAP1 PUSH3 0x47B SWAP2 SWAP1 PUSH3 0x1A46 JUMP JUMPDEST SWAP1 POP PUSH1 0x0 PUSH1 0x40 MLOAD DUP1 PUSH1 0x80 ADD PUSH1 0x40 MSTORE DUP1 DUP5 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND BALANCE DUP2 MSTORE PUSH1 0x20 ADD DUP5 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH4 0x1AA43078 PUSH1 0x40 MLOAD DUP2 PUSH4 0xFFFFFFFF AND PUSH1 0xE0 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH1 0x20 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 DUP7 GAS STATICCALL ISZERO DUP1 ISZERO PUSH3 0x4F3 JUMPI RETURNDATASIZE PUSH1 0x0 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH1 0x0 REVERT JUMPDEST POP POP POP POP PUSH1 0x40 MLOAD RETURNDATASIZE PUSH1 0x1F NOT PUSH1 0x1F DUP3 ADD AND DUP3 ADD DUP1 PUSH1 0x40 MSTORE POP DUP2 ADD SWAP1 PUSH3 0x519 SWAP2 SWAP1 PUSH3 0x1A97 JUMP JUMPDEST PUSH1 0x2 PUSH3 0x527 SWAP2 SWAP1 PUSH3 0x1AF8 JUMP JUMPDEST DUP2 MSTORE PUSH1 0x20 ADD DUP4 DUP2 MSTORE PUSH1 0x20 ADD DUP8 DUP7 DUP2 MLOAD DUP2 LT PUSH3 0x548 JUMPI PUSH3 0x547 PUSH3 0x1959 JUMP JUMPDEST JUMPDEST PUSH1 0x20 MUL PUSH1 0x20 ADD ADD MLOAD PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP2 MSTORE POP SWAP1 POP DUP1 DUP6 DUP6 DUP2 MLOAD DUP2 LT PUSH3 0x582 JUMPI PUSH3 0x581 PUSH3 0x1959 JUMP JUMPDEST JUMPDEST PUSH1 0x20 MUL PUSH1 0x20 ADD ADD DUP2 SWAP1 MSTORE POP POP POP POP DUP1 DUP1 PUSH3 0x59D SWAP1 PUSH3 0x1B43 JUMP JUMPDEST SWAP2 POP POP PUSH3 0x377 JUMP JUMPDEST POP DUP1 SWAP3 POP POP POP SWAP1 JUMP JUMPDEST PUSH1 0x0 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH1 0x1 PUSH1 0x0 DUP5 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP2 MSTORE PUSH1 0x20 ADD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 KECCAK256 PUSH1 0x0 SWAP1 SLOAD SWAP1 PUSH2 0x100 EXP SWAP1 DIV PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND EQ PUSH3 0x680 JUMPI PUSH1 0x40 MLOAD PUSH32 0x8C379A000000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD PUSH3 0x677 SWAP1 PUSH3 0x1C17 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST PUSH1 0x0 DUP3 DUP3 CALLER PUSH1 0x40 MLOAD PUSH3 0x693 SWAP1 PUSH3 0x133D JUMP JUMPDEST PUSH3 0x6A1 SWAP4 SWAP3 SWAP2 SWAP1 PUSH3 0x1C4A JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 PUSH1 0x0 CREATE DUP1 ISZERO DUP1 ISZERO PUSH3 0x6BE JUMPI RETURNDATASIZE PUSH1 0x0 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH1 0x0 REVERT JUMPDEST POP SWAP1 POP PUSH1 0x0 DUP2 SWAP1 DUP1 PUSH1 0x1 DUP2 SLOAD ADD DUP1 DUP3 SSTORE DUP1 SWAP2 POP POP PUSH1 0x1 SWAP1 SUB SWAP1 PUSH1 0x0 MSTORE PUSH1 0x20 PUSH1 0x0 KECCAK256 ADD PUSH1 0x0 SWAP1 SWAP2 SWAP1 SWAP2 SWAP1 SWAP2 PUSH2 0x100 EXP DUP2 SLOAD DUP2 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF MUL NOT AND SWAP1 DUP4 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND MUL OR SWAP1 SSTORE POP DUP1 PUSH1 0x1 PUSH1 0x0 DUP6 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP2 MSTORE PUSH1 0x20 ADD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 KECCAK256 PUSH1 0x0 PUSH2 0x100 EXP DUP2 SLOAD DUP2 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF MUL NOT AND SWAP1 DUP4 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND MUL OR SWAP1 SSTORE POP PUSH1 0x2 PUSH1 0x0 CALLER PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP2 MSTORE PUSH1 0x20 ADD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 KECCAK256 DUP4 SWAP1 DUP1 PUSH1 0x1 DUP2 SLOAD ADD DUP1 DUP3 SSTORE DUP1 SWAP2 POP POP PUSH1 0x1 SWAP1 SUB SWAP1 PUSH1 0x0 MSTORE PUSH1 0x20 PUSH1 0x0 KECCAK256 ADD PUSH1 0x0 SWAP1 SWAP2 SWAP1 SWAP2 SWAP1 SWAP2 PUSH2 0x100 EXP DUP2 SLOAD DUP2 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF MUL NOT AND SWAP1 DUP4 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND MUL OR SWAP1 SSTORE POP PUSH32 0xA8596CC4A052ECC7656E9CA0FB7A10472573699E3AA34AC5659BC37C1B0A44FC TIMESTAMP DUP3 DUP6 PUSH1 0x40 MLOAD PUSH3 0x877 SWAP4 SWAP3 SWAP2 SWAP1 PUSH3 0x1C87 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 LOG1 POP POP POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x1 PUSH1 0x0 DUP4 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP2 MSTORE PUSH1 0x20 ADD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 KECCAK256 PUSH1 0x0 SWAP1 SLOAD SWAP1 PUSH2 0x100 EXP SWAP1 DIV PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH1 0x1 PUSH1 0x0 DUP6 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP2 MSTORE PUSH1 0x20 ADD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 KECCAK256 PUSH1 0x0 SWAP1 SLOAD SWAP1 PUSH2 0x100 EXP SWAP1 DIV PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND SUB PUSH3 0x9BE JUMPI PUSH1 0x40 MLOAD PUSH32 0x8C379A000000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD PUSH3 0x9B5 SWAP1 PUSH3 0x1D3A JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST DUP1 MLOAD DUP3 MLOAD EQ PUSH3 0xA05 JUMPI PUSH1 0x40 MLOAD PUSH32 0x8C379A000000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD PUSH3 0x9FC SWAP1 PUSH3 0x1DAC JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST PUSH1 0x0 CALLVALUE SWAP1 POP PUSH1 0x0 PUSH3 0xA17 DUP6 PUSH3 0x884 JUMP JUMPDEST SWAP1 POP PUSH1 0x0 DUP2 SWAP1 POP CALLER PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP2 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH4 0xF851A440 PUSH1 0x40 MLOAD DUP2 PUSH4 0xFFFFFFFF AND PUSH1 0xE0 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH1 0x20 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 DUP7 GAS STATICCALL ISZERO DUP1 ISZERO PUSH3 0xA81 JUMPI RETURNDATASIZE PUSH1 0x0 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH1 0x0 REVERT JUMPDEST POP POP POP POP PUSH1 0x40 MLOAD RETURNDATASIZE PUSH1 0x1F NOT PUSH1 0x1F DUP3 ADD AND DUP3 ADD DUP1 PUSH1 0x40 MSTORE POP DUP2 ADD SWAP1 PUSH3 0xAA7 SWAP2 SWAP1 PUSH3 0x1DE5 JUMP JUMPDEST PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND EQ PUSH3 0xB00 JUMPI PUSH1 0x40 MLOAD PUSH32 0x8C379A000000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD PUSH3 0xAF7 SWAP1 PUSH3 0x1E8D JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST PUSH1 0x0 DUP1 JUMPDEST DUP7 MLOAD DUP2 LT ISZERO PUSH3 0xB51 JUMPI DUP6 DUP2 DUP2 MLOAD DUP2 LT PUSH3 0xB24 JUMPI PUSH3 0xB23 PUSH3 0x1959 JUMP JUMPDEST JUMPDEST PUSH1 0x20 MUL PUSH1 0x20 ADD ADD MLOAD DUP3 PUSH3 0xB39 SWAP2 SWAP1 PUSH3 0x1EAF JUMP JUMPDEST SWAP2 POP DUP1 DUP1 PUSH3 0xB48 SWAP1 PUSH3 0x1B43 JUMP JUMPDEST SWAP2 POP POP PUSH3 0xB04 JUMP JUMPDEST POP DUP1 DUP5 EQ PUSH3 0xB97 JUMPI PUSH1 0x40 MLOAD PUSH32 0x8C379A000000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD PUSH3 0xB8E SWAP1 PUSH3 0x1F3A JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST PUSH1 0x0 JUMPDEST DUP7 MLOAD DUP2 LT ISZERO PUSH3 0xC65 JUMPI DUP3 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH4 0xA40398A6 DUP9 DUP4 DUP2 MLOAD DUP2 LT PUSH3 0xBD6 JUMPI PUSH3 0xBD5 PUSH3 0x1959 JUMP JUMPDEST JUMPDEST PUSH1 0x20 MUL PUSH1 0x20 ADD ADD MLOAD DUP9 DUP5 DUP2 MLOAD DUP2 LT PUSH3 0xBF4 JUMPI PUSH3 0xBF3 PUSH3 0x1959 JUMP JUMPDEST JUMPDEST PUSH1 0x20 MUL PUSH1 0x20 ADD ADD MLOAD PUSH1 0x40 MLOAD DUP4 PUSH4 0xFFFFFFFF AND PUSH1 0xE0 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH3 0xC1B SWAP3 SWAP2 SWAP1 PUSH3 0x1F5C JUMP JUMPDEST PUSH1 0x0 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 PUSH1 0x0 DUP8 DUP1 EXTCODESIZE ISZERO DUP1 ISZERO PUSH3 0xC36 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP GAS CALL ISZERO DUP1 ISZERO PUSH3 0xC4B JUMPI RETURNDATASIZE PUSH1 0x0 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH1 0x0 REVERT JUMPDEST POP POP POP POP DUP1 DUP1 PUSH3 0xC5C SWAP1 PUSH3 0x1B43 JUMP JUMPDEST SWAP2 POP POP PUSH3 0xB9A JUMP JUMPDEST POP DUP3 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH2 0x8FC DUP3 SWAP1 DUP2 ISZERO MUL SWAP1 PUSH1 0x40 MLOAD PUSH1 0x0 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 DUP6 DUP9 DUP9 CALL SWAP4 POP POP POP POP ISZERO DUP1 ISZERO PUSH3 0xCAD JUMPI RETURNDATASIZE PUSH1 0x0 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH1 0x0 REVERT JUMPDEST POP POP POP POP POP POP POP POP JUMP JUMPDEST PUSH1 0x0 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH1 0x1 PUSH1 0x0 DUP5 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP2 MSTORE PUSH1 0x20 ADD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 KECCAK256 PUSH1 0x0 SWAP1 SLOAD SWAP1 PUSH2 0x100 EXP SWAP1 DIV PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND SUB PUSH3 0xD88 JUMPI PUSH1 0x40 MLOAD PUSH32 0x8C379A000000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD PUSH3 0xD7F SWAP1 PUSH3 0x1D3A JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST PUSH1 0x0 PUSH3 0xD95 DUP4 PUSH3 0x884 JUMP JUMPDEST SWAP1 POP PUSH1 0x0 DUP2 SWAP1 POP CALLER PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP2 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH4 0xF851A440 PUSH1 0x40 MLOAD DUP2 PUSH4 0xFFFFFFFF AND PUSH1 0xE0 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH1 0x20 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 DUP7 GAS STATICCALL ISZERO DUP1 ISZERO PUSH3 0xDFF JUMPI RETURNDATASIZE PUSH1 0x0 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH1 0x0 REVERT JUMPDEST POP POP POP POP PUSH1 0x40 MLOAD RETURNDATASIZE PUSH1 0x1F NOT PUSH1 0x1F DUP3 ADD AND DUP3 ADD DUP1 PUSH1 0x40 MSTORE POP DUP2 ADD SWAP1 PUSH3 0xE25 SWAP2 SWAP1 PUSH3 0x1DE5 JUMP JUMPDEST PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND EQ PUSH3 0xE7E JUMPI PUSH1 0x40 MLOAD PUSH32 0x8C379A000000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD PUSH3 0xE75 SWAP1 PUSH3 0x1FFF JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST DUP1 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH4 0x8293744B CALLER DUP6 PUSH1 0x40 MLOAD DUP4 PUSH4 0xFFFFFFFF AND PUSH1 0xE0 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH3 0xEBB SWAP3 SWAP2 SWAP1 PUSH3 0x20C1 JUMP JUMPDEST PUSH1 0x0 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 PUSH1 0x0 DUP8 DUP1 EXTCODESIZE ISZERO DUP1 ISZERO PUSH3 0xED6 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP GAS CALL ISZERO DUP1 ISZERO PUSH3 0xEEB JUMPI RETURNDATASIZE PUSH1 0x0 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH1 0x0 REVERT JUMPDEST POP POP POP POP POP POP POP POP JUMP JUMPDEST PUSH1 0x0 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH1 0x1 PUSH1 0x0 DUP5 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP2 MSTORE PUSH1 0x20 ADD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 KECCAK256 PUSH1 0x0 SWAP1 SLOAD SWAP1 PUSH2 0x100 EXP SWAP1 DIV PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND SUB PUSH3 0xFC6 JUMPI PUSH1 0x40 MLOAD PUSH32 0x8C379A000000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD PUSH3 0xFBD SWAP1 PUSH3 0x1D3A JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST PUSH1 0x0 DUP3 SWAP1 POP PUSH1 0x0 PUSH3 0xFD8 DUP5 PUSH3 0x884 JUMP JUMPDEST SWAP1 POP PUSH1 0x0 DUP3 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH4 0x6352211E DUP6 PUSH1 0x40 MLOAD DUP3 PUSH4 0xFFFFFFFF AND PUSH1 0xE0 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH3 0x1017 SWAP2 SWAP1 PUSH3 0x20F5 JUMP JUMPDEST PUSH1 0x20 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 DUP7 GAS STATICCALL ISZERO DUP1 ISZERO PUSH3 0x1035 JUMPI RETURNDATASIZE PUSH1 0x0 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH1 0x0 REVERT JUMPDEST POP POP POP POP PUSH1 0x40 MLOAD RETURNDATASIZE PUSH1 0x1F NOT PUSH1 0x1F DUP3 ADD AND DUP3 ADD DUP1 PUSH1 0x40 MSTORE POP DUP2 ADD SWAP1 PUSH3 0x105B SWAP2 SWAP1 PUSH3 0x1DE5 JUMP JUMPDEST SWAP1 POP CALLER PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP2 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND EQ PUSH3 0x10CE JUMPI PUSH1 0x40 MLOAD PUSH32 0x8C379A000000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD PUSH3 0x10C5 SWAP1 PUSH3 0x2188 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST ADDRESS PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP4 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH4 0x81812FC DUP7 PUSH1 0x40 MLOAD DUP3 PUSH4 0xFFFFFFFF AND PUSH1 0xE0 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH3 0x1120 SWAP2 SWAP1 PUSH3 0x20F5 JUMP JUMPDEST PUSH1 0x20 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 DUP7 GAS STATICCALL ISZERO DUP1 ISZERO PUSH3 0x113E JUMPI RETURNDATASIZE PUSH1 0x0 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH1 0x0 REVERT JUMPDEST POP POP POP POP PUSH1 0x40 MLOAD RETURNDATASIZE PUSH1 0x1F NOT PUSH1 0x1F DUP3 ADD AND DUP3 ADD DUP1 PUSH1 0x40 MSTORE POP DUP2 ADD SWAP1 PUSH3 0x1164 SWAP2 SWAP1 PUSH3 0x1DE5 JUMP JUMPDEST PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND EQ PUSH3 0x11BD JUMPI PUSH1 0x40 MLOAD PUSH32 0x8C379A000000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD PUSH3 0x11B4 SWAP1 PUSH3 0x2220 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST DUP3 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH4 0x42966C68 DUP6 PUSH1 0x40 MLOAD DUP3 PUSH4 0xFFFFFFFF AND PUSH1 0xE0 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH3 0x11F8 SWAP2 SWAP1 PUSH3 0x20F5 JUMP JUMPDEST PUSH1 0x0 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 PUSH1 0x0 DUP8 DUP1 EXTCODESIZE ISZERO DUP1 ISZERO PUSH3 0x1213 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP GAS CALL ISZERO DUP1 ISZERO PUSH3 0x1228 JUMPI RETURNDATASIZE PUSH1 0x0 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH1 0x0 REVERT JUMPDEST POP POP POP POP PUSH1 0x0 CALLER SWAP1 POP PUSH1 0x0 DUP4 SWAP1 POP DUP1 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH4 0xED2B40EA DUP4 DUP9 PUSH1 0x40 MLOAD DUP4 PUSH4 0xFFFFFFFF AND PUSH1 0xE0 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH3 0x1273 SWAP3 SWAP2 SWAP1 PUSH3 0x2242 JUMP JUMPDEST PUSH1 0x0 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 PUSH1 0x0 DUP8 DUP1 EXTCODESIZE ISZERO DUP1 ISZERO PUSH3 0x128E JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP GAS CALL ISZERO DUP1 ISZERO PUSH3 0x12A3 JUMPI RETURNDATASIZE PUSH1 0x0 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH1 0x0 REVERT JUMPDEST POP POP POP POP POP POP POP POP POP POP POP JUMP JUMPDEST PUSH1 0x2 PUSH1 0x20 MSTORE DUP2 PUSH1 0x0 MSTORE PUSH1 0x40 PUSH1 0x0 KECCAK256 DUP2 DUP2 SLOAD DUP2 LT PUSH3 0x12CD JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST SWAP1 PUSH1 0x0 MSTORE PUSH1 0x20 PUSH1 0x0 KECCAK256 ADD PUSH1 0x0 SWAP2 POP SWAP2 POP SWAP1 SLOAD SWAP1 PUSH2 0x100 EXP SWAP1 DIV PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP2 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 PUSH1 0x80 ADD PUSH1 0x40 MSTORE DUP1 PUSH1 0x0 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x60 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP2 MSTORE POP SWAP1 JUMP JUMPDEST PUSH2 0x121F DUP1 PUSH3 0x2270 DUP4 CODECOPY ADD SWAP1 JUMP JUMPDEST PUSH1 0x0 PUSH1 0x40 MLOAD SWAP1 POP SWAP1 JUMP JUMPDEST PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH1 0x0 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF DUP3 AND SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 PUSH3 0x138C DUP3 PUSH3 0x135F JUMP JUMPDEST SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH3 0x139E DUP2 PUSH3 0x137F JUMP JUMPDEST DUP2 EQ PUSH3 0x13AA JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP JUMP JUMPDEST PUSH1 0x0 DUP2 CALLDATALOAD SWAP1 POP PUSH3 0x13BE DUP2 PUSH3 0x1393 JUMP JUMPDEST SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 DUP5 SUB SLT ISZERO PUSH3 0x13DD JUMPI PUSH3 0x13DC PUSH3 0x1355 JUMP JUMPDEST JUMPDEST PUSH1 0x0 PUSH3 0x13ED DUP5 DUP3 DUP6 ADD PUSH3 0x13AD JUMP JUMPDEST SWAP2 POP POP SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH3 0x1401 DUP2 PUSH3 0x137F JUMP JUMPDEST DUP3 MSTORE POP POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 ADD SWAP1 POP PUSH3 0x141E PUSH1 0x0 DUP4 ADD DUP5 PUSH3 0x13F6 JUMP JUMPDEST SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 DUP2 MLOAD SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 DUP3 DUP3 MSTORE PUSH1 0x20 DUP3 ADD SWAP1 POP SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 DUP2 SWAP1 POP PUSH1 0x20 DUP3 ADD SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 DUP2 SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH3 0x1465 DUP2 PUSH3 0x1450 JUMP JUMPDEST DUP3 MSTORE POP POP JUMP JUMPDEST PUSH1 0x0 DUP2 MLOAD SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 DUP3 DUP3 MSTORE PUSH1 0x20 DUP3 ADD SWAP1 POP SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 DUP2 SWAP1 POP PUSH1 0x20 DUP3 ADD SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 PUSH3 0x14A5 DUP4 DUP4 PUSH3 0x145A JUMP JUMPDEST PUSH1 0x20 DUP4 ADD SWAP1 POP SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 ADD SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 PUSH3 0x14CB DUP3 PUSH3 0x146B JUMP JUMPDEST PUSH3 0x14D7 DUP2 DUP6 PUSH3 0x1476 JUMP JUMPDEST SWAP4 POP PUSH3 0x14E4 DUP4 PUSH3 0x1487 JUMP JUMPDEST DUP1 PUSH1 0x0 JUMPDEST DUP4 DUP2 LT ISZERO PUSH3 0x151B JUMPI DUP2 MLOAD PUSH3 0x14FF DUP9 DUP3 PUSH3 0x1497 JUMP JUMPDEST SWAP8 POP PUSH3 0x150C DUP4 PUSH3 0x14B1 JUMP JUMPDEST SWAP3 POP POP PUSH1 0x1 DUP2 ADD SWAP1 POP PUSH3 0x14E8 JUMP JUMPDEST POP DUP6 SWAP4 POP POP POP POP SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH3 0x1533 DUP2 PUSH3 0x137F JUMP JUMPDEST DUP3 MSTORE POP POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x80 DUP4 ADD PUSH1 0x0 DUP4 ADD MLOAD PUSH3 0x1553 PUSH1 0x0 DUP7 ADD DUP3 PUSH3 0x145A JUMP JUMPDEST POP PUSH1 0x20 DUP4 ADD MLOAD PUSH3 0x1568 PUSH1 0x20 DUP7 ADD DUP3 PUSH3 0x145A JUMP JUMPDEST POP PUSH1 0x40 DUP4 ADD MLOAD DUP5 DUP3 SUB PUSH1 0x40 DUP7 ADD MSTORE PUSH3 0x1582 DUP3 DUP3 PUSH3 0x14BE JUMP JUMPDEST SWAP2 POP POP PUSH1 0x60 DUP4 ADD MLOAD PUSH3 0x1599 PUSH1 0x60 DUP7 ADD DUP3 PUSH3 0x1528 JUMP JUMPDEST POP DUP1 SWAP2 POP POP SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 PUSH3 0x15B2 DUP4 DUP4 PUSH3 0x1539 JUMP JUMPDEST SWAP1 POP SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 ADD SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 PUSH3 0x15D4 DUP3 PUSH3 0x1424 JUMP JUMPDEST PUSH3 0x15E0 DUP2 DUP6 PUSH3 0x142F JUMP JUMPDEST SWAP4 POP DUP4 PUSH1 0x20 DUP3 MUL DUP6 ADD PUSH3 0x15F4 DUP6 PUSH3 0x1440 JUMP JUMPDEST DUP1 PUSH1 0x0 JUMPDEST DUP6 DUP2 LT ISZERO PUSH3 0x1636 JUMPI DUP5 DUP5 SUB DUP10 MSTORE DUP2 MLOAD PUSH3 0x1614 DUP6 DUP3 PUSH3 0x15A4 JUMP JUMPDEST SWAP5 POP PUSH3 0x1621 DUP4 PUSH3 0x15BA JUMP JUMPDEST SWAP3 POP PUSH1 0x20 DUP11 ADD SWAP10 POP POP PUSH1 0x1 DUP2 ADD SWAP1 POP PUSH3 0x15F8 JUMP JUMPDEST POP DUP3 SWAP8 POP DUP8 SWAP6 POP POP POP POP POP POP SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 ADD SWAP1 POP DUP2 DUP2 SUB PUSH1 0x0 DUP4 ADD MSTORE PUSH3 0x1664 DUP2 DUP5 PUSH3 0x15C7 JUMP JUMPDEST SWAP1 POP SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH3 0x1677 DUP2 PUSH3 0x1450 JUMP JUMPDEST DUP2 EQ PUSH3 0x1683 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP JUMP JUMPDEST PUSH1 0x0 DUP2 CALLDATALOAD SWAP1 POP PUSH3 0x1697 DUP2 PUSH3 0x166C JUMP JUMPDEST SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x40 DUP4 DUP6 SUB SLT ISZERO PUSH3 0x16B7 JUMPI PUSH3 0x16B6 PUSH3 0x1355 JUMP JUMPDEST JUMPDEST PUSH1 0x0 PUSH3 0x16C7 DUP6 DUP3 DUP7 ADD PUSH3 0x13AD JUMP JUMPDEST SWAP3 POP POP PUSH1 0x20 PUSH3 0x16DA DUP6 DUP3 DUP7 ADD PUSH3 0x1686 JUMP JUMPDEST SWAP2 POP POP SWAP3 POP SWAP3 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH1 0x0 PUSH1 0x1F NOT PUSH1 0x1F DUP4 ADD AND SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH32 0x4E487B7100000000000000000000000000000000000000000000000000000000 PUSH1 0x0 MSTORE PUSH1 0x41 PUSH1 0x4 MSTORE PUSH1 0x24 PUSH1 0x0 REVERT JUMPDEST PUSH3 0x1734 DUP3 PUSH3 0x16E9 JUMP JUMPDEST DUP2 ADD DUP2 DUP2 LT PUSH8 0xFFFFFFFFFFFFFFFF DUP3 GT OR ISZERO PUSH3 0x1756 JUMPI PUSH3 0x1755 PUSH3 0x16FA JUMP JUMPDEST JUMPDEST DUP1 PUSH1 0x40 MSTORE POP POP POP JUMP JUMPDEST PUSH1 0x0 PUSH3 0x176B PUSH3 0x134B JUMP JUMPDEST SWAP1 POP PUSH3 0x1779 DUP3 DUP3 PUSH3 0x1729 JUMP JUMPDEST SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 PUSH8 0xFFFFFFFFFFFFFFFF DUP3 GT ISZERO PUSH3 0x179C JUMPI PUSH3 0x179B PUSH3 0x16FA JUMP JUMPDEST JUMPDEST PUSH1 0x20 DUP3 MUL SWAP1 POP PUSH1 0x20 DUP2 ADD SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH1 0x0 PUSH3 0x17C9 PUSH3 0x17C3 DUP5 PUSH3 0x177E JUMP JUMPDEST PUSH3 0x175F JUMP JUMPDEST SWAP1 POP DUP1 DUP4 DUP3 MSTORE PUSH1 0x20 DUP3 ADD SWAP1 POP PUSH1 0x20 DUP5 MUL DUP4 ADD DUP6 DUP2 GT ISZERO PUSH3 0x17EF JUMPI PUSH3 0x17EE PUSH3 0x17AD JUMP JUMPDEST JUMPDEST DUP4 JUMPDEST DUP2 DUP2 LT ISZERO PUSH3 0x181C JUMPI DUP1 PUSH3 0x1807 DUP9 DUP3 PUSH3 0x1686 JUMP JUMPDEST DUP5 MSTORE PUSH1 0x20 DUP5 ADD SWAP4 POP POP PUSH1 0x20 DUP2 ADD SWAP1 POP PUSH3 0x17F1 JUMP JUMPDEST POP POP POP SWAP4 SWAP3 POP POP POP JUMP JUMPDEST PUSH1 0x0 DUP3 PUSH1 0x1F DUP4 ADD SLT PUSH3 0x183E JUMPI PUSH3 0x183D PUSH3 0x16E4 JUMP JUMPDEST JUMPDEST DUP2 CALLDATALOAD PUSH3 0x1850 DUP5 DUP3 PUSH1 0x20 DUP7 ADD PUSH3 0x17B2 JUMP JUMPDEST SWAP2 POP POP SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x0 PUSH1 0x60 DUP5 DUP7 SUB SLT ISZERO PUSH3 0x1875 JUMPI PUSH3 0x1874 PUSH3 0x1355 JUMP JUMPDEST JUMPDEST PUSH1 0x0 PUSH3 0x1885 DUP7 DUP3 DUP8 ADD PUSH3 0x13AD JUMP JUMPDEST SWAP4 POP POP PUSH1 0x20 DUP5 ADD CALLDATALOAD PUSH8 0xFFFFFFFFFFFFFFFF DUP2 GT ISZERO PUSH3 0x18A9 JUMPI PUSH3 0x18A8 PUSH3 0x135A JUMP JUMPDEST JUMPDEST PUSH3 0x18B7 DUP7 DUP3 DUP8 ADD PUSH3 0x1826 JUMP JUMPDEST SWAP3 POP POP PUSH1 0x40 DUP5 ADD CALLDATALOAD PUSH8 0xFFFFFFFFFFFFFFFF DUP2 GT ISZERO PUSH3 0x18DB JUMPI PUSH3 0x18DA PUSH3 0x135A JUMP JUMPDEST JUMPDEST PUSH3 0x18E9 DUP7 DUP3 DUP8 ADD PUSH3 0x1826 JUMP JUMPDEST SWAP2 POP POP SWAP3 POP SWAP3 POP SWAP3 JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x40 DUP4 DUP6 SUB SLT ISZERO PUSH3 0x190D JUMPI PUSH3 0x190C PUSH3 0x1355 JUMP JUMPDEST JUMPDEST PUSH1 0x0 PUSH3 0x191D DUP6 DUP3 DUP7 ADD PUSH3 0x13AD JUMP JUMPDEST SWAP3 POP POP PUSH1 0x20 DUP4 ADD CALLDATALOAD PUSH8 0xFFFFFFFFFFFFFFFF DUP2 GT ISZERO PUSH3 0x1941 JUMPI PUSH3 0x1940 PUSH3 0x135A JUMP JUMPDEST JUMPDEST PUSH3 0x194F DUP6 DUP3 DUP7 ADD PUSH3 0x1826 JUMP JUMPDEST SWAP2 POP POP SWAP3 POP SWAP3 SWAP1 POP JUMP JUMPDEST PUSH32 0x4E487B7100000000000000000000000000000000000000000000000000000000 PUSH1 0x0 MSTORE PUSH1 0x32 PUSH1 0x4 MSTORE PUSH1 0x24 PUSH1 0x0 REVERT JUMPDEST PUSH1 0x0 DUP2 MLOAD SWAP1 POP PUSH3 0x1999 DUP2 PUSH3 0x166C JUMP JUMPDEST SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 PUSH3 0x19B6 PUSH3 0x19B0 DUP5 PUSH3 0x177E JUMP JUMPDEST PUSH3 0x175F JUMP JUMPDEST SWAP1 POP DUP1 DUP4 DUP3 MSTORE PUSH1 0x20 DUP3 ADD SWAP1 POP PUSH1 0x20 DUP5 MUL DUP4 ADD DUP6 DUP2 GT ISZERO PUSH3 0x19DC JUMPI PUSH3 0x19DB PUSH3 0x17AD JUMP JUMPDEST JUMPDEST DUP4 JUMPDEST DUP2 DUP2 LT ISZERO PUSH3 0x1A09 JUMPI DUP1 PUSH3 0x19F4 DUP9 DUP3 PUSH3 0x1988 JUMP JUMPDEST DUP5 MSTORE PUSH1 0x20 DUP5 ADD SWAP4 POP POP PUSH1 0x20 DUP2 ADD SWAP1 POP PUSH3 0x19DE JUMP JUMPDEST POP POP POP SWAP4 SWAP3 POP POP POP JUMP JUMPDEST PUSH1 0x0 DUP3 PUSH1 0x1F DUP4 ADD SLT PUSH3 0x1A2B JUMPI PUSH3 0x1A2A PUSH3 0x16E4 JUMP JUMPDEST JUMPDEST DUP2 MLOAD PUSH3 0x1A3D DUP5 DUP3 PUSH1 0x20 DUP7 ADD PUSH3 0x199F JUMP JUMPDEST SWAP2 POP POP SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 DUP5 SUB SLT ISZERO PUSH3 0x1A5F JUMPI PUSH3 0x1A5E PUSH3 0x1355 JUMP JUMPDEST JUMPDEST PUSH1 0x0 DUP3 ADD MLOAD PUSH8 0xFFFFFFFFFFFFFFFF DUP2 GT ISZERO PUSH3 0x1A80 JUMPI PUSH3 0x1A7F PUSH3 0x135A JUMP JUMPDEST JUMPDEST PUSH3 0x1A8E DUP5 DUP3 DUP6 ADD PUSH3 0x1A13 JUMP JUMPDEST SWAP2 POP POP SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 DUP5 SUB SLT ISZERO PUSH3 0x1AB0 JUMPI PUSH3 0x1AAF PUSH3 0x1355 JUMP JUMPDEST JUMPDEST PUSH1 0x0 PUSH3 0x1AC0 DUP5 DUP3 DUP6 ADD PUSH3 0x1988 JUMP JUMPDEST SWAP2 POP POP SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH32 0x4E487B7100000000000000000000000000000000000000000000000000000000 PUSH1 0x0 MSTORE PUSH1 0x11 PUSH1 0x4 MSTORE PUSH1 0x24 PUSH1 0x0 REVERT JUMPDEST PUSH1 0x0 PUSH3 0x1B05 DUP3 PUSH3 0x1450 JUMP JUMPDEST SWAP2 POP PUSH3 0x1B12 DUP4 PUSH3 0x1450 JUMP JUMPDEST SWAP3 POP DUP3 DUP3 MUL PUSH3 0x1B22 DUP2 PUSH3 0x1450 JUMP JUMPDEST SWAP2 POP DUP3 DUP3 DIV DUP5 EQ DUP4 ISZERO OR PUSH3 0x1B3C JUMPI PUSH3 0x1B3B PUSH3 0x1AC9 JUMP JUMPDEST JUMPDEST POP SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 PUSH3 0x1B50 DUP3 PUSH3 0x1450 JUMP JUMPDEST SWAP2 POP PUSH32 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF DUP3 SUB PUSH3 0x1B85 JUMPI PUSH3 0x1B84 PUSH3 0x1AC9 JUMP JUMPDEST JUMPDEST PUSH1 0x1 DUP3 ADD SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 DUP3 DUP3 MSTORE PUSH1 0x20 DUP3 ADD SWAP1 POP SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH32 0x5661756C7420616C72656164792065786973747320666F722074686973204E46 PUSH1 0x0 DUP3 ADD MSTORE PUSH32 0x5420636F6E747261637400000000000000000000000000000000000000000000 PUSH1 0x20 DUP3 ADD MSTORE POP JUMP JUMPDEST PUSH1 0x0 PUSH3 0x1BFF PUSH1 0x2A DUP4 PUSH3 0x1B90 JUMP JUMPDEST SWAP2 POP PUSH3 0x1C0C DUP3 PUSH3 0x1BA1 JUMP JUMPDEST PUSH1 0x40 DUP3 ADD SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 ADD SWAP1 POP DUP2 DUP2 SUB PUSH1 0x0 DUP4 ADD MSTORE PUSH3 0x1C32 DUP2 PUSH3 0x1BF0 JUMP JUMPDEST SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH3 0x1C44 DUP2 PUSH3 0x1450 JUMP JUMPDEST DUP3 MSTORE POP POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x60 DUP3 ADD SWAP1 POP PUSH3 0x1C61 PUSH1 0x0 DUP4 ADD DUP7 PUSH3 0x13F6 JUMP JUMPDEST PUSH3 0x1C70 PUSH1 0x20 DUP4 ADD DUP6 PUSH3 0x1C39 JUMP JUMPDEST PUSH3 0x1C7F PUSH1 0x40 DUP4 ADD DUP5 PUSH3 0x13F6 JUMP JUMPDEST SWAP5 SWAP4 POP POP POP POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x60 DUP3 ADD SWAP1 POP PUSH3 0x1C9E PUSH1 0x0 DUP4 ADD DUP7 PUSH3 0x1C39 JUMP JUMPDEST PUSH3 0x1CAD PUSH1 0x20 DUP4 ADD DUP6 PUSH3 0x13F6 JUMP JUMPDEST PUSH3 0x1CBC PUSH1 0x40 DUP4 ADD DUP5 PUSH3 0x13F6 JUMP JUMPDEST SWAP5 SWAP4 POP POP POP POP JUMP JUMPDEST PUSH32 0x5661756C7420646F6573206E6F742065786973747320666F722074686973204E PUSH1 0x0 DUP3 ADD MSTORE PUSH32 0x465420636F6E7472616374000000000000000000000000000000000000000000 PUSH1 0x20 DUP3 ADD MSTORE POP JUMP JUMPDEST PUSH1 0x0 PUSH3 0x1D22 PUSH1 0x2B DUP4 PUSH3 0x1B90 JUMP JUMPDEST SWAP2 POP PUSH3 0x1D2F DUP3 PUSH3 0x1CC4 JUMP JUMPDEST PUSH1 0x40 DUP3 ADD SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 ADD SWAP1 POP DUP2 DUP2 SUB PUSH1 0x0 DUP4 ADD MSTORE PUSH3 0x1D55 DUP2 PUSH3 0x1D13 JUMP JUMPDEST SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH32 0x4D69736D61746368656420617272617973000000000000000000000000000000 PUSH1 0x0 DUP3 ADD MSTORE POP JUMP JUMPDEST PUSH1 0x0 PUSH3 0x1D94 PUSH1 0x11 DUP4 PUSH3 0x1B90 JUMP JUMPDEST SWAP2 POP PUSH3 0x1DA1 DUP3 PUSH3 0x1D5C JUMP JUMPDEST PUSH1 0x20 DUP3 ADD SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 ADD SWAP1 POP DUP2 DUP2 SUB PUSH1 0x0 DUP4 ADD MSTORE PUSH3 0x1DC7 DUP2 PUSH3 0x1D85 JUMP JUMPDEST SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 DUP2 MLOAD SWAP1 POP PUSH3 0x1DDF DUP2 PUSH3 0x1393 JUMP JUMPDEST SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 DUP5 SUB SLT ISZERO PUSH3 0x1DFE JUMPI PUSH3 0x1DFD PUSH3 0x1355 JUMP JUMPDEST JUMPDEST PUSH1 0x0 PUSH3 0x1E0E DUP5 DUP3 DUP6 ADD PUSH3 0x1DCE JUMP JUMPDEST SWAP2 POP POP SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH32 0x4F6E6C792074686520706572736F6E2077686F2063726561746564207661756C PUSH1 0x0 DUP3 ADD MSTORE PUSH32 0x742063616E206465706F7369742066756E647320696E746F2069740000000000 PUSH1 0x20 DUP3 ADD MSTORE POP JUMP JUMPDEST PUSH1 0x0 PUSH3 0x1E75 PUSH1 0x3B DUP4 PUSH3 0x1B90 JUMP JUMPDEST SWAP2 POP PUSH3 0x1E82 DUP3 PUSH3 0x1E17 JUMP JUMPDEST PUSH1 0x40 DUP3 ADD SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 ADD SWAP1 POP DUP2 DUP2 SUB PUSH1 0x0 DUP4 ADD MSTORE PUSH3 0x1EA8 DUP2 PUSH3 0x1E66 JUMP JUMPDEST SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 PUSH3 0x1EBC DUP3 PUSH3 0x1450 JUMP JUMPDEST SWAP2 POP PUSH3 0x1EC9 DUP4 PUSH3 0x1450 JUMP JUMPDEST SWAP3 POP DUP3 DUP3 ADD SWAP1 POP DUP1 DUP3 GT ISZERO PUSH3 0x1EE4 JUMPI PUSH3 0x1EE3 PUSH3 0x1AC9 JUMP JUMPDEST JUMPDEST SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH32 0x4D69736D61746368656420746F74616C206465706F73697420616D6F756E7400 PUSH1 0x0 DUP3 ADD MSTORE POP JUMP JUMPDEST PUSH1 0x0 PUSH3 0x1F22 PUSH1 0x1F DUP4 PUSH3 0x1B90 JUMP JUMPDEST SWAP2 POP PUSH3 0x1F2F DUP3 PUSH3 0x1EEA JUMP JUMPDEST PUSH1 0x20 DUP3 ADD SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 ADD SWAP1 POP DUP2 DUP2 SUB PUSH1 0x0 DUP4 ADD MSTORE PUSH3 0x1F55 DUP2 PUSH3 0x1F13 JUMP JUMPDEST SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x40 DUP3 ADD SWAP1 POP PUSH3 0x1F73 PUSH1 0x0 DUP4 ADD DUP6 PUSH3 0x1C39 JUMP JUMPDEST PUSH3 0x1F82 PUSH1 0x20 DUP4 ADD DUP5 PUSH3 0x1C39 JUMP JUMPDEST SWAP4 SWAP3 POP POP POP JUMP JUMPDEST PUSH32 0x4F6E6C792074686520706572736F6E2077686F2063726561746564207661756C PUSH1 0x0 DUP3 ADD MSTORE PUSH32 0x742063616E2077697468647261772066756E6473000000000000000000000000 PUSH1 0x20 DUP3 ADD MSTORE POP JUMP JUMPDEST PUSH1 0x0 PUSH3 0x1FE7 PUSH1 0x34 DUP4 PUSH3 0x1B90 JUMP JUMPDEST SWAP2 POP PUSH3 0x1FF4 DUP3 PUSH3 0x1F89 JUMP JUMPDEST PUSH1 0x40 DUP3 ADD SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 ADD SWAP1 POP DUP2 DUP2 SUB PUSH1 0x0 DUP4 ADD MSTORE PUSH3 0x201A DUP2 PUSH3 0x1FD8 JUMP JUMPDEST SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 PUSH3 0x202E DUP3 PUSH3 0x135F JUMP JUMPDEST SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH3 0x2040 DUP2 PUSH3 0x2021 JUMP JUMPDEST DUP3 MSTORE POP POP JUMP JUMPDEST PUSH1 0x0 DUP3 DUP3 MSTORE PUSH1 0x20 DUP3 ADD SWAP1 POP SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 PUSH3 0x2064 DUP3 PUSH3 0x146B JUMP JUMPDEST PUSH3 0x2070 DUP2 DUP6 PUSH3 0x2046 JUMP JUMPDEST SWAP4 POP PUSH3 0x207D DUP4 PUSH3 0x1487 JUMP JUMPDEST DUP1 PUSH1 0x0 JUMPDEST DUP4 DUP2 LT ISZERO PUSH3 0x20B4 JUMPI DUP2 MLOAD PUSH3 0x2098 DUP9 DUP3 PUSH3 0x1497 JUMP JUMPDEST SWAP8 POP PUSH3 0x20A5 DUP4 PUSH3 0x14B1 JUMP JUMPDEST SWAP3 POP POP PUSH1 0x1 DUP2 ADD SWAP1 POP PUSH3 0x2081 JUMP JUMPDEST POP DUP6 SWAP4 POP POP POP POP SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x40 DUP3 ADD SWAP1 POP PUSH3 0x20D8 PUSH1 0x0 DUP4 ADD DUP6 PUSH3 0x2035 JUMP JUMPDEST DUP2 DUP2 SUB PUSH1 0x20 DUP4 ADD MSTORE PUSH3 0x20EC DUP2 DUP5 PUSH3 0x2057 JUMP JUMPDEST SWAP1 POP SWAP4 SWAP3 POP POP POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 ADD SWAP1 POP PUSH3 0x210C PUSH1 0x0 DUP4 ADD DUP5 PUSH3 0x1C39 JUMP JUMPDEST SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH32 0x596F7520617265206E6F7420746865206F776E6572206F66207468697320746F PUSH1 0x0 DUP3 ADD MSTORE PUSH32 0x6B656E2100000000000000000000000000000000000000000000000000000000 PUSH1 0x20 DUP3 ADD MSTORE POP JUMP JUMPDEST PUSH1 0x0 PUSH3 0x2170 PUSH1 0x24 DUP4 PUSH3 0x1B90 JUMP JUMPDEST SWAP2 POP PUSH3 0x217D DUP3 PUSH3 0x2112 JUMP JUMPDEST PUSH1 0x40 DUP3 ADD SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 ADD SWAP1 POP DUP2 DUP2 SUB PUSH1 0x0 DUP4 ADD MSTORE PUSH3 0x21A3 DUP2 PUSH3 0x2161 JUMP JUMPDEST SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH32 0x436F6E7472616374206E6F7420617070726F76656420746F206275726E20746F PUSH1 0x0 DUP3 ADD MSTORE PUSH32 0x6B656E0000000000000000000000000000000000000000000000000000000000 PUSH1 0x20 DUP3 ADD MSTORE POP JUMP JUMPDEST PUSH1 0x0 PUSH3 0x2208 PUSH1 0x23 DUP4 PUSH3 0x1B90 JUMP JUMPDEST SWAP2 POP PUSH3 0x2215 DUP3 PUSH3 0x21AA JUMP JUMPDEST PUSH1 0x40 DUP3 ADD SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 ADD SWAP1 POP DUP2 DUP2 SUB PUSH1 0x0 DUP4 ADD MSTORE PUSH3 0x223B DUP2 PUSH3 0x21F9 JUMP JUMPDEST SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x40 DUP3 ADD SWAP1 POP PUSH3 0x2259 PUSH1 0x0 DUP4 ADD DUP6 PUSH3 0x2035 JUMP JUMPDEST PUSH3 0x2268 PUSH1 0x20 DUP4 ADD DUP5 PUSH3 0x1C39 JUMP JUMPDEST SWAP4 SWAP3 POP POP POP JUMP INVALID PUSH1 0x80 PUSH1 0x40 MSTORE CALLVALUE DUP1 ISZERO PUSH3 0x11 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH1 0x40 MLOAD PUSH3 0x121F CODESIZE SUB DUP1 PUSH3 0x121F DUP4 CODECOPY DUP2 DUP2 ADD PUSH1 0x40 MSTORE DUP2 ADD SWAP1 PUSH3 0x37 SWAP2 SWAP1 PUSH3 0x1B5 JUMP JUMPDEST DUP3 PUSH1 0x0 DUP1 PUSH2 0x100 EXP DUP2 SLOAD DUP2 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF MUL NOT AND SWAP1 DUP4 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND MUL OR SWAP1 SSTORE POP DUP2 PUSH1 0x2 DUP2 SWAP1 SSTORE POP DUP1 PUSH1 0x5 PUSH1 0x0 PUSH2 0x100 EXP DUP2 SLOAD DUP2 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF MUL NOT AND SWAP1 DUP4 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND MUL OR SWAP1 SSTORE POP TIMESTAMP PUSH1 0x3 DUP2 SWAP1 SSTORE POP CALLER PUSH1 0x4 PUSH1 0x0 PUSH2 0x100 EXP DUP2 SLOAD DUP2 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF MUL NOT AND SWAP1 DUP4 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND MUL OR SWAP1 SSTORE POP POP POP POP PUSH3 0x211 JUMP JUMPDEST PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH1 0x0 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF DUP3 AND SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 PUSH3 0x142 DUP3 PUSH3 0x115 JUMP JUMPDEST SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH3 0x154 DUP2 PUSH3 0x135 JUMP JUMPDEST DUP2 EQ PUSH3 0x160 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP JUMP JUMPDEST PUSH1 0x0 DUP2 MLOAD SWAP1 POP PUSH3 0x174 DUP2 PUSH3 0x149 JUMP JUMPDEST SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 DUP2 SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH3 0x18F DUP2 PUSH3 0x17A JUMP JUMPDEST DUP2 EQ PUSH3 0x19B JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP JUMP JUMPDEST PUSH1 0x0 DUP2 MLOAD SWAP1 POP PUSH3 0x1AF DUP2 PUSH3 0x184 JUMP JUMPDEST SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x0 PUSH1 0x60 DUP5 DUP7 SUB SLT ISZERO PUSH3 0x1D1 JUMPI PUSH3 0x1D0 PUSH3 0x110 JUMP JUMPDEST JUMPDEST PUSH1 0x0 PUSH3 0x1E1 DUP7 DUP3 DUP8 ADD PUSH3 0x163 JUMP JUMPDEST SWAP4 POP POP PUSH1 0x20 PUSH3 0x1F4 DUP7 DUP3 DUP8 ADD PUSH3 0x19E JUMP JUMPDEST SWAP3 POP POP PUSH1 0x40 PUSH3 0x207 DUP7 DUP3 DUP8 ADD PUSH3 0x163 JUMP JUMPDEST SWAP2 POP POP SWAP3 POP SWAP3 POP SWAP3 JUMP JUMPDEST PUSH2 0xFFE DUP1 PUSH3 0x221 PUSH1 0x0 CODECOPY PUSH1 0x0 RETURN INVALID PUSH1 0x80 PUSH1 0x40 MSTORE PUSH1 0x4 CALLDATASIZE LT PUSH2 0xA0 JUMPI PUSH1 0x0 CALLDATALOAD PUSH1 0xE0 SHR DUP1 PUSH4 0x8293744B GT PUSH2 0x64 JUMPI DUP1 PUSH4 0x8293744B EQ PUSH2 0x192 JUMPI DUP1 PUSH4 0xA40398A6 EQ PUSH2 0x1AE JUMPI DUP1 PUSH4 0xD58778D6 EQ PUSH2 0x1D7 JUMPI DUP1 PUSH4 0xD8270DCE EQ PUSH2 0x214 JUMPI DUP1 PUSH4 0xED2B40EA EQ PUSH2 0x23F JUMPI DUP1 PUSH4 0xF851A440 EQ PUSH2 0x25B JUMPI PUSH2 0xA7 JUMP JUMPDEST DUP1 PUSH4 0x1AA43078 EQ PUSH2 0xA9 JUMPI DUP1 PUSH4 0x31C2273B EQ PUSH2 0xD4 JUMPI DUP1 PUSH4 0x505658D9 EQ PUSH2 0xFF JUMPI DUP1 PUSH4 0x5E4F6CAB EQ PUSH2 0x12A JUMPI DUP1 PUSH4 0x67F718A9 EQ PUSH2 0x167 JUMPI PUSH2 0xA7 JUMP JUMPDEST CALLDATASIZE PUSH2 0xA7 JUMPI STOP JUMPDEST STOP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0xB5 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0xBE PUSH2 0x286 JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH2 0xCB SWAP2 SWAP1 PUSH2 0x8A0 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 RETURN JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0xE0 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0xE9 PUSH2 0x28C JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH2 0xF6 SWAP2 SWAP1 PUSH2 0x8FC JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 RETURN JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x10B JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x114 PUSH2 0x2B0 JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH2 0x121 SWAP2 SWAP1 PUSH2 0x8FC JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 RETURN JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x136 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x151 PUSH1 0x4 DUP1 CALLDATASIZE SUB DUP2 ADD SWAP1 PUSH2 0x14C SWAP2 SWAP1 PUSH2 0x957 JUMP JUMPDEST PUSH2 0x2D6 JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH2 0x15E SWAP2 SWAP1 PUSH2 0x8A0 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 RETURN JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x173 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x17C PUSH2 0x2EE JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH2 0x189 SWAP2 SWAP1 PUSH2 0xA42 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 RETURN JUMPDEST PUSH2 0x1AC PUSH1 0x4 DUP1 CALLDATASIZE SUB DUP2 ADD SWAP1 PUSH2 0x1A7 SWAP2 SWAP1 PUSH2 0xBFB JUMP JUMPDEST PUSH2 0x346 JUMP JUMPDEST STOP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x1BA JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x1D5 PUSH1 0x4 DUP1 CALLDATASIZE SUB DUP2 ADD SWAP1 PUSH2 0x1D0 SWAP2 SWAP1 PUSH2 0xC57 JUMP JUMPDEST PUSH2 0x57F JUMP JUMPDEST STOP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x1E3 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x1FE PUSH1 0x4 DUP1 CALLDATASIZE SUB DUP2 ADD SWAP1 PUSH2 0x1F9 SWAP2 SWAP1 PUSH2 0x957 JUMP JUMPDEST PUSH2 0x682 JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH2 0x20B SWAP2 SWAP1 PUSH2 0x8A0 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 RETURN JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x220 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x229 PUSH2 0x6A6 JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH2 0x236 SWAP2 SWAP1 PUSH2 0x8A0 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 RETURN JUMPDEST PUSH2 0x259 PUSH1 0x4 DUP1 CALLDATASIZE SUB DUP2 ADD SWAP1 PUSH2 0x254 SWAP2 SWAP1 PUSH2 0xC97 JUMP JUMPDEST PUSH2 0x6AC JUMP JUMPDEST STOP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x267 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x270 PUSH2 0x861 JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH2 0x27D SWAP2 SWAP1 PUSH2 0x8FC JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 RETURN JUMPDEST PUSH1 0x2 SLOAD DUP2 JUMP JUMPDEST PUSH1 0x0 DUP1 SLOAD SWAP1 PUSH2 0x100 EXP SWAP1 DIV PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP2 JUMP JUMPDEST PUSH1 0x4 PUSH1 0x0 SWAP1 SLOAD SWAP1 PUSH2 0x100 EXP SWAP1 DIV PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP2 JUMP JUMPDEST PUSH1 0x1 PUSH1 0x20 MSTORE DUP1 PUSH1 0x0 MSTORE PUSH1 0x40 PUSH1 0x0 KECCAK256 PUSH1 0x0 SWAP2 POP SWAP1 POP SLOAD DUP2 JUMP JUMPDEST PUSH1 0x60 PUSH1 0x6 DUP1 SLOAD DUP1 PUSH1 0x20 MUL PUSH1 0x20 ADD PUSH1 0x40 MLOAD SWAP1 DUP2 ADD PUSH1 0x40 MSTORE DUP1 SWAP3 SWAP2 SWAP1 DUP2 DUP2 MSTORE PUSH1 0x20 ADD DUP3 DUP1 SLOAD DUP1 ISZERO PUSH2 0x33C JUMPI PUSH1 0x20 MUL DUP3 ADD SWAP2 SWAP1 PUSH1 0x0 MSTORE PUSH1 0x20 PUSH1 0x0 KECCAK256 SWAP1 JUMPDEST DUP2 SLOAD DUP2 MSTORE PUSH1 0x20 ADD SWAP1 PUSH1 0x1 ADD SWAP1 DUP1 DUP4 GT PUSH2 0x328 JUMPI JUMPDEST POP POP POP POP POP SWAP1 POP SWAP1 JUMP JUMPDEST PUSH1 0x4 PUSH1 0x0 SWAP1 SLOAD SWAP1 PUSH2 0x100 EXP SWAP1 DIV PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND CALLER PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND EQ PUSH2 0x3D6 JUMPI PUSH1 0x40 MLOAD PUSH32 0x8C379A000000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x3CD SWAP1 PUSH2 0xD5A JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST PUSH1 0x2 SLOAD PUSH1 0x2 PUSH2 0x3E5 SWAP2 SWAP1 PUSH2 0xDA9 JUMP JUMPDEST PUSH1 0x3 SLOAD TIMESTAMP PUSH2 0x3F3 SWAP2 SWAP1 PUSH2 0xDEB JUMP JUMPDEST LT ISZERO PUSH2 0x434 JUMPI PUSH1 0x40 MLOAD PUSH32 0x8C379A000000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x42B SWAP1 PUSH2 0xE91 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST PUSH1 0x0 DUP1 JUMPDEST DUP3 MLOAD DUP2 LT ISZERO PUSH2 0x532 JUMPI PUSH1 0x0 PUSH1 0x1 PUSH1 0x0 DUP6 DUP5 DUP2 MLOAD DUP2 LT PUSH2 0x45A JUMPI PUSH2 0x459 PUSH2 0xEB1 JUMP JUMPDEST JUMPDEST PUSH1 0x20 MUL PUSH1 0x20 ADD ADD MLOAD DUP2 MSTORE PUSH1 0x20 ADD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 KECCAK256 SLOAD GT PUSH2 0x4B1 JUMPI PUSH1 0x40 MLOAD PUSH32 0x8C379A000000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x4A8 SWAP1 PUSH2 0xF2C JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST PUSH1 0x1 PUSH1 0x0 DUP5 DUP4 DUP2 MLOAD DUP2 LT PUSH2 0x4C8 JUMPI PUSH2 0x4C7 PUSH2 0xEB1 JUMP JUMPDEST JUMPDEST PUSH1 0x20 MUL PUSH1 0x20 ADD ADD MLOAD DUP2 MSTORE PUSH1 0x20 ADD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 KECCAK256 SLOAD DUP3 PUSH2 0x4EA SWAP2 SWAP1 PUSH2 0xF4C JUMP JUMPDEST SWAP2 POP PUSH1 0x0 PUSH1 0x1 PUSH1 0x0 DUP6 DUP5 DUP2 MLOAD DUP2 LT PUSH2 0x505 JUMPI PUSH2 0x504 PUSH2 0xEB1 JUMP JUMPDEST JUMPDEST PUSH1 0x20 MUL PUSH1 0x20 ADD ADD MLOAD DUP2 MSTORE PUSH1 0x20 ADD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 KECCAK256 DUP2 SWAP1 SSTORE POP DUP1 DUP1 PUSH2 0x52A SWAP1 PUSH2 0xF80 JUMP JUMPDEST SWAP2 POP POP PUSH2 0x438 JUMP JUMPDEST POP DUP3 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH2 0x8FC DUP3 SWAP1 DUP2 ISZERO MUL SWAP1 PUSH1 0x40 MLOAD PUSH1 0x0 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 DUP6 DUP9 DUP9 CALL SWAP4 POP POP POP POP ISZERO DUP1 ISZERO PUSH2 0x579 JUMPI RETURNDATASIZE PUSH1 0x0 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH1 0x0 REVERT JUMPDEST POP POP POP POP JUMP JUMPDEST PUSH1 0x4 PUSH1 0x0 SWAP1 SLOAD SWAP1 PUSH2 0x100 EXP SWAP1 DIV PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND CALLER PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND EQ PUSH2 0x60F JUMPI PUSH1 0x40 MLOAD PUSH32 0x8C379A000000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x606 SWAP1 PUSH2 0xD5A JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST PUSH1 0x0 PUSH1 0x1 PUSH1 0x0 DUP5 DUP2 MSTORE PUSH1 0x20 ADD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 KECCAK256 SLOAD SUB PUSH2 0x654 JUMPI PUSH1 0x6 DUP3 SWAP1 DUP1 PUSH1 0x1 DUP2 SLOAD ADD DUP1 DUP3 SSTORE DUP1 SWAP2 POP POP PUSH1 0x1 SWAP1 SUB SWAP1 PUSH1 0x0 MSTORE PUSH1 0x20 PUSH1 0x0 KECCAK256 ADD PUSH1 0x0 SWAP1 SWAP2 SWAP1 SWAP2 SWAP1 SWAP2 POP SSTORE JUMPDEST DUP1 PUSH1 0x1 PUSH1 0x0 DUP5 DUP2 MSTORE PUSH1 0x20 ADD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 KECCAK256 PUSH1 0x0 DUP3 DUP3 SLOAD PUSH2 0x677 SWAP2 SWAP1 PUSH2 0xF4C JUMP JUMPDEST SWAP3 POP POP DUP2 SWAP1 SSTORE POP POP POP JUMP JUMPDEST PUSH1 0x6 DUP2 DUP2 SLOAD DUP2 LT PUSH2 0x692 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST SWAP1 PUSH1 0x0 MSTORE PUSH1 0x20 PUSH1 0x0 KECCAK256 ADD PUSH1 0x0 SWAP2 POP SWAP1 POP SLOAD DUP2 JUMP JUMPDEST PUSH1 0x3 SLOAD DUP2 JUMP JUMPDEST PUSH1 0x4 PUSH1 0x0 SWAP1 SLOAD SWAP1 PUSH2 0x100 EXP SWAP1 DIV PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND CALLER PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND EQ PUSH2 0x73C JUMPI PUSH1 0x40 MLOAD PUSH32 0x8C379A000000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x733 SWAP1 PUSH2 0xD5A JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST PUSH1 0x0 PUSH1 0x1 PUSH1 0x0 DUP4 DUP2 MSTORE PUSH1 0x20 ADD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 KECCAK256 SLOAD GT PUSH2 0x792 JUMPI PUSH1 0x40 MLOAD PUSH32 0x8C379A000000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x789 SWAP1 PUSH2 0xF2C JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST PUSH1 0x2 SLOAD PUSH1 0x3 SLOAD TIMESTAMP PUSH2 0x7A3 SWAP2 SWAP1 PUSH2 0xDEB JUMP JUMPDEST LT ISZERO PUSH2 0x7E4 JUMPI PUSH1 0x40 MLOAD PUSH32 0x8C379A000000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x7DB SWAP1 PUSH2 0xE91 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST PUSH1 0x0 PUSH1 0x1 PUSH1 0x0 DUP4 DUP2 MSTORE PUSH1 0x20 ADD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 KECCAK256 SLOAD SWAP1 POP PUSH1 0x0 PUSH1 0x1 PUSH1 0x0 DUP5 DUP2 MSTORE PUSH1 0x20 ADD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 KECCAK256 DUP2 SWAP1 SSTORE POP DUP3 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH2 0x8FC DUP3 SWAP1 DUP2 ISZERO MUL SWAP1 PUSH1 0x40 MLOAD PUSH1 0x0 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 DUP6 DUP9 DUP9 CALL SWAP4 POP POP POP POP ISZERO DUP1 ISZERO PUSH2 0x85B JUMPI RETURNDATASIZE PUSH1 0x0 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH1 0x0 REVERT JUMPDEST POP POP POP POP JUMP JUMPDEST PUSH1 0x5 PUSH1 0x0 SWAP1 SLOAD SWAP1 PUSH2 0x100 EXP SWAP1 DIV PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP2 JUMP JUMPDEST PUSH1 0x0 DUP2 SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH2 0x89A DUP2 PUSH2 0x887 JUMP JUMPDEST DUP3 MSTORE POP POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 ADD SWAP1 POP PUSH2 0x8B5 PUSH1 0x0 DUP4 ADD DUP5 PUSH2 0x891 JUMP JUMPDEST SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF DUP3 AND SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0x8E6 DUP3 PUSH2 0x8BB JUMP JUMPDEST SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH2 0x8F6 DUP2 PUSH2 0x8DB JUMP JUMPDEST DUP3 MSTORE POP POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 ADD SWAP1 POP PUSH2 0x911 PUSH1 0x0 DUP4 ADD DUP5 PUSH2 0x8ED JUMP JUMPDEST SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x40 MLOAD SWAP1 POP SWAP1 JUMP JUMPDEST PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH2 0x934 DUP2 PUSH2 0x887 JUMP JUMPDEST DUP2 EQ PUSH2 0x93F JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP JUMP JUMPDEST PUSH1 0x0 DUP2 CALLDATALOAD SWAP1 POP PUSH2 0x951 DUP2 PUSH2 0x92B JUMP JUMPDEST SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 DUP5 SUB SLT ISZERO PUSH2 0x96D JUMPI PUSH2 0x96C PUSH2 0x921 JUMP JUMPDEST JUMPDEST PUSH1 0x0 PUSH2 0x97B DUP5 DUP3 DUP6 ADD PUSH2 0x942 JUMP JUMPDEST SWAP2 POP POP SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 DUP2 MLOAD SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 DUP3 DUP3 MSTORE PUSH1 0x20 DUP3 ADD SWAP1 POP SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 DUP2 SWAP1 POP PUSH1 0x20 DUP3 ADD SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH2 0x9B9 DUP2 PUSH2 0x887 JUMP JUMPDEST DUP3 MSTORE POP POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0x9CB DUP4 DUP4 PUSH2 0x9B0 JUMP JUMPDEST PUSH1 0x20 DUP4 ADD SWAP1 POP SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 ADD SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0x9EF DUP3 PUSH2 0x984 JUMP JUMPDEST PUSH2 0x9F9 DUP2 DUP6 PUSH2 0x98F JUMP JUMPDEST SWAP4 POP PUSH2 0xA04 DUP4 PUSH2 0x9A0 JUMP JUMPDEST DUP1 PUSH1 0x0 JUMPDEST DUP4 DUP2 LT ISZERO PUSH2 0xA35 JUMPI DUP2 MLOAD PUSH2 0xA1C DUP9 DUP3 PUSH2 0x9BF JUMP JUMPDEST SWAP8 POP PUSH2 0xA27 DUP4 PUSH2 0x9D7 JUMP JUMPDEST SWAP3 POP POP PUSH1 0x1 DUP2 ADD SWAP1 POP PUSH2 0xA08 JUMP JUMPDEST POP DUP6 SWAP4 POP POP POP POP SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 ADD SWAP1 POP DUP2 DUP2 SUB PUSH1 0x0 DUP4 ADD MSTORE PUSH2 0xA5C DUP2 DUP5 PUSH2 0x9E4 JUMP JUMPDEST SWAP1 POP SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0xA6F DUP3 PUSH2 0x8BB JUMP JUMPDEST SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH2 0xA7F DUP2 PUSH2 0xA64 JUMP JUMPDEST DUP2 EQ PUSH2 0xA8A JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP JUMP JUMPDEST PUSH1 0x0 DUP2 CALLDATALOAD SWAP1 POP PUSH2 0xA9C DUP2 PUSH2 0xA76 JUMP JUMPDEST SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH1 0x0 PUSH1 0x1F NOT PUSH1 0x1F DUP4 ADD AND SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH32 0x4E487B7100000000000000000000000000000000000000000000000000000000 PUSH1 0x0 MSTORE PUSH1 0x41 PUSH1 0x4 MSTORE PUSH1 0x24 PUSH1 0x0 REVERT JUMPDEST PUSH2 0xAF0 DUP3 PUSH2 0xAA7 JUMP JUMPDEST DUP2 ADD DUP2 DUP2 LT PUSH8 0xFFFFFFFFFFFFFFFF DUP3 GT OR ISZERO PUSH2 0xB0F JUMPI PUSH2 0xB0E PUSH2 0xAB8 JUMP JUMPDEST JUMPDEST DUP1 PUSH1 0x40 MSTORE POP POP POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0xB22 PUSH2 0x917 JUMP JUMPDEST SWAP1 POP PUSH2 0xB2E DUP3 DUP3 PUSH2 0xAE7 JUMP JUMPDEST SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 PUSH8 0xFFFFFFFFFFFFFFFF DUP3 GT ISZERO PUSH2 0xB4E JUMPI PUSH2 0xB4D PUSH2 0xAB8 JUMP JUMPDEST JUMPDEST PUSH1 0x20 DUP3 MUL SWAP1 POP PUSH1 0x20 DUP2 ADD SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH1 0x0 PUSH2 0xB77 PUSH2 0xB72 DUP5 PUSH2 0xB33 JUMP JUMPDEST PUSH2 0xB18 JUMP JUMPDEST SWAP1 POP DUP1 DUP4 DUP3 MSTORE PUSH1 0x20 DUP3 ADD SWAP1 POP PUSH1 0x20 DUP5 MUL DUP4 ADD DUP6 DUP2 GT ISZERO PUSH2 0xB9A JUMPI PUSH2 0xB99 PUSH2 0xB5F JUMP JUMPDEST JUMPDEST DUP4 JUMPDEST DUP2 DUP2 LT ISZERO PUSH2 0xBC3 JUMPI DUP1 PUSH2 0xBAF DUP9 DUP3 PUSH2 0x942 JUMP JUMPDEST DUP5 MSTORE PUSH1 0x20 DUP5 ADD SWAP4 POP POP PUSH1 0x20 DUP2 ADD SWAP1 POP PUSH2 0xB9C JUMP JUMPDEST POP POP POP SWAP4 SWAP3 POP POP POP JUMP JUMPDEST PUSH1 0x0 DUP3 PUSH1 0x1F DUP4 ADD SLT PUSH2 0xBE2 JUMPI PUSH2 0xBE1 PUSH2 0xAA2 JUMP JUMPDEST JUMPDEST DUP2 CALLDATALOAD PUSH2 0xBF2 DUP5 DUP3 PUSH1 0x20 DUP7 ADD PUSH2 0xB64 JUMP JUMPDEST SWAP2 POP POP SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x40 DUP4 DUP6 SUB SLT ISZERO PUSH2 0xC12 JUMPI PUSH2 0xC11 PUSH2 0x921 JUMP JUMPDEST JUMPDEST PUSH1 0x0 PUSH2 0xC20 DUP6 DUP3 DUP7 ADD PUSH2 0xA8D JUMP JUMPDEST SWAP3 POP POP PUSH1 0x20 DUP4 ADD CALLDATALOAD PUSH8 0xFFFFFFFFFFFFFFFF DUP2 GT ISZERO PUSH2 0xC41 JUMPI PUSH2 0xC40 PUSH2 0x926 JUMP JUMPDEST JUMPDEST PUSH2 0xC4D DUP6 DUP3 DUP7 ADD PUSH2 0xBCD JUMP JUMPDEST SWAP2 POP POP SWAP3 POP SWAP3 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x40 DUP4 DUP6 SUB SLT ISZERO PUSH2 0xC6E JUMPI PUSH2 0xC6D PUSH2 0x921 JUMP JUMPDEST JUMPDEST PUSH1 0x0 PUSH2 0xC7C DUP6 DUP3 DUP7 ADD PUSH2 0x942 JUMP JUMPDEST SWAP3 POP POP PUSH1 0x20 PUSH2 0xC8D DUP6 DUP3 DUP7 ADD PUSH2 0x942 JUMP JUMPDEST SWAP2 POP POP SWAP3 POP SWAP3 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x40 DUP4 DUP6 SUB SLT ISZERO PUSH2 0xCAE JUMPI PUSH2 0xCAD PUSH2 0x921 JUMP JUMPDEST JUMPDEST PUSH1 0x0 PUSH2 0xCBC DUP6 DUP3 DUP7 ADD PUSH2 0xA8D JUMP JUMPDEST SWAP3 POP POP PUSH1 0x20 PUSH2 0xCCD DUP6 DUP3 DUP7 ADD PUSH2 0x942 JUMP JUMPDEST SWAP2 POP POP SWAP3 POP SWAP3 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 DUP3 DUP3 MSTORE PUSH1 0x20 DUP3 ADD SWAP1 POP SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH32 0x4F6E6C7920426974737572616E636520636F6E74726163742063616E2063616C PUSH1 0x0 DUP3 ADD MSTORE PUSH32 0x6C20746869732066756E6374696F6E0000000000000000000000000000000000 PUSH1 0x20 DUP3 ADD MSTORE POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0xD44 PUSH1 0x2F DUP4 PUSH2 0xCD7 JUMP JUMPDEST SWAP2 POP PUSH2 0xD4F DUP3 PUSH2 0xCE8 JUMP JUMPDEST PUSH1 0x40 DUP3 ADD SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 ADD SWAP1 POP DUP2 DUP2 SUB PUSH1 0x0 DUP4 ADD MSTORE PUSH2 0xD73 DUP2 PUSH2 0xD37 JUMP JUMPDEST SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH32 0x4E487B7100000000000000000000000000000000000000000000000000000000 PUSH1 0x0 MSTORE PUSH1 0x11 PUSH1 0x4 MSTORE PUSH1 0x24 PUSH1 0x0 REVERT JUMPDEST PUSH1 0x0 PUSH2 0xDB4 DUP3 PUSH2 0x887 JUMP JUMPDEST SWAP2 POP PUSH2 0xDBF DUP4 PUSH2 0x887 JUMP JUMPDEST SWAP3 POP DUP3 DUP3 MUL PUSH2 0xDCD DUP2 PUSH2 0x887 JUMP JUMPDEST SWAP2 POP DUP3 DUP3 DIV DUP5 EQ DUP4 ISZERO OR PUSH2 0xDE4 JUMPI PUSH2 0xDE3 PUSH2 0xD7A JUMP JUMPDEST JUMPDEST POP SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0xDF6 DUP3 PUSH2 0x887 JUMP JUMPDEST SWAP2 POP PUSH2 0xE01 DUP4 PUSH2 0x887 JUMP JUMPDEST SWAP3 POP DUP3 DUP3 SUB SWAP1 POP DUP2 DUP2 GT ISZERO PUSH2 0xE19 JUMPI PUSH2 0xE18 PUSH2 0xD7A JUMP JUMPDEST JUMPDEST SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH32 0x43616E6E6F74206163636573732066756E6374696F6E206265666F7265207468 PUSH1 0x0 DUP3 ADD MSTORE PUSH32 0x65206D696E696D756D2074696D65206861732070617373656400000000000000 PUSH1 0x20 DUP3 ADD MSTORE POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0xE7B PUSH1 0x39 DUP4 PUSH2 0xCD7 JUMP JUMPDEST SWAP2 POP PUSH2 0xE86 DUP3 PUSH2 0xE1F JUMP JUMPDEST PUSH1 0x40 DUP3 ADD SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 ADD SWAP1 POP DUP2 DUP2 SUB PUSH1 0x0 DUP4 ADD MSTORE PUSH2 0xEAA DUP2 PUSH2 0xE6E JUMP JUMPDEST SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH32 0x4E487B7100000000000000000000000000000000000000000000000000000000 PUSH1 0x0 MSTORE PUSH1 0x32 PUSH1 0x4 MSTORE PUSH1 0x24 PUSH1 0x0 REVERT JUMPDEST PUSH32 0x4E6F2062616C616E636520666F72207468697320746F6B656E49440000000000 PUSH1 0x0 DUP3 ADD MSTORE POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0xF16 PUSH1 0x1B DUP4 PUSH2 0xCD7 JUMP JUMPDEST SWAP2 POP PUSH2 0xF21 DUP3 PUSH2 0xEE0 JUMP JUMPDEST PUSH1 0x20 DUP3 ADD SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 ADD SWAP1 POP DUP2 DUP2 SUB PUSH1 0x0 DUP4 ADD MSTORE PUSH2 0xF45 DUP2 PUSH2 0xF09 JUMP JUMPDEST SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0xF57 DUP3 PUSH2 0x887 JUMP JUMPDEST SWAP2 POP PUSH2 0xF62 DUP4 PUSH2 0x887 JUMP JUMPDEST SWAP3 POP DUP3 DUP3 ADD SWAP1 POP DUP1 DUP3 GT ISZERO PUSH2 0xF7A JUMPI PUSH2 0xF79 PUSH2 0xD7A JUMP JUMPDEST JUMPDEST SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0xF8B DUP3 PUSH2 0x887 JUMP JUMPDEST SWAP2 POP PUSH32 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF DUP3 SUB PUSH2 0xFBD JUMPI PUSH2 0xFBC PUSH2 0xD7A JUMP JUMPDEST JUMPDEST PUSH1 0x1 DUP3 ADD SWAP1 POP SWAP2 SWAP1 POP JUMP INVALID LOG2 PUSH5 0x6970667358 0x22 SLT KECCAK256 GT LOG1 0xF CREATE CALLDATACOPY EQ 0xD9 PC 0xD5 0xE2 SWAP5 MSIZE 0xCF 0xBE 0x1E PUSH13 0x94EBC24593150CD74968D15922 0xCA 0x2C 0x49 PUSH5 0x736F6C6343 STOP ADDMOD SLT STOP CALLER LOG2 PUSH5 0x6970667358 0x22 SLT KECCAK256 0xF9 0xD9 0x1E 0xBB 0xC8 DUP13 0xB5 0xD1 CREATE2 SWAP16 SSTORE 0xBB SWAP11 BYTE 0x28 DUP10 0x5D 0xBC PREVRANDAO 0x4B 0xD4 0xB8 0x5D PUSH3 0xC925D5 AND 0xAA DUP4 DELEGATECALL 0xFC PUSH5 0x736F6C6343 STOP ADDMOD SLT STOP CALLER ",
		"sourceMap": "3317:5712:12:-:0;;;;;;;;;;;;;;;;;;;"
	},
	"abi": [
		{
			"anonymous": false,
			"inputs": [
				{
					"indexed": false,
					"internalType": "uint256",
					"name": "date",
					"type": "uint256"
				},
				{
					"indexed": false,
					"internalType": "address",
					"name": "vaultAddress",
					"type": "address"
				},
				{
					"indexed": false,
					"internalType": "address",
					"name": "NFT_address",
					"type": "address"
				}
			],
			"name": "VaultCreated",
			"type": "event"
		},
		{
			"inputs": [
				{
					"internalType": "address",
					"name": "",
					"type": "address"
				},
				{
					"internalType": "uint256",
					"name": "",
					"type": "uint256"
				}
			],
			"name": "adminToNFTContracts",
			"outputs": [
				{
					"internalType": "address",
					"name": "",
					"type": "address"
				}
			],
			"stateMutability": "view",
			"type": "function"
		},
		{
			"inputs": [
				{
					"internalType": "address",
					"name": "NFTContractAddress",
					"type": "address"
				},
				{
					"internalType": "uint256",
					"name": "_tokenID",
					"type": "uint256"
				}
			],
			"name": "claim",
			"outputs": [],
			"stateMutability": "payable",
			"type": "function"
		},
		{
			"inputs": [
				{
					"internalType": "address",
					"name": "_NFTContractAddress",
					"type": "address"
				},
				{
					"internalType": "uint256",
					"name": "_minTime",
					"type": "uint256"
				}
			],
			"name": "createVault",
			"outputs": [],
			"stateMutability": "nonpayable",
			"type": "function"
		},
		{
			"inputs": [
				{
					"internalType": "address",
					"name": "NFTContractAddress",
					"type": "address"
				},
				{
					"internalType": "uint256[]",
					"name": "_tokenIDs",
					"type": "uint256[]"
				},
				{
					"internalType": "uint256[]",
					"name": "amounts",
					"type": "uint256[]"
				}
			],
			"name": "depositFunds",
			"outputs": [],
			"stateMutability": "payable",
			"type": "function"
		},
		{
			"inputs": [
				{
					"internalType": "address",
					"name": "NFTContractAddress",
					"type": "address"
				}
			],
			"name": "getContractAddress",
			"outputs": [
				{
					"internalType": "address",
					"name": "",
					"type": "address"
				}
			],
			"stateMutability": "view",
			"type": "function"
		},
		{
			"inputs": [],
			"name": "getVaultDetails",
			"outputs": [
				{
					"components": [
						{
							"internalType": "uint256",
							"name": "totalBalance",
							"type": "uint256"
						},
						{
							"internalType": "uint256",
							"name": "minimumWithdrawTime",
							"type": "uint256"
						},
						{
							"internalType": "uint256[]",
							"name": "insuredTokenIds",
							"type": "uint256[]"
						},
						{
							"internalType": "address",
							"name": "nftContractAddress",
							"type": "address"
						}
					],
					"internalType": "struct Bitsurance.VaultDetails[]",
					"name": "",
					"type": "tuple[]"
				}
			],
			"stateMutability": "view",
			"type": "function"
		},
		{
			"inputs": [
				{
					"internalType": "address",
					"name": "",
					"type": "address"
				}
			],
			"name": "vaultAddress",
			"outputs": [
				{
					"internalType": "address",
					"name": "",
					"type": "address"
				}
			],
			"stateMutability": "view",
			"type": "function"
		},
		{
			"inputs": [
				{
					"internalType": "address",
					"name": "NFTContractAddress",
					"type": "address"
				},
				{
					"internalType": "uint256[]",
					"name": "tokenIDs",
					"type": "uint256[]"
				}
			],
			"name": "withdrawFunds",
			"outputs": [],
			"stateMutability": "payable",
			"type": "function"
		}
	],
	"storageLayout": {
		"storage": [
			{
				"astId": 2957,
				"contract": "BitSurance.sol:Bitsurance",
				"label": "vaults",
				"offset": 0,
				"slot": "0",
				"type": "t_array(t_contract(Vault)2942)dyn_storage"
			},
			{
				"astId": 2969,
				"contract": "BitSurance.sol:Bitsurance",
				"label": "vaultAddress",
				"offset": 0,
				"slot": "1",
				"type": "t_mapping(t_address,t_address)"
			},
			{
				"astId": 2974,
				"contract": "BitSurance.sol:Bitsurance",
				"label": "adminToNFTContracts",
				"offset": 0,
				"slot": "2",
				"type": "t_mapping(t_address,t_array(t_address)dyn_storage)"
			}
		],
		"types": {
			"t_address": {
				"encoding": "inplace",
				"label": "address",
				"numberOfBytes": "20"
			},
			"t_array(t_address)dyn_storage": {
				"base": "t_address",
				"encoding": "dynamic_array",
				"label": "address[]",
				"numberOfBytes": "32"
			},
			"t_array(t_contract(Vault)2942)dyn_storage": {
				"base": "t_contract(Vault)2942",
				"encoding": "dynamic_array",
				"label": "contract Vault[]",
				"numberOfBytes": "32"
			},
			"t_contract(Vault)2942": {
				"encoding": "inplace",
				"label": "contract Vault",
				"numberOfBytes": "20"
			},
			"t_mapping(t_address,t_address)": {
				"encoding": "mapping",
				"key": "t_address",
				"label": "mapping(address => address)",
				"numberOfBytes": "32",
				"value": "t_address"
			},
			"t_mapping(t_address,t_array(t_address)dyn_storage)": {
				"encoding": "mapping",
				"key": "t_address",
				"label": "mapping(address => address[])",
				"numberOfBytes": "32",
				"value": "t_array(t_address)dyn_storage"
			}
		}
	},
	"web3Deploy": "var bitsuranceContract = new web3.eth.Contract([{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"date\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"vaultAddress\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"NFT_address\",\"type\":\"address\"}],\"name\":\"VaultCreated\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"adminToNFTContracts\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"NFTContractAddress\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_tokenID\",\"type\":\"uint256\"}],\"name\":\"claim\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_NFTContractAddress\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_minTime\",\"type\":\"uint256\"}],\"name\":\"createVault\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"NFTContractAddress\",\"type\":\"address\"},{\"internalType\":\"uint256[]\",\"name\":\"_tokenIDs\",\"type\":\"uint256[]\"},{\"internalType\":\"uint256[]\",\"name\":\"amounts\",\"type\":\"uint256[]\"}],\"name\":\"depositFunds\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"NFTContractAddress\",\"type\":\"address\"}],\"name\":\"getContractAddress\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getVaultDetails\",\"outputs\":[{\"components\":[{\"internalType\":\"uint256\",\"name\":\"totalBalance\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"minimumWithdrawTime\",\"type\":\"uint256\"},{\"internalType\":\"uint256[]\",\"name\":\"insuredTokenIds\",\"type\":\"uint256[]\"},{\"internalType\":\"address\",\"name\":\"nftContractAddress\",\"type\":\"address\"}],\"internalType\":\"struct Bitsurance.VaultDetails[]\",\"name\":\"\",\"type\":\"tuple[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"vaultAddress\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"NFTContractAddress\",\"type\":\"address\"},{\"internalType\":\"uint256[]\",\"name\":\"tokenIDs\",\"type\":\"uint256[]\"}],\"name\":\"withdrawFunds\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"}]);\nvar bitsurance = bitsuranceContract.deploy({\n     data: '0x608060405234801561001057600080fd5b506134c4806100206000396000f3fe608060405260043610620000865760003560e01c80637f30952311620000555780637f3095231462000171578063a3648ec01462000191578063aad3ec9614620001b1578063f7c7349014620001d15762000086565b80631cb3d314146200008b578063533092ef14620000cf5780635f76dfc014620000ff578063622bc90e146200012d575b600080fd5b3480156200009857600080fd5b50620000b76004803603810190620000b19190620013c4565b62000215565b604051620000c6919062001407565b60405180910390f35b348015620000dc57600080fd5b50620000e762000248565b604051620000f6919062001648565b60405180910390f35b3480156200010c57600080fd5b506200012b60048036038101906200012591906200169d565b620005af565b005b3480156200013a57600080fd5b50620001596004803603810190620001539190620013c4565b62000884565b60405162000168919062001407565b60405180910390f35b6200018f600480360381019062000189919062001859565b620008ed565b005b620001af6004803603810190620001a99190620018f3565b62000cb7565b005b620001cf6004803603810190620001c991906200169d565b62000ef5565b005b348015620001de57600080fd5b50620001fd6004803603810190620001f791906200169d565b620012b0565b6040516200020c919062001407565b60405180910390f35b60016020528060005260406000206000915054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b60606000600260003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000208054806020026020016040519081016040528092919081815260200182805480156200030d57602002820191906000526020600020905b8160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019060010190808311620002c2575b505050505090506000815167ffffffffffffffff811115620003345762000333620016fa565b5b6040519080825280602002602001820160405280156200037157816020015b6200035d620012ff565b815260200190600190039081620003535790505b50905060005b8251811015620005a6576000600160008584815181106200039d576200039c62001959565b5b602002602001015173ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16905060008173ffffffffffffffffffffffffffffffffffffffff166367f718a96040518163ffffffff1660e01b8152600401600060405180830381865afa15801562000450573d6000803e3d6000fd5b505050506040513d6000823e3d601f19601f820116820180604052508101906200047b919062001a46565b9050600060405180608001604052808473ffffffffffffffffffffffffffffffffffffffff163181526020018473ffffffffffffffffffffffffffffffffffffffff16631aa430786040518163ffffffff1660e01b8152600401602060405180830381865afa158015620004f3573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019062000519919062001a97565b600262000527919062001af8565b815260200183815260200187868151811062000548576200054762001959565b5b602002602001015173ffffffffffffffffffffffffffffffffffffffff1681525090508085858151811062000582576200058162001959565b5b602002602001018190525050505080806200059d9062001b43565b91505062000377565b50809250505090565b600073ffffffffffffffffffffffffffffffffffffffff16600160008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff161462000680576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401620006779062001c17565b60405180910390fd5b600082823360405162000693906200133d565b620006a19392919062001c4a565b604051809103906000f080158015620006be573d6000803e3d6000fd5b5090506000819080600181540180825580915050600190039060005260206000200160009091909190916101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555080600160008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff160217905550600260003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020839080600181540180825580915050600190039060005260206000200160009091909190916101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055507fa8596cc4a052ecc7656e9ca0fb7a10472573699e3aa34ac5659bc37c1b0a44fc428285604051620008779392919062001c87565b60405180910390a1505050565b6000600160008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff169050919050565b600073ffffffffffffffffffffffffffffffffffffffff16600160008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1603620009be576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401620009b59062001d3a565b60405180910390fd5b805182511462000a05576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401620009fc9062001dac565b60405180910390fd5b6000349050600062000a178562000884565b905060008190503373ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff1663f851a4406040518163ffffffff1660e01b8152600401602060405180830381865afa15801562000a81573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019062000aa7919062001de5565b73ffffffffffffffffffffffffffffffffffffffff161462000b00576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040162000af79062001e8d565b60405180910390fd5b6000805b865181101562000b515785818151811062000b245762000b2362001959565b5b60200260200101518262000b39919062001eaf565b9150808062000b489062001b43565b91505062000b04565b5080841462000b97576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040162000b8e9062001f3a565b60405180910390fd5b60005b865181101562000c65578273ffffffffffffffffffffffffffffffffffffffff1663a40398a688838151811062000bd65762000bd562001959565b5b602002602001015188848151811062000bf45762000bf362001959565b5b60200260200101516040518363ffffffff1660e01b815260040162000c1b92919062001f5c565b600060405180830381600087803b15801562000c3657600080fd5b505af115801562000c4b573d6000803e3d6000fd5b50505050808062000c5c9062001b43565b91505062000b9a565b508273ffffffffffffffffffffffffffffffffffffffff166108fc829081150290604051600060405180830381858888f1935050505015801562000cad573d6000803e3d6000fd5b5050505050505050565b600073ffffffffffffffffffffffffffffffffffffffff16600160008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff160362000d88576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040162000d7f9062001d3a565b60405180910390fd5b600062000d958362000884565b905060008190503373ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff1663f851a4406040518163ffffffff1660e01b8152600401602060405180830381865afa15801562000dff573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019062000e25919062001de5565b73ffffffffffffffffffffffffffffffffffffffff161462000e7e576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040162000e759062001fff565b60405180910390fd5b8073ffffffffffffffffffffffffffffffffffffffff16638293744b33856040518363ffffffff1660e01b815260040162000ebb929190620020c1565b600060405180830381600087803b15801562000ed657600080fd5b505af115801562000eeb573d6000803e3d6000fd5b5050505050505050565b600073ffffffffffffffffffffffffffffffffffffffff16600160008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff160362000fc6576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040162000fbd9062001d3a565b60405180910390fd5b6000829050600062000fd88462000884565b905060008273ffffffffffffffffffffffffffffffffffffffff16636352211e856040518263ffffffff1660e01b8152600401620010179190620020f5565b602060405180830381865afa15801562001035573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906200105b919062001de5565b90503373ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff1614620010ce576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401620010c59062002188565b60405180910390fd5b3073ffffffffffffffffffffffffffffffffffffffff168373ffffffffffffffffffffffffffffffffffffffff1663081812fc866040518263ffffffff1660e01b8152600401620011209190620020f5565b602060405180830381865afa1580156200113e573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019062001164919062001de5565b73ffffffffffffffffffffffffffffffffffffffff1614620011bd576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401620011b49062002220565b60405180910390fd5b8273ffffffffffffffffffffffffffffffffffffffff166342966c68856040518263ffffffff1660e01b8152600401620011f89190620020f5565b600060405180830381600087803b1580156200121357600080fd5b505af115801562001228573d6000803e3d6000fd5b50505050600033905060008390508073ffffffffffffffffffffffffffffffffffffffff1663ed2b40ea83886040518363ffffffff1660e01b81526004016200127392919062002242565b600060405180830381600087803b1580156200128e57600080fd5b505af1158015620012a3573d6000803e3d6000fd5b5050505050505050505050565b60026020528160005260406000208181548110620012cd57600080fd5b906000526020600020016000915091509054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b6040518060800160405280600081526020016000815260200160608152602001600073ffffffffffffffffffffffffffffffffffffffff1681525090565b61121f806200227083390190565b6000604051905090565b600080fd5b600080fd5b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b60006200138c826200135f565b9050919050565b6200139e816200137f565b8114620013aa57600080fd5b50565b600081359050620013be8162001393565b92915050565b600060208284031215620013dd57620013dc62001355565b5b6000620013ed84828501620013ad565b91505092915050565b62001401816200137f565b82525050565b60006020820190506200141e6000830184620013f6565b92915050565b600081519050919050565b600082825260208201905092915050565b6000819050602082019050919050565b6000819050919050565b620014658162001450565b82525050565b600081519050919050565b600082825260208201905092915050565b6000819050602082019050919050565b6000620014a583836200145a565b60208301905092915050565b6000602082019050919050565b6000620014cb826200146b565b620014d7818562001476565b9350620014e48362001487565b8060005b838110156200151b578151620014ff888262001497565b97506200150c83620014b1565b925050600181019050620014e8565b5085935050505092915050565b62001533816200137f565b82525050565b60006080830160008301516200155360008601826200145a565b5060208301516200156860208601826200145a565b5060408301518482036040860152620015828282620014be565b915050606083015162001599606086018262001528565b508091505092915050565b6000620015b2838362001539565b905092915050565b6000602082019050919050565b6000620015d48262001424565b620015e081856200142f565b935083602082028501620015f48562001440565b8060005b85811015620016365784840389528151620016148582620015a4565b94506200162183620015ba565b925060208a01995050600181019050620015f8565b50829750879550505050505092915050565b60006020820190508181036000830152620016648184620015c7565b905092915050565b620016778162001450565b81146200168357600080fd5b50565b60008135905062001697816200166c565b92915050565b60008060408385031215620016b757620016b662001355565b5b6000620016c785828601620013ad565b9250506020620016da8582860162001686565b9150509250929050565b600080fd5b6000601f19601f8301169050919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b6200173482620016e9565b810181811067ffffffffffffffff82111715620017565762001755620016fa565b5b80604052505050565b60006200176b6200134b565b905062001779828262001729565b919050565b600067ffffffffffffffff8211156200179c576200179b620016fa565b5b602082029050602081019050919050565b600080fd5b6000620017c9620017c3846200177e565b6200175f565b90508083825260208201905060208402830185811115620017ef57620017ee620017ad565b5b835b818110156200181c578062001807888262001686565b845260208401935050602081019050620017f1565b5050509392505050565b600082601f8301126200183e576200183d620016e4565b5b813562001850848260208601620017b2565b91505092915050565b60008060006060848603121562001875576200187462001355565b5b60006200188586828701620013ad565b935050602084013567ffffffffffffffff811115620018a957620018a86200135a565b5b620018b78682870162001826565b925050604084013567ffffffffffffffff811115620018db57620018da6200135a565b5b620018e98682870162001826565b9150509250925092565b600080604083850312156200190d576200190c62001355565b5b60006200191d85828601620013ad565b925050602083013567ffffffffffffffff8111156200194157620019406200135a565b5b6200194f8582860162001826565b9150509250929050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b60008151905062001999816200166c565b92915050565b6000620019b6620019b0846200177e565b6200175f565b90508083825260208201905060208402830185811115620019dc57620019db620017ad565b5b835b8181101562001a095780620019f4888262001988565b845260208401935050602081019050620019de565b5050509392505050565b600082601f83011262001a2b5762001a2a620016e4565b5b815162001a3d8482602086016200199f565b91505092915050565b60006020828403121562001a5f5762001a5e62001355565b5b600082015167ffffffffffffffff81111562001a805762001a7f6200135a565b5b62001a8e8482850162001a13565b91505092915050565b60006020828403121562001ab05762001aaf62001355565b5b600062001ac08482850162001988565b91505092915050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b600062001b058262001450565b915062001b128362001450565b925082820262001b228162001450565b9150828204841483151762001b3c5762001b3b62001ac9565b5b5092915050565b600062001b508262001450565b91507fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff820362001b855762001b8462001ac9565b5b600182019050919050565b600082825260208201905092915050565b7f5661756c7420616c72656164792065786973747320666f722074686973204e4660008201527f5420636f6e747261637400000000000000000000000000000000000000000000602082015250565b600062001bff602a8362001b90565b915062001c0c8262001ba1565b604082019050919050565b6000602082019050818103600083015262001c328162001bf0565b9050919050565b62001c448162001450565b82525050565b600060608201905062001c616000830186620013f6565b62001c70602083018562001c39565b62001c7f6040830184620013f6565b949350505050565b600060608201905062001c9e600083018662001c39565b62001cad6020830185620013f6565b62001cbc6040830184620013f6565b949350505050565b7f5661756c7420646f6573206e6f742065786973747320666f722074686973204e60008201527f465420636f6e7472616374000000000000000000000000000000000000000000602082015250565b600062001d22602b8362001b90565b915062001d2f8262001cc4565b604082019050919050565b6000602082019050818103600083015262001d558162001d13565b9050919050565b7f4d69736d61746368656420617272617973000000000000000000000000000000600082015250565b600062001d9460118362001b90565b915062001da18262001d5c565b602082019050919050565b6000602082019050818103600083015262001dc78162001d85565b9050919050565b60008151905062001ddf8162001393565b92915050565b60006020828403121562001dfe5762001dfd62001355565b5b600062001e0e8482850162001dce565b91505092915050565b7f4f6e6c792074686520706572736f6e2077686f2063726561746564207661756c60008201527f742063616e206465706f7369742066756e647320696e746f2069740000000000602082015250565b600062001e75603b8362001b90565b915062001e828262001e17565b604082019050919050565b6000602082019050818103600083015262001ea88162001e66565b9050919050565b600062001ebc8262001450565b915062001ec98362001450565b925082820190508082111562001ee45762001ee362001ac9565b5b92915050565b7f4d69736d61746368656420746f74616c206465706f73697420616d6f756e7400600082015250565b600062001f22601f8362001b90565b915062001f2f8262001eea565b602082019050919050565b6000602082019050818103600083015262001f558162001f13565b9050919050565b600060408201905062001f73600083018562001c39565b62001f82602083018462001c39565b9392505050565b7f4f6e6c792074686520706572736f6e2077686f2063726561746564207661756c60008201527f742063616e2077697468647261772066756e6473000000000000000000000000602082015250565b600062001fe760348362001b90565b915062001ff48262001f89565b604082019050919050565b600060208201905081810360008301526200201a8162001fd8565b9050919050565b60006200202e826200135f565b9050919050565b620020408162002021565b82525050565b600082825260208201905092915050565b600062002064826200146b565b62002070818562002046565b93506200207d8362001487565b8060005b83811015620020b457815162002098888262001497565b9750620020a583620014b1565b92505060018101905062002081565b5085935050505092915050565b6000604082019050620020d8600083018562002035565b8181036020830152620020ec818462002057565b90509392505050565b60006020820190506200210c600083018462001c39565b92915050565b7f596f7520617265206e6f7420746865206f776e6572206f66207468697320746f60008201527f6b656e2100000000000000000000000000000000000000000000000000000000602082015250565b60006200217060248362001b90565b91506200217d8262002112565b604082019050919050565b60006020820190508181036000830152620021a38162002161565b9050919050565b7f436f6e7472616374206e6f7420617070726f76656420746f206275726e20746f60008201527f6b656e0000000000000000000000000000000000000000000000000000000000602082015250565b60006200220860238362001b90565b91506200221582620021aa565b604082019050919050565b600060208201905081810360008301526200223b81620021f9565b9050919050565b600060408201905062002259600083018562002035565b62002268602083018462001c39565b939250505056fe60806040523480156200001157600080fd5b506040516200121f3803806200121f8339818101604052810190620000379190620001b5565b826000806101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055508160028190555080600560006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055504260038190555033600460006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555050505062000211565b600080fd5b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b6000620001428262000115565b9050919050565b620001548162000135565b81146200016057600080fd5b50565b600081519050620001748162000149565b92915050565b6000819050919050565b6200018f816200017a565b81146200019b57600080fd5b50565b600081519050620001af8162000184565b92915050565b600080600060608486031215620001d157620001d062000110565b5b6000620001e18682870162000163565b9350506020620001f4868287016200019e565b9250506040620002078682870162000163565b9150509250925092565b610ffe80620002216000396000f3fe6080604052600436106100a05760003560e01c80638293744b116100645780638293744b14610192578063a40398a6146101ae578063d58778d6146101d7578063d8270dce14610214578063ed2b40ea1461023f578063f851a4401461025b576100a7565b80631aa43078146100a957806331c2273b146100d4578063505658d9146100ff5780635e4f6cab1461012a57806367f718a914610167576100a7565b366100a757005b005b3480156100b557600080fd5b506100be610286565b6040516100cb91906108a0565b60405180910390f35b3480156100e057600080fd5b506100e961028c565b6040516100f691906108fc565b60405180910390f35b34801561010b57600080fd5b506101146102b0565b60405161012191906108fc565b60405180910390f35b34801561013657600080fd5b50610151600480360381019061014c9190610957565b6102d6565b60405161015e91906108a0565b60405180910390f35b34801561017357600080fd5b5061017c6102ee565b6040516101899190610a42565b60405180910390f35b6101ac60048036038101906101a79190610bfb565b610346565b005b3480156101ba57600080fd5b506101d560048036038101906101d09190610c57565b61057f565b005b3480156101e357600080fd5b506101fe60048036038101906101f99190610957565b610682565b60405161020b91906108a0565b60405180910390f35b34801561022057600080fd5b506102296106a6565b60405161023691906108a0565b60405180910390f35b61025960048036038101906102549190610c97565b6106ac565b005b34801561026757600080fd5b50610270610861565b60405161027d91906108fc565b60405180910390f35b60025481565b60008054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b600460009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b60016020528060005260406000206000915090505481565b6060600680548060200260200160405190810160405280929190818152602001828054801561033c57602002820191906000526020600020905b815481526020019060010190808311610328575b5050505050905090565b600460009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff16146103d6576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016103cd90610d5a565b60405180910390fd5b60025460026103e59190610da9565b600354426103f39190610deb565b1015610434576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161042b90610e91565b60405180910390fd5b6000805b82518110156105325760006001600085848151811061045a57610459610eb1565b5b6020026020010151815260200190815260200160002054116104b1576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016104a890610f2c565b60405180910390fd5b600160008483815181106104c8576104c7610eb1565b5b6020026020010151815260200190815260200160002054826104ea9190610f4c565b915060006001600085848151811061050557610504610eb1565b5b6020026020010151815260200190815260200160002081905550808061052a90610f80565b915050610438565b508273ffffffffffffffffffffffffffffffffffffffff166108fc829081150290604051600060405180830381858888f19350505050158015610579573d6000803e3d6000fd5b50505050565b600460009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff161461060f576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161060690610d5a565b60405180910390fd5b60006001600084815260200190815260200160002054036106545760068290806001815401808255809150506001900390600052602060002001600090919091909150555b806001600084815260200190815260200160002060008282546106779190610f4c565b925050819055505050565b6006818154811061069257600080fd5b906000526020600020016000915090505481565b60035481565b600460009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff161461073c576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161073390610d5a565b60405180910390fd5b6000600160008381526020019081526020016000205411610792576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161078990610f2c565b60405180910390fd5b600254600354426107a39190610deb565b10156107e4576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016107db90610e91565b60405180910390fd5b600060016000838152602001908152602001600020549050600060016000848152602001908152602001600020819055508273ffffffffffffffffffffffffffffffffffffffff166108fc829081150290604051600060405180830381858888f1935050505015801561085b573d6000803e3d6000fd5b50505050565b600560009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b6000819050919050565b61089a81610887565b82525050565b60006020820190506108b56000830184610891565b92915050565b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b60006108e6826108bb565b9050919050565b6108f6816108db565b82525050565b600060208201905061091160008301846108ed565b92915050565b6000604051905090565b600080fd5b600080fd5b61093481610887565b811461093f57600080fd5b50565b6000813590506109518161092b565b92915050565b60006020828403121561096d5761096c610921565b5b600061097b84828501610942565b91505092915050565b600081519050919050565b600082825260208201905092915050565b6000819050602082019050919050565b6109b981610887565b82525050565b60006109cb83836109b0565b60208301905092915050565b6000602082019050919050565b60006109ef82610984565b6109f9818561098f565b9350610a04836109a0565b8060005b83811015610a35578151610a1c88826109bf565b9750610a27836109d7565b925050600181019050610a08565b5085935050505092915050565b60006020820190508181036000830152610a5c81846109e4565b905092915050565b6000610a6f826108bb565b9050919050565b610a7f81610a64565b8114610a8a57600080fd5b50565b600081359050610a9c81610a76565b92915050565b600080fd5b6000601f19601f8301169050919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b610af082610aa7565b810181811067ffffffffffffffff82111715610b0f57610b0e610ab8565b5b80604052505050565b6000610b22610917565b9050610b2e8282610ae7565b919050565b600067ffffffffffffffff821115610b4e57610b4d610ab8565b5b602082029050602081019050919050565b600080fd5b6000610b77610b7284610b33565b610b18565b90508083825260208201905060208402830185811115610b9a57610b99610b5f565b5b835b81811015610bc35780610baf8882610942565b845260208401935050602081019050610b9c565b5050509392505050565b600082601f830112610be257610be1610aa2565b5b8135610bf2848260208601610b64565b91505092915050565b60008060408385031215610c1257610c11610921565b5b6000610c2085828601610a8d565b925050602083013567ffffffffffffffff811115610c4157610c40610926565b5b610c4d85828601610bcd565b9150509250929050565b60008060408385031215610c6e57610c6d610921565b5b6000610c7c85828601610942565b9250506020610c8d85828601610942565b9150509250929050565b60008060408385031215610cae57610cad610921565b5b6000610cbc85828601610a8d565b9250506020610ccd85828601610942565b9150509250929050565b600082825260208201905092915050565b7f4f6e6c7920426974737572616e636520636f6e74726163742063616e2063616c60008201527f6c20746869732066756e6374696f6e0000000000000000000000000000000000602082015250565b6000610d44602f83610cd7565b9150610d4f82610ce8565b604082019050919050565b60006020820190508181036000830152610d7381610d37565b9050919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b6000610db482610887565b9150610dbf83610887565b9250828202610dcd81610887565b91508282048414831517610de457610de3610d7a565b5b5092915050565b6000610df682610887565b9150610e0183610887565b9250828203905081811115610e1957610e18610d7a565b5b92915050565b7f43616e6e6f74206163636573732066756e6374696f6e206265666f726520746860008201527f65206d696e696d756d2074696d65206861732070617373656400000000000000602082015250565b6000610e7b603983610cd7565b9150610e8682610e1f565b604082019050919050565b60006020820190508181036000830152610eaa81610e6e565b9050919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b7f4e6f2062616c616e636520666f72207468697320746f6b656e49440000000000600082015250565b6000610f16601b83610cd7565b9150610f2182610ee0565b602082019050919050565b60006020820190508181036000830152610f4581610f09565b9050919050565b6000610f5782610887565b9150610f6283610887565b9250828201905080821115610f7a57610f79610d7a565b5b92915050565b6000610f8b82610887565b91507fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff8203610fbd57610fbc610d7a565b5b60018201905091905056fea264697066735822122011a10ff03714d958d5e29459cfbe1e6c94ebc24593150cd74968d15922ca2c4964736f6c63430008120033a2646970667358221220f9d91ebbc88cb5d1f59f55bb9a1a28895dbc444bd4b85d62c925d516aa83f4fc64736f6c63430008120033', \n     arguments: [\n     ]\n}).send({\n     from: web3.eth.accounts[0], \n     gas: '4700000'\n   }, function (e, contract){\n    console.log(e, contract);\n    if (typeof contract.address !== 'undefined') {\n         console.log('Contract mined! address: ' + contract.address + ' transactionHash: ' + contract.transactionHash);\n    }\n })",
	"functionHashes": {
		"f7c73490": "adminToNFTContracts(address,uint256)",
		"aad3ec96": "claim(address,uint256)",
		"5f76dfc0": "createVault(address,uint256)",
		"7f309523": "depositFunds(address,uint256[],uint256[])",
		"622bc90e": "getContractAddress(address)",
		"533092ef": "getVaultDetails()",
		"1cb3d314": "vaultAddress(address)",
		"a3648ec0": "withdrawFunds(address,uint256[])"
	},
	"gasEstimates": {
		"Creation": {
			"codeDepositCost": "2701600",
			"executionCost": "2938",
			"totalCost": "2704538"
		},
		"External": {
			"adminToNFTContracts(address,uint256)": "infinite",
			"claim(address,uint256)": "infinite",
			"createVault(address,uint256)": "infinite",
			"depositFunds(address,uint256[],uint256[])": "infinite",
			"getContractAddress(address)": "infinite",
			"getVaultDetails()": "infinite",
			"vaultAddress(address)": "infinite",
			"withdrawFunds(address,uint256[])": "infinite"
		}
	},
	"devdoc": {
		"details": "Bitsurance contract that interacts with Vaults and manages the creation and operations on them",
		"kind": "dev",
		"methods": {
			"claim(address,uint256)": {
				"details": "Function to claim a Token ID from a vault",
				"params": {
					"NFTContractAddress": "address of the NFT contract",
					"_tokenID": "Token ID to claim"
				}
			},
			"createVault(address,uint256)": {
				"details": "Function to create a new vault",
				"params": {
					"_NFTContractAddress": "address of the NFT contract",
					"_minTime": "minimum time before withdrawal"
				}
			},
			"depositFunds(address,uint256[],uint256[])": {
				"details": "Function to deposit funds into a vault",
				"params": {
					"NFTContractAddress": "address of the NFT contract",
					"_tokenIDs": "Array of Token IDs for deposit",
					"amounts": "Array of corresponding amounts for deposit"
				}
			},
			"getContractAddress(address)": {
				"details": "Function to get the contract address of the vault",
				"params": {
					"NFTContractAddress": "address of the NFT contract"
				},
				"returns": {
					"_0": "Address of the vault contract"
				}
			},
			"getVaultDetails()": {
				"details": "Function to get details of all vaults associated with the caller",
				"returns": {
					"_0": "An array of structures containing the total balance of each vault, minimum time before withdraw,  array of token ids insured, and the associated NFT contract address"
				}
			},
			"withdrawFunds(address,uint256[])": {
				"details": "Function to withdraw funds from a vault",
				"params": {
					"NFTContractAddress": "address of the NFT contract",
					"tokenIDs": "Array of Token IDs for withdrawal"
				}
			}
		},
		"title": "Bitsurance",
		"version": 1
	},
	"userdoc": {
		"kind": "user",
		"methods": {},
		"version": 1
	},
	"Runtime Bytecode": {
		"functionDebugData": {
			"@adminToNFTContracts_2974": {
				"entryPoint": 4784,
				"id": 2974,
				"parameterSlots": 0,
				"returnSlots": 0
			},
			"@claim_3317": {
				"entryPoint": 3829,
				"id": 3317,
				"parameterSlots": 2,
				"returnSlots": 0
			},
			"@createVault_3040": {
				"entryPoint": 1455,
				"id": 3040,
				"parameterSlots": 2,
				"returnSlots": 0
			},
			"@depositFunds_3165": {
				"entryPoint": 2285,
				"id": 3165,
				"parameterSlots": 3,
				"returnSlots": 0
			},
			"@getContractAddress_3330": {
				"entryPoint": 2180,
				"id": 3330,
				"parameterSlots": 1,
				"returnSlots": 1
			},
			"@getVaultDetails_3426": {
				"entryPoint": 584,
				"id": 3426,
				"parameterSlots": 0,
				"returnSlots": 1
			},
			"@vaultAddress_2969": {
				"entryPoint": 533,
				"id": 2969,
				"parameterSlots": 0,
				"returnSlots": 0
			},
			"@withdrawFunds_3224": {
				"entryPoint": 3255,
				"id": 3224,
				"parameterSlots": 2,
				"returnSlots": 0
			},
			"abi_decode_available_length_t_array$_t_uint256_$dyn_memory_ptr": {
				"entryPoint": 6066,
				"id": null,
				"parameterSlots": 3,
				"returnSlots": 1
			},
			"abi_decode_available_length_t_array$_t_uint256_$dyn_memory_ptr_fromMemory": {
				"entryPoint": 6559,
				"id": null,
				"parameterSlots": 3,
				"returnSlots": 1
			},
			"abi_decode_t_address": {
				"entryPoint": 5037,
				"id": null,
				"parameterSlots": 2,
				"returnSlots": 1
			},
			"abi_decode_t_address_fromMemory": {
				"entryPoint": 7630,
				"id": null,
				"parameterSlots": 2,
				"returnSlots": 1
			},
			"abi_decode_t_array$_t_uint256_$dyn_memory_ptr": {
				"entryPoint": 6182,
				"id": null,
				"parameterSlots": 2,
				"returnSlots": 1
			},
			"abi_decode_t_array$_t_uint256_$dyn_memory_ptr_fromMemory": {
				"entryPoint": 6675,
				"id": null,
				"parameterSlots": 2,
				"returnSlots": 1
			},
			"abi_decode_t_uint256": {
				"entryPoint": 5766,
				"id": null,
				"parameterSlots": 2,
				"returnSlots": 1
			},
			"abi_decode_t_uint256_fromMemory": {
				"entryPoint": 6536,
				"id": null,
				"parameterSlots": 2,
				"returnSlots": 1
			},
			"abi_decode_tuple_t_address": {
				"entryPoint": 5060,
				"id": null,
				"parameterSlots": 2,
				"returnSlots": 1
			},
			"abi_decode_tuple_t_address_fromMemory": {
				"entryPoint": 7653,
				"id": null,
				"parameterSlots": 2,
				"returnSlots": 1
			},
			"abi_decode_tuple_t_addresst_array$_t_uint256_$dyn_memory_ptr": {
				"entryPoint": 6387,
				"id": null,
				"parameterSlots": 2,
				"returnSlots": 2
			},
			"abi_decode_tuple_t_addresst_array$_t_uint256_$dyn_memory_ptrt_array$_t_uint256_$dyn_memory_ptr": {
				"entryPoint": 6233,
				"id": null,
				"parameterSlots": 2,
				"returnSlots": 3
			},
			"abi_decode_tuple_t_addresst_uint256": {
				"entryPoint": 5789,
				"id": null,
				"parameterSlots": 2,
				"returnSlots": 2
			},
			"abi_decode_tuple_t_array$_t_uint256_$dyn_memory_ptr_fromMemory": {
				"entryPoint": 6726,
				"id": null,
				"parameterSlots": 2,
				"returnSlots": 1
			},
			"abi_decode_tuple_t_uint256_fromMemory": {
				"entryPoint": 6807,
				"id": null,
				"parameterSlots": 2,
				"returnSlots": 1
			},
			"abi_encodeUpdatedPos_t_struct$_VaultDetails_$2953_memory_ptr_to_t_struct$_VaultDetails_$2953_memory_ptr": {
				"entryPoint": 5540,
				"id": null,
				"parameterSlots": 2,
				"returnSlots": 1
			},
			"abi_encodeUpdatedPos_t_uint256_to_t_uint256": {
				"entryPoint": 5271,
				"id": null,
				"parameterSlots": 2,
				"returnSlots": 1
			},
			"abi_encode_t_address_payable_to_t_address_payable_fromStack": {
				"entryPoint": 8245,
				"id": null,
				"parameterSlots": 2,
				"returnSlots": 0
			},
			"abi_encode_t_address_to_t_address": {
				"entryPoint": 5416,
				"id": null,
				"parameterSlots": 2,
				"returnSlots": 0
			},
			"abi_encode_t_address_to_t_address_fromStack": {
				"entryPoint": 5110,
				"id": null,
				"parameterSlots": 2,
				"returnSlots": 0
			},
			"abi_encode_t_array$_t_struct$_VaultDetails_$2953_memory_ptr_$dyn_memory_ptr_to_t_array$_t_struct$_VaultDetails_$2953_memory_ptr_$dyn_memory_ptr_fromStack": {
				"entryPoint": 5575,
				"id": null,
				"parameterSlots": 2,
				"returnSlots": 1
			},
			"abi_encode_t_array$_t_uint256_$dyn_memory_ptr_to_t_array$_t_uint256_$dyn_memory_ptr": {
				"entryPoint": 5310,
				"id": null,
				"parameterSlots": 2,
				"returnSlots": 1
			},
			"abi_encode_t_array$_t_uint256_$dyn_memory_ptr_to_t_array$_t_uint256_$dyn_memory_ptr_fromStack": {
				"entryPoint": 8279,
				"id": null,
				"parameterSlots": 2,
				"returnSlots": 1
			},
			"abi_encode_t_stringliteral_02b8c2fb88814cea156c3111f16cfd94d03e5ad66e454c7339e3ad4f3d17e3e7_to_t_string_memory_ptr_fromStack": {
				"entryPoint": 8152,
				"id": null,
				"parameterSlots": 1,
				"returnSlots": 1
			},
			"abi_encode_t_stringliteral_4f4fa40674b63d9f789043d4550fa5f5291b0482fc45cbbc7ace27126a67c59b_to_t_string_memory_ptr_fromStack": {
				"entryPoint": 8697,
				"id": null,
				"parameterSlots": 1,
				"returnSlots": 1
			},
			"abi_encode_t_stringliteral_4fa02d1b88050f6a6a5d285d3489cc4bb24e4d1924dee6d5a2f903a871e4e481_to_t_string_memory_ptr_fromStack": {
				"entryPoint": 7557,
				"id": null,
				"parameterSlots": 1,
				"returnSlots": 1
			},
			"abi_encode_t_stringliteral_5824732942b65793939b349ae446a33529c5efa78f9adc0aff8550635fa44b27_to_t_string_memory_ptr_fromStack": {
				"entryPoint": 7152,
				"id": null,
				"parameterSlots": 1,
				"returnSlots": 1
			},
			"abi_encode_t_stringliteral_8d454e2a084014abe0cb8b0220b87e9c52084abcf0f285c0683d2b62cc95c4d5_to_t_string_memory_ptr_fromStack": {
				"entryPoint": 7782,
				"id": null,
				"parameterSlots": 1,
				"returnSlots": 1
			},
			"abi_encode_t_stringliteral_8f0021d44dc3c6a184f0ca9bb2b581abde8876c7afea5879ec72cd3feb6a7120_to_t_string_memory_ptr_fromStack": {
				"entryPoint": 8545,
				"id": null,
				"parameterSlots": 1,
				"returnSlots": 1
			},
			"abi_encode_t_stringliteral_a5e89270b3c56d4b9d1cf0a951d175d259ba209e17765637f05d1ed5391db802_to_t_string_memory_ptr_fromStack": {
				"entryPoint": 7955,
				"id": null,
				"parameterSlots": 1,
				"returnSlots": 1
			},
			"abi_encode_t_stringliteral_af09f6db30e4867e53cba9916b467b745c1bb0ff7604dcbe2aeb26f6c0c4cbab_to_t_string_memory_ptr_fromStack": {
				"entryPoint": 7443,
				"id": null,
				"parameterSlots": 1,
				"returnSlots": 1
			},
			"abi_encode_t_struct$_VaultDetails_$2953_memory_ptr_to_t_struct$_VaultDetails_$2953_memory_ptr": {
				"entryPoint": 5433,
				"id": null,
				"parameterSlots": 2,
				"returnSlots": 1
			},
			"abi_encode_t_uint256_to_t_uint256": {
				"entryPoint": 5210,
				"id": null,
				"parameterSlots": 2,
				"returnSlots": 0
			},
			"abi_encode_t_uint256_to_t_uint256_fromStack": {
				"entryPoint": 7225,
				"id": null,
				"parameterSlots": 2,
				"returnSlots": 0
			},
			"abi_encode_tuple_t_address__to_t_address__fromStack_reversed": {
				"entryPoint": 5127,
				"id": null,
				"parameterSlots": 2,
				"returnSlots": 1
			},
			"abi_encode_tuple_t_address_payable_t_array$_t_uint256_$dyn_memory_ptr__to_t_address_payable_t_array$_t_uint256_$dyn_memory_ptr__fromStack_reversed": {
				"entryPoint": 8385,
				"id": null,
				"parameterSlots": 3,
				"returnSlots": 1
			},
			"abi_encode_tuple_t_address_payable_t_uint256__to_t_address_payable_t_uint256__fromStack_reversed": {
				"entryPoint": 8770,
				"id": null,
				"parameterSlots": 3,
				"returnSlots": 1
			},
			"abi_encode_tuple_t_address_t_uint256_t_address__to_t_address_t_uint256_t_address__fromStack_reversed": {
				"entryPoint": 7242,
				"id": null,
				"parameterSlots": 4,
				"returnSlots": 1
			},
			"abi_encode_tuple_t_array$_t_struct$_VaultDetails_$2953_memory_ptr_$dyn_memory_ptr__to_t_array$_t_struct$_VaultDetails_$2953_memory_ptr_$dyn_memory_ptr__fromStack_reversed": {
				"entryPoint": 5704,
				"id": null,
				"parameterSlots": 2,
				"returnSlots": 1
			},
			"abi_encode_tuple_t_stringliteral_02b8c2fb88814cea156c3111f16cfd94d03e5ad66e454c7339e3ad4f3d17e3e7__to_t_string_memory_ptr__fromStack_reversed": {
				"entryPoint": 8191,
				"id": null,
				"parameterSlots": 1,
				"returnSlots": 1
			},
			"abi_encode_tuple_t_stringliteral_4f4fa40674b63d9f789043d4550fa5f5291b0482fc45cbbc7ace27126a67c59b__to_t_string_memory_ptr__fromStack_reversed": {
				"entryPoint": 8736,
				"id": null,
				"parameterSlots": 1,
				"returnSlots": 1
			},
			"abi_encode_tuple_t_stringliteral_4fa02d1b88050f6a6a5d285d3489cc4bb24e4d1924dee6d5a2f903a871e4e481__to_t_string_memory_ptr__fromStack_reversed": {
				"entryPoint": 7596,
				"id": null,
				"parameterSlots": 1,
				"returnSlots": 1
			},
			"abi_encode_tuple_t_stringliteral_5824732942b65793939b349ae446a33529c5efa78f9adc0aff8550635fa44b27__to_t_string_memory_ptr__fromStack_reversed": {
				"entryPoint": 7191,
				"id": null,
				"parameterSlots": 1,
				"returnSlots": 1
			},
			"abi_encode_tuple_t_stringliteral_8d454e2a084014abe0cb8b0220b87e9c52084abcf0f285c0683d2b62cc95c4d5__to_t_string_memory_ptr__fromStack_reversed": {
				"entryPoint": 7821,
				"id": null,
				"parameterSlots": 1,
				"returnSlots": 1
			},
			"abi_encode_tuple_t_stringliteral_8f0021d44dc3c6a184f0ca9bb2b581abde8876c7afea5879ec72cd3feb6a7120__to_t_string_memory_ptr__fromStack_reversed": {
				"entryPoint": 8584,
				"id": null,
				"parameterSlots": 1,
				"returnSlots": 1
			},
			"abi_encode_tuple_t_stringliteral_a5e89270b3c56d4b9d1cf0a951d175d259ba209e17765637f05d1ed5391db802__to_t_string_memory_ptr__fromStack_reversed": {
				"entryPoint": 7994,
				"id": null,
				"parameterSlots": 1,
				"returnSlots": 1
			},
			"abi_encode_tuple_t_stringliteral_af09f6db30e4867e53cba9916b467b745c1bb0ff7604dcbe2aeb26f6c0c4cbab__to_t_string_memory_ptr__fromStack_reversed": {
				"entryPoint": 7482,
				"id": null,
				"parameterSlots": 1,
				"returnSlots": 1
			},
			"abi_encode_tuple_t_uint256__to_t_uint256__fromStack_reversed": {
				"entryPoint": 8437,
				"id": null,
				"parameterSlots": 2,
				"returnSlots": 1
			},
			"abi_encode_tuple_t_uint256_t_address_t_address__to_t_uint256_t_address_t_address__fromStack_reversed": {
				"entryPoint": 7303,
				"id": null,
				"parameterSlots": 4,
				"returnSlots": 1
			},
			"abi_encode_tuple_t_uint256_t_uint256__to_t_uint256_t_uint256__fromStack_reversed": {
				"entryPoint": 8028,
				"id": null,
				"parameterSlots": 3,
				"returnSlots": 1
			},
			"allocate_memory": {
				"entryPoint": 5983,
				"id": null,
				"parameterSlots": 1,
				"returnSlots": 1
			},
			"allocate_unbounded": {
				"entryPoint": 4939,
				"id": null,
				"parameterSlots": 0,
				"returnSlots": 1
			},
			"array_allocation_size_t_array$_t_uint256_$dyn_memory_ptr": {
				"entryPoint": 6014,
				"id": null,
				"parameterSlots": 1,
				"returnSlots": 1
			},
			"array_dataslot_t_array$_t_struct$_VaultDetails_$2953_memory_ptr_$dyn_memory_ptr": {
				"entryPoint": 5184,
				"id": null,
				"parameterSlots": 1,
				"returnSlots": 1
			},
			"array_dataslot_t_array$_t_uint256_$dyn_memory_ptr": {
				"entryPoint": 5255,
				"id": null,
				"parameterSlots": 1,
				"returnSlots": 1
			},
			"array_length_t_array$_t_struct$_VaultDetails_$2953_memory_ptr_$dyn_memory_ptr": {
				"entryPoint": 5156,
				"id": null,
				"parameterSlots": 1,
				"returnSlots": 1
			},
			"array_length_t_array$_t_uint256_$dyn_memory_ptr": {
				"entryPoint": 5227,
				"id": null,
				"parameterSlots": 1,
				"returnSlots": 1
			},
			"array_nextElement_t_array$_t_struct$_VaultDetails_$2953_memory_ptr_$dyn_memory_ptr": {
				"entryPoint": 5562,
				"id": null,
				"parameterSlots": 1,
				"returnSlots": 1
			},
			"array_nextElement_t_array$_t_uint256_$dyn_memory_ptr": {
				"entryPoint": 5297,
				"id": null,
				"parameterSlots": 1,
				"returnSlots": 1
			},
			"array_storeLengthForEncoding_t_array$_t_struct$_VaultDetails_$2953_memory_ptr_$dyn_memory_ptr_fromStack": {
				"entryPoint": 5167,
				"id": null,
				"parameterSlots": 2,
				"returnSlots": 1
			},
			"array_storeLengthForEncoding_t_array$_t_uint256_$dyn_memory_ptr": {
				"entryPoint": 5238,
				"id": null,
				"parameterSlots": 2,
				"returnSlots": 1
			},
			"array_storeLengthForEncoding_t_array$_t_uint256_$dyn_memory_ptr_fromStack": {
				"entryPoint": 8262,
				"id": null,
				"parameterSlots": 2,
				"returnSlots": 1
			},
			"array_storeLengthForEncoding_t_string_memory_ptr_fromStack": {
				"entryPoint": 7056,
				"id": null,
				"parameterSlots": 2,
				"returnSlots": 1
			},
			"checked_add_t_uint256": {
				"entryPoint": 7855,
				"id": null,
				"parameterSlots": 2,
				"returnSlots": 1
			},
			"checked_mul_t_uint256": {
				"entryPoint": 6904,
				"id": null,
				"parameterSlots": 2,
				"returnSlots": 1
			},
			"cleanup_t_address": {
				"entryPoint": 4991,
				"id": null,
				"parameterSlots": 1,
				"returnSlots": 1
			},
			"cleanup_t_address_payable": {
				"entryPoint": 8225,
				"id": null,
				"parameterSlots": 1,
				"returnSlots": 1
			},
			"cleanup_t_uint160": {
				"entryPoint": 4959,
				"id": null,
				"parameterSlots": 1,
				"returnSlots": 1
			},
			"cleanup_t_uint256": {
				"entryPoint": 5200,
				"id": null,
				"parameterSlots": 1,
				"returnSlots": 1
			},
			"finalize_allocation": {
				"entryPoint": 5929,
				"id": null,
				"parameterSlots": 2,
				"returnSlots": 0
			},
			"increment_t_uint256": {
				"entryPoint": 6979,
				"id": null,
				"parameterSlots": 1,
				"returnSlots": 1
			},
			"panic_error_0x11": {
				"entryPoint": 6857,
				"id": null,
				"parameterSlots": 0,
				"returnSlots": 0
			},
			"panic_error_0x32": {
				"entryPoint": 6489,
				"id": null,
				"parameterSlots": 0,
				"returnSlots": 0
			},
			"panic_error_0x41": {
				"entryPoint": 5882,
				"id": null,
				"parameterSlots": 0,
				"returnSlots": 0
			},
			"revert_error_1b9f4a0a5773e33b91aa01db23bf8c55fce1411167c872835e7fa00a4f17d46d": {
				"entryPoint": 5860,
				"id": null,
				"parameterSlots": 0,
				"returnSlots": 0
			},
			"revert_error_81385d8c0b31fffe14be1da910c8bd3a80be4cfa248e04f42ec0faea3132a8ef": {
				"entryPoint": 6061,
				"id": null,
				"parameterSlots": 0,
				"returnSlots": 0
			},
			"revert_error_c1322bf8034eace5e0b5c7295db60986aa89aae5e0ea0873e4689e076861a5db": {
				"entryPoint": 4954,
				"id": null,
				"parameterSlots": 0,
				"returnSlots": 0
			},
			"revert_error_dbdddcbe895c83990c08b3492a0e83918d802a52331272ac6fdb6a7c4aea3b1b": {
				"entryPoint": 4949,
				"id": null,
				"parameterSlots": 0,
				"returnSlots": 0
			},
			"round_up_to_mul_of_32": {
				"entryPoint": 5865,
				"id": null,
				"parameterSlots": 1,
				"returnSlots": 1
			},
			"store_literal_in_memory_02b8c2fb88814cea156c3111f16cfd94d03e5ad66e454c7339e3ad4f3d17e3e7": {
				"entryPoint": 8073,
				"id": null,
				"parameterSlots": 1,
				"returnSlots": 0
			},
			"store_literal_in_memory_4f4fa40674b63d9f789043d4550fa5f5291b0482fc45cbbc7ace27126a67c59b": {
				"entryPoint": 8618,
				"id": null,
				"parameterSlots": 1,
				"returnSlots": 0
			},
			"store_literal_in_memory_4fa02d1b88050f6a6a5d285d3489cc4bb24e4d1924dee6d5a2f903a871e4e481": {
				"entryPoint": 7516,
				"id": null,
				"parameterSlots": 1,
				"returnSlots": 0
			},
			"store_literal_in_memory_5824732942b65793939b349ae446a33529c5efa78f9adc0aff8550635fa44b27": {
				"entryPoint": 7073,
				"id": null,
				"parameterSlots": 1,
				"returnSlots": 0
			},
			"store_literal_in_memory_8d454e2a084014abe0cb8b0220b87e9c52084abcf0f285c0683d2b62cc95c4d5": {
				"entryPoint": 7703,
				"id": null,
				"parameterSlots": 1,
				"returnSlots": 0
			},
			"store_literal_in_memory_8f0021d44dc3c6a184f0ca9bb2b581abde8876c7afea5879ec72cd3feb6a7120": {
				"entryPoint": 8466,
				"id": null,
				"parameterSlots": 1,
				"returnSlots": 0
			},
			"store_literal_in_memory_a5e89270b3c56d4b9d1cf0a951d175d259ba209e17765637f05d1ed5391db802": {
				"entryPoint": 7914,
				"id": null,
				"parameterSlots": 1,
				"returnSlots": 0
			},
			"store_literal_in_memory_af09f6db30e4867e53cba9916b467b745c1bb0ff7604dcbe2aeb26f6c0c4cbab": {
				"entryPoint": 7364,
				"id": null,
				"parameterSlots": 1,
				"returnSlots": 0
			},
			"validator_revert_t_address": {
				"entryPoint": 5011,
				"id": null,
				"parameterSlots": 1,
				"returnSlots": 0
			},
			"validator_revert_t_uint256": {
				"entryPoint": 5740,
				"id": null,
				"parameterSlots": 1,
				"returnSlots": 0
			}
		},
		"generatedSources": [
			{
				"ast": {
					"nodeType": "YulBlock",
					"src": "0:28018:13",
					"statements": [
						{
							"body": {
								"nodeType": "YulBlock",
								"src": "47:35:13",
								"statements": [
									{
										"nodeType": "YulAssignment",
										"src": "57:19:13",
										"value": {
											"arguments": [
												{
													"kind": "number",
													"nodeType": "YulLiteral",
													"src": "73:2:13",
													"type": "",
													"value": "64"
												}
											],
											"functionName": {
												"name": "mload",
												"nodeType": "YulIdentifier",
												"src": "67:5:13"
											},
											"nodeType": "YulFunctionCall",
											"src": "67:9:13"
										},
										"variableNames": [
											{
												"name": "memPtr",
												"nodeType": "YulIdentifier",
												"src": "57:6:13"
											}
										]
									}
								]
							},
							"name": "allocate_unbounded",
							"nodeType": "YulFunctionDefinition",
							"returnVariables": [
								{
									"name": "memPtr",
									"nodeType": "YulTypedName",
									"src": "40:6:13",
									"type": ""
								}
							],
							"src": "7:75:13"
						},
						{
							"body": {
								"nodeType": "YulBlock",
								"src": "177:28:13",
								"statements": [
									{
										"expression": {
											"arguments": [
												{
													"kind": "number",
													"nodeType": "YulLiteral",
													"src": "194:1:13",
													"type": "",
													"value": "0"
												},
												{
													"kind": "number",
													"nodeType": "YulLiteral",
													"src": "197:1:13",
													"type": "",
													"value": "0"
												}
											],
											"functionName": {
												"name": "revert",
												"nodeType": "YulIdentifier",
												"src": "187:6:13"
											},
											"nodeType": "YulFunctionCall",
											"src": "187:12:13"
										},
										"nodeType": "YulExpressionStatement",
										"src": "187:12:13"
									}
								]
							},
							"name": "revert_error_dbdddcbe895c83990c08b3492a0e83918d802a52331272ac6fdb6a7c4aea3b1b",
							"nodeType": "YulFunctionDefinition",
							"src": "88:117:13"
						},
						{
							"body": {
								"nodeType": "YulBlock",
								"src": "300:28:13",
								"statements": [
									{
										"expression": {
											"arguments": [
												{
													"kind": "number",
													"nodeType": "YulLiteral",
													"src": "317:1:13",
													"type": "",
													"value": "0"
												},
												{
													"kind": "number",
													"nodeType": "YulLiteral",
													"src": "320:1:13",
													"type": "",
													"value": "0"
												}
											],
											"functionName": {
												"name": "revert",
												"nodeType": "YulIdentifier",
												"src": "310:6:13"
											},
											"nodeType": "YulFunctionCall",
											"src": "310:12:13"
										},
										"nodeType": "YulExpressionStatement",
										"src": "310:12:13"
									}
								]
							},
							"name": "revert_error_c1322bf8034eace5e0b5c7295db60986aa89aae5e0ea0873e4689e076861a5db",
							"nodeType": "YulFunctionDefinition",
							"src": "211:117:13"
						},
						{
							"body": {
								"nodeType": "YulBlock",
								"src": "379:81:13",
								"statements": [
									{
										"nodeType": "YulAssignment",
										"src": "389:65:13",
										"value": {
											"arguments": [
												{
													"name": "value",
													"nodeType": "YulIdentifier",
													"src": "404:5:13"
												},
												{
													"kind": "number",
													"nodeType": "YulLiteral",
													"src": "411:42:13",
													"type": "",
													"value": "0xffffffffffffffffffffffffffffffffffffffff"
												}
											],
											"functionName": {
												"name": "and",
												"nodeType": "YulIdentifier",
												"src": "400:3:13"
											},
											"nodeType": "YulFunctionCall",
											"src": "400:54:13"
										},
										"variableNames": [
											{
												"name": "cleaned",
												"nodeType": "YulIdentifier",
												"src": "389:7:13"
											}
										]
									}
								]
							},
							"name": "cleanup_t_uint160",
							"nodeType": "YulFunctionDefinition",
							"parameters": [
								{
									"name": "value",
									"nodeType": "YulTypedName",
									"src": "361:5:13",
									"type": ""
								}
							],
							"returnVariables": [
								{
									"name": "cleaned",
									"nodeType": "YulTypedName",
									"src": "371:7:13",
									"type": ""
								}
							],
							"src": "334:126:13"
						},
						{
							"body": {
								"nodeType": "YulBlock",
								"src": "511:51:13",
								"statements": [
									{
										"nodeType": "YulAssignment",
										"src": "521:35:13",
										"value": {
											"arguments": [
												{
													"name": "value",
													"nodeType": "YulIdentifier",
													"src": "550:5:13"
												}
											],
											"functionName": {
												"name": "cleanup_t_uint160",
												"nodeType": "YulIdentifier",
												"src": "532:17:13"
											},
											"nodeType": "YulFunctionCall",
											"src": "532:24:13"
										},
										"variableNames": [
											{
												"name": "cleaned",
												"nodeType": "YulIdentifier",
												"src": "521:7:13"
											}
										]
									}
								]
							},
							"name": "cleanup_t_address",
							"nodeType": "YulFunctionDefinition",
							"parameters": [
								{
									"name": "value",
									"nodeType": "YulTypedName",
									"src": "493:5:13",
									"type": ""
								}
							],
							"returnVariables": [
								{
									"name": "cleaned",
									"nodeType": "YulTypedName",
									"src": "503:7:13",
									"type": ""
								}
							],
							"src": "466:96:13"
						},
						{
							"body": {
								"nodeType": "YulBlock",
								"src": "611:79:13",
								"statements": [
									{
										"body": {
											"nodeType": "YulBlock",
											"src": "668:16:13",
											"statements": [
												{
													"expression": {
														"arguments": [
															{
																"kind": "number",
																"nodeType": "YulLiteral",
																"src": "677:1:13",
																"type": "",
																"value": "0"
															},
															{
																"kind": "number",
																"nodeType": "YulLiteral",
																"src": "680:1:13",
																"type": "",
																"value": "0"
															}
														],
														"functionName": {
															"name": "revert",
															"nodeType": "YulIdentifier",
															"src": "670:6:13"
														},
														"nodeType": "YulFunctionCall",
														"src": "670:12:13"
													},
													"nodeType": "YulExpressionStatement",
													"src": "670:12:13"
												}
											]
										},
										"condition": {
											"arguments": [
												{
													"arguments": [
														{
															"name": "value",
															"nodeType": "YulIdentifier",
															"src": "634:5:13"
														},
														{
															"arguments": [
																{
																	"name": "value",
																	"nodeType": "YulIdentifier",
																	"src": "659:5:13"
																}
															],
															"functionName": {
																"name": "cleanup_t_address",
																"nodeType": "YulIdentifier",
																"src": "641:17:13"
															},
															"nodeType": "YulFunctionCall",
															"src": "641:24:13"
														}
													],
													"functionName": {
														"name": "eq",
														"nodeType": "YulIdentifier",
														"src": "631:2:13"
													},
													"nodeType": "YulFunctionCall",
													"src": "631:35:13"
												}
											],
											"functionName": {
												"name": "iszero",
												"nodeType": "YulIdentifier",
												"src": "624:6:13"
											},
											"nodeType": "YulFunctionCall",
											"src": "624:43:13"
										},
										"nodeType": "YulIf",
										"src": "621:63:13"
									}
								]
							},
							"name": "validator_revert_t_address",
							"nodeType": "YulFunctionDefinition",
							"parameters": [
								{
									"name": "value",
									"nodeType": "YulTypedName",
									"src": "604:5:13",
									"type": ""
								}
							],
							"src": "568:122:13"
						},
						{
							"body": {
								"nodeType": "YulBlock",
								"src": "748:87:13",
								"statements": [
									{
										"nodeType": "YulAssignment",
										"src": "758:29:13",
										"value": {
											"arguments": [
												{
													"name": "offset",
													"nodeType": "YulIdentifier",
													"src": "780:6:13"
												}
											],
											"functionName": {
												"name": "calldataload",
												"nodeType": "YulIdentifier",
												"src": "767:12:13"
											},
											"nodeType": "YulFunctionCall",
											"src": "767:20:13"
										},
										"variableNames": [
											{
												"name": "value",
												"nodeType": "YulIdentifier",
												"src": "758:5:13"
											}
										]
									},
									{
										"expression": {
											"arguments": [
												{
													"name": "value",
													"nodeType": "YulIdentifier",
													"src": "823:5:13"
												}
											],
											"functionName": {
												"name": "validator_revert_t_address",
												"nodeType": "YulIdentifier",
												"src": "796:26:13"
											},
											"nodeType": "YulFunctionCall",
											"src": "796:33:13"
										},
										"nodeType": "YulExpressionStatement",
										"src": "796:33:13"
									}
								]
							},
							"name": "abi_decode_t_address",
							"nodeType": "YulFunctionDefinition",
							"parameters": [
								{
									"name": "offset",
									"nodeType": "YulTypedName",
									"src": "726:6:13",
									"type": ""
								},
								{
									"name": "end",
									"nodeType": "YulTypedName",
									"src": "734:3:13",
									"type": ""
								}
							],
							"returnVariables": [
								{
									"name": "value",
									"nodeType": "YulTypedName",
									"src": "742:5:13",
									"type": ""
								}
							],
							"src": "696:139:13"
						},
						{
							"body": {
								"nodeType": "YulBlock",
								"src": "907:263:13",
								"statements": [
									{
										"body": {
											"nodeType": "YulBlock",
											"src": "953:83:13",
											"statements": [
												{
													"expression": {
														"arguments": [],
														"functionName": {
															"name": "revert_error_dbdddcbe895c83990c08b3492a0e83918d802a52331272ac6fdb6a7c4aea3b1b",
															"nodeType": "YulIdentifier",
															"src": "955:77:13"
														},
														"nodeType": "YulFunctionCall",
														"src": "955:79:13"
													},
													"nodeType": "YulExpressionStatement",
													"src": "955:79:13"
												}
											]
										},
										"condition": {
											"arguments": [
												{
													"arguments": [
														{
															"name": "dataEnd",
															"nodeType": "YulIdentifier",
															"src": "928:7:13"
														},
														{
															"name": "headStart",
															"nodeType": "YulIdentifier",
															"src": "937:9:13"
														}
													],
													"functionName": {
														"name": "sub",
														"nodeType": "YulIdentifier",
														"src": "924:3:13"
													},
													"nodeType": "YulFunctionCall",
													"src": "924:23:13"
												},
												{
													"kind": "number",
													"nodeType": "YulLiteral",
													"src": "949:2:13",
													"type": "",
													"value": "32"
												}
											],
											"functionName": {
												"name": "slt",
												"nodeType": "YulIdentifier",
												"src": "920:3:13"
											},
											"nodeType": "YulFunctionCall",
											"src": "920:32:13"
										},
										"nodeType": "YulIf",
										"src": "917:119:13"
									},
									{
										"nodeType": "YulBlock",
										"src": "1046:117:13",
										"statements": [
											{
												"nodeType": "YulVariableDeclaration",
												"src": "1061:15:13",
												"value": {
													"kind": "number",
													"nodeType": "YulLiteral",
													"src": "1075:1:13",
													"type": "",
													"value": "0"
												},
												"variables": [
													{
														"name": "offset",
														"nodeType": "YulTypedName",
														"src": "1065:6:13",
														"type": ""
													}
												]
											},
											{
												"nodeType": "YulAssignment",
												"src": "1090:63:13",
												"value": {
													"arguments": [
														{
															"arguments": [
																{
																	"name": "headStart",
																	"nodeType": "YulIdentifier",
																	"src": "1125:9:13"
																},
																{
																	"name": "offset",
																	"nodeType": "YulIdentifier",
																	"src": "1136:6:13"
																}
															],
															"functionName": {
																"name": "add",
																"nodeType": "YulIdentifier",
																"src": "1121:3:13"
															},
															"nodeType": "YulFunctionCall",
															"src": "1121:22:13"
														},
														{
															"name": "dataEnd",
															"nodeType": "YulIdentifier",
															"src": "1145:7:13"
														}
													],
													"functionName": {
														"name": "abi_decode_t_address",
														"nodeType": "YulIdentifier",
														"src": "1100:20:13"
													},
													"nodeType": "YulFunctionCall",
													"src": "1100:53:13"
												},
												"variableNames": [
													{
														"name": "value0",
														"nodeType": "YulIdentifier",
														"src": "1090:6:13"
													}
												]
											}
										]
									}
								]
							},
							"name": "abi_decode_tuple_t_address",
							"nodeType": "YulFunctionDefinition",
							"parameters": [
								{
									"name": "headStart",
									"nodeType": "YulTypedName",
									"src": "877:9:13",
									"type": ""
								},
								{
									"name": "dataEnd",
									"nodeType": "YulTypedName",
									"src": "888:7:13",
									"type": ""
								}
							],
							"returnVariables": [
								{
									"name": "value0",
									"nodeType": "YulTypedName",
									"src": "900:6:13",
									"type": ""
								}
							],
							"src": "841:329:13"
						},
						{
							"body": {
								"nodeType": "YulBlock",
								"src": "1241:53:13",
								"statements": [
									{
										"expression": {
											"arguments": [
												{
													"name": "pos",
													"nodeType": "YulIdentifier",
													"src": "1258:3:13"
												},
												{
													"arguments": [
														{
															"name": "value",
															"nodeType": "YulIdentifier",
															"src": "1281:5:13"
														}
													],
													"functionName": {
														"name": "cleanup_t_address",
														"nodeType": "YulIdentifier",
														"src": "1263:17:13"
													},
													"nodeType": "YulFunctionCall",
													"src": "1263:24:13"
												}
											],
											"functionName": {
												"name": "mstore",
												"nodeType": "YulIdentifier",
												"src": "1251:6:13"
											},
											"nodeType": "YulFunctionCall",
											"src": "1251:37:13"
										},
										"nodeType": "YulExpressionStatement",
										"src": "1251:37:13"
									}
								]
							},
							"name": "abi_encode_t_address_to_t_address_fromStack",
							"nodeType": "YulFunctionDefinition",
							"parameters": [
								{
									"name": "value",
									"nodeType": "YulTypedName",
									"src": "1229:5:13",
									"type": ""
								},
								{
									"name": "pos",
									"nodeType": "YulTypedName",
									"src": "1236:3:13",
									"type": ""
								}
							],
							"src": "1176:118:13"
						},
						{
							"body": {
								"nodeType": "YulBlock",
								"src": "1398:124:13",
								"statements": [
									{
										"nodeType": "YulAssignment",
										"src": "1408:26:13",
										"value": {
											"arguments": [
												{
													"name": "headStart",
													"nodeType": "YulIdentifier",
													"src": "1420:9:13"
												},
												{
													"kind": "number",
													"nodeType": "YulLiteral",
													"src": "1431:2:13",
													"type": "",
													"value": "32"
												}
											],
											"functionName": {
												"name": "add",
												"nodeType": "YulIdentifier",
												"src": "1416:3:13"
											},
											"nodeType": "YulFunctionCall",
											"src": "1416:18:13"
										},
										"variableNames": [
											{
												"name": "tail",
												"nodeType": "YulIdentifier",
												"src": "1408:4:13"
											}
										]
									},
									{
										"expression": {
											"arguments": [
												{
													"name": "value0",
													"nodeType": "YulIdentifier",
													"src": "1488:6:13"
												},
												{
													"arguments": [
														{
															"name": "headStart",
															"nodeType": "YulIdentifier",
															"src": "1501:9:13"
														},
														{
															"kind": "number",
															"nodeType": "YulLiteral",
															"src": "1512:1:13",
															"type": "",
															"value": "0"
														}
													],
													"functionName": {
														"name": "add",
														"nodeType": "YulIdentifier",
														"src": "1497:3:13"
													},
													"nodeType": "YulFunctionCall",
													"src": "1497:17:13"
												}
											],
											"functionName": {
												"name": "abi_encode_t_address_to_t_address_fromStack",
												"nodeType": "YulIdentifier",
												"src": "1444:43:13"
											},
											"nodeType": "YulFunctionCall",
											"src": "1444:71:13"
										},
										"nodeType": "YulExpressionStatement",
										"src": "1444:71:13"
									}
								]
							},
							"name": "abi_encode_tuple_t_address__to_t_address__fromStack_reversed",
							"nodeType": "YulFunctionDefinition",
							"parameters": [
								{
									"name": "headStart",
									"nodeType": "YulTypedName",
									"src": "1370:9:13",
									"type": ""
								},
								{
									"name": "value0",
									"nodeType": "YulTypedName",
									"src": "1382:6:13",
									"type": ""
								}
							],
							"returnVariables": [
								{
									"name": "tail",
									"nodeType": "YulTypedName",
									"src": "1393:4:13",
									"type": ""
								}
							],
							"src": "1300:222:13"
						},
						{
							"body": {
								"nodeType": "YulBlock",
								"src": "1632:40:13",
								"statements": [
									{
										"nodeType": "YulAssignment",
										"src": "1643:22:13",
										"value": {
											"arguments": [
												{
													"name": "value",
													"nodeType": "YulIdentifier",
													"src": "1659:5:13"
												}
											],
											"functionName": {
												"name": "mload",
												"nodeType": "YulIdentifier",
												"src": "1653:5:13"
											},
											"nodeType": "YulFunctionCall",
											"src": "1653:12:13"
										},
										"variableNames": [
											{
												"name": "length",
												"nodeType": "YulIdentifier",
												"src": "1643:6:13"
											}
										]
									}
								]
							},
							"name": "array_length_t_array$_t_struct$_VaultDetails_$2953_memory_ptr_$dyn_memory_ptr",
							"nodeType": "YulFunctionDefinition",
							"parameters": [
								{
									"name": "value",
									"nodeType": "YulTypedName",
									"src": "1615:5:13",
									"type": ""
								}
							],
							"returnVariables": [
								{
									"name": "length",
									"nodeType": "YulTypedName",
									"src": "1625:6:13",
									"type": ""
								}
							],
							"src": "1528:144:13"
						},
						{
							"body": {
								"nodeType": "YulBlock",
								"src": "1819:73:13",
								"statements": [
									{
										"expression": {
											"arguments": [
												{
													"name": "pos",
													"nodeType": "YulIdentifier",
													"src": "1836:3:13"
												},
												{
													"name": "length",
													"nodeType": "YulIdentifier",
													"src": "1841:6:13"
												}
											],
											"functionName": {
												"name": "mstore",
												"nodeType": "YulIdentifier",
												"src": "1829:6:13"
											},
											"nodeType": "YulFunctionCall",
											"src": "1829:19:13"
										},
										"nodeType": "YulExpressionStatement",
										"src": "1829:19:13"
									},
									{
										"nodeType": "YulAssignment",
										"src": "1857:29:13",
										"value": {
											"arguments": [
												{
													"name": "pos",
													"nodeType": "YulIdentifier",
													"src": "1876:3:13"
												},
												{
													"kind": "number",
													"nodeType": "YulLiteral",
													"src": "1881:4:13",
													"type": "",
													"value": "0x20"
												}
											],
											"functionName": {
												"name": "add",
												"nodeType": "YulIdentifier",
												"src": "1872:3:13"
											},
											"nodeType": "YulFunctionCall",
											"src": "1872:14:13"
										},
										"variableNames": [
											{
												"name": "updated_pos",
												"nodeType": "YulIdentifier",
												"src": "1857:11:13"
											}
										]
									}
								]
							},
							"name": "array_storeLengthForEncoding_t_array$_t_struct$_VaultDetails_$2953_memory_ptr_$dyn_memory_ptr_fromStack",
							"nodeType": "YulFunctionDefinition",
							"parameters": [
								{
									"name": "pos",
									"nodeType": "YulTypedName",
									"src": "1791:3:13",
									"type": ""
								},
								{
									"name": "length",
									"nodeType": "YulTypedName",
									"src": "1796:6:13",
									"type": ""
								}
							],
							"returnVariables": [
								{
									"name": "updated_pos",
									"nodeType": "YulTypedName",
									"src": "1807:11:13",
									"type": ""
								}
							],
							"src": "1678:214:13"
						},
						{
							"body": {
								"nodeType": "YulBlock",
								"src": "2000:60:13",
								"statements": [
									{
										"nodeType": "YulAssignment",
										"src": "2010:11:13",
										"value": {
											"name": "ptr",
											"nodeType": "YulIdentifier",
											"src": "2018:3:13"
										},
										"variableNames": [
											{
												"name": "data",
												"nodeType": "YulIdentifier",
												"src": "2010:4:13"
											}
										]
									},
									{
										"nodeType": "YulAssignment",
										"src": "2031:22:13",
										"value": {
											"arguments": [
												{
													"name": "ptr",
													"nodeType": "YulIdentifier",
													"src": "2043:3:13"
												},
												{
													"kind": "number",
													"nodeType": "YulLiteral",
													"src": "2048:4:13",
													"type": "",
													"value": "0x20"
												}
											],
											"functionName": {
												"name": "add",
												"nodeType": "YulIdentifier",
												"src": "2039:3:13"
											},
											"nodeType": "YulFunctionCall",
											"src": "2039:14:13"
										},
										"variableNames": [
											{
												"name": "data",
												"nodeType": "YulIdentifier",
												"src": "2031:4:13"
											}
										]
									}
								]
							},
							"name": "array_dataslot_t_array$_t_struct$_VaultDetails_$2953_memory_ptr_$dyn_memory_ptr",
							"nodeType": "YulFunctionDefinition",
							"parameters": [
								{
									"name": "ptr",
									"nodeType": "YulTypedName",
									"src": "1987:3:13",
									"type": ""
								}
							],
							"returnVariables": [
								{
									"name": "data",
									"nodeType": "YulTypedName",
									"src": "1995:4:13",
									"type": ""
								}
							],
							"src": "1898:162:13"
						},
						{
							"body": {
								"nodeType": "YulBlock",
								"src": "2111:32:13",
								"statements": [
									{
										"nodeType": "YulAssignment",
										"src": "2121:16:13",
										"value": {
											"name": "value",
											"nodeType": "YulIdentifier",
											"src": "2132:5:13"
										},
										"variableNames": [
											{
												"name": "cleaned",
												"nodeType": "YulIdentifier",
												"src": "2121:7:13"
											}
										]
									}
								]
							},
							"name": "cleanup_t_uint256",
							"nodeType": "YulFunctionDefinition",
							"parameters": [
								{
									"name": "value",
									"nodeType": "YulTypedName",
									"src": "2093:5:13",
									"type": ""
								}
							],
							"returnVariables": [
								{
									"name": "cleaned",
									"nodeType": "YulTypedName",
									"src": "2103:7:13",
									"type": ""
								}
							],
							"src": "2066:77:13"
						},
						{
							"body": {
								"nodeType": "YulBlock",
								"src": "2204:53:13",
								"statements": [
									{
										"expression": {
											"arguments": [
												{
													"name": "pos",
													"nodeType": "YulIdentifier",
													"src": "2221:3:13"
												},
												{
													"arguments": [
														{
															"name": "value",
															"nodeType": "YulIdentifier",
															"src": "2244:5:13"
														}
													],
													"functionName": {
														"name": "cleanup_t_uint256",
														"nodeType": "YulIdentifier",
														"src": "2226:17:13"
													},
													"nodeType": "YulFunctionCall",
													"src": "2226:24:13"
												}
											],
											"functionName": {
												"name": "mstore",
												"nodeType": "YulIdentifier",
												"src": "2214:6:13"
											},
											"nodeType": "YulFunctionCall",
											"src": "2214:37:13"
										},
										"nodeType": "YulExpressionStatement",
										"src": "2214:37:13"
									}
								]
							},
							"name": "abi_encode_t_uint256_to_t_uint256",
							"nodeType": "YulFunctionDefinition",
							"parameters": [
								{
									"name": "value",
									"nodeType": "YulTypedName",
									"src": "2192:5:13",
									"type": ""
								},
								{
									"name": "pos",
									"nodeType": "YulTypedName",
									"src": "2199:3:13",
									"type": ""
								}
							],
							"src": "2149:108:13"
						},
						{
							"body": {
								"nodeType": "YulBlock",
								"src": "2337:40:13",
								"statements": [
									{
										"nodeType": "YulAssignment",
										"src": "2348:22:13",
										"value": {
											"arguments": [
												{
													"name": "value",
													"nodeType": "YulIdentifier",
													"src": "2364:5:13"
												}
											],
											"functionName": {
												"name": "mload",
												"nodeType": "YulIdentifier",
												"src": "2358:5:13"
											},
											"nodeType": "YulFunctionCall",
											"src": "2358:12:13"
										},
										"variableNames": [
											{
												"name": "length",
												"nodeType": "YulIdentifier",
												"src": "2348:6:13"
											}
										]
									}
								]
							},
							"name": "array_length_t_array$_t_uint256_$dyn_memory_ptr",
							"nodeType": "YulFunctionDefinition",
							"parameters": [
								{
									"name": "value",
									"nodeType": "YulTypedName",
									"src": "2320:5:13",
									"type": ""
								}
							],
							"returnVariables": [
								{
									"name": "length",
									"nodeType": "YulTypedName",
									"src": "2330:6:13",
									"type": ""
								}
							],
							"src": "2263:114:13"
						},
						{
							"body": {
								"nodeType": "YulBlock",
								"src": "2484:73:13",
								"statements": [
									{
										"expression": {
											"arguments": [
												{
													"name": "pos",
													"nodeType": "YulIdentifier",
													"src": "2501:3:13"
												},
												{
													"name": "length",
													"nodeType": "YulIdentifier",
													"src": "2506:6:13"
												}
											],
											"functionName": {
												"name": "mstore",
												"nodeType": "YulIdentifier",
												"src": "2494:6:13"
											},
											"nodeType": "YulFunctionCall",
											"src": "2494:19:13"
										},
										"nodeType": "YulExpressionStatement",
										"src": "2494:19:13"
									},
									{
										"nodeType": "YulAssignment",
										"src": "2522:29:13",
										"value": {
											"arguments": [
												{
													"name": "pos",
													"nodeType": "YulIdentifier",
													"src": "2541:3:13"
												},
												{
													"kind": "number",
													"nodeType": "YulLiteral",
													"src": "2546:4:13",
													"type": "",
													"value": "0x20"
												}
											],
											"functionName": {
												"name": "add",
												"nodeType": "YulIdentifier",
												"src": "2537:3:13"
											},
											"nodeType": "YulFunctionCall",
											"src": "2537:14:13"
										},
										"variableNames": [
											{
												"name": "updated_pos",
												"nodeType": "YulIdentifier",
												"src": "2522:11:13"
											}
										]
									}
								]
							},
							"name": "array_storeLengthForEncoding_t_array$_t_uint256_$dyn_memory_ptr",
							"nodeType": "YulFunctionDefinition",
							"parameters": [
								{
									"name": "pos",
									"nodeType": "YulTypedName",
									"src": "2456:3:13",
									"type": ""
								},
								{
									"name": "length",
									"nodeType": "YulTypedName",
									"src": "2461:6:13",
									"type": ""
								}
							],
							"returnVariables": [
								{
									"name": "updated_pos",
									"nodeType": "YulTypedName",
									"src": "2472:11:13",
									"type": ""
								}
							],
							"src": "2383:174:13"
						},
						{
							"body": {
								"nodeType": "YulBlock",
								"src": "2635:60:13",
								"statements": [
									{
										"nodeType": "YulAssignment",
										"src": "2645:11:13",
										"value": {
											"name": "ptr",
											"nodeType": "YulIdentifier",
											"src": "2653:3:13"
										},
										"variableNames": [
											{
												"name": "data",
												"nodeType": "YulIdentifier",
												"src": "2645:4:13"
											}
										]
									},
									{
										"nodeType": "YulAssignment",
										"src": "2666:22:13",
										"value": {
											"arguments": [
												{
													"name": "ptr",
													"nodeType": "YulIdentifier",
													"src": "2678:3:13"
												},
												{
													"kind": "number",
													"nodeType": "YulLiteral",
													"src": "2683:4:13",
													"type": "",
													"value": "0x20"
												}
											],
											"functionName": {
												"name": "add",
												"nodeType": "YulIdentifier",
												"src": "2674:3:13"
											},
											"nodeType": "YulFunctionCall",
											"src": "2674:14:13"
										},
										"variableNames": [
											{
												"name": "data",
												"nodeType": "YulIdentifier",
												"src": "2666:4:13"
											}
										]
									}
								]
							},
							"name": "array_dataslot_t_array$_t_uint256_$dyn_memory_ptr",
							"nodeType": "YulFunctionDefinition",
							"parameters": [
								{
									"name": "ptr",
									"nodeType": "YulTypedName",
									"src": "2622:3:13",
									"type": ""
								}
							],
							"returnVariables": [
								{
									"name": "data",
									"nodeType": "YulTypedName",
									"src": "2630:4:13",
									"type": ""
								}
							],
							"src": "2563:132:13"
						},
						{
							"body": {
								"nodeType": "YulBlock",
								"src": "2781:99:13",
								"statements": [
									{
										"expression": {
											"arguments": [
												{
													"name": "value0",
													"nodeType": "YulIdentifier",
													"src": "2825:6:13"
												},
												{
													"name": "pos",
													"nodeType": "YulIdentifier",
													"src": "2833:3:13"
												}
											],
											"functionName": {
												"name": "abi_encode_t_uint256_to_t_uint256",
												"nodeType": "YulIdentifier",
												"src": "2791:33:13"
											},
											"nodeType": "YulFunctionCall",
											"src": "2791:46:13"
										},
										"nodeType": "YulExpressionStatement",
										"src": "2791:46:13"
									},
									{
										"nodeType": "YulAssignment",
										"src": "2846:28:13",
										"value": {
											"arguments": [
												{
													"name": "pos",
													"nodeType": "YulIdentifier",
													"src": "2864:3:13"
												},
												{
													"kind": "number",
													"nodeType": "YulLiteral",
													"src": "2869:4:13",
													"type": "",
													"value": "0x20"
												}
											],
											"functionName": {
												"name": "add",
												"nodeType": "YulIdentifier",
												"src": "2860:3:13"
											},
											"nodeType": "YulFunctionCall",
											"src": "2860:14:13"
										},
										"variableNames": [
											{
												"name": "updatedPos",
												"nodeType": "YulIdentifier",
												"src": "2846:10:13"
											}
										]
									}
								]
							},
							"name": "abi_encodeUpdatedPos_t_uint256_to_t_uint256",
							"nodeType": "YulFunctionDefinition",
							"parameters": [
								{
									"name": "value0",
									"nodeType": "YulTypedName",
									"src": "2754:6:13",
									"type": ""
								},
								{
									"name": "pos",
									"nodeType": "YulTypedName",
									"src": "2762:3:13",
									"type": ""
								}
							],
							"returnVariables": [
								{
									"name": "updatedPos",
									"nodeType": "YulTypedName",
									"src": "2770:10:13",
									"type": ""
								}
							],
							"src": "2701:179:13"
						},
						{
							"body": {
								"nodeType": "YulBlock",
								"src": "2961:38:13",
								"statements": [
									{
										"nodeType": "YulAssignment",
										"src": "2971:22:13",
										"value": {
											"arguments": [
												{
													"name": "ptr",
													"nodeType": "YulIdentifier",
													"src": "2983:3:13"
												},
												{
													"kind": "number",
													"nodeType": "YulLiteral",
													"src": "2988:4:13",
													"type": "",
													"value": "0x20"
												}
											],
											"functionName": {
												"name": "add",
												"nodeType": "YulIdentifier",
												"src": "2979:3:13"
											},
											"nodeType": "YulFunctionCall",
											"src": "2979:14:13"
										},
										"variableNames": [
											{
												"name": "next",
												"nodeType": "YulIdentifier",
												"src": "2971:4:13"
											}
										]
									}
								]
							},
							"name": "array_nextElement_t_array$_t_uint256_$dyn_memory_ptr",
							"nodeType": "YulFunctionDefinition",
							"parameters": [
								{
									"name": "ptr",
									"nodeType": "YulTypedName",
									"src": "2948:3:13",
									"type": ""
								}
							],
							"returnVariables": [
								{
									"name": "next",
									"nodeType": "YulTypedName",
									"src": "2956:4:13",
									"type": ""
								}
							],
							"src": "2886:113:13"
						},
						{
							"body": {
								"nodeType": "YulBlock",
								"src": "3149:598:13",
								"statements": [
									{
										"nodeType": "YulVariableDeclaration",
										"src": "3159:68:13",
										"value": {
											"arguments": [
												{
													"name": "value",
													"nodeType": "YulIdentifier",
													"src": "3221:5:13"
												}
											],
											"functionName": {
												"name": "array_length_t_array$_t_uint256_$dyn_memory_ptr",
												"nodeType": "YulIdentifier",
												"src": "3173:47:13"
											},
											"nodeType": "YulFunctionCall",
											"src": "3173:54:13"
										},
										"variables": [
											{
												"name": "length",
												"nodeType": "YulTypedName",
												"src": "3163:6:13",
												"type": ""
											}
										]
									},
									{
										"nodeType": "YulAssignment",
										"src": "3236:83:13",
										"value": {
											"arguments": [
												{
													"name": "pos",
													"nodeType": "YulIdentifier",
													"src": "3307:3:13"
												},
												{
													"name": "length",
													"nodeType": "YulIdentifier",
													"src": "3312:6:13"
												}
											],
											"functionName": {
												"name": "array_storeLengthForEncoding_t_array$_t_uint256_$dyn_memory_ptr",
												"nodeType": "YulIdentifier",
												"src": "3243:63:13"
											},
											"nodeType": "YulFunctionCall",
											"src": "3243:76:13"
										},
										"variableNames": [
											{
												"name": "pos",
												"nodeType": "YulIdentifier",
												"src": "3236:3:13"
											}
										]
									},
									{
										"nodeType": "YulVariableDeclaration",
										"src": "3328:71:13",
										"value": {
											"arguments": [
												{
													"name": "value",
													"nodeType": "YulIdentifier",
													"src": "3393:5:13"
												}
											],
											"functionName": {
												"name": "array_dataslot_t_array$_t_uint256_$dyn_memory_ptr",
												"nodeType": "YulIdentifier",
												"src": "3343:49:13"
											},
											"nodeType": "YulFunctionCall",
											"src": "3343:56:13"
										},
										"variables": [
											{
												"name": "baseRef",
												"nodeType": "YulTypedName",
												"src": "3332:7:13",
												"type": ""
											}
										]
									},
									{
										"nodeType": "YulVariableDeclaration",
										"src": "3408:21:13",
										"value": {
											"name": "baseRef",
											"nodeType": "YulIdentifier",
											"src": "3422:7:13"
										},
										"variables": [
											{
												"name": "srcPtr",
												"nodeType": "YulTypedName",
												"src": "3412:6:13",
												"type": ""
											}
										]
									},
									{
										"body": {
											"nodeType": "YulBlock",
											"src": "3498:224:13",
											"statements": [
												{
													"nodeType": "YulVariableDeclaration",
													"src": "3512:34:13",
													"value": {
														"arguments": [
															{
																"name": "srcPtr",
																"nodeType": "YulIdentifier",
																"src": "3539:6:13"
															}
														],
														"functionName": {
															"name": "mload",
															"nodeType": "YulIdentifier",
															"src": "3533:5:13"
														},
														"nodeType": "YulFunctionCall",
														"src": "3533:13:13"
													},
													"variables": [
														{
															"name": "elementValue0",
															"nodeType": "YulTypedName",
															"src": "3516:13:13",
															"type": ""
														}
													]
												},
												{
													"nodeType": "YulAssignment",
													"src": "3559:70:13",
													"value": {
														"arguments": [
															{
																"name": "elementValue0",
																"nodeType": "YulIdentifier",
																"src": "3610:13:13"
															},
															{
																"name": "pos",
																"nodeType": "YulIdentifier",
																"src": "3625:3:13"
															}
														],
														"functionName": {
															"name": "abi_encodeUpdatedPos_t_uint256_to_t_uint256",
															"nodeType": "YulIdentifier",
															"src": "3566:43:13"
														},
														"nodeType": "YulFunctionCall",
														"src": "3566:63:13"
													},
													"variableNames": [
														{
															"name": "pos",
															"nodeType": "YulIdentifier",
															"src": "3559:3:13"
														}
													]
												},
												{
													"nodeType": "YulAssignment",
													"src": "3642:70:13",
													"value": {
														"arguments": [
															{
																"name": "srcPtr",
																"nodeType": "YulIdentifier",
																"src": "3705:6:13"
															}
														],
														"functionName": {
															"name": "array_nextElement_t_array$_t_uint256_$dyn_memory_ptr",
															"nodeType": "YulIdentifier",
															"src": "3652:52:13"
														},
														"nodeType": "YulFunctionCall",
														"src": "3652:60:13"
													},
													"variableNames": [
														{
															"name": "srcPtr",
															"nodeType": "YulIdentifier",
															"src": "3642:6:13"
														}
													]
												}
											]
										},
										"condition": {
											"arguments": [
												{
													"name": "i",
													"nodeType": "YulIdentifier",
													"src": "3460:1:13"
												},
												{
													"name": "length",
													"nodeType": "YulIdentifier",
													"src": "3463:6:13"
												}
											],
											"functionName": {
												"name": "lt",
												"nodeType": "YulIdentifier",
												"src": "3457:2:13"
											},
											"nodeType": "YulFunctionCall",
											"src": "3457:13:13"
										},
										"nodeType": "YulForLoop",
										"post": {
											"nodeType": "YulBlock",
											"src": "3471:18:13",
											"statements": [
												{
													"nodeType": "YulAssignment",
													"src": "3473:14:13",
													"value": {
														"arguments": [
															{
																"name": "i",
																"nodeType": "YulIdentifier",
																"src": "3482:1:13"
															},
															{
																"kind": "number",
																"nodeType": "YulLiteral",
																"src": "3485:1:13",
																"type": "",
																"value": "1"
															}
														],
														"functionName": {
															"name": "add",
															"nodeType": "YulIdentifier",
															"src": "3478:3:13"
														},
														"nodeType": "YulFunctionCall",
														"src": "3478:9:13"
													},
													"variableNames": [
														{
															"name": "i",
															"nodeType": "YulIdentifier",
															"src": "3473:1:13"
														}
													]
												}
											]
										},
										"pre": {
											"nodeType": "YulBlock",
											"src": "3442:14:13",
											"statements": [
												{
													"nodeType": "YulVariableDeclaration",
													"src": "3444:10:13",
													"value": {
														"kind": "number",
														"nodeType": "YulLiteral",
														"src": "3453:1:13",
														"type": "",
														"value": "0"
													},
													"variables": [
														{
															"name": "i",
															"nodeType": "YulTypedName",
															"src": "3448:1:13",
															"type": ""
														}
													]
												}
											]
										},
										"src": "3438:284:13"
									},
									{
										"nodeType": "YulAssignment",
										"src": "3731:10:13",
										"value": {
											"name": "pos",
											"nodeType": "YulIdentifier",
											"src": "3738:3:13"
										},
										"variableNames": [
											{
												"name": "end",
												"nodeType": "YulIdentifier",
												"src": "3731:3:13"
											}
										]
									}
								]
							},
							"name": "abi_encode_t_array$_t_uint256_$dyn_memory_ptr_to_t_array$_t_uint256_$dyn_memory_ptr",
							"nodeType": "YulFunctionDefinition",
							"parameters": [
								{
									"name": "value",
									"nodeType": "YulTypedName",
									"src": "3128:5:13",
									"type": ""
								},
								{
									"name": "pos",
									"nodeType": "YulTypedName",
									"src": "3135:3:13",
									"type": ""
								}
							],
							"returnVariables": [
								{
									"name": "end",
									"nodeType": "YulTypedName",
									"src": "3144:3:13",
									"type": ""
								}
							],
							"src": "3035:712:13"
						},
						{
							"body": {
								"nodeType": "YulBlock",
								"src": "3808:53:13",
								"statements": [
									{
										"expression": {
											"arguments": [
												{
													"name": "pos",
													"nodeType": "YulIdentifier",
													"src": "3825:3:13"
												},
												{
													"arguments": [
														{
															"name": "value",
															"nodeType": "YulIdentifier",
															"src": "3848:5:13"
														}
													],
													"functionName": {
														"name": "cleanup_t_address",
														"nodeType": "YulIdentifier",
														"src": "3830:17:13"
													},
													"nodeType": "YulFunctionCall",
													"src": "3830:24:13"
												}
											],
											"functionName": {
												"name": "mstore",
												"nodeType": "YulIdentifier",
												"src": "3818:6:13"
											},
											"nodeType": "YulFunctionCall",
											"src": "3818:37:13"
										},
										"nodeType": "YulExpressionStatement",
										"src": "3818:37:13"
									}
								]
							},
							"name": "abi_encode_t_address_to_t_address",
							"nodeType": "YulFunctionDefinition",
							"parameters": [
								{
									"name": "value",
									"nodeType": "YulTypedName",
									"src": "3796:5:13",
									"type": ""
								},
								{
									"name": "pos",
									"nodeType": "YulTypedName",
									"src": "3803:3:13",
									"type": ""
								}
							],
							"src": "3753:108:13"
						},
						{
							"body": {
								"nodeType": "YulBlock",
								"src": "4063:908:13",
								"statements": [
									{
										"nodeType": "YulVariableDeclaration",
										"src": "4073:26:13",
										"value": {
											"arguments": [
												{
													"name": "pos",
													"nodeType": "YulIdentifier",
													"src": "4089:3:13"
												},
												{
													"kind": "number",
													"nodeType": "YulLiteral",
													"src": "4094:4:13",
													"type": "",
													"value": "0x80"
												}
											],
											"functionName": {
												"name": "add",
												"nodeType": "YulIdentifier",
												"src": "4085:3:13"
											},
											"nodeType": "YulFunctionCall",
											"src": "4085:14:13"
										},
										"variables": [
											{
												"name": "tail",
												"nodeType": "YulTypedName",
												"src": "4077:4:13",
												"type": ""
											}
										]
									},
									{
										"nodeType": "YulBlock",
										"src": "4109:172:13",
										"statements": [
											{
												"nodeType": "YulVariableDeclaration",
												"src": "4152:43:13",
												"value": {
													"arguments": [
														{
															"arguments": [
																{
																	"name": "value",
																	"nodeType": "YulIdentifier",
																	"src": "4182:5:13"
																},
																{
																	"kind": "number",
																	"nodeType": "YulLiteral",
																	"src": "4189:4:13",
																	"type": "",
																	"value": "0x00"
																}
															],
															"functionName": {
																"name": "add",
																"nodeType": "YulIdentifier",
																"src": "4178:3:13"
															},
															"nodeType": "YulFunctionCall",
															"src": "4178:16:13"
														}
													],
													"functionName": {
														"name": "mload",
														"nodeType": "YulIdentifier",
														"src": "4172:5:13"
													},
													"nodeType": "YulFunctionCall",
													"src": "4172:23:13"
												},
												"variables": [
													{
														"name": "memberValue0",
														"nodeType": "YulTypedName",
														"src": "4156:12:13",
														"type": ""
													}
												]
											},
											{
												"expression": {
													"arguments": [
														{
															"name": "memberValue0",
															"nodeType": "YulIdentifier",
															"src": "4242:12:13"
														},
														{
															"arguments": [
																{
																	"name": "pos",
																	"nodeType": "YulIdentifier",
																	"src": "4260:3:13"
																},
																{
																	"kind": "number",
																	"nodeType": "YulLiteral",
																	"src": "4265:4:13",
																	"type": "",
																	"value": "0x00"
																}
															],
															"functionName": {
																"name": "add",
																"nodeType": "YulIdentifier",
																"src": "4256:3:13"
															},
															"nodeType": "YulFunctionCall",
															"src": "4256:14:13"
														}
													],
													"functionName": {
														"name": "abi_encode_t_uint256_to_t_uint256",
														"nodeType": "YulIdentifier",
														"src": "4208:33:13"
													},
													"nodeType": "YulFunctionCall",
													"src": "4208:63:13"
												},
												"nodeType": "YulExpressionStatement",
												"src": "4208:63:13"
											}
										]
									},
									{
										"nodeType": "YulBlock",
										"src": "4291:179:13",
										"statements": [
											{
												"nodeType": "YulVariableDeclaration",
												"src": "4341:43:13",
												"value": {
													"arguments": [
														{
															"arguments": [
																{
																	"name": "value",
																	"nodeType": "YulIdentifier",
																	"src": "4371:5:13"
																},
																{
																	"kind": "number",
																	"nodeType": "YulLiteral",
																	"src": "4378:4:13",
																	"type": "",
																	"value": "0x20"
																}
															],
															"functionName": {
																"name": "add",
																"nodeType": "YulIdentifier",
																"src": "4367:3:13"
															},
															"nodeType": "YulFunctionCall",
															"src": "4367:16:13"
														}
													],
													"functionName": {
														"name": "mload",
														"nodeType": "YulIdentifier",
														"src": "4361:5:13"
													},
													"nodeType": "YulFunctionCall",
													"src": "4361:23:13"
												},
												"variables": [
													{
														"name": "memberValue0",
														"nodeType": "YulTypedName",
														"src": "4345:12:13",
														"type": ""
													}
												]
											},
											{
												"expression": {
													"arguments": [
														{
															"name": "memberValue0",
															"nodeType": "YulIdentifier",
															"src": "4431:12:13"
														},
														{
															"arguments": [
																{
																	"name": "pos",
																	"nodeType": "YulIdentifier",
																	"src": "4449:3:13"
																},
																{
																	"kind": "number",
																	"nodeType": "YulLiteral",
																	"src": "4454:4:13",
																	"type": "",
																	"value": "0x20"
																}
															],
															"functionName": {
																"name": "add",
																"nodeType": "YulIdentifier",
																"src": "4445:3:13"
															},
															"nodeType": "YulFunctionCall",
															"src": "4445:14:13"
														}
													],
													"functionName": {
														"name": "abi_encode_t_uint256_to_t_uint256",
														"nodeType": "YulIdentifier",
														"src": "4397:33:13"
													},
													"nodeType": "YulFunctionCall",
													"src": "4397:63:13"
												},
												"nodeType": "YulExpressionStatement",
												"src": "4397:63:13"
											}
										]
									},
									{
										"nodeType": "YulBlock",
										"src": "4480:276:13",
										"statements": [
											{
												"nodeType": "YulVariableDeclaration",
												"src": "4526:43:13",
												"value": {
													"arguments": [
														{
															"arguments": [
																{
																	"name": "value",
																	"nodeType": "YulIdentifier",
																	"src": "4556:5:13"
																},
																{
																	"kind": "number",
																	"nodeType": "YulLiteral",
																	"src": "4563:4:13",
																	"type": "",
																	"value": "0x40"
																}
															],
															"functionName": {
																"name": "add",
																"nodeType": "YulIdentifier",
																"src": "4552:3:13"
															},
															"nodeType": "YulFunctionCall",
															"src": "4552:16:13"
														}
													],
													"functionName": {
														"name": "mload",
														"nodeType": "YulIdentifier",
														"src": "4546:5:13"
													},
													"nodeType": "YulFunctionCall",
													"src": "4546:23:13"
												},
												"variables": [
													{
														"name": "memberValue0",
														"nodeType": "YulTypedName",
														"src": "4530:12:13",
														"type": ""
													}
												]
											},
											{
												"expression": {
													"arguments": [
														{
															"arguments": [
																{
																	"name": "pos",
																	"nodeType": "YulIdentifier",
																	"src": "4594:3:13"
																},
																{
																	"kind": "number",
																	"nodeType": "YulLiteral",
																	"src": "4599:4:13",
																	"type": "",
																	"value": "0x40"
																}
															],
															"functionName": {
																"name": "add",
																"nodeType": "YulIdentifier",
																"src": "4590:3:13"
															},
															"nodeType": "YulFunctionCall",
															"src": "4590:14:13"
														},
														{
															"arguments": [
																{
																	"name": "tail",
																	"nodeType": "YulIdentifier",
																	"src": "4610:4:13"
																},
																{
																	"name": "pos",
																	"nodeType": "YulIdentifier",
																	"src": "4616:3:13"
																}
															],
															"functionName": {
																"name": "sub",
																"nodeType": "YulIdentifier",
																"src": "4606:3:13"
															},
															"nodeType": "YulFunctionCall",
															"src": "4606:14:13"
														}
													],
													"functionName": {
														"name": "mstore",
														"nodeType": "YulIdentifier",
														"src": "4583:6:13"
													},
													"nodeType": "YulFunctionCall",
													"src": "4583:38:13"
												},
												"nodeType": "YulExpressionStatement",
												"src": "4583:38:13"
											},
											{
												"nodeType": "YulAssignment",
												"src": "4634:111:13",
												"value": {
													"arguments": [
														{
															"name": "memberValue0",
															"nodeType": "YulIdentifier",
															"src": "4726:12:13"
														},
														{
															"name": "tail",
															"nodeType": "YulIdentifier",
															"src": "4740:4:13"
														}
													],
													"functionName": {
														"name": "abi_encode_t_array$_t_uint256_$dyn_memory_ptr_to_t_array$_t_uint256_$dyn_memory_ptr",
														"nodeType": "YulIdentifier",
														"src": "4642:83:13"
													},
													"nodeType": "YulFunctionCall",
													"src": "4642:103:13"
												},
												"variableNames": [
													{
														"name": "tail",
														"nodeType": "YulIdentifier",
														"src": "4634:4:13"
													}
												]
											}
										]
									},
									{
										"nodeType": "YulBlock",
										"src": "4766:178:13",
										"statements": [
											{
												"nodeType": "YulVariableDeclaration",
												"src": "4815:43:13",
												"value": {
													"arguments": [
														{
															"arguments": [
																{
																	"name": "value",
																	"nodeType": "YulIdentifier",
																	"src": "4845:5:13"
																},
																{
																	"kind": "number",
																	"nodeType": "YulLiteral",
																	"src": "4852:4:13",
																	"type": "",
																	"value": "0x60"
																}
															],
															"functionName": {
																"name": "add",
																"nodeType": "YulIdentifier",
																"src": "4841:3:13"
															},
															"nodeType": "YulFunctionCall",
															"src": "4841:16:13"
														}
													],
													"functionName": {
														"name": "mload",
														"nodeType": "YulIdentifier",
														"src": "4835:5:13"
													},
													"nodeType": "YulFunctionCall",
													"src": "4835:23:13"
												},
												"variables": [
													{
														"name": "memberValue0",
														"nodeType": "YulTypedName",
														"src": "4819:12:13",
														"type": ""
													}
												]
											},
											{
												"expression": {
													"arguments": [
														{
															"name": "memberValue0",
															"nodeType": "YulIdentifier",
															"src": "4905:12:13"
														},
														{
															"arguments": [
																{
																	"name": "pos",
																	"nodeType": "YulIdentifier",
																	"src": "4923:3:13"
																},
																{
																	"kind": "number",
																	"nodeType": "YulLiteral",
																	"src": "4928:4:13",
																	"type": "",
																	"value": "0x60"
																}
															],
															"functionName": {
																"name": "add",
																"nodeType": "YulIdentifier",
																"src": "4919:3:13"
															},
															"nodeType": "YulFunctionCall",
															"src": "4919:14:13"
														}
													],
													"functionName": {
														"name": "abi_encode_t_address_to_t_address",
														"nodeType": "YulIdentifier",
														"src": "4871:33:13"
													},
													"nodeType": "YulFunctionCall",
													"src": "4871:63:13"
												},
												"nodeType": "YulExpressionStatement",
												"src": "4871:63:13"
											}
										]
									},
									{
										"nodeType": "YulAssignment",
										"src": "4954:11:13",
										"value": {
											"name": "tail",
											"nodeType": "YulIdentifier",
											"src": "4961:4:13"
										},
										"variableNames": [
											{
												"name": "end",
												"nodeType": "YulIdentifier",
												"src": "4954:3:13"
											}
										]
									}
								]
							},
							"name": "abi_encode_t_struct$_VaultDetails_$2953_memory_ptr_to_t_struct$_VaultDetails_$2953_memory_ptr",
							"nodeType": "YulFunctionDefinition",
							"parameters": [
								{
									"name": "value",
									"nodeType": "YulTypedName",
									"src": "4042:5:13",
									"type": ""
								},
								{
									"name": "pos",
									"nodeType": "YulTypedName",
									"src": "4049:3:13",
									"type": ""
								}
							],
							"returnVariables": [
								{
									"name": "end",
									"nodeType": "YulTypedName",
									"src": "4058:3:13",
									"type": ""
								}
							],
							"src": "3939:1032:13"
						},
						{
							"body": {
								"nodeType": "YulBlock",
								"src": "5117:136:13",
								"statements": [
									{
										"nodeType": "YulAssignment",
										"src": "5127:120:13",
										"value": {
											"arguments": [
												{
													"name": "value0",
													"nodeType": "YulIdentifier",
													"src": "5235:6:13"
												},
												{
													"name": "pos",
													"nodeType": "YulIdentifier",
													"src": "5243:3:13"
												}
											],
											"functionName": {
												"name": "abi_encode_t_struct$_VaultDetails_$2953_memory_ptr_to_t_struct$_VaultDetails_$2953_memory_ptr",
												"nodeType": "YulIdentifier",
												"src": "5141:93:13"
											},
											"nodeType": "YulFunctionCall",
											"src": "5141:106:13"
										},
										"variableNames": [
											{
												"name": "updatedPos",
												"nodeType": "YulIdentifier",
												"src": "5127:10:13"
											}
										]
									}
								]
							},
							"name": "abi_encodeUpdatedPos_t_struct$_VaultDetails_$2953_memory_ptr_to_t_struct$_VaultDetails_$2953_memory_ptr",
							"nodeType": "YulFunctionDefinition",
							"parameters": [
								{
									"name": "value0",
									"nodeType": "YulTypedName",
									"src": "5090:6:13",
									"type": ""
								},
								{
									"name": "pos",
									"nodeType": "YulTypedName",
									"src": "5098:3:13",
									"type": ""
								}
							],
							"returnVariables": [
								{
									"name": "updatedPos",
									"nodeType": "YulTypedName",
									"src": "5106:10:13",
									"type": ""
								}
							],
							"src": "4977:276:13"
						},
						{
							"body": {
								"nodeType": "YulBlock",
								"src": "5364:38:13",
								"statements": [
									{
										"nodeType": "YulAssignment",
										"src": "5374:22:13",
										"value": {
											"arguments": [
												{
													"name": "ptr",
													"nodeType": "YulIdentifier",
													"src": "5386:3:13"
												},
												{
													"kind": "number",
													"nodeType": "YulLiteral",
													"src": "5391:4:13",
													"type": "",
													"value": "0x20"
												}
											],
											"functionName": {
												"name": "add",
												"nodeType": "YulIdentifier",
												"src": "5382:3:13"
											},
											"nodeType": "YulFunctionCall",
											"src": "5382:14:13"
										},
										"variableNames": [
											{
												"name": "next",
												"nodeType": "YulIdentifier",
												"src": "5374:4:13"
											}
										]
									}
								]
							},
							"name": "array_nextElement_t_array$_t_struct$_VaultDetails_$2953_memory_ptr_$dyn_memory_ptr",
							"nodeType": "YulFunctionDefinition",
							"parameters": [
								{
									"name": "ptr",
									"nodeType": "YulTypedName",
									"src": "5351:3:13",
									"type": ""
								}
							],
							"returnVariables": [
								{
									"name": "next",
									"nodeType": "YulTypedName",
									"src": "5359:4:13",
									"type": ""
								}
							],
							"src": "5259:143:13"
						},
						{
							"body": {
								"nodeType": "YulBlock",
								"src": "5668:967:13",
								"statements": [
									{
										"nodeType": "YulVariableDeclaration",
										"src": "5678:98:13",
										"value": {
											"arguments": [
												{
													"name": "value",
													"nodeType": "YulIdentifier",
													"src": "5770:5:13"
												}
											],
											"functionName": {
												"name": "array_length_t_array$_t_struct$_VaultDetails_$2953_memory_ptr_$dyn_memory_ptr",
												"nodeType": "YulIdentifier",
												"src": "5692:77:13"
											},
											"nodeType": "YulFunctionCall",
											"src": "5692:84:13"
										},
										"variables": [
											{
												"name": "length",
												"nodeType": "YulTypedName",
												"src": "5682:6:13",
												"type": ""
											}
										]
									},
									{
										"nodeType": "YulAssignment",
										"src": "5785:123:13",
										"value": {
											"arguments": [
												{
													"name": "pos",
													"nodeType": "YulIdentifier",
													"src": "5896:3:13"
												},
												{
													"name": "length",
													"nodeType": "YulIdentifier",
													"src": "5901:6:13"
												}
											],
											"functionName": {
												"name": "array_storeLengthForEncoding_t_array$_t_struct$_VaultDetails_$2953_memory_ptr_$dyn_memory_ptr_fromStack",
												"nodeType": "YulIdentifier",
												"src": "5792:103:13"
											},
											"nodeType": "YulFunctionCall",
											"src": "5792:116:13"
										},
										"variableNames": [
											{
												"name": "pos",
												"nodeType": "YulIdentifier",
												"src": "5785:3:13"
											}
										]
									},
									{
										"nodeType": "YulVariableDeclaration",
										"src": "5917:20:13",
										"value": {
											"name": "pos",
											"nodeType": "YulIdentifier",
											"src": "5934:3:13"
										},
										"variables": [
											{
												"name": "headStart",
												"nodeType": "YulTypedName",
												"src": "5921:9:13",
												"type": ""
											}
										]
									},
									{
										"nodeType": "YulVariableDeclaration",
										"src": "5946:39:13",
										"value": {
											"arguments": [
												{
													"name": "pos",
													"nodeType": "YulIdentifier",
													"src": "5962:3:13"
												},
												{
													"arguments": [
														{
															"name": "length",
															"nodeType": "YulIdentifier",
															"src": "5971:6:13"
														},
														{
															"kind": "number",
															"nodeType": "YulLiteral",
															"src": "5979:4:13",
															"type": "",
															"value": "0x20"
														}
													],
													"functionName": {
														"name": "mul",
														"nodeType": "YulIdentifier",
														"src": "5967:3:13"
													},
													"nodeType": "YulFunctionCall",
													"src": "5967:17:13"
												}
											],
											"functionName": {
												"name": "add",
												"nodeType": "YulIdentifier",
												"src": "5958:3:13"
											},
											"nodeType": "YulFunctionCall",
											"src": "5958:27:13"
										},
										"variables": [
											{
												"name": "tail",
												"nodeType": "YulTypedName",
												"src": "5950:4:13",
												"type": ""
											}
										]
									},
									{
										"nodeType": "YulVariableDeclaration",
										"src": "5994:101:13",
										"value": {
											"arguments": [
												{
													"name": "value",
													"nodeType": "YulIdentifier",
													"src": "6089:5:13"
												}
											],
											"functionName": {
												"name": "array_dataslot_t_array$_t_struct$_VaultDetails_$2953_memory_ptr_$dyn_memory_ptr",
												"nodeType": "YulIdentifier",
												"src": "6009:79:13"
											},
											"nodeType": "YulFunctionCall",
											"src": "6009:86:13"
										},
										"variables": [
											{
												"name": "baseRef",
												"nodeType": "YulTypedName",
												"src": "5998:7:13",
												"type": ""
											}
										]
									},
									{
										"nodeType": "YulVariableDeclaration",
										"src": "6104:21:13",
										"value": {
											"name": "baseRef",
											"nodeType": "YulIdentifier",
											"src": "6118:7:13"
										},
										"variables": [
											{
												"name": "srcPtr",
												"nodeType": "YulTypedName",
												"src": "6108:6:13",
												"type": ""
											}
										]
									},
									{
										"body": {
											"nodeType": "YulBlock",
											"src": "6194:396:13",
											"statements": [
												{
													"expression": {
														"arguments": [
															{
																"name": "pos",
																"nodeType": "YulIdentifier",
																"src": "6215:3:13"
															},
															{
																"arguments": [
																	{
																		"name": "tail",
																		"nodeType": "YulIdentifier",
																		"src": "6224:4:13"
																	},
																	{
																		"name": "headStart",
																		"nodeType": "YulIdentifier",
																		"src": "6230:9:13"
																	}
																],
																"functionName": {
																	"name": "sub",
																	"nodeType": "YulIdentifier",
																	"src": "6220:3:13"
																},
																"nodeType": "YulFunctionCall",
																"src": "6220:20:13"
															}
														],
														"functionName": {
															"name": "mstore",
															"nodeType": "YulIdentifier",
															"src": "6208:6:13"
														},
														"nodeType": "YulFunctionCall",
														"src": "6208:33:13"
													},
													"nodeType": "YulExpressionStatement",
													"src": "6208:33:13"
												},
												{
													"nodeType": "YulVariableDeclaration",
													"src": "6254:34:13",
													"value": {
														"arguments": [
															{
																"name": "srcPtr",
																"nodeType": "YulIdentifier",
																"src": "6281:6:13"
															}
														],
														"functionName": {
															"name": "mload",
															"nodeType": "YulIdentifier",
															"src": "6275:5:13"
														},
														"nodeType": "YulFunctionCall",
														"src": "6275:13:13"
													},
													"variables": [
														{
															"name": "elementValue0",
															"nodeType": "YulTypedName",
															"src": "6258:13:13",
															"type": ""
														}
													]
												},
												{
													"nodeType": "YulAssignment",
													"src": "6301:132:13",
													"value": {
														"arguments": [
															{
																"name": "elementValue0",
																"nodeType": "YulIdentifier",
																"src": "6413:13:13"
															},
															{
																"name": "tail",
																"nodeType": "YulIdentifier",
																"src": "6428:4:13"
															}
														],
														"functionName": {
															"name": "abi_encodeUpdatedPos_t_struct$_VaultDetails_$2953_memory_ptr_to_t_struct$_VaultDetails_$2953_memory_ptr",
															"nodeType": "YulIdentifier",
															"src": "6309:103:13"
														},
														"nodeType": "YulFunctionCall",
														"src": "6309:124:13"
													},
													"variableNames": [
														{
															"name": "tail",
															"nodeType": "YulIdentifier",
															"src": "6301:4:13"
														}
													]
												},
												{
													"nodeType": "YulAssignment",
													"src": "6446:100:13",
													"value": {
														"arguments": [
															{
																"name": "srcPtr",
																"nodeType": "YulIdentifier",
																"src": "6539:6:13"
															}
														],
														"functionName": {
															"name": "array_nextElement_t_array$_t_struct$_VaultDetails_$2953_memory_ptr_$dyn_memory_ptr",
															"nodeType": "YulIdentifier",
															"src": "6456:82:13"
														},
														"nodeType": "YulFunctionCall",
														"src": "6456:90:13"
													},
													"variableNames": [
														{
															"name": "srcPtr",
															"nodeType": "YulIdentifier",
															"src": "6446:6:13"
														}
													]
												},
												{
													"nodeType": "YulAssignment",
													"src": "6559:21:13",
													"value": {
														"arguments": [
															{
																"name": "pos",
																"nodeType": "YulIdentifier",
																"src": "6570:3:13"
															},
															{
																"kind": "number",
																"nodeType": "YulLiteral",
																"src": "6575:4:13",
																"type": "",
																"value": "0x20"
															}
														],
														"functionName": {
															"name": "add",
															"nodeType": "YulIdentifier",
															"src": "6566:3:13"
														},
														"nodeType": "YulFunctionCall",
														"src": "6566:14:13"
													},
													"variableNames": [
														{
															"name": "pos",
															"nodeType": "YulIdentifier",
															"src": "6559:3:13"
														}
													]
												}
											]
										},
										"condition": {
											"arguments": [
												{
													"name": "i",
													"nodeType": "YulIdentifier",
													"src": "6156:1:13"
												},
												{
													"name": "length",
													"nodeType": "YulIdentifier",
													"src": "6159:6:13"
												}
											],
											"functionName": {
												"name": "lt",
												"nodeType": "YulIdentifier",
												"src": "6153:2:13"
											},
											"nodeType": "YulFunctionCall",
											"src": "6153:13:13"
										},
										"nodeType": "YulForLoop",
										"post": {
											"nodeType": "YulBlock",
											"src": "6167:18:13",
											"statements": [
												{
													"nodeType": "YulAssignment",
													"src": "6169:14:13",
													"value": {
														"arguments": [
															{
																"name": "i",
																"nodeType": "YulIdentifier",
																"src": "6178:1:13"
															},
															{
																"kind": "number",
																"nodeType": "YulLiteral",
																"src": "6181:1:13",
																"type": "",
																"value": "1"
															}
														],
														"functionName": {
															"name": "add",
															"nodeType": "YulIdentifier",
															"src": "6174:3:13"
														},
														"nodeType": "YulFunctionCall",
														"src": "6174:9:13"
													},
													"variableNames": [
														{
															"name": "i",
															"nodeType": "YulIdentifier",
															"src": "6169:1:13"
														}
													]
												}
											]
										},
										"pre": {
											"nodeType": "YulBlock",
											"src": "6138:14:13",
											"statements": [
												{
													"nodeType": "YulVariableDeclaration",
													"src": "6140:10:13",
													"value": {
														"kind": "number",
														"nodeType": "YulLiteral",
														"src": "6149:1:13",
														"type": "",
														"value": "0"
													},
													"variables": [
														{
															"name": "i",
															"nodeType": "YulTypedName",
															"src": "6144:1:13",
															"type": ""
														}
													]
												}
											]
										},
										"src": "6134:456:13"
									},
									{
										"nodeType": "YulAssignment",
										"src": "6599:11:13",
										"value": {
											"name": "tail",
											"nodeType": "YulIdentifier",
											"src": "6606:4:13"
										},
										"variableNames": [
											{
												"name": "pos",
												"nodeType": "YulIdentifier",
												"src": "6599:3:13"
											}
										]
									},
									{
										"nodeType": "YulAssignment",
										"src": "6619:10:13",
										"value": {
											"name": "pos",
											"nodeType": "YulIdentifier",
											"src": "6626:3:13"
										},
										"variableNames": [
											{
												"name": "end",
												"nodeType": "YulIdentifier",
												"src": "6619:3:13"
											}
										]
									}
								]
							},
							"name": "abi_encode_t_array$_t_struct$_VaultDetails_$2953_memory_ptr_$dyn_memory_ptr_to_t_array$_t_struct$_VaultDetails_$2953_memory_ptr_$dyn_memory_ptr_fromStack",
							"nodeType": "YulFunctionDefinition",
							"parameters": [
								{
									"name": "value",
									"nodeType": "YulTypedName",
									"src": "5647:5:13",
									"type": ""
								},
								{
									"name": "pos",
									"nodeType": "YulTypedName",
									"src": "5654:3:13",
									"type": ""
								}
							],
							"returnVariables": [
								{
									"name": "end",
									"nodeType": "YulTypedName",
									"src": "5663:3:13",
									"type": ""
								}
							],
							"src": "5484:1151:13"
						},
						{
							"body": {
								"nodeType": "YulBlock",
								"src": "6849:285:13",
								"statements": [
									{
										"nodeType": "YulAssignment",
										"src": "6859:26:13",
										"value": {
											"arguments": [
												{
													"name": "headStart",
													"nodeType": "YulIdentifier",
													"src": "6871:9:13"
												},
												{
													"kind": "number",
													"nodeType": "YulLiteral",
													"src": "6882:2:13",
													"type": "",
													"value": "32"
												}
											],
											"functionName": {
												"name": "add",
												"nodeType": "YulIdentifier",
												"src": "6867:3:13"
											},
											"nodeType": "YulFunctionCall",
											"src": "6867:18:13"
										},
										"variableNames": [
											{
												"name": "tail",
												"nodeType": "YulIdentifier",
												"src": "6859:4:13"
											}
										]
									},
									{
										"expression": {
											"arguments": [
												{
													"arguments": [
														{
															"name": "headStart",
															"nodeType": "YulIdentifier",
															"src": "6906:9:13"
														},
														{
															"kind": "number",
															"nodeType": "YulLiteral",
															"src": "6917:1:13",
															"type": "",
															"value": "0"
														}
													],
													"functionName": {
														"name": "add",
														"nodeType": "YulIdentifier",
														"src": "6902:3:13"
													},
													"nodeType": "YulFunctionCall",
													"src": "6902:17:13"
												},
												{
													"arguments": [
														{
															"name": "tail",
															"nodeType": "YulIdentifier",
															"src": "6925:4:13"
														},
														{
															"name": "headStart",
															"nodeType": "YulIdentifier",
															"src": "6931:9:13"
														}
													],
													"functionName": {
														"name": "sub",
														"nodeType": "YulIdentifier",
														"src": "6921:3:13"
													},
													"nodeType": "YulFunctionCall",
													"src": "6921:20:13"
												}
											],
											"functionName": {
												"name": "mstore",
												"nodeType": "YulIdentifier",
												"src": "6895:6:13"
											},
											"nodeType": "YulFunctionCall",
											"src": "6895:47:13"
										},
										"nodeType": "YulExpressionStatement",
										"src": "6895:47:13"
									},
									{
										"nodeType": "YulAssignment",
										"src": "6951:176:13",
										"value": {
											"arguments": [
												{
													"name": "value0",
													"nodeType": "YulIdentifier",
													"src": "7113:6:13"
												},
												{
													"name": "tail",
													"nodeType": "YulIdentifier",
													"src": "7122:4:13"
												}
											],
											"functionName": {
												"name": "abi_encode_t_array$_t_struct$_VaultDetails_$2953_memory_ptr_$dyn_memory_ptr_to_t_array$_t_struct$_VaultDetails_$2953_memory_ptr_$dyn_memory_ptr_fromStack",
												"nodeType": "YulIdentifier",
												"src": "6959:153:13"
											},
											"nodeType": "YulFunctionCall",
											"src": "6959:168:13"
										},
										"variableNames": [
											{
												"name": "tail",
												"nodeType": "YulIdentifier",
												"src": "6951:4:13"
											}
										]
									}
								]
							},
							"name": "abi_encode_tuple_t_array$_t_struct$_VaultDetails_$2953_memory_ptr_$dyn_memory_ptr__to_t_array$_t_struct$_VaultDetails_$2953_memory_ptr_$dyn_memory_ptr__fromStack_reversed",
							"nodeType": "YulFunctionDefinition",
							"parameters": [
								{
									"name": "headStart",
									"nodeType": "YulTypedName",
									"src": "6821:9:13",
									"type": ""
								},
								{
									"name": "value0",
									"nodeType": "YulTypedName",
									"src": "6833:6:13",
									"type": ""
								}
							],
							"returnVariables": [
								{
									"name": "tail",
									"nodeType": "YulTypedName",
									"src": "6844:4:13",
									"type": ""
								}
							],
							"src": "6641:493:13"
						},
						{
							"body": {
								"nodeType": "YulBlock",
								"src": "7183:79:13",
								"statements": [
									{
										"body": {
											"nodeType": "YulBlock",
											"src": "7240:16:13",
											"statements": [
												{
													"expression": {
														"arguments": [
															{
																"kind": "number",
																"nodeType": "YulLiteral",
																"src": "7249:1:13",
																"type": "",
																"value": "0"
															},
															{
																"kind": "number",
																"nodeType": "YulLiteral",
																"src": "7252:1:13",
																"type": "",
																"value": "0"
															}
														],
														"functionName": {
															"name": "revert",
															"nodeType": "YulIdentifier",
															"src": "7242:6:13"
														},
														"nodeType": "YulFunctionCall",
														"src": "7242:12:13"
													},
													"nodeType": "YulExpressionStatement",
													"src": "7242:12:13"
												}
											]
										},
										"condition": {
											"arguments": [
												{
													"arguments": [
														{
															"name": "value",
															"nodeType": "YulIdentifier",
															"src": "7206:5:13"
														},
														{
															"arguments": [
																{
																	"name": "value",
																	"nodeType": "YulIdentifier",
																	"src": "7231:5:13"
																}
															],
															"functionName": {
																"name": "cleanup_t_uint256",
																"nodeType": "YulIdentifier",
																"src": "7213:17:13"
															},
															"nodeType": "YulFunctionCall",
															"src": "7213:24:13"
														}
													],
													"functionName": {
														"name": "eq",
														"nodeType": "YulIdentifier",
														"src": "7203:2:13"
													},
													"nodeType": "YulFunctionCall",
													"src": "7203:35:13"
												}
											],
											"functionName": {
												"name": "iszero",
												"nodeType": "YulIdentifier",
												"src": "7196:6:13"
											},
											"nodeType": "YulFunctionCall",
											"src": "7196:43:13"
										},
										"nodeType": "YulIf",
										"src": "7193:63:13"
									}
								]
							},
							"name": "validator_revert_t_uint256",
							"nodeType": "YulFunctionDefinition",
							"parameters": [
								{
									"name": "value",
									"nodeType": "YulTypedName",
									"src": "7176:5:13",
									"type": ""
								}
							],
							"src": "7140:122:13"
						},
						{
							"body": {
								"nodeType": "YulBlock",
								"src": "7320:87:13",
								"statements": [
									{
										"nodeType": "YulAssignment",
										"src": "7330:29:13",
										"value": {
											"arguments": [
												{
													"name": "offset",
													"nodeType": "YulIdentifier",
													"src": "7352:6:13"
												}
											],
											"functionName": {
												"name": "calldataload",
												"nodeType": "YulIdentifier",
												"src": "7339:12:13"
											},
											"nodeType": "YulFunctionCall",
											"src": "7339:20:13"
										},
										"variableNames": [
											{
												"name": "value",
												"nodeType": "YulIdentifier",
												"src": "7330:5:13"
											}
										]
									},
									{
										"expression": {
											"arguments": [
												{
													"name": "value",
													"nodeType": "YulIdentifier",
													"src": "7395:5:13"
												}
											],
											"functionName": {
												"name": "validator_revert_t_uint256",
												"nodeType": "YulIdentifier",
												"src": "7368:26:13"
											},
											"nodeType": "YulFunctionCall",
											"src": "7368:33:13"
										},
										"nodeType": "YulExpressionStatement",
										"src": "7368:33:13"
									}
								]
							},
							"name": "abi_decode_t_uint256",
							"nodeType": "YulFunctionDefinition",
							"parameters": [
								{
									"name": "offset",
									"nodeType": "YulTypedName",
									"src": "7298:6:13",
									"type": ""
								},
								{
									"name": "end",
									"nodeType": "YulTypedName",
									"src": "7306:3:13",
									"type": ""
								}
							],
							"returnVariables": [
								{
									"name": "value",
									"nodeType": "YulTypedName",
									"src": "7314:5:13",
									"type": ""
								}
							],
							"src": "7268:139:13"
						},
						{
							"body": {
								"nodeType": "YulBlock",
								"src": "7496:391:13",
								"statements": [
									{
										"body": {
											"nodeType": "YulBlock",
											"src": "7542:83:13",
											"statements": [
												{
													"expression": {
														"arguments": [],
														"functionName": {
															"name": "revert_error_dbdddcbe895c83990c08b3492a0e83918d802a52331272ac6fdb6a7c4aea3b1b",
															"nodeType": "YulIdentifier",
															"src": "7544:77:13"
														},
														"nodeType": "YulFunctionCall",
														"src": "7544:79:13"
													},
													"nodeType": "YulExpressionStatement",
													"src": "7544:79:13"
												}
											]
										},
										"condition": {
											"arguments": [
												{
													"arguments": [
														{
															"name": "dataEnd",
															"nodeType": "YulIdentifier",
															"src": "7517:7:13"
														},
														{
															"name": "headStart",
															"nodeType": "YulIdentifier",
															"src": "7526:9:13"
														}
													],
													"functionName": {
														"name": "sub",
														"nodeType": "YulIdentifier",
														"src": "7513:3:13"
													},
													"nodeType": "YulFunctionCall",
													"src": "7513:23:13"
												},
												{
													"kind": "number",
													"nodeType": "YulLiteral",
													"src": "7538:2:13",
													"type": "",
													"value": "64"
												}
											],
											"functionName": {
												"name": "slt",
												"nodeType": "YulIdentifier",
												"src": "7509:3:13"
											},
											"nodeType": "YulFunctionCall",
											"src": "7509:32:13"
										},
										"nodeType": "YulIf",
										"src": "7506:119:13"
									},
									{
										"nodeType": "YulBlock",
										"src": "7635:117:13",
										"statements": [
											{
												"nodeType": "YulVariableDeclaration",
												"src": "7650:15:13",
												"value": {
													"kind": "number",
													"nodeType": "YulLiteral",
													"src": "7664:1:13",
													"type": "",
													"value": "0"
												},
												"variables": [
													{
														"name": "offset",
														"nodeType": "YulTypedName",
														"src": "7654:6:13",
														"type": ""
													}
												]
											},
											{
												"nodeType": "YulAssignment",
												"src": "7679:63:13",
												"value": {
													"arguments": [
														{
															"arguments": [
																{
																	"name": "headStart",
																	"nodeType": "YulIdentifier",
																	"src": "7714:9:13"
																},
																{
																	"name": "offset",
																	"nodeType": "YulIdentifier",
																	"src": "7725:6:13"
																}
															],
															"functionName": {
																"name": "add",
																"nodeType": "YulIdentifier",
																"src": "7710:3:13"
															},
															"nodeType": "YulFunctionCall",
															"src": "7710:22:13"
														},
														{
															"name": "dataEnd",
															"nodeType": "YulIdentifier",
															"src": "7734:7:13"
														}
													],
													"functionName": {
														"name": "abi_decode_t_address",
														"nodeType": "YulIdentifier",
														"src": "7689:20:13"
													},
													"nodeType": "YulFunctionCall",
													"src": "7689:53:13"
												},
												"variableNames": [
													{
														"name": "value0",
														"nodeType": "YulIdentifier",
														"src": "7679:6:13"
													}
												]
											}
										]
									},
									{
										"nodeType": "YulBlock",
										"src": "7762:118:13",
										"statements": [
											{
												"nodeType": "YulVariableDeclaration",
												"src": "7777:16:13",
												"value": {
													"kind": "number",
													"nodeType": "YulLiteral",
													"src": "7791:2:13",
													"type": "",
													"value": "32"
												},
												"variables": [
													{
														"name": "offset",
														"nodeType": "YulTypedName",
														"src": "7781:6:13",
														"type": ""
													}
												]
											},
											{
												"nodeType": "YulAssignment",
												"src": "7807:63:13",
												"value": {
													"arguments": [
														{
															"arguments": [
																{
																	"name": "headStart",
																	"nodeType": "YulIdentifier",
																	"src": "7842:9:13"
																},
																{
																	"name": "offset",
																	"nodeType": "YulIdentifier",
																	"src": "7853:6:13"
																}
															],
															"functionName": {
																"name": "add",
																"nodeType": "YulIdentifier",
																"src": "7838:3:13"
															},
															"nodeType": "YulFunctionCall",
															"src": "7838:22:13"
														},
														{
															"name": "dataEnd",
															"nodeType": "YulIdentifier",
															"src": "7862:7:13"
														}
													],
													"functionName": {
														"name": "abi_decode_t_uint256",
														"nodeType": "YulIdentifier",
														"src": "7817:20:13"
													},
													"nodeType": "YulFunctionCall",
													"src": "7817:53:13"
												},
												"variableNames": [
													{
														"name": "value1",
														"nodeType": "YulIdentifier",
														"src": "7807:6:13"
													}
												]
											}
										]
									}
								]
							},
							"name": "abi_decode_tuple_t_addresst_uint256",
							"nodeType": "YulFunctionDefinition",
							"parameters": [
								{
									"name": "headStart",
									"nodeType": "YulTypedName",
									"src": "7458:9:13",
									"type": ""
								},
								{
									"name": "dataEnd",
									"nodeType": "YulTypedName",
									"src": "7469:7:13",
									"type": ""
								}
							],
							"returnVariables": [
								{
									"name": "value0",
									"nodeType": "YulTypedName",
									"src": "7481:6:13",
									"type": ""
								},
								{
									"name": "value1",
									"nodeType": "YulTypedName",
									"src": "7489:6:13",
									"type": ""
								}
							],
							"src": "7413:474:13"
						},
						{
							"body": {
								"nodeType": "YulBlock",
								"src": "7982:28:13",
								"statements": [
									{
										"expression": {
											"arguments": [
												{
													"kind": "number",
													"nodeType": "YulLiteral",
													"src": "7999:1:13",
													"type": "",
													"value": "0"
												},
												{
													"kind": "number",
													"nodeType": "YulLiteral",
													"src": "8002:1:13",
													"type": "",
													"value": "0"
												}
											],
											"functionName": {
												"name": "revert",
												"nodeType": "YulIdentifier",
												"src": "7992:6:13"
											},
											"nodeType": "YulFunctionCall",
											"src": "7992:12:13"
										},
										"nodeType": "YulExpressionStatement",
										"src": "7992:12:13"
									}
								]
							},
							"name": "revert_error_1b9f4a0a5773e33b91aa01db23bf8c55fce1411167c872835e7fa00a4f17d46d",
							"nodeType": "YulFunctionDefinition",
							"src": "7893:117:13"
						},
						{
							"body": {
								"nodeType": "YulBlock",
								"src": "8064:54:13",
								"statements": [
									{
										"nodeType": "YulAssignment",
										"src": "8074:38:13",
										"value": {
											"arguments": [
												{
													"arguments": [
														{
															"name": "value",
															"nodeType": "YulIdentifier",
															"src": "8092:5:13"
														},
														{
															"kind": "number",
															"nodeType": "YulLiteral",
															"src": "8099:2:13",
															"type": "",
															"value": "31"
														}
													],
													"functionName": {
														"name": "add",
														"nodeType": "YulIdentifier",
														"src": "8088:3:13"
													},
													"nodeType": "YulFunctionCall",
													"src": "8088:14:13"
												},
												{
													"arguments": [
														{
															"kind": "number",
															"nodeType": "YulLiteral",
															"src": "8108:2:13",
															"type": "",
															"value": "31"
														}
													],
													"functionName": {
														"name": "not",
														"nodeType": "YulIdentifier",
														"src": "8104:3:13"
													},
													"nodeType": "YulFunctionCall",
													"src": "8104:7:13"
												}
											],
											"functionName": {
												"name": "and",
												"nodeType": "YulIdentifier",
												"src": "8084:3:13"
											},
											"nodeType": "YulFunctionCall",
											"src": "8084:28:13"
										},
										"variableNames": [
											{
												"name": "result",
												"nodeType": "YulIdentifier",
												"src": "8074:6:13"
											}
										]
									}
								]
							},
							"name": "round_up_to_mul_of_32",
							"nodeType": "YulFunctionDefinition",
							"parameters": [
								{
									"name": "value",
									"nodeType": "YulTypedName",
									"src": "8047:5:13",
									"type": ""
								}
							],
							"returnVariables": [
								{
									"name": "result",
									"nodeType": "YulTypedName",
									"src": "8057:6:13",
									"type": ""
								}
							],
							"src": "8016:102:13"
						},
						{
							"body": {
								"nodeType": "YulBlock",
								"src": "8152:152:13",
								"statements": [
									{
										"expression": {
											"arguments": [
												{
													"kind": "number",
													"nodeType": "YulLiteral",
													"src": "8169:1:13",
													"type": "",
													"value": "0"
												},
												{
													"kind": "number",
													"nodeType": "YulLiteral",
													"src": "8172:77:13",
													"type": "",
													"value": "35408467139433450592217433187231851964531694900788300625387963629091585785856"
												}
											],
											"functionName": {
												"name": "mstore",
												"nodeType": "YulIdentifier",
												"src": "8162:6:13"
											},
											"nodeType": "YulFunctionCall",
											"src": "8162:88:13"
										},
										"nodeType": "YulExpressionStatement",
										"src": "8162:88:13"
									},
									{
										"expression": {
											"arguments": [
												{
													"kind": "number",
													"nodeType": "YulLiteral",
													"src": "8266:1:13",
													"type": "",
													"value": "4"
												},
												{
													"kind": "number",
													"nodeType": "YulLiteral",
													"src": "8269:4:13",
													"type": "",
													"value": "0x41"
												}
											],
											"functionName": {
												"name": "mstore",
												"nodeType": "YulIdentifier",
												"src": "8259:6:13"
											},
											"nodeType": "YulFunctionCall",
											"src": "8259:15:13"
										},
										"nodeType": "YulExpressionStatement",
										"src": "8259:15:13"
									},
									{
										"expression": {
											"arguments": [
												{
													"kind": "number",
													"nodeType": "YulLiteral",
													"src": "8290:1:13",
													"type": "",
													"value": "0"
												},
												{
													"kind": "number",
													"nodeType": "YulLiteral",
													"src": "8293:4:13",
													"type": "",
													"value": "0x24"
												}
											],
											"functionName": {
												"name": "revert",
												"nodeType": "YulIdentifier",
												"src": "8283:6:13"
											},
											"nodeType": "YulFunctionCall",
											"src": "8283:15:13"
										},
										"nodeType": "YulExpressionStatement",
										"src": "8283:15:13"
									}
								]
							},
							"name": "panic_error_0x41",
							"nodeType": "YulFunctionDefinition",
							"src": "8124:180:13"
						},
						{
							"body": {
								"nodeType": "YulBlock",
								"src": "8353:238:13",
								"statements": [
									{
										"nodeType": "YulVariableDeclaration",
										"src": "8363:58:13",
										"value": {
											"arguments": [
												{
													"name": "memPtr",
													"nodeType": "YulIdentifier",
													"src": "8385:6:13"
												},
												{
													"arguments": [
														{
															"name": "size",
															"nodeType": "YulIdentifier",
															"src": "8415:4:13"
														}
													],
													"functionName": {
														"name": "round_up_to_mul_of_32",
														"nodeType": "YulIdentifier",
														"src": "8393:21:13"
													},
													"nodeType": "YulFunctionCall",
													"src": "8393:27:13"
												}
											],
											"functionName": {
												"name": "add",
												"nodeType": "YulIdentifier",
												"src": "8381:3:13"
											},
											"nodeType": "YulFunctionCall",
											"src": "8381:40:13"
										},
										"variables": [
											{
												"name": "newFreePtr",
												"nodeType": "YulTypedName",
												"src": "8367:10:13",
												"type": ""
											}
										]
									},
									{
										"body": {
											"nodeType": "YulBlock",
											"src": "8532:22:13",
											"statements": [
												{
													"expression": {
														"arguments": [],
														"functionName": {
															"name": "panic_error_0x41",
															"nodeType": "YulIdentifier",
															"src": "8534:16:13"
														},
														"nodeType": "YulFunctionCall",
														"src": "8534:18:13"
													},
													"nodeType": "YulExpressionStatement",
													"src": "8534:18:13"
												}
											]
										},
										"condition": {
											"arguments": [
												{
													"arguments": [
														{
															"name": "newFreePtr",
															"nodeType": "YulIdentifier",
															"src": "8475:10:13"
														},
														{
															"kind": "number",
															"nodeType": "YulLiteral",
															"src": "8487:18:13",
															"type": "",
															"value": "0xffffffffffffffff"
														}
													],
													"functionName": {
														"name": "gt",
														"nodeType": "YulIdentifier",
														"src": "8472:2:13"
													},
													"nodeType": "YulFunctionCall",
													"src": "8472:34:13"
												},
												{
													"arguments": [
														{
															"name": "newFreePtr",
															"nodeType": "YulIdentifier",
															"src": "8511:10:13"
														},
														{
															"name": "memPtr",
															"nodeType": "YulIdentifier",
															"src": "8523:6:13"
														}
													],
													"functionName": {
														"name": "lt",
														"nodeType": "YulIdentifier",
														"src": "8508:2:13"
													},
													"nodeType": "YulFunctionCall",
													"src": "8508:22:13"
												}
											],
											"functionName": {
												"name": "or",
												"nodeType": "YulIdentifier",
												"src": "8469:2:13"
											},
											"nodeType": "YulFunctionCall",
											"src": "8469:62:13"
										},
										"nodeType": "YulIf",
										"src": "8466:88:13"
									},
									{
										"expression": {
											"arguments": [
												{
													"kind": "number",
													"nodeType": "YulLiteral",
													"src": "8570:2:13",
													"type": "",
													"value": "64"
												},
												{
													"name": "newFreePtr",
													"nodeType": "YulIdentifier",
													"src": "8574:10:13"
												}
											],
											"functionName": {
												"name": "mstore",
												"nodeType": "YulIdentifier",
												"src": "8563:6:13"
											},
											"nodeType": "YulFunctionCall",
											"src": "8563:22:13"
										},
										"nodeType": "YulExpressionStatement",
										"src": "8563:22:13"
									}
								]
							},
							"name": "finalize_allocation",
							"nodeType": "YulFunctionDefinition",
							"parameters": [
								{
									"name": "memPtr",
									"nodeType": "YulTypedName",
									"src": "8339:6:13",
									"type": ""
								},
								{
									"name": "size",
									"nodeType": "YulTypedName",
									"src": "8347:4:13",
									"type": ""
								}
							],
							"src": "8310:281:13"
						},
						{
							"body": {
								"nodeType": "YulBlock",
								"src": "8638:88:13",
								"statements": [
									{
										"nodeType": "YulAssignment",
										"src": "8648:30:13",
										"value": {
											"arguments": [],
											"functionName": {
												"name": "allocate_unbounded",
												"nodeType": "YulIdentifier",
												"src": "8658:18:13"
											},
											"nodeType": "YulFunctionCall",
											"src": "8658:20:13"
										},
										"variableNames": [
											{
												"name": "memPtr",
												"nodeType": "YulIdentifier",
												"src": "8648:6:13"
											}
										]
									},
									{
										"expression": {
											"arguments": [
												{
													"name": "memPtr",
													"nodeType": "YulIdentifier",
													"src": "8707:6:13"
												},
												{
													"name": "size",
													"nodeType": "YulIdentifier",
													"src": "8715:4:13"
												}
											],
											"functionName": {
												"name": "finalize_allocation",
												"nodeType": "YulIdentifier",
												"src": "8687:19:13"
											},
											"nodeType": "YulFunctionCall",
											"src": "8687:33:13"
										},
										"nodeType": "YulExpressionStatement",
										"src": "8687:33:13"
									}
								]
							},
							"name": "allocate_memory",
							"nodeType": "YulFunctionDefinition",
							"parameters": [
								{
									"name": "size",
									"nodeType": "YulTypedName",
									"src": "8622:4:13",
									"type": ""
								}
							],
							"returnVariables": [
								{
									"name": "memPtr",
									"nodeType": "YulTypedName",
									"src": "8631:6:13",
									"type": ""
								}
							],
							"src": "8597:129:13"
						},
						{
							"body": {
								"nodeType": "YulBlock",
								"src": "8814:229:13",
								"statements": [
									{
										"body": {
											"nodeType": "YulBlock",
											"src": "8919:22:13",
											"statements": [
												{
													"expression": {
														"arguments": [],
														"functionName": {
															"name": "panic_error_0x41",
															"nodeType": "YulIdentifier",
															"src": "8921:16:13"
														},
														"nodeType": "YulFunctionCall",
														"src": "8921:18:13"
													},
													"nodeType": "YulExpressionStatement",
													"src": "8921:18:13"
												}
											]
										},
										"condition": {
											"arguments": [
												{
													"name": "length",
													"nodeType": "YulIdentifier",
													"src": "8891:6:13"
												},
												{
													"kind": "number",
													"nodeType": "YulLiteral",
													"src": "8899:18:13",
													"type": "",
													"value": "0xffffffffffffffff"
												}
											],
											"functionName": {
												"name": "gt",
												"nodeType": "YulIdentifier",
												"src": "8888:2:13"
											},
											"nodeType": "YulFunctionCall",
											"src": "8888:30:13"
										},
										"nodeType": "YulIf",
										"src": "8885:56:13"
									},
									{
										"nodeType": "YulAssignment",
										"src": "8951:25:13",
										"value": {
											"arguments": [
												{
													"name": "length",
													"nodeType": "YulIdentifier",
													"src": "8963:6:13"
												},
												{
													"kind": "number",
													"nodeType": "YulLiteral",
													"src": "8971:4:13",
													"type": "",
													"value": "0x20"
												}
											],
											"functionName": {
												"name": "mul",
												"nodeType": "YulIdentifier",
												"src": "8959:3:13"
											},
											"nodeType": "YulFunctionCall",
											"src": "8959:17:13"
										},
										"variableNames": [
											{
												"name": "size",
												"nodeType": "YulIdentifier",
												"src": "8951:4:13"
											}
										]
									},
									{
										"nodeType": "YulAssignment",
										"src": "9013:23:13",
										"value": {
											"arguments": [
												{
													"name": "size",
													"nodeType": "YulIdentifier",
													"src": "9025:4:13"
												},
												{
													"kind": "number",
													"nodeType": "YulLiteral",
													"src": "9031:4:13",
													"type": "",
													"value": "0x20"
												}
											],
											"functionName": {
												"name": "add",
												"nodeType": "YulIdentifier",
												"src": "9021:3:13"
											},
											"nodeType": "YulFunctionCall",
											"src": "9021:15:13"
										},
										"variableNames": [
											{
												"name": "size",
												"nodeType": "YulIdentifier",
												"src": "9013:4:13"
											}
										]
									}
								]
							},
							"name": "array_allocation_size_t_array$_t_uint256_$dyn_memory_ptr",
							"nodeType": "YulFunctionDefinition",
							"parameters": [
								{
									"name": "length",
									"nodeType": "YulTypedName",
									"src": "8798:6:13",
									"type": ""
								}
							],
							"returnVariables": [
								{
									"name": "size",
									"nodeType": "YulTypedName",
									"src": "8809:4:13",
									"type": ""
								}
							],
							"src": "8732:311:13"
						},
						{
							"body": {
								"nodeType": "YulBlock",
								"src": "9138:28:13",
								"statements": [
									{
										"expression": {
											"arguments": [
												{
													"kind": "number",
													"nodeType": "YulLiteral",
													"src": "9155:1:13",
													"type": "",
													"value": "0"
												},
												{
													"kind": "number",
													"nodeType": "YulLiteral",
													"src": "9158:1:13",
													"type": "",
													"value": "0"
												}
											],
											"functionName": {
												"name": "revert",
												"nodeType": "YulIdentifier",
												"src": "9148:6:13"
											},
											"nodeType": "YulFunctionCall",
											"src": "9148:12:13"
										},
										"nodeType": "YulExpressionStatement",
										"src": "9148:12:13"
									}
								]
							},
							"name": "revert_error_81385d8c0b31fffe14be1da910c8bd3a80be4cfa248e04f42ec0faea3132a8ef",
							"nodeType": "YulFunctionDefinition",
							"src": "9049:117:13"
						},
						{
							"body": {
								"nodeType": "YulBlock",
								"src": "9291:608:13",
								"statements": [
									{
										"nodeType": "YulAssignment",
										"src": "9301:90:13",
										"value": {
											"arguments": [
												{
													"arguments": [
														{
															"name": "length",
															"nodeType": "YulIdentifier",
															"src": "9383:6:13"
														}
													],
													"functionName": {
														"name": "array_allocation_size_t_array$_t_uint256_$dyn_memory_ptr",
														"nodeType": "YulIdentifier",
														"src": "9326:56:13"
													},
													"nodeType": "YulFunctionCall",
													"src": "9326:64:13"
												}
											],
											"functionName": {
												"name": "allocate_memory",
												"nodeType": "YulIdentifier",
												"src": "9310:15:13"
											},
											"nodeType": "YulFunctionCall",
											"src": "9310:81:13"
										},
										"variableNames": [
											{
												"name": "array",
												"nodeType": "YulIdentifier",
												"src": "9301:5:13"
											}
										]
									},
									{
										"nodeType": "YulVariableDeclaration",
										"src": "9400:16:13",
										"value": {
											"name": "array",
											"nodeType": "YulIdentifier",
											"src": "9411:5:13"
										},
										"variables": [
											{
												"name": "dst",
												"nodeType": "YulTypedName",
												"src": "9404:3:13",
												"type": ""
											}
										]
									},
									{
										"expression": {
											"arguments": [
												{
													"name": "array",
													"nodeType": "YulIdentifier",
													"src": "9433:5:13"
												},
												{
													"name": "length",
													"nodeType": "YulIdentifier",
													"src": "9440:6:13"
												}
											],
											"functionName": {
												"name": "mstore",
												"nodeType": "YulIdentifier",
												"src": "9426:6:13"
											},
											"nodeType": "YulFunctionCall",
											"src": "9426:21:13"
										},
										"nodeType": "YulExpressionStatement",
										"src": "9426:21:13"
									},
									{
										"nodeType": "YulAssignment",
										"src": "9456:23:13",
										"value": {
											"arguments": [
												{
													"name": "array",
													"nodeType": "YulIdentifier",
													"src": "9467:5:13"
												},
												{
													"kind": "number",
													"nodeType": "YulLiteral",
													"src": "9474:4:13",
													"type": "",
													"value": "0x20"
												}
											],
											"functionName": {
												"name": "add",
												"nodeType": "YulIdentifier",
												"src": "9463:3:13"
											},
											"nodeType": "YulFunctionCall",
											"src": "9463:16:13"
										},
										"variableNames": [
											{
												"name": "dst",
												"nodeType": "YulIdentifier",
												"src": "9456:3:13"
											}
										]
									},
									{
										"nodeType": "YulVariableDeclaration",
										"src": "9489:44:13",
										"value": {
											"arguments": [
												{
													"name": "offset",
													"nodeType": "YulIdentifier",
													"src": "9507:6:13"
												},
												{
													"arguments": [
														{
															"name": "length",
															"nodeType": "YulIdentifier",
															"src": "9519:6:13"
														},
														{
															"kind": "number",
															"nodeType": "YulLiteral",
															"src": "9527:4:13",
															"type": "",
															"value": "0x20"
														}
													],
													"functionName": {
														"name": "mul",
														"nodeType": "YulIdentifier",
														"src": "9515:3:13"
													},
													"nodeType": "YulFunctionCall",
													"src": "9515:17:13"
												}
											],
											"functionName": {
												"name": "add",
												"nodeType": "YulIdentifier",
												"src": "9503:3:13"
											},
											"nodeType": "YulFunctionCall",
											"src": "9503:30:13"
										},
										"variables": [
											{
												"name": "srcEnd",
												"nodeType": "YulTypedName",
												"src": "9493:6:13",
												"type": ""
											}
										]
									},
									{
										"body": {
											"nodeType": "YulBlock",
											"src": "9561:103:13",
											"statements": [
												{
													"expression": {
														"arguments": [],
														"functionName": {
															"name": "revert_error_81385d8c0b31fffe14be1da910c8bd3a80be4cfa248e04f42ec0faea3132a8ef",
															"nodeType": "YulIdentifier",
															"src": "9575:77:13"
														},
														"nodeType": "YulFunctionCall",
														"src": "9575:79:13"
													},
													"nodeType": "YulExpressionStatement",
													"src": "9575:79:13"
												}
											]
										},
										"condition": {
											"arguments": [
												{
													"name": "srcEnd",
													"nodeType": "YulIdentifier",
													"src": "9548:6:13"
												},
												{
													"name": "end",
													"nodeType": "YulIdentifier",
													"src": "9556:3:13"
												}
											],
											"functionName": {
												"name": "gt",
												"nodeType": "YulIdentifier",
												"src": "9545:2:13"
											},
											"nodeType": "YulFunctionCall",
											"src": "9545:15:13"
										},
										"nodeType": "YulIf",
										"src": "9542:122:13"
									},
									{
										"body": {
											"nodeType": "YulBlock",
											"src": "9749:144:13",
											"statements": [
												{
													"nodeType": "YulVariableDeclaration",
													"src": "9764:21:13",
													"value": {
														"name": "src",
														"nodeType": "YulIdentifier",
														"src": "9782:3:13"
													},
													"variables": [
														{
															"name": "elementPos",
															"nodeType": "YulTypedName",
															"src": "9768:10:13",
															"type": ""
														}
													]
												},
												{
													"expression": {
														"arguments": [
															{
																"name": "dst",
																"nodeType": "YulIdentifier",
																"src": "9806:3:13"
															},
															{
																"arguments": [
																	{
																		"name": "elementPos",
																		"nodeType": "YulIdentifier",
																		"src": "9832:10:13"
																	},
																	{
																		"name": "end",
																		"nodeType": "YulIdentifier",
																		"src": "9844:3:13"
																	}
																],
																"functionName": {
																	"name": "abi_decode_t_uint256",
																	"nodeType": "YulIdentifier",
																	"src": "9811:20:13"
																},
																"nodeType": "YulFunctionCall",
																"src": "9811:37:13"
															}
														],
														"functionName": {
															"name": "mstore",
															"nodeType": "YulIdentifier",
															"src": "9799:6:13"
														},
														"nodeType": "YulFunctionCall",
														"src": "9799:50:13"
													},
													"nodeType": "YulExpressionStatement",
													"src": "9799:50:13"
												},
												{
													"nodeType": "YulAssignment",
													"src": "9862:21:13",
													"value": {
														"arguments": [
															{
																"name": "dst",
																"nodeType": "YulIdentifier",
																"src": "9873:3:13"
															},
															{
																"kind": "number",
																"nodeType": "YulLiteral",
																"src": "9878:4:13",
																"type": "",
																"value": "0x20"
															}
														],
														"functionName": {
															"name": "add",
															"nodeType": "YulIdentifier",
															"src": "9869:3:13"
														},
														"nodeType": "YulFunctionCall",
														"src": "9869:14:13"
													},
													"variableNames": [
														{
															"name": "dst",
															"nodeType": "YulIdentifier",
															"src": "9862:3:13"
														}
													]
												}
											]
										},
										"condition": {
											"arguments": [
												{
													"name": "src",
													"nodeType": "YulIdentifier",
													"src": "9702:3:13"
												},
												{
													"name": "srcEnd",
													"nodeType": "YulIdentifier",
													"src": "9707:6:13"
												}
											],
											"functionName": {
												"name": "lt",
												"nodeType": "YulIdentifier",
												"src": "9699:2:13"
											},
											"nodeType": "YulFunctionCall",
											"src": "9699:15:13"
										},
										"nodeType": "YulForLoop",
										"post": {
											"nodeType": "YulBlock",
											"src": "9715:25:13",
											"statements": [
												{
													"nodeType": "YulAssignment",
													"src": "9717:21:13",
													"value": {
														"arguments": [
															{
																"name": "src",
																"nodeType": "YulIdentifier",
																"src": "9728:3:13"
															},
															{
																"kind": "number",
																"nodeType": "YulLiteral",
																"src": "9733:4:13",
																"type": "",
																"value": "0x20"
															}
														],
														"functionName": {
															"name": "add",
															"nodeType": "YulIdentifier",
															"src": "9724:3:13"
														},
														"nodeType": "YulFunctionCall",
														"src": "9724:14:13"
													},
													"variableNames": [
														{
															"name": "src",
															"nodeType": "YulIdentifier",
															"src": "9717:3:13"
														}
													]
												}
											]
										},
										"pre": {
											"nodeType": "YulBlock",
											"src": "9677:21:13",
											"statements": [
												{
													"nodeType": "YulVariableDeclaration",
													"src": "9679:17:13",
													"value": {
														"name": "offset",
														"nodeType": "YulIdentifier",
														"src": "9690:6:13"
													},
													"variables": [
														{
															"name": "src",
															"nodeType": "YulTypedName",
															"src": "9683:3:13",
															"type": ""
														}
													]
												}
											]
										},
										"src": "9673:220:13"
									}
								]
							},
							"name": "abi_decode_available_length_t_array$_t_uint256_$dyn_memory_ptr",
							"nodeType": "YulFunctionDefinition",
							"parameters": [
								{
									"name": "offset",
									"nodeType": "YulTypedName",
									"src": "9261:6:13",
									"type": ""
								},
								{
									"name": "length",
									"nodeType": "YulTypedName",
									"src": "9269:6:13",
									"type": ""
								},
								{
									"name": "end",
									"nodeType": "YulTypedName",
									"src": "9277:3:13",
									"type": ""
								}
							],
							"returnVariables": [
								{
									"name": "array",
									"nodeType": "YulTypedName",
									"src": "9285:5:13",
									"type": ""
								}
							],
							"src": "9189:710:13"
						},
						{
							"body": {
								"nodeType": "YulBlock",
								"src": "9999:293:13",
								"statements": [
									{
										"body": {
											"nodeType": "YulBlock",
											"src": "10048:83:13",
											"statements": [
												{
													"expression": {
														"arguments": [],
														"functionName": {
															"name": "revert_error_1b9f4a0a5773e33b91aa01db23bf8c55fce1411167c872835e7fa00a4f17d46d",
															"nodeType": "YulIdentifier",
															"src": "10050:77:13"
														},
														"nodeType": "YulFunctionCall",
														"src": "10050:79:13"
													},
													"nodeType": "YulExpressionStatement",
													"src": "10050:79:13"
												}
											]
										},
										"condition": {
											"arguments": [
												{
													"arguments": [
														{
															"arguments": [
																{
																	"name": "offset",
																	"nodeType": "YulIdentifier",
																	"src": "10027:6:13"
																},
																{
																	"kind": "number",
																	"nodeType": "YulLiteral",
																	"src": "10035:4:13",
																	"type": "",
																	"value": "0x1f"
																}
															],
															"functionName": {
																"name": "add",
																"nodeType": "YulIdentifier",
																"src": "10023:3:13"
															},
															"nodeType": "YulFunctionCall",
															"src": "10023:17:13"
														},
														{
															"name": "end",
															"nodeType": "YulIdentifier",
															"src": "10042:3:13"
														}
													],
													"functionName": {
														"name": "slt",
														"nodeType": "YulIdentifier",
														"src": "10019:3:13"
													},
													"nodeType": "YulFunctionCall",
													"src": "10019:27:13"
												}
											],
											"functionName": {
												"name": "iszero",
												"nodeType": "YulIdentifier",
												"src": "10012:6:13"
											},
											"nodeType": "YulFunctionCall",
											"src": "10012:35:13"
										},
										"nodeType": "YulIf",
										"src": "10009:122:13"
									},
									{
										"nodeType": "YulVariableDeclaration",
										"src": "10140:34:13",
										"value": {
											"arguments": [
												{
													"name": "offset",
													"nodeType": "YulIdentifier",
													"src": "10167:6:13"
												}
											],
											"functionName": {
												"name": "calldataload",
												"nodeType": "YulIdentifier",
												"src": "10154:12:13"
											},
											"nodeType": "YulFunctionCall",
											"src": "10154:20:13"
										},
										"variables": [
											{
												"name": "length",
												"nodeType": "YulTypedName",
												"src": "10144:6:13",
												"type": ""
											}
										]
									},
									{
										"nodeType": "YulAssignment",
										"src": "10183:103:13",
										"value": {
											"arguments": [
												{
													"arguments": [
														{
															"name": "offset",
															"nodeType": "YulIdentifier",
															"src": "10259:6:13"
														},
														{
															"kind": "number",
															"nodeType": "YulLiteral",
															"src": "10267:4:13",
															"type": "",
															"value": "0x20"
														}
													],
													"functionName": {
														"name": "add",
														"nodeType": "YulIdentifier",
														"src": "10255:3:13"
													},
													"nodeType": "YulFunctionCall",
													"src": "10255:17:13"
												},
												{
													"name": "length",
													"nodeType": "YulIdentifier",
													"src": "10274:6:13"
												},
												{
													"name": "end",
													"nodeType": "YulIdentifier",
													"src": "10282:3:13"
												}
											],
											"functionName": {
												"name": "abi_decode_available_length_t_array$_t_uint256_$dyn_memory_ptr",
												"nodeType": "YulIdentifier",
												"src": "10192:62:13"
											},
											"nodeType": "YulFunctionCall",
											"src": "10192:94:13"
										},
										"variableNames": [
											{
												"name": "array",
												"nodeType": "YulIdentifier",
												"src": "10183:5:13"
											}
										]
									}
								]
							},
							"name": "abi_decode_t_array$_t_uint256_$dyn_memory_ptr",
							"nodeType": "YulFunctionDefinition",
							"parameters": [
								{
									"name": "offset",
									"nodeType": "YulTypedName",
									"src": "9977:6:13",
									"type": ""
								},
								{
									"name": "end",
									"nodeType": "YulTypedName",
									"src": "9985:3:13",
									"type": ""
								}
							],
							"returnVariables": [
								{
									"name": "array",
									"nodeType": "YulTypedName",
									"src": "9993:5:13",
									"type": ""
								}
							],
							"src": "9922:370:13"
						},
						{
							"body": {
								"nodeType": "YulBlock",
								"src": "10448:889:13",
								"statements": [
									{
										"body": {
											"nodeType": "YulBlock",
											"src": "10494:83:13",
											"statements": [
												{
													"expression": {
														"arguments": [],
														"functionName": {
															"name": "revert_error_dbdddcbe895c83990c08b3492a0e83918d802a52331272ac6fdb6a7c4aea3b1b",
															"nodeType": "YulIdentifier",
															"src": "10496:77:13"
														},
														"nodeType": "YulFunctionCall",
														"src": "10496:79:13"
													},
													"nodeType": "YulExpressionStatement",
													"src": "10496:79:13"
												}
											]
										},
										"condition": {
											"arguments": [
												{
													"arguments": [
														{
															"name": "dataEnd",
															"nodeType": "YulIdentifier",
															"src": "10469:7:13"
														},
														{
															"name": "headStart",
															"nodeType": "YulIdentifier",
															"src": "10478:9:13"
														}
													],
													"functionName": {
														"name": "sub",
														"nodeType": "YulIdentifier",
														"src": "10465:3:13"
													},
													"nodeType": "YulFunctionCall",
													"src": "10465:23:13"
												},
												{
													"kind": "number",
													"nodeType": "YulLiteral",
													"src": "10490:2:13",
													"type": "",
													"value": "96"
												}
											],
											"functionName": {
												"name": "slt",
												"nodeType": "YulIdentifier",
												"src": "10461:3:13"
											},
											"nodeType": "YulFunctionCall",
											"src": "10461:32:13"
										},
										"nodeType": "YulIf",
										"src": "10458:119:13"
									},
									{
										"nodeType": "YulBlock",
										"src": "10587:117:13",
										"statements": [
											{
												"nodeType": "YulVariableDeclaration",
												"src": "10602:15:13",
												"value": {
													"kind": "number",
													"nodeType": "YulLiteral",
													"src": "10616:1:13",
													"type": "",
													"value": "0"
												},
												"variables": [
													{
														"name": "offset",
														"nodeType": "YulTypedName",
														"src": "10606:6:13",
														"type": ""
													}
												]
											},
											{
												"nodeType": "YulAssignment",
												"src": "10631:63:13",
												"value": {
													"arguments": [
														{
															"arguments": [
																{
																	"name": "headStart",
																	"nodeType": "YulIdentifier",
																	"src": "10666:9:13"
																},
																{
																	"name": "offset",
																	"nodeType": "YulIdentifier",
																	"src": "10677:6:13"
																}
															],
															"functionName": {
																"name": "add",
																"nodeType": "YulIdentifier",
																"src": "10662:3:13"
															},
															"nodeType": "YulFunctionCall",
															"src": "10662:22:13"
														},
														{
															"name": "dataEnd",
															"nodeType": "YulIdentifier",
															"src": "10686:7:13"
														}
													],
													"functionName": {
														"name": "abi_decode_t_address",
														"nodeType": "YulIdentifier",
														"src": "10641:20:13"
													},
													"nodeType": "YulFunctionCall",
													"src": "10641:53:13"
												},
												"variableNames": [
													{
														"name": "value0",
														"nodeType": "YulIdentifier",
														"src": "10631:6:13"
													}
												]
											}
										]
									},
									{
										"nodeType": "YulBlock",
										"src": "10714:303:13",
										"statements": [
											{
												"nodeType": "YulVariableDeclaration",
												"src": "10729:46:13",
												"value": {
													"arguments": [
														{
															"arguments": [
																{
																	"name": "headStart",
																	"nodeType": "YulIdentifier",
																	"src": "10760:9:13"
																},
																{
																	"kind": "number",
																	"nodeType": "YulLiteral",
																	"src": "10771:2:13",
																	"type": "",
																	"value": "32"
																}
															],
															"functionName": {
																"name": "add",
																"nodeType": "YulIdentifier",
																"src": "10756:3:13"
															},
															"nodeType": "YulFunctionCall",
															"src": "10756:18:13"
														}
													],
													"functionName": {
														"name": "calldataload",
														"nodeType": "YulIdentifier",
														"src": "10743:12:13"
													},
													"nodeType": "YulFunctionCall",
													"src": "10743:32:13"
												},
												"variables": [
													{
														"name": "offset",
														"nodeType": "YulTypedName",
														"src": "10733:6:13",
														"type": ""
													}
												]
											},
											{
												"body": {
													"nodeType": "YulBlock",
													"src": "10822:83:13",
													"statements": [
														{
															"expression": {
																"arguments": [],
																"functionName": {
																	"name": "revert_error_c1322bf8034eace5e0b5c7295db60986aa89aae5e0ea0873e4689e076861a5db",
																	"nodeType": "YulIdentifier",
																	"src": "10824:77:13"
																},
																"nodeType": "YulFunctionCall",
																"src": "10824:79:13"
															},
															"nodeType": "YulExpressionStatement",
															"src": "10824:79:13"
														}
													]
												},
												"condition": {
													"arguments": [
														{
															"name": "offset",
															"nodeType": "YulIdentifier",
															"src": "10794:6:13"
														},
														{
															"kind": "number",
															"nodeType": "YulLiteral",
															"src": "10802:18:13",
															"type": "",
															"value": "0xffffffffffffffff"
														}
													],
													"functionName": {
														"name": "gt",
														"nodeType": "YulIdentifier",
														"src": "10791:2:13"
													},
													"nodeType": "YulFunctionCall",
													"src": "10791:30:13"
												},
												"nodeType": "YulIf",
												"src": "10788:117:13"
											},
											{
												"nodeType": "YulAssignment",
												"src": "10919:88:13",
												"value": {
													"arguments": [
														{
															"arguments": [
																{
																	"name": "headStart",
																	"nodeType": "YulIdentifier",
																	"src": "10979:9:13"
																},
																{
																	"name": "offset",
																	"nodeType": "YulIdentifier",
																	"src": "10990:6:13"
																}
															],
															"functionName": {
																"name": "add",
																"nodeType": "YulIdentifier",
																"src": "10975:3:13"
															},
															"nodeType": "YulFunctionCall",
															"src": "10975:22:13"
														},
														{
															"name": "dataEnd",
															"nodeType": "YulIdentifier",
															"src": "10999:7:13"
														}
													],
													"functionName": {
														"name": "abi_decode_t_array$_t_uint256_$dyn_memory_ptr",
														"nodeType": "YulIdentifier",
														"src": "10929:45:13"
													},
													"nodeType": "YulFunctionCall",
													"src": "10929:78:13"
												},
												"variableNames": [
													{
														"name": "value1",
														"nodeType": "YulIdentifier",
														"src": "10919:6:13"
													}
												]
											}
										]
									},
									{
										"nodeType": "YulBlock",
										"src": "11027:303:13",
										"statements": [
											{
												"nodeType": "YulVariableDeclaration",
												"src": "11042:46:13",
												"value": {
													"arguments": [
														{
															"arguments": [
																{
																	"name": "headStart",
																	"nodeType": "YulIdentifier",
																	"src": "11073:9:13"
																},
																{
																	"kind": "number",
																	"nodeType": "YulLiteral",
																	"src": "11084:2:13",
																	"type": "",
																	"value": "64"
																}
															],
															"functionName": {
																"name": "add",
																"nodeType": "YulIdentifier",
																"src": "11069:3:13"
															},
															"nodeType": "YulFunctionCall",
															"src": "11069:18:13"
														}
													],
													"functionName": {
														"name": "calldataload",
														"nodeType": "YulIdentifier",
														"src": "11056:12:13"
													},
													"nodeType": "YulFunctionCall",
													"src": "11056:32:13"
												},
												"variables": [
													{
														"name": "offset",
														"nodeType": "YulTypedName",
														"src": "11046:6:13",
														"type": ""
													}
												]
											},
											{
												"body": {
													"nodeType": "YulBlock",
													"src": "11135:83:13",
													"statements": [
														{
															"expression": {
																"arguments": [],
																"functionName": {
																	"name": "revert_error_c1322bf8034eace5e0b5c7295db60986aa89aae5e0ea0873e4689e076861a5db",
																	"nodeType": "YulIdentifier",
																	"src": "11137:77:13"
																},
																"nodeType": "YulFunctionCall",
																"src": "11137:79:13"
															},
															"nodeType": "YulExpressionStatement",
															"src": "11137:79:13"
														}
													]
												},
												"condition": {
													"arguments": [
														{
															"name": "offset",
															"nodeType": "YulIdentifier",
															"src": "11107:6:13"
														},
														{
															"kind": "number",
															"nodeType": "YulLiteral",
															"src": "11115:18:13",
															"type": "",
															"value": "0xffffffffffffffff"
														}
													],
													"functionName": {
														"name": "gt",
														"nodeType": "YulIdentifier",
														"src": "11104:2:13"
													},
													"nodeType": "YulFunctionCall",
													"src": "11104:30:13"
												},
												"nodeType": "YulIf",
												"src": "11101:117:13"
											},
											{
												"nodeType": "YulAssignment",
												"src": "11232:88:13",
												"value": {
													"arguments": [
														{
															"arguments": [
																{
																	"name": "headStart",
																	"nodeType": "YulIdentifier",
																	"src": "11292:9:13"
																},
																{
																	"name": "offset",
																	"nodeType": "YulIdentifier",
																	"src": "11303:6:13"
																}
															],
															"functionName": {
																"name": "add",
																"nodeType": "YulIdentifier",
																"src": "11288:3:13"
															},
															"nodeType": "YulFunctionCall",
															"src": "11288:22:13"
														},
														{
															"name": "dataEnd",
															"nodeType": "YulIdentifier",
															"src": "11312:7:13"
														}
													],
													"functionName": {
														"name": "abi_decode_t_array$_t_uint256_$dyn_memory_ptr",
														"nodeType": "YulIdentifier",
														"src": "11242:45:13"
													},
													"nodeType": "YulFunctionCall",
													"src": "11242:78:13"
												},
												"variableNames": [
													{
														"name": "value2",
														"nodeType": "YulIdentifier",
														"src": "11232:6:13"
													}
												]
											}
										]
									}
								]
							},
							"name": "abi_decode_tuple_t_addresst_array$_t_uint256_$dyn_memory_ptrt_array$_t_uint256_$dyn_memory_ptr",
							"nodeType": "YulFunctionDefinition",
							"parameters": [
								{
									"name": "headStart",
									"nodeType": "YulTypedName",
									"src": "10402:9:13",
									"type": ""
								},
								{
									"name": "dataEnd",
									"nodeType": "YulTypedName",
									"src": "10413:7:13",
									"type": ""
								}
							],
							"returnVariables": [
								{
									"name": "value0",
									"nodeType": "YulTypedName",
									"src": "10425:6:13",
									"type": ""
								},
								{
									"name": "value1",
									"nodeType": "YulTypedName",
									"src": "10433:6:13",
									"type": ""
								},
								{
									"name": "value2",
									"nodeType": "YulTypedName",
									"src": "10441:6:13",
									"type": ""
								}
							],
							"src": "10298:1039:13"
						},
						{
							"body": {
								"nodeType": "YulBlock",
								"src": "11451:576:13",
								"statements": [
									{
										"body": {
											"nodeType": "YulBlock",
											"src": "11497:83:13",
											"statements": [
												{
													"expression": {
														"arguments": [],
														"functionName": {
															"name": "revert_error_dbdddcbe895c83990c08b3492a0e83918d802a52331272ac6fdb6a7c4aea3b1b",
															"nodeType": "YulIdentifier",
															"src": "11499:77:13"
														},
														"nodeType": "YulFunctionCall",
														"src": "11499:79:13"
													},
													"nodeType": "YulExpressionStatement",
													"src": "11499:79:13"
												}
											]
										},
										"condition": {
											"arguments": [
												{
													"arguments": [
														{
															"name": "dataEnd",
															"nodeType": "YulIdentifier",
															"src": "11472:7:13"
														},
														{
															"name": "headStart",
															"nodeType": "YulIdentifier",
															"src": "11481:9:13"
														}
													],
													"functionName": {
														"name": "sub",
														"nodeType": "YulIdentifier",
														"src": "11468:3:13"
													},
													"nodeType": "YulFunctionCall",
													"src": "11468:23:13"
												},
												{
													"kind": "number",
													"nodeType": "YulLiteral",
													"src": "11493:2:13",
													"type": "",
													"value": "64"
												}
											],
											"functionName": {
												"name": "slt",
												"nodeType": "YulIdentifier",
												"src": "11464:3:13"
											},
											"nodeType": "YulFunctionCall",
											"src": "11464:32:13"
										},
										"nodeType": "YulIf",
										"src": "11461:119:13"
									},
									{
										"nodeType": "YulBlock",
										"src": "11590:117:13",
										"statements": [
											{
												"nodeType": "YulVariableDeclaration",
												"src": "11605:15:13",
												"value": {
													"kind": "number",
													"nodeType": "YulLiteral",
													"src": "11619:1:13",
													"type": "",
													"value": "0"
												},
												"variables": [
													{
														"name": "offset",
														"nodeType": "YulTypedName",
														"src": "11609:6:13",
														"type": ""
													}
												]
											},
											{
												"nodeType": "YulAssignment",
												"src": "11634:63:13",
												"value": {
													"arguments": [
														{
															"arguments": [
																{
																	"name": "headStart",
																	"nodeType": "YulIdentifier",
																	"src": "11669:9:13"
																},
																{
																	"name": "offset",
																	"nodeType": "YulIdentifier",
																	"src": "11680:6:13"
																}
															],
															"functionName": {
																"name": "add",
																"nodeType": "YulIdentifier",
																"src": "11665:3:13"
															},
															"nodeType": "YulFunctionCall",
															"src": "11665:22:13"
														},
														{
															"name": "dataEnd",
															"nodeType": "YulIdentifier",
															"src": "11689:7:13"
														}
													],
													"functionName": {
														"name": "abi_decode_t_address",
														"nodeType": "YulIdentifier",
														"src": "11644:20:13"
													},
													"nodeType": "YulFunctionCall",
													"src": "11644:53:13"
												},
												"variableNames": [
													{
														"name": "value0",
														"nodeType": "YulIdentifier",
														"src": "11634:6:13"
													}
												]
											}
										]
									},
									{
										"nodeType": "YulBlock",
										"src": "11717:303:13",
										"statements": [
											{
												"nodeType": "YulVariableDeclaration",
												"src": "11732:46:13",
												"value": {
													"arguments": [
														{
															"arguments": [
																{
																	"name": "headStart",
																	"nodeType": "YulIdentifier",
																	"src": "11763:9:13"
																},
																{
																	"kind": "number",
																	"nodeType": "YulLiteral",
																	"src": "11774:2:13",
																	"type": "",
																	"value": "32"
																}
															],
															"functionName": {
																"name": "add",
																"nodeType": "YulIdentifier",
																"src": "11759:3:13"
															},
															"nodeType": "YulFunctionCall",
															"src": "11759:18:13"
														}
													],
													"functionName": {
														"name": "calldataload",
														"nodeType": "YulIdentifier",
														"src": "11746:12:13"
													},
													"nodeType": "YulFunctionCall",
													"src": "11746:32:13"
												},
												"variables": [
													{
														"name": "offset",
														"nodeType": "YulTypedName",
														"src": "11736:6:13",
														"type": ""
													}
												]
											},
											{
												"body": {
													"nodeType": "YulBlock",
													"src": "11825:83:13",
													"statements": [
														{
															"expression": {
																"arguments": [],
																"functionName": {
																	"name": "revert_error_c1322bf8034eace5e0b5c7295db60986aa89aae5e0ea0873e4689e076861a5db",
																	"nodeType": "YulIdentifier",
																	"src": "11827:77:13"
																},
																"nodeType": "YulFunctionCall",
																"src": "11827:79:13"
															},
															"nodeType": "YulExpressionStatement",
															"src": "11827:79:13"
														}
													]
												},
												"condition": {
													"arguments": [
														{
															"name": "offset",
															"nodeType": "YulIdentifier",
															"src": "11797:6:13"
														},
														{
															"kind": "number",
															"nodeType": "YulLiteral",
															"src": "11805:18:13",
															"type": "",
															"value": "0xffffffffffffffff"
														}
													],
													"functionName": {
														"name": "gt",
														"nodeType": "YulIdentifier",
														"src": "11794:2:13"
													},
													"nodeType": "YulFunctionCall",
													"src": "11794:30:13"
												},
												"nodeType": "YulIf",
												"src": "11791:117:13"
											},
											{
												"nodeType": "YulAssignment",
												"src": "11922:88:13",
												"value": {
													"arguments": [
														{
															"arguments": [
																{
																	"name": "headStart",
																	"nodeType": "YulIdentifier",
																	"src": "11982:9:13"
																},
																{
																	"name": "offset",
																	"nodeType": "YulIdentifier",
																	"src": "11993:6:13"
																}
															],
															"functionName": {
																"name": "add",
																"nodeType": "YulIdentifier",
																"src": "11978:3:13"
															},
															"nodeType": "YulFunctionCall",
															"src": "11978:22:13"
														},
														{
															"name": "dataEnd",
															"nodeType": "YulIdentifier",
															"src": "12002:7:13"
														}
													],
													"functionName": {
														"name": "abi_decode_t_array$_t_uint256_$dyn_memory_ptr",
														"nodeType": "YulIdentifier",
														"src": "11932:45:13"
													},
													"nodeType": "YulFunctionCall",
													"src": "11932:78:13"
												},
												"variableNames": [
													{
														"name": "value1",
														"nodeType": "YulIdentifier",
														"src": "11922:6:13"
													}
												]
											}
										]
									}
								]
							},
							"name": "abi_decode_tuple_t_addresst_array$_t_uint256_$dyn_memory_ptr",
							"nodeType": "YulFunctionDefinition",
							"parameters": [
								{
									"name": "headStart",
									"nodeType": "YulTypedName",
									"src": "11413:9:13",
									"type": ""
								},
								{
									"name": "dataEnd",
									"nodeType": "YulTypedName",
									"src": "11424:7:13",
									"type": ""
								}
							],
							"returnVariables": [
								{
									"name": "value0",
									"nodeType": "YulTypedName",
									"src": "11436:6:13",
									"type": ""
								},
								{
									"name": "value1",
									"nodeType": "YulTypedName",
									"src": "11444:6:13",
									"type": ""
								}
							],
							"src": "11343:684:13"
						},
						{
							"body": {
								"nodeType": "YulBlock",
								"src": "12061:152:13",
								"statements": [
									{
										"expression": {
											"arguments": [
												{
													"kind": "number",
													"nodeType": "YulLiteral",
													"src": "12078:1:13",
													"type": "",
													"value": "0"
												},
												{
													"kind": "number",
													"nodeType": "YulLiteral",
													"src": "12081:77:13",
													"type": "",
													"value": "35408467139433450592217433187231851964531694900788300625387963629091585785856"
												}
											],
											"functionName": {
												"name": "mstore",
												"nodeType": "YulIdentifier",
												"src": "12071:6:13"
											},
											"nodeType": "YulFunctionCall",
											"src": "12071:88:13"
										},
										"nodeType": "YulExpressionStatement",
										"src": "12071:88:13"
									},
									{
										"expression": {
											"arguments": [
												{
													"kind": "number",
													"nodeType": "YulLiteral",
													"src": "12175:1:13",
													"type": "",
													"value": "4"
												},
												{
													"kind": "number",
													"nodeType": "YulLiteral",
													"src": "12178:4:13",
													"type": "",
													"value": "0x32"
												}
											],
											"functionName": {
												"name": "mstore",
												"nodeType": "YulIdentifier",
												"src": "12168:6:13"
											},
											"nodeType": "YulFunctionCall",
											"src": "12168:15:13"
										},
										"nodeType": "YulExpressionStatement",
										"src": "12168:15:13"
									},
									{
										"expression": {
											"arguments": [
												{
													"kind": "number",
													"nodeType": "YulLiteral",
													"src": "12199:1:13",
													"type": "",
													"value": "0"
												},
												{
													"kind": "number",
													"nodeType": "YulLiteral",
													"src": "12202:4:13",
													"type": "",
													"value": "0x24"
												}
											],
											"functionName": {
												"name": "revert",
												"nodeType": "YulIdentifier",
												"src": "12192:6:13"
											},
											"nodeType": "YulFunctionCall",
											"src": "12192:15:13"
										},
										"nodeType": "YulExpressionStatement",
										"src": "12192:15:13"
									}
								]
							},
							"name": "panic_error_0x32",
							"nodeType": "YulFunctionDefinition",
							"src": "12033:180:13"
						},
						{
							"body": {
								"nodeType": "YulBlock",
								"src": "12282:80:13",
								"statements": [
									{
										"nodeType": "YulAssignment",
										"src": "12292:22:13",
										"value": {
											"arguments": [
												{
													"name": "offset",
													"nodeType": "YulIdentifier",
													"src": "12307:6:13"
												}
											],
											"functionName": {
												"name": "mload",
												"nodeType": "YulIdentifier",
												"src": "12301:5:13"
											},
											"nodeType": "YulFunctionCall",
											"src": "12301:13:13"
										},
										"variableNames": [
											{
												"name": "value",
												"nodeType": "YulIdentifier",
												"src": "12292:5:13"
											}
										]
									},
									{
										"expression": {
											"arguments": [
												{
													"name": "value",
													"nodeType": "YulIdentifier",
													"src": "12350:5:13"
												}
											],
											"functionName": {
												"name": "validator_revert_t_uint256",
												"nodeType": "YulIdentifier",
												"src": "12323:26:13"
											},
											"nodeType": "YulFunctionCall",
											"src": "12323:33:13"
										},
										"nodeType": "YulExpressionStatement",
										"src": "12323:33:13"
									}
								]
							},
							"name": "abi_decode_t_uint256_fromMemory",
							"nodeType": "YulFunctionDefinition",
							"parameters": [
								{
									"name": "offset",
									"nodeType": "YulTypedName",
									"src": "12260:6:13",
									"type": ""
								},
								{
									"name": "end",
									"nodeType": "YulTypedName",
									"src": "12268:3:13",
									"type": ""
								}
							],
							"returnVariables": [
								{
									"name": "value",
									"nodeType": "YulTypedName",
									"src": "12276:5:13",
									"type": ""
								}
							],
							"src": "12219:143:13"
						},
						{
							"body": {
								"nodeType": "YulBlock",
								"src": "12498:619:13",
								"statements": [
									{
										"nodeType": "YulAssignment",
										"src": "12508:90:13",
										"value": {
											"arguments": [
												{
													"arguments": [
														{
															"name": "length",
															"nodeType": "YulIdentifier",
															"src": "12590:6:13"
														}
													],
													"functionName": {
														"name": "array_allocation_size_t_array$_t_uint256_$dyn_memory_ptr",
														"nodeType": "YulIdentifier",
														"src": "12533:56:13"
													},
													"nodeType": "YulFunctionCall",
													"src": "12533:64:13"
												}
											],
											"functionName": {
												"name": "allocate_memory",
												"nodeType": "YulIdentifier",
												"src": "12517:15:13"
											},
											"nodeType": "YulFunctionCall",
											"src": "12517:81:13"
										},
										"variableNames": [
											{
												"name": "array",
												"nodeType": "YulIdentifier",
												"src": "12508:5:13"
											}
										]
									},
									{
										"nodeType": "YulVariableDeclaration",
										"src": "12607:16:13",
										"value": {
											"name": "array",
											"nodeType": "YulIdentifier",
											"src": "12618:5:13"
										},
										"variables": [
											{
												"name": "dst",
												"nodeType": "YulTypedName",
												"src": "12611:3:13",
												"type": ""
											}
										]
									},
									{
										"expression": {
											"arguments": [
												{
													"name": "array",
													"nodeType": "YulIdentifier",
													"src": "12640:5:13"
												},
												{
													"name": "length",
													"nodeType": "YulIdentifier",
													"src": "12647:6:13"
												}
											],
											"functionName": {
												"name": "mstore",
												"nodeType": "YulIdentifier",
												"src": "12633:6:13"
											},
											"nodeType": "YulFunctionCall",
											"src": "12633:21:13"
										},
										"nodeType": "YulExpressionStatement",
										"src": "12633:21:13"
									},
									{
										"nodeType": "YulAssignment",
										"src": "12663:23:13",
										"value": {
											"arguments": [
												{
													"name": "array",
													"nodeType": "YulIdentifier",
													"src": "12674:5:13"
												},
												{
													"kind": "number",
													"nodeType": "YulLiteral",
													"src": "12681:4:13",
													"type": "",
													"value": "0x20"
												}
											],
											"functionName": {
												"name": "add",
												"nodeType": "YulIdentifier",
												"src": "12670:3:13"
											},
											"nodeType": "YulFunctionCall",
											"src": "12670:16:13"
										},
										"variableNames": [
											{
												"name": "dst",
												"nodeType": "YulIdentifier",
												"src": "12663:3:13"
											}
										]
									},
									{
										"nodeType": "YulVariableDeclaration",
										"src": "12696:44:13",
										"value": {
											"arguments": [
												{
													"name": "offset",
													"nodeType": "YulIdentifier",
													"src": "12714:6:13"
												},
												{
													"arguments": [
														{
															"name": "length",
															"nodeType": "YulIdentifier",
															"src": "12726:6:13"
														},
														{
															"kind": "number",
															"nodeType": "YulLiteral",
															"src": "12734:4:13",
															"type": "",
															"value": "0x20"
														}
													],
													"functionName": {
														"name": "mul",
														"nodeType": "YulIdentifier",
														"src": "12722:3:13"
													},
													"nodeType": "YulFunctionCall",
													"src": "12722:17:13"
												}
											],
											"functionName": {
												"name": "add",
												"nodeType": "YulIdentifier",
												"src": "12710:3:13"
											},
											"nodeType": "YulFunctionCall",
											"src": "12710:30:13"
										},
										"variables": [
											{
												"name": "srcEnd",
												"nodeType": "YulTypedName",
												"src": "12700:6:13",
												"type": ""
											}
										]
									},
									{
										"body": {
											"nodeType": "YulBlock",
											"src": "12768:103:13",
											"statements": [
												{
													"expression": {
														"arguments": [],
														"functionName": {
															"name": "revert_error_81385d8c0b31fffe14be1da910c8bd3a80be4cfa248e04f42ec0faea3132a8ef",
															"nodeType": "YulIdentifier",
															"src": "12782:77:13"
														},
														"nodeType": "YulFunctionCall",
														"src": "12782:79:13"
													},
													"nodeType": "YulExpressionStatement",
													"src": "12782:79:13"
												}
											]
										},
										"condition": {
											"arguments": [
												{
													"name": "srcEnd",
													"nodeType": "YulIdentifier",
													"src": "12755:6:13"
												},
												{
													"name": "end",
													"nodeType": "YulIdentifier",
													"src": "12763:3:13"
												}
											],
											"functionName": {
												"name": "gt",
												"nodeType": "YulIdentifier",
												"src": "12752:2:13"
											},
											"nodeType": "YulFunctionCall",
											"src": "12752:15:13"
										},
										"nodeType": "YulIf",
										"src": "12749:122:13"
									},
									{
										"body": {
											"nodeType": "YulBlock",
											"src": "12956:155:13",
											"statements": [
												{
													"nodeType": "YulVariableDeclaration",
													"src": "12971:21:13",
													"value": {
														"name": "src",
														"nodeType": "YulIdentifier",
														"src": "12989:3:13"
													},
													"variables": [
														{
															"name": "elementPos",
															"nodeType": "YulTypedName",
															"src": "12975:10:13",
															"type": ""
														}
													]
												},
												{
													"expression": {
														"arguments": [
															{
																"name": "dst",
																"nodeType": "YulIdentifier",
																"src": "13013:3:13"
															},
															{
																"arguments": [
																	{
																		"name": "elementPos",
																		"nodeType": "YulIdentifier",
																		"src": "13050:10:13"
																	},
																	{
																		"name": "end",
																		"nodeType": "YulIdentifier",
																		"src": "13062:3:13"
																	}
																],
																"functionName": {
																	"name": "abi_decode_t_uint256_fromMemory",
																	"nodeType": "YulIdentifier",
																	"src": "13018:31:13"
																},
																"nodeType": "YulFunctionCall",
																"src": "13018:48:13"
															}
														],
														"functionName": {
															"name": "mstore",
															"nodeType": "YulIdentifier",
															"src": "13006:6:13"
														},
														"nodeType": "YulFunctionCall",
														"src": "13006:61:13"
													},
													"nodeType": "YulExpressionStatement",
													"src": "13006:61:13"
												},
												{
													"nodeType": "YulAssignment",
													"src": "13080:21:13",
													"value": {
														"arguments": [
															{
																"name": "dst",
																"nodeType": "YulIdentifier",
																"src": "13091:3:13"
															},
															{
																"kind": "number",
																"nodeType": "YulLiteral",
																"src": "13096:4:13",
																"type": "",
																"value": "0x20"
															}
														],
														"functionName": {
															"name": "add",
															"nodeType": "YulIdentifier",
															"src": "13087:3:13"
														},
														"nodeType": "YulFunctionCall",
														"src": "13087:14:13"
													},
													"variableNames": [
														{
															"name": "dst",
															"nodeType": "YulIdentifier",
															"src": "13080:3:13"
														}
													]
												}
											]
										},
										"condition": {
											"arguments": [
												{
													"name": "src",
													"nodeType": "YulIdentifier",
													"src": "12909:3:13"
												},
												{
													"name": "srcEnd",
													"nodeType": "YulIdentifier",
													"src": "12914:6:13"
												}
											],
											"functionName": {
												"name": "lt",
												"nodeType": "YulIdentifier",
												"src": "12906:2:13"
											},
											"nodeType": "YulFunctionCall",
											"src": "12906:15:13"
										},
										"nodeType": "YulForLoop",
										"post": {
											"nodeType": "YulBlock",
											"src": "12922:25:13",
											"statements": [
												{
													"nodeType": "YulAssignment",
													"src": "12924:21:13",
													"value": {
														"arguments": [
															{
																"name": "src",
																"nodeType": "YulIdentifier",
																"src": "12935:3:13"
															},
															{
																"kind": "number",
																"nodeType": "YulLiteral",
																"src": "12940:4:13",
																"type": "",
																"value": "0x20"
															}
														],
														"functionName": {
															"name": "add",
															"nodeType": "YulIdentifier",
															"src": "12931:3:13"
														},
														"nodeType": "YulFunctionCall",
														"src": "12931:14:13"
													},
													"variableNames": [
														{
															"name": "src",
															"nodeType": "YulIdentifier",
															"src": "12924:3:13"
														}
													]
												}
											]
										},
										"pre": {
											"nodeType": "YulBlock",
											"src": "12884:21:13",
											"statements": [
												{
													"nodeType": "YulVariableDeclaration",
													"src": "12886:17:13",
													"value": {
														"name": "offset",
														"nodeType": "YulIdentifier",
														"src": "12897:6:13"
													},
													"variables": [
														{
															"name": "src",
															"nodeType": "YulTypedName",
															"src": "12890:3:13",
															"type": ""
														}
													]
												}
											]
										},
										"src": "12880:231:13"
									}
								]
							},
							"name": "abi_decode_available_length_t_array$_t_uint256_$dyn_memory_ptr_fromMemory",
							"nodeType": "YulFunctionDefinition",
							"parameters": [
								{
									"name": "offset",
									"nodeType": "YulTypedName",
									"src": "12468:6:13",
									"type": ""
								},
								{
									"name": "length",
									"nodeType": "YulTypedName",
									"src": "12476:6:13",
									"type": ""
								},
								{
									"name": "end",
									"nodeType": "YulTypedName",
									"src": "12484:3:13",
									"type": ""
								}
							],
							"returnVariables": [
								{
									"name": "array",
									"nodeType": "YulTypedName",
									"src": "12492:5:13",
									"type": ""
								}
							],
							"src": "12385:732:13"
						},
						{
							"body": {
								"nodeType": "YulBlock",
								"src": "13228:297:13",
								"statements": [
									{
										"body": {
											"nodeType": "YulBlock",
											"src": "13277:83:13",
											"statements": [
												{
													"expression": {
														"arguments": [],
														"functionName": {
															"name": "revert_error_1b9f4a0a5773e33b91aa01db23bf8c55fce1411167c872835e7fa00a4f17d46d",
															"nodeType": "YulIdentifier",
															"src": "13279:77:13"
														},
														"nodeType": "YulFunctionCall",
														"src": "13279:79:13"
													},
													"nodeType": "YulExpressionStatement",
													"src": "13279:79:13"
												}
											]
										},
										"condition": {
											"arguments": [
												{
													"arguments": [
														{
															"arguments": [
																{
																	"name": "offset",
																	"nodeType": "YulIdentifier",
																	"src": "13256:6:13"
																},
																{
																	"kind": "number",
																	"nodeType": "YulLiteral",
																	"src": "13264:4:13",
																	"type": "",
																	"value": "0x1f"
																}
															],
															"functionName": {
																"name": "add",
																"nodeType": "YulIdentifier",
																"src": "13252:3:13"
															},
															"nodeType": "YulFunctionCall",
															"src": "13252:17:13"
														},
														{
															"name": "end",
															"nodeType": "YulIdentifier",
															"src": "13271:3:13"
														}
													],
													"functionName": {
														"name": "slt",
														"nodeType": "YulIdentifier",
														"src": "13248:3:13"
													},
													"nodeType": "YulFunctionCall",
													"src": "13248:27:13"
												}
											],
											"functionName": {
												"name": "iszero",
												"nodeType": "YulIdentifier",
												"src": "13241:6:13"
											},
											"nodeType": "YulFunctionCall",
											"src": "13241:35:13"
										},
										"nodeType": "YulIf",
										"src": "13238:122:13"
									},
									{
										"nodeType": "YulVariableDeclaration",
										"src": "13369:27:13",
										"value": {
											"arguments": [
												{
													"name": "offset",
													"nodeType": "YulIdentifier",
													"src": "13389:6:13"
												}
											],
											"functionName": {
												"name": "mload",
												"nodeType": "YulIdentifier",
												"src": "13383:5:13"
											},
											"nodeType": "YulFunctionCall",
											"src": "13383:13:13"
										},
										"variables": [
											{
												"name": "length",
												"nodeType": "YulTypedName",
												"src": "13373:6:13",
												"type": ""
											}
										]
									},
									{
										"nodeType": "YulAssignment",
										"src": "13405:114:13",
										"value": {
											"arguments": [
												{
													"arguments": [
														{
															"name": "offset",
															"nodeType": "YulIdentifier",
															"src": "13492:6:13"
														},
														{
															"kind": "number",
															"nodeType": "YulLiteral",
															"src": "13500:4:13",
															"type": "",
															"value": "0x20"
														}
													],
													"functionName": {
														"name": "add",
														"nodeType": "YulIdentifier",
														"src": "13488:3:13"
													},
													"nodeType": "YulFunctionCall",
													"src": "13488:17:13"
												},
												{
													"name": "length",
													"nodeType": "YulIdentifier",
													"src": "13507:6:13"
												},
												{
													"name": "end",
													"nodeType": "YulIdentifier",
													"src": "13515:3:13"
												}
											],
											"functionName": {
												"name": "abi_decode_available_length_t_array$_t_uint256_$dyn_memory_ptr_fromMemory",
												"nodeType": "YulIdentifier",
												"src": "13414:73:13"
											},
											"nodeType": "YulFunctionCall",
											"src": "13414:105:13"
										},
										"variableNames": [
											{
												"name": "array",
												"nodeType": "YulIdentifier",
												"src": "13405:5:13"
											}
										]
									}
								]
							},
							"name": "abi_decode_t_array$_t_uint256_$dyn_memory_ptr_fromMemory",
							"nodeType": "YulFunctionDefinition",
							"parameters": [
								{
									"name": "offset",
									"nodeType": "YulTypedName",
									"src": "13206:6:13",
									"type": ""
								},
								{
									"name": "end",
									"nodeType": "YulTypedName",
									"src": "13214:3:13",
									"type": ""
								}
							],
							"returnVariables": [
								{
									"name": "array",
									"nodeType": "YulTypedName",
									"src": "13222:5:13",
									"type": ""
								}
							],
							"src": "13140:385:13"
						},
						{
							"body": {
								"nodeType": "YulBlock",
								"src": "13633:452:13",
								"statements": [
									{
										"body": {
											"nodeType": "YulBlock",
											"src": "13679:83:13",
											"statements": [
												{
													"expression": {
														"arguments": [],
														"functionName": {
															"name": "revert_error_dbdddcbe895c83990c08b3492a0e83918d802a52331272ac6fdb6a7c4aea3b1b",
															"nodeType": "YulIdentifier",
															"src": "13681:77:13"
														},
														"nodeType": "YulFunctionCall",
														"src": "13681:79:13"
													},
													"nodeType": "YulExpressionStatement",
													"src": "13681:79:13"
												}
											]
										},
										"condition": {
											"arguments": [
												{
													"arguments": [
														{
															"name": "dataEnd",
															"nodeType": "YulIdentifier",
															"src": "13654:7:13"
														},
														{
															"name": "headStart",
															"nodeType": "YulIdentifier",
															"src": "13663:9:13"
														}
													],
													"functionName": {
														"name": "sub",
														"nodeType": "YulIdentifier",
														"src": "13650:3:13"
													},
													"nodeType": "YulFunctionCall",
													"src": "13650:23:13"
												},
												{
													"kind": "number",
													"nodeType": "YulLiteral",
													"src": "13675:2:13",
													"type": "",
													"value": "32"
												}
											],
											"functionName": {
												"name": "slt",
												"nodeType": "YulIdentifier",
												"src": "13646:3:13"
											},
											"nodeType": "YulFunctionCall",
											"src": "13646:32:13"
										},
										"nodeType": "YulIf",
										"src": "13643:119:13"
									},
									{
										"nodeType": "YulBlock",
										"src": "13772:306:13",
										"statements": [
											{
												"nodeType": "YulVariableDeclaration",
												"src": "13787:38:13",
												"value": {
													"arguments": [
														{
															"arguments": [
																{
																	"name": "headStart",
																	"nodeType": "YulIdentifier",
																	"src": "13811:9:13"
																},
																{
																	"kind": "number",
																	"nodeType": "YulLiteral",
																	"src": "13822:1:13",
																	"type": "",
																	"value": "0"
																}
															],
															"functionName": {
																"name": "add",
																"nodeType": "YulIdentifier",
																"src": "13807:3:13"
															},
															"nodeType": "YulFunctionCall",
															"src": "13807:17:13"
														}
													],
													"functionName": {
														"name": "mload",
														"nodeType": "YulIdentifier",
														"src": "13801:5:13"
													},
													"nodeType": "YulFunctionCall",
													"src": "13801:24:13"
												},
												"variables": [
													{
														"name": "offset",
														"nodeType": "YulTypedName",
														"src": "13791:6:13",
														"type": ""
													}
												]
											},
											{
												"body": {
													"nodeType": "YulBlock",
													"src": "13872:83:13",
													"statements": [
														{
															"expression": {
																"arguments": [],
																"functionName": {
																	"name": "revert_error_c1322bf8034eace5e0b5c7295db60986aa89aae5e0ea0873e4689e076861a5db",
																	"nodeType": "YulIdentifier",
																	"src": "13874:77:13"
																},
																"nodeType": "YulFunctionCall",
																"src": "13874:79:13"
															},
															"nodeType": "YulExpressionStatement",
															"src": "13874:79:13"
														}
													]
												},
												"condition": {
													"arguments": [
														{
															"name": "offset",
															"nodeType": "YulIdentifier",
															"src": "13844:6:13"
														},
														{
															"kind": "number",
															"nodeType": "YulLiteral",
															"src": "13852:18:13",
															"type": "",
															"value": "0xffffffffffffffff"
														}
													],
													"functionName": {
														"name": "gt",
														"nodeType": "YulIdentifier",
														"src": "13841:2:13"
													},
													"nodeType": "YulFunctionCall",
													"src": "13841:30:13"
												},
												"nodeType": "YulIf",
												"src": "13838:117:13"
											},
											{
												"nodeType": "YulAssignment",
												"src": "13969:99:13",
												"value": {
													"arguments": [
														{
															"arguments": [
																{
																	"name": "headStart",
																	"nodeType": "YulIdentifier",
																	"src": "14040:9:13"
																},
																{
																	"name": "offset",
																	"nodeType": "YulIdentifier",
																	"src": "14051:6:13"
																}
															],
															"functionName": {
																"name": "add",
																"nodeType": "YulIdentifier",
																"src": "14036:3:13"
															},
															"nodeType": "YulFunctionCall",
															"src": "14036:22:13"
														},
														{
															"name": "dataEnd",
															"nodeType": "YulIdentifier",
															"src": "14060:7:13"
														}
													],
													"functionName": {
														"name": "abi_decode_t_array$_t_uint256_$dyn_memory_ptr_fromMemory",
														"nodeType": "YulIdentifier",
														"src": "13979:56:13"
													},
													"nodeType": "YulFunctionCall",
													"src": "13979:89:13"
												},
												"variableNames": [
													{
														"name": "value0",
														"nodeType": "YulIdentifier",
														"src": "13969:6:13"
													}
												]
											}
										]
									}
								]
							},
							"name": "abi_decode_tuple_t_array$_t_uint256_$dyn_memory_ptr_fromMemory",
							"nodeType": "YulFunctionDefinition",
							"parameters": [
								{
									"name": "headStart",
									"nodeType": "YulTypedName",
									"src": "13603:9:13",
									"type": ""
								},
								{
									"name": "dataEnd",
									"nodeType": "YulTypedName",
									"src": "13614:7:13",
									"type": ""
								}
							],
							"returnVariables": [
								{
									"name": "value0",
									"nodeType": "YulTypedName",
									"src": "13626:6:13",
									"type": ""
								}
							],
							"src": "13531:554:13"
						},
						{
							"body": {
								"nodeType": "YulBlock",
								"src": "14168:274:13",
								"statements": [
									{
										"body": {
											"nodeType": "YulBlock",
											"src": "14214:83:13",
											"statements": [
												{
													"expression": {
														"arguments": [],
														"functionName": {
															"name": "revert_error_dbdddcbe895c83990c08b3492a0e83918d802a52331272ac6fdb6a7c4aea3b1b",
															"nodeType": "YulIdentifier",
															"src": "14216:77:13"
														},
														"nodeType": "YulFunctionCall",
														"src": "14216:79:13"
													},
													"nodeType": "YulExpressionStatement",
													"src": "14216:79:13"
												}
											]
										},
										"condition": {
											"arguments": [
												{
													"arguments": [
														{
															"name": "dataEnd",
															"nodeType": "YulIdentifier",
															"src": "14189:7:13"
														},
														{
															"name": "headStart",
															"nodeType": "YulIdentifier",
															"src": "14198:9:13"
														}
													],
													"functionName": {
														"name": "sub",
														"nodeType": "YulIdentifier",
														"src": "14185:3:13"
													},
													"nodeType": "YulFunctionCall",
													"src": "14185:23:13"
												},
												{
													"kind": "number",
													"nodeType": "YulLiteral",
													"src": "14210:2:13",
													"type": "",
													"value": "32"
												}
											],
											"functionName": {
												"name": "slt",
												"nodeType": "YulIdentifier",
												"src": "14181:3:13"
											},
											"nodeType": "YulFunctionCall",
											"src": "14181:32:13"
										},
										"nodeType": "YulIf",
										"src": "14178:119:13"
									},
									{
										"nodeType": "YulBlock",
										"src": "14307:128:13",
										"statements": [
											{
												"nodeType": "YulVariableDeclaration",
												"src": "14322:15:13",
												"value": {
													"kind": "number",
													"nodeType": "YulLiteral",
													"src": "14336:1:13",
													"type": "",
													"value": "0"
												},
												"variables": [
													{
														"name": "offset",
														"nodeType": "YulTypedName",
														"src": "14326:6:13",
														"type": ""
													}
												]
											},
											{
												"nodeType": "YulAssignment",
												"src": "14351:74:13",
												"value": {
													"arguments": [
														{
															"arguments": [
																{
																	"name": "headStart",
																	"nodeType": "YulIdentifier",
																	"src": "14397:9:13"
																},
																{
																	"name": "offset",
																	"nodeType": "YulIdentifier",
																	"src": "14408:6:13"
																}
															],
															"functionName": {
																"name": "add",
																"nodeType": "YulIdentifier",
																"src": "14393:3:13"
															},
															"nodeType": "YulFunctionCall",
															"src": "14393:22:13"
														},
														{
															"name": "dataEnd",
															"nodeType": "YulIdentifier",
															"src": "14417:7:13"
														}
													],
													"functionName": {
														"name": "abi_decode_t_uint256_fromMemory",
														"nodeType": "YulIdentifier",
														"src": "14361:31:13"
													},
													"nodeType": "YulFunctionCall",
													"src": "14361:64:13"
												},
												"variableNames": [
													{
														"name": "value0",
														"nodeType": "YulIdentifier",
														"src": "14351:6:13"
													}
												]
											}
										]
									}
								]
							},
							"name": "abi_decode_tuple_t_uint256_fromMemory",
							"nodeType": "YulFunctionDefinition",
							"parameters": [
								{
									"name": "headStart",
									"nodeType": "YulTypedName",
									"src": "14138:9:13",
									"type": ""
								},
								{
									"name": "dataEnd",
									"nodeType": "YulTypedName",
									"src": "14149:7:13",
									"type": ""
								}
							],
							"returnVariables": [
								{
									"name": "value0",
									"nodeType": "YulTypedName",
									"src": "14161:6:13",
									"type": ""
								}
							],
							"src": "14091:351:13"
						},
						{
							"body": {
								"nodeType": "YulBlock",
								"src": "14476:152:13",
								"statements": [
									{
										"expression": {
											"arguments": [
												{
													"kind": "number",
													"nodeType": "YulLiteral",
													"src": "14493:1:13",
													"type": "",
													"value": "0"
												},
												{
													"kind": "number",
													"nodeType": "YulLiteral",
													"src": "14496:77:13",
													"type": "",
													"value": "35408467139433450592217433187231851964531694900788300625387963629091585785856"
												}
											],
											"functionName": {
												"name": "mstore",
												"nodeType": "YulIdentifier",
												"src": "14486:6:13"
											},
											"nodeType": "YulFunctionCall",
											"src": "14486:88:13"
										},
										"nodeType": "YulExpressionStatement",
										"src": "14486:88:13"
									},
									{
										"expression": {
											"arguments": [
												{
													"kind": "number",
													"nodeType": "YulLiteral",
													"src": "14590:1:13",
													"type": "",
													"value": "4"
												},
												{
													"kind": "number",
													"nodeType": "YulLiteral",
													"src": "14593:4:13",
													"type": "",
													"value": "0x11"
												}
											],
											"functionName": {
												"name": "mstore",
												"nodeType": "YulIdentifier",
												"src": "14583:6:13"
											},
											"nodeType": "YulFunctionCall",
											"src": "14583:15:13"
										},
										"nodeType": "YulExpressionStatement",
										"src": "14583:15:13"
									},
									{
										"expression": {
											"arguments": [
												{
													"kind": "number",
													"nodeType": "YulLiteral",
													"src": "14614:1:13",
													"type": "",
													"value": "0"
												},
												{
													"kind": "number",
													"nodeType": "YulLiteral",
													"src": "14617:4:13",
													"type": "",
													"value": "0x24"
												}
											],
											"functionName": {
												"name": "revert",
												"nodeType": "YulIdentifier",
												"src": "14607:6:13"
											},
											"nodeType": "YulFunctionCall",
											"src": "14607:15:13"
										},
										"nodeType": "YulExpressionStatement",
										"src": "14607:15:13"
									}
								]
							},
							"name": "panic_error_0x11",
							"nodeType": "YulFunctionDefinition",
							"src": "14448:180:13"
						},
						{
							"body": {
								"nodeType": "YulBlock",
								"src": "14682:362:13",
								"statements": [
									{
										"nodeType": "YulAssignment",
										"src": "14692:25:13",
										"value": {
											"arguments": [
												{
													"name": "x",
													"nodeType": "YulIdentifier",
													"src": "14715:1:13"
												}
											],
											"functionName": {
												"name": "cleanup_t_uint256",
												"nodeType": "YulIdentifier",
												"src": "14697:17:13"
											},
											"nodeType": "YulFunctionCall",
											"src": "14697:20:13"
										},
										"variableNames": [
											{
												"name": "x",
												"nodeType": "YulIdentifier",
												"src": "14692:1:13"
											}
										]
									},
									{
										"nodeType": "YulAssignment",
										"src": "14726:25:13",
										"value": {
											"arguments": [
												{
													"name": "y",
													"nodeType": "YulIdentifier",
													"src": "14749:1:13"
												}
											],
											"functionName": {
												"name": "cleanup_t_uint256",
												"nodeType": "YulIdentifier",
												"src": "14731:17:13"
											},
											"nodeType": "YulFunctionCall",
											"src": "14731:20:13"
										},
										"variableNames": [
											{
												"name": "y",
												"nodeType": "YulIdentifier",
												"src": "14726:1:13"
											}
										]
									},
									{
										"nodeType": "YulVariableDeclaration",
										"src": "14760:28:13",
										"value": {
											"arguments": [
												{
													"name": "x",
													"nodeType": "YulIdentifier",
													"src": "14783:1:13"
												},
												{
													"name": "y",
													"nodeType": "YulIdentifier",
													"src": "14786:1:13"
												}
											],
											"functionName": {
												"name": "mul",
												"nodeType": "YulIdentifier",
												"src": "14779:3:13"
											},
											"nodeType": "YulFunctionCall",
											"src": "14779:9:13"
										},
										"variables": [
											{
												"name": "product_raw",
												"nodeType": "YulTypedName",
												"src": "14764:11:13",
												"type": ""
											}
										]
									},
									{
										"nodeType": "YulAssignment",
										"src": "14797:41:13",
										"value": {
											"arguments": [
												{
													"name": "product_raw",
													"nodeType": "YulIdentifier",
													"src": "14826:11:13"
												}
											],
											"functionName": {
												"name": "cleanup_t_uint256",
												"nodeType": "YulIdentifier",
												"src": "14808:17:13"
											},
											"nodeType": "YulFunctionCall",
											"src": "14808:30:13"
										},
										"variableNames": [
											{
												"name": "product",
												"nodeType": "YulIdentifier",
												"src": "14797:7:13"
											}
										]
									},
									{
										"body": {
											"nodeType": "YulBlock",
											"src": "15015:22:13",
											"statements": [
												{
													"expression": {
														"arguments": [],
														"functionName": {
															"name": "panic_error_0x11",
															"nodeType": "YulIdentifier",
															"src": "15017:16:13"
														},
														"nodeType": "YulFunctionCall",
														"src": "15017:18:13"
													},
													"nodeType": "YulExpressionStatement",
													"src": "15017:18:13"
												}
											]
										},
										"condition": {
											"arguments": [
												{
													"arguments": [
														{
															"arguments": [
																{
																	"name": "x",
																	"nodeType": "YulIdentifier",
																	"src": "14948:1:13"
																}
															],
															"functionName": {
																"name": "iszero",
																"nodeType": "YulIdentifier",
																"src": "14941:6:13"
															},
															"nodeType": "YulFunctionCall",
															"src": "14941:9:13"
														},
														{
															"arguments": [
																{
																	"name": "y",
																	"nodeType": "YulIdentifier",
																	"src": "14971:1:13"
																},
																{
																	"arguments": [
																		{
																			"name": "product",
																			"nodeType": "YulIdentifier",
																			"src": "14978:7:13"
																		},
																		{
																			"name": "x",
																			"nodeType": "YulIdentifier",
																			"src": "14987:1:13"
																		}
																	],
																	"functionName": {
																		"name": "div",
																		"nodeType": "YulIdentifier",
																		"src": "14974:3:13"
																	},
																	"nodeType": "YulFunctionCall",
																	"src": "14974:15:13"
																}
															],
															"functionName": {
																"name": "eq",
																"nodeType": "YulIdentifier",
																"src": "14968:2:13"
															},
															"nodeType": "YulFunctionCall",
															"src": "14968:22:13"
														}
													],
													"functionName": {
														"name": "or",
														"nodeType": "YulIdentifier",
														"src": "14921:2:13"
													},
													"nodeType": "YulFunctionCall",
													"src": "14921:83:13"
												}
											],
											"functionName": {
												"name": "iszero",
												"nodeType": "YulIdentifier",
												"src": "14901:6:13"
											},
											"nodeType": "YulFunctionCall",
											"src": "14901:113:13"
										},
										"nodeType": "YulIf",
										"src": "14898:139:13"
									}
								]
							},
							"name": "checked_mul_t_uint256",
							"nodeType": "YulFunctionDefinition",
							"parameters": [
								{
									"name": "x",
									"nodeType": "YulTypedName",
									"src": "14665:1:13",
									"type": ""
								},
								{
									"name": "y",
									"nodeType": "YulTypedName",
									"src": "14668:1:13",
									"type": ""
								}
							],
							"returnVariables": [
								{
									"name": "product",
									"nodeType": "YulTypedName",
									"src": "14674:7:13",
									"type": ""
								}
							],
							"src": "14634:410:13"
						},
						{
							"body": {
								"nodeType": "YulBlock",
								"src": "15093:190:13",
								"statements": [
									{
										"nodeType": "YulAssignment",
										"src": "15103:33:13",
										"value": {
											"arguments": [
												{
													"name": "value",
													"nodeType": "YulIdentifier",
													"src": "15130:5:13"
												}
											],
											"functionName": {
												"name": "cleanup_t_uint256",
												"nodeType": "YulIdentifier",
												"src": "15112:17:13"
											},
											"nodeType": "YulFunctionCall",
											"src": "15112:24:13"
										},
										"variableNames": [
											{
												"name": "value",
												"nodeType": "YulIdentifier",
												"src": "15103:5:13"
											}
										]
									},
									{
										"body": {
											"nodeType": "YulBlock",
											"src": "15226:22:13",
											"statements": [
												{
													"expression": {
														"arguments": [],
														"functionName": {
															"name": "panic_error_0x11",
															"nodeType": "YulIdentifier",
															"src": "15228:16:13"
														},
														"nodeType": "YulFunctionCall",
														"src": "15228:18:13"
													},
													"nodeType": "YulExpressionStatement",
													"src": "15228:18:13"
												}
											]
										},
										"condition": {
											"arguments": [
												{
													"name": "value",
													"nodeType": "YulIdentifier",
													"src": "15151:5:13"
												},
												{
													"kind": "number",
													"nodeType": "YulLiteral",
													"src": "15158:66:13",
													"type": "",
													"value": "0xffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff"
												}
											],
											"functionName": {
												"name": "eq",
												"nodeType": "YulIdentifier",
												"src": "15148:2:13"
											},
											"nodeType": "YulFunctionCall",
											"src": "15148:77:13"
										},
										"nodeType": "YulIf",
										"src": "15145:103:13"
									},
									{
										"nodeType": "YulAssignment",
										"src": "15257:20:13",
										"value": {
											"arguments": [
												{
													"name": "value",
													"nodeType": "YulIdentifier",
													"src": "15268:5:13"
												},
												{
													"kind": "number",
													"nodeType": "YulLiteral",
													"src": "15275:1:13",
													"type": "",
													"value": "1"
												}
											],
											"functionName": {
												"name": "add",
												"nodeType": "YulIdentifier",
												"src": "15264:3:13"
											},
											"nodeType": "YulFunctionCall",
											"src": "15264:13:13"
										},
										"variableNames": [
											{
												"name": "ret",
												"nodeType": "YulIdentifier",
												"src": "15257:3:13"
											}
										]
									}
								]
							},
							"name": "increment_t_uint256",
							"nodeType": "YulFunctionDefinition",
							"parameters": [
								{
									"name": "value",
									"nodeType": "YulTypedName",
									"src": "15079:5:13",
									"type": ""
								}
							],
							"returnVariables": [
								{
									"name": "ret",
									"nodeType": "YulTypedName",
									"src": "15089:3:13",
									"type": ""
								}
							],
							"src": "15050:233:13"
						},
						{
							"body": {
								"nodeType": "YulBlock",
								"src": "15385:73:13",
								"statements": [
									{
										"expression": {
											"arguments": [
												{
													"name": "pos",
													"nodeType": "YulIdentifier",
													"src": "15402:3:13"
												},
												{
													"name": "length",
													"nodeType": "YulIdentifier",
													"src": "15407:6:13"
												}
											],
											"functionName": {
												"name": "mstore",
												"nodeType": "YulIdentifier",
												"src": "15395:6:13"
											},
											"nodeType": "YulFunctionCall",
											"src": "15395:19:13"
										},
										"nodeType": "YulExpressionStatement",
										"src": "15395:19:13"
									},
									{
										"nodeType": "YulAssignment",
										"src": "15423:29:13",
										"value": {
											"arguments": [
												{
													"name": "pos",
													"nodeType": "YulIdentifier",
													"src": "15442:3:13"
												},
												{
													"kind": "number",
													"nodeType": "YulLiteral",
													"src": "15447:4:13",
													"type": "",
													"value": "0x20"
												}
											],
											"functionName": {
												"name": "add",
												"nodeType": "YulIdentifier",
												"src": "15438:3:13"
											},
											"nodeType": "YulFunctionCall",
											"src": "15438:14:13"
										},
										"variableNames": [
											{
												"name": "updated_pos",
												"nodeType": "YulIdentifier",
												"src": "15423:11:13"
											}
										]
									}
								]
							},
							"name": "array_storeLengthForEncoding_t_string_memory_ptr_fromStack",
							"nodeType": "YulFunctionDefinition",
							"parameters": [
								{
									"name": "pos",
									"nodeType": "YulTypedName",
									"src": "15357:3:13",
									"type": ""
								},
								{
									"name": "length",
									"nodeType": "YulTypedName",
									"src": "15362:6:13",
									"type": ""
								}
							],
							"returnVariables": [
								{
									"name": "updated_pos",
									"nodeType": "YulTypedName",
									"src": "15373:11:13",
									"type": ""
								}
							],
							"src": "15289:169:13"
						},
						{
							"body": {
								"nodeType": "YulBlock",
								"src": "15570:123:13",
								"statements": [
									{
										"expression": {
											"arguments": [
												{
													"arguments": [
														{
															"name": "memPtr",
															"nodeType": "YulIdentifier",
															"src": "15592:6:13"
														},
														{
															"kind": "number",
															"nodeType": "YulLiteral",
															"src": "15600:1:13",
															"type": "",
															"value": "0"
														}
													],
													"functionName": {
														"name": "add",
														"nodeType": "YulIdentifier",
														"src": "15588:3:13"
													},
													"nodeType": "YulFunctionCall",
													"src": "15588:14:13"
												},
												{
													"hexValue": "5661756c7420616c72656164792065786973747320666f722074686973204e46",
													"kind": "string",
													"nodeType": "YulLiteral",
													"src": "15604:34:13",
													"type": "",
													"value": "Vault already exists for this NF"
												}
											],
											"functionName": {
												"name": "mstore",
												"nodeType": "YulIdentifier",
												"src": "15581:6:13"
											},
											"nodeType": "YulFunctionCall",
											"src": "15581:58:13"
										},
										"nodeType": "YulExpressionStatement",
										"src": "15581:58:13"
									},
									{
										"expression": {
											"arguments": [
												{
													"arguments": [
														{
															"name": "memPtr",
															"nodeType": "YulIdentifier",
															"src": "15660:6:13"
														},
														{
															"kind": "number",
															"nodeType": "YulLiteral",
															"src": "15668:2:13",
															"type": "",
															"value": "32"
														}
													],
													"functionName": {
														"name": "add",
														"nodeType": "YulIdentifier",
														"src": "15656:3:13"
													},
													"nodeType": "YulFunctionCall",
													"src": "15656:15:13"
												},
												{
													"hexValue": "5420636f6e7472616374",
													"kind": "string",
													"nodeType": "YulLiteral",
													"src": "15673:12:13",
													"type": "",
													"value": "T contract"
												}
											],
											"functionName": {
												"name": "mstore",
												"nodeType": "YulIdentifier",
												"src": "15649:6:13"
											},
											"nodeType": "YulFunctionCall",
											"src": "15649:37:13"
										},
										"nodeType": "YulExpressionStatement",
										"src": "15649:37:13"
									}
								]
							},
							"name": "store_literal_in_memory_5824732942b65793939b349ae446a33529c5efa78f9adc0aff8550635fa44b27",
							"nodeType": "YulFunctionDefinition",
							"parameters": [
								{
									"name": "memPtr",
									"nodeType": "YulTypedName",
									"src": "15562:6:13",
									"type": ""
								}
							],
							"src": "15464:229:13"
						},
						{
							"body": {
								"nodeType": "YulBlock",
								"src": "15845:220:13",
								"statements": [
									{
										"nodeType": "YulAssignment",
										"src": "15855:74:13",
										"value": {
											"arguments": [
												{
													"name": "pos",
													"nodeType": "YulIdentifier",
													"src": "15921:3:13"
												},
												{
													"kind": "number",
													"nodeType": "YulLiteral",
													"src": "15926:2:13",
													"type": "",
													"value": "42"
												}
											],
											"functionName": {
												"name": "array_storeLengthForEncoding_t_string_memory_ptr_fromStack",
												"nodeType": "YulIdentifier",
												"src": "15862:58:13"
											},
											"nodeType": "YulFunctionCall",
											"src": "15862:67:13"
										},
										"variableNames": [
											{
												"name": "pos",
												"nodeType": "YulIdentifier",
												"src": "15855:3:13"
											}
										]
									},
									{
										"expression": {
											"arguments": [
												{
													"name": "pos",
													"nodeType": "YulIdentifier",
													"src": "16027:3:13"
												}
											],
											"functionName": {
												"name": "store_literal_in_memory_5824732942b65793939b349ae446a33529c5efa78f9adc0aff8550635fa44b27",
												"nodeType": "YulIdentifier",
												"src": "15938:88:13"
											},
											"nodeType": "YulFunctionCall",
											"src": "15938:93:13"
										},
										"nodeType": "YulExpressionStatement",
										"src": "15938:93:13"
									},
									{
										"nodeType": "YulAssignment",
										"src": "16040:19:13",
										"value": {
											"arguments": [
												{
													"name": "pos",
													"nodeType": "YulIdentifier",
													"src": "16051:3:13"
												},
												{
													"kind": "number",
													"nodeType": "YulLiteral",
													"src": "16056:2:13",
													"type": "",
													"value": "64"
												}
											],
											"functionName": {
												"name": "add",
												"nodeType": "YulIdentifier",
												"src": "16047:3:13"
											},
											"nodeType": "YulFunctionCall",
											"src": "16047:12:13"
										},
										"variableNames": [
											{
												"name": "end",
												"nodeType": "YulIdentifier",
												"src": "16040:3:13"
											}
										]
									}
								]
							},
							"name": "abi_encode_t_stringliteral_5824732942b65793939b349ae446a33529c5efa78f9adc0aff8550635fa44b27_to_t_string_memory_ptr_fromStack",
							"nodeType": "YulFunctionDefinition",
							"parameters": [
								{
									"name": "pos",
									"nodeType": "YulTypedName",
									"src": "15833:3:13",
									"type": ""
								}
							],
							"returnVariables": [
								{
									"name": "end",
									"nodeType": "YulTypedName",
									"src": "15841:3:13",
									"type": ""
								}
							],
							"src": "15699:366:13"
						},
						{
							"body": {
								"nodeType": "YulBlock",
								"src": "16242:248:13",
								"statements": [
									{
										"nodeType": "YulAssignment",
										"src": "16252:26:13",
										"value": {
											"arguments": [
												{
													"name": "headStart",
													"nodeType": "YulIdentifier",
													"src": "16264:9:13"
												},
												{
													"kind": "number",
													"nodeType": "YulLiteral",
													"src": "16275:2:13",
													"type": "",
													"value": "32"
												}
											],
											"functionName": {
												"name": "add",
												"nodeType": "YulIdentifier",
												"src": "16260:3:13"
											},
											"nodeType": "YulFunctionCall",
											"src": "16260:18:13"
										},
										"variableNames": [
											{
												"name": "tail",
												"nodeType": "YulIdentifier",
												"src": "16252:4:13"
											}
										]
									},
									{
										"expression": {
											"arguments": [
												{
													"arguments": [
														{
															"name": "headStart",
															"nodeType": "YulIdentifier",
															"src": "16299:9:13"
														},
														{
															"kind": "number",
															"nodeType": "YulLiteral",
															"src": "16310:1:13",
															"type": "",
															"value": "0"
														}
													],
													"functionName": {
														"name": "add",
														"nodeType": "YulIdentifier",
														"src": "16295:3:13"
													},
													"nodeType": "YulFunctionCall",
													"src": "16295:17:13"
												},
												{
													"arguments": [
														{
															"name": "tail",
															"nodeType": "YulIdentifier",
															"src": "16318:4:13"
														},
														{
															"name": "headStart",
															"nodeType": "YulIdentifier",
															"src": "16324:9:13"
														}
													],
													"functionName": {
														"name": "sub",
														"nodeType": "YulIdentifier",
														"src": "16314:3:13"
													},
													"nodeType": "YulFunctionCall",
													"src": "16314:20:13"
												}
											],
											"functionName": {
												"name": "mstore",
												"nodeType": "YulIdentifier",
												"src": "16288:6:13"
											},
											"nodeType": "YulFunctionCall",
											"src": "16288:47:13"
										},
										"nodeType": "YulExpressionStatement",
										"src": "16288:47:13"
									},
									{
										"nodeType": "YulAssignment",
										"src": "16344:139:13",
										"value": {
											"arguments": [
												{
													"name": "tail",
													"nodeType": "YulIdentifier",
													"src": "16478:4:13"
												}
											],
											"functionName": {
												"name": "abi_encode_t_stringliteral_5824732942b65793939b349ae446a33529c5efa78f9adc0aff8550635fa44b27_to_t_string_memory_ptr_fromStack",
												"nodeType": "YulIdentifier",
												"src": "16352:124:13"
											},
											"nodeType": "YulFunctionCall",
											"src": "16352:131:13"
										},
										"variableNames": [
											{
												"name": "tail",
												"nodeType": "YulIdentifier",
												"src": "16344:4:13"
											}
										]
									}
								]
							},
							"name": "abi_encode_tuple_t_stringliteral_5824732942b65793939b349ae446a33529c5efa78f9adc0aff8550635fa44b27__to_t_string_memory_ptr__fromStack_reversed",
							"nodeType": "YulFunctionDefinition",
							"parameters": [
								{
									"name": "headStart",
									"nodeType": "YulTypedName",
									"src": "16222:9:13",
									"type": ""
								}
							],
							"returnVariables": [
								{
									"name": "tail",
									"nodeType": "YulTypedName",
									"src": "16237:4:13",
									"type": ""
								}
							],
							"src": "16071:419:13"
						},
						{
							"body": {
								"nodeType": "YulBlock",
								"src": "16561:53:13",
								"statements": [
									{
										"expression": {
											"arguments": [
												{
													"name": "pos",
													"nodeType": "YulIdentifier",
													"src": "16578:3:13"
												},
												{
													"arguments": [
														{
															"name": "value",
															"nodeType": "YulIdentifier",
															"src": "16601:5:13"
														}
													],
													"functionName": {
														"name": "cleanup_t_uint256",
														"nodeType": "YulIdentifier",
														"src": "16583:17:13"
													},
													"nodeType": "YulFunctionCall",
													"src": "16583:24:13"
												}
											],
											"functionName": {
												"name": "mstore",
												"nodeType": "YulIdentifier",
												"src": "16571:6:13"
											},
											"nodeType": "YulFunctionCall",
											"src": "16571:37:13"
										},
										"nodeType": "YulExpressionStatement",
										"src": "16571:37:13"
									}
								]
							},
							"name": "abi_encode_t_uint256_to_t_uint256_fromStack",
							"nodeType": "YulFunctionDefinition",
							"parameters": [
								{
									"name": "value",
									"nodeType": "YulTypedName",
									"src": "16549:5:13",
									"type": ""
								},
								{
									"name": "pos",
									"nodeType": "YulTypedName",
									"src": "16556:3:13",
									"type": ""
								}
							],
							"src": "16496:118:13"
						},
						{
							"body": {
								"nodeType": "YulBlock",
								"src": "16774:288:13",
								"statements": [
									{
										"nodeType": "YulAssignment",
										"src": "16784:26:13",
										"value": {
											"arguments": [
												{
													"name": "headStart",
													"nodeType": "YulIdentifier",
													"src": "16796:9:13"
												},
												{
													"kind": "number",
													"nodeType": "YulLiteral",
													"src": "16807:2:13",
													"type": "",
													"value": "96"
												}
											],
											"functionName": {
												"name": "add",
												"nodeType": "YulIdentifier",
												"src": "16792:3:13"
											},
											"nodeType": "YulFunctionCall",
											"src": "16792:18:13"
										},
										"variableNames": [
											{
												"name": "tail",
												"nodeType": "YulIdentifier",
												"src": "16784:4:13"
											}
										]
									},
									{
										"expression": {
											"arguments": [
												{
													"name": "value0",
													"nodeType": "YulIdentifier",
													"src": "16864:6:13"
												},
												{
													"arguments": [
														{
															"name": "headStart",
															"nodeType": "YulIdentifier",
															"src": "16877:9:13"
														},
														{
															"kind": "number",
															"nodeType": "YulLiteral",
															"src": "16888:1:13",
															"type": "",
															"value": "0"
														}
													],
													"functionName": {
														"name": "add",
														"nodeType": "YulIdentifier",
														"src": "16873:3:13"
													},
													"nodeType": "YulFunctionCall",
													"src": "16873:17:13"
												}
											],
											"functionName": {
												"name": "abi_encode_t_address_to_t_address_fromStack",
												"nodeType": "YulIdentifier",
												"src": "16820:43:13"
											},
											"nodeType": "YulFunctionCall",
											"src": "16820:71:13"
										},
										"nodeType": "YulExpressionStatement",
										"src": "16820:71:13"
									},
									{
										"expression": {
											"arguments": [
												{
													"name": "value1",
													"nodeType": "YulIdentifier",
													"src": "16945:6:13"
												},
												{
													"arguments": [
														{
															"name": "headStart",
															"nodeType": "YulIdentifier",
															"src": "16958:9:13"
														},
														{
															"kind": "number",
															"nodeType": "YulLiteral",
															"src": "16969:2:13",
															"type": "",
															"value": "32"
														}
													],
													"functionName": {
														"name": "add",
														"nodeType": "YulIdentifier",
														"src": "16954:3:13"
													},
													"nodeType": "YulFunctionCall",
													"src": "16954:18:13"
												}
											],
											"functionName": {
												"name": "abi_encode_t_uint256_to_t_uint256_fromStack",
												"nodeType": "YulIdentifier",
												"src": "16901:43:13"
											},
											"nodeType": "YulFunctionCall",
											"src": "16901:72:13"
										},
										"nodeType": "YulExpressionStatement",
										"src": "16901:72:13"
									},
									{
										"expression": {
											"arguments": [
												{
													"name": "value2",
													"nodeType": "YulIdentifier",
													"src": "17027:6:13"
												},
												{
													"arguments": [
														{
															"name": "headStart",
															"nodeType": "YulIdentifier",
															"src": "17040:9:13"
														},
														{
															"kind": "number",
															"nodeType": "YulLiteral",
															"src": "17051:2:13",
															"type": "",
															"value": "64"
														}
													],
													"functionName": {
														"name": "add",
														"nodeType": "YulIdentifier",
														"src": "17036:3:13"
													},
													"nodeType": "YulFunctionCall",
													"src": "17036:18:13"
												}
											],
											"functionName": {
												"name": "abi_encode_t_address_to_t_address_fromStack",
												"nodeType": "YulIdentifier",
												"src": "16983:43:13"
											},
											"nodeType": "YulFunctionCall",
											"src": "16983:72:13"
										},
										"nodeType": "YulExpressionStatement",
										"src": "16983:72:13"
									}
								]
							},
							"name": "abi_encode_tuple_t_address_t_uint256_t_address__to_t_address_t_uint256_t_address__fromStack_reversed",
							"nodeType": "YulFunctionDefinition",
							"parameters": [
								{
									"name": "headStart",
									"nodeType": "YulTypedName",
									"src": "16730:9:13",
									"type": ""
								},
								{
									"name": "value2",
									"nodeType": "YulTypedName",
									"src": "16742:6:13",
									"type": ""
								},
								{
									"name": "value1",
									"nodeType": "YulTypedName",
									"src": "16750:6:13",
									"type": ""
								},
								{
									"name": "value0",
									"nodeType": "YulTypedName",
									"src": "16758:6:13",
									"type": ""
								}
							],
							"returnVariables": [
								{
									"name": "tail",
									"nodeType": "YulTypedName",
									"src": "16769:4:13",
									"type": ""
								}
							],
							"src": "16620:442:13"
						},
						{
							"body": {
								"nodeType": "YulBlock",
								"src": "17222:288:13",
								"statements": [
									{
										"nodeType": "YulAssignment",
										"src": "17232:26:13",
										"value": {
											"arguments": [
												{
													"name": "headStart",
													"nodeType": "YulIdentifier",
													"src": "17244:9:13"
												},
												{
													"kind": "number",
													"nodeType": "YulLiteral",
													"src": "17255:2:13",
													"type": "",
													"value": "96"
												}
											],
											"functionName": {
												"name": "add",
												"nodeType": "YulIdentifier",
												"src": "17240:3:13"
											},
											"nodeType": "YulFunctionCall",
											"src": "17240:18:13"
										},
										"variableNames": [
											{
												"name": "tail",
												"nodeType": "YulIdentifier",
												"src": "17232:4:13"
											}
										]
									},
									{
										"expression": {
											"arguments": [
												{
													"name": "value0",
													"nodeType": "YulIdentifier",
													"src": "17312:6:13"
												},
												{
													"arguments": [
														{
															"name": "headStart",
															"nodeType": "YulIdentifier",
															"src": "17325:9:13"
														},
														{
															"kind": "number",
															"nodeType": "YulLiteral",
															"src": "17336:1:13",
															"type": "",
															"value": "0"
														}
													],
													"functionName": {
														"name": "add",
														"nodeType": "YulIdentifier",
														"src": "17321:3:13"
													},
													"nodeType": "YulFunctionCall",
													"src": "17321:17:13"
												}
											],
											"functionName": {
												"name": "abi_encode_t_uint256_to_t_uint256_fromStack",
												"nodeType": "YulIdentifier",
												"src": "17268:43:13"
											},
											"nodeType": "YulFunctionCall",
											"src": "17268:71:13"
										},
										"nodeType": "YulExpressionStatement",
										"src": "17268:71:13"
									},
									{
										"expression": {
											"arguments": [
												{
													"name": "value1",
													"nodeType": "YulIdentifier",
													"src": "17393:6:13"
												},
												{
													"arguments": [
														{
															"name": "headStart",
															"nodeType": "YulIdentifier",
															"src": "17406:9:13"
														},
														{
															"kind": "number",
															"nodeType": "YulLiteral",
															"src": "17417:2:13",
															"type": "",
															"value": "32"
														}
													],
													"functionName": {
														"name": "add",
														"nodeType": "YulIdentifier",
														"src": "17402:3:13"
													},
													"nodeType": "YulFunctionCall",
													"src": "17402:18:13"
												}
											],
											"functionName": {
												"name": "abi_encode_t_address_to_t_address_fromStack",
												"nodeType": "YulIdentifier",
												"src": "17349:43:13"
											},
											"nodeType": "YulFunctionCall",
											"src": "17349:72:13"
										},
										"nodeType": "YulExpressionStatement",
										"src": "17349:72:13"
									},
									{
										"expression": {
											"arguments": [
												{
													"name": "value2",
													"nodeType": "YulIdentifier",
													"src": "17475:6:13"
												},
												{
													"arguments": [
														{
															"name": "headStart",
															"nodeType": "YulIdentifier",
															"src": "17488:9:13"
														},
														{
															"kind": "number",
															"nodeType": "YulLiteral",
															"src": "17499:2:13",
															"type": "",
															"value": "64"
														}
													],
													"functionName": {
														"name": "add",
														"nodeType": "YulIdentifier",
														"src": "17484:3:13"
													},
													"nodeType": "YulFunctionCall",
													"src": "17484:18:13"
												}
											],
											"functionName": {
												"name": "abi_encode_t_address_to_t_address_fromStack",
												"nodeType": "YulIdentifier",
												"src": "17431:43:13"
											},
											"nodeType": "YulFunctionCall",
											"src": "17431:72:13"
										},
										"nodeType": "YulExpressionStatement",
										"src": "17431:72:13"
									}
								]
							},
							"name": "abi_encode_tuple_t_uint256_t_address_t_address__to_t_uint256_t_address_t_address__fromStack_reversed",
							"nodeType": "YulFunctionDefinition",
							"parameters": [
								{
									"name": "headStart",
									"nodeType": "YulTypedName",
									"src": "17178:9:13",
									"type": ""
								},
								{
									"name": "value2",
									"nodeType": "YulTypedName",
									"src": "17190:6:13",
									"type": ""
								},
								{
									"name": "value1",
									"nodeType": "YulTypedName",
									"src": "17198:6:13",
									"type": ""
								},
								{
									"name": "value0",
									"nodeType": "YulTypedName",
									"src": "17206:6:13",
									"type": ""
								}
							],
							"returnVariables": [
								{
									"name": "tail",
									"nodeType": "YulTypedName",
									"src": "17217:4:13",
									"type": ""
								}
							],
							"src": "17068:442:13"
						},
						{
							"body": {
								"nodeType": "YulBlock",
								"src": "17622:124:13",
								"statements": [
									{
										"expression": {
											"arguments": [
												{
													"arguments": [
														{
															"name": "memPtr",
															"nodeType": "YulIdentifier",
															"src": "17644:6:13"
														},
														{
															"kind": "number",
															"nodeType": "YulLiteral",
															"src": "17652:1:13",
															"type": "",
															"value": "0"
														}
													],
													"functionName": {
														"name": "add",
														"nodeType": "YulIdentifier",
														"src": "17640:3:13"
													},
													"nodeType": "YulFunctionCall",
													"src": "17640:14:13"
												},
												{
													"hexValue": "5661756c7420646f6573206e6f742065786973747320666f722074686973204e",
													"kind": "string",
													"nodeType": "YulLiteral",
													"src": "17656:34:13",
													"type": "",
													"value": "Vault does not exists for this N"
												}
											],
											"functionName": {
												"name": "mstore",
												"nodeType": "YulIdentifier",
												"src": "17633:6:13"
											},
											"nodeType": "YulFunctionCall",
											"src": "17633:58:13"
										},
										"nodeType": "YulExpressionStatement",
										"src": "17633:58:13"
									},
									{
										"expression": {
											"arguments": [
												{
													"arguments": [
														{
															"name": "memPtr",
															"nodeType": "YulIdentifier",
															"src": "17712:6:13"
														},
														{
															"kind": "number",
															"nodeType": "YulLiteral",
															"src": "17720:2:13",
															"type": "",
															"value": "32"
														}
													],
													"functionName": {
														"name": "add",
														"nodeType": "YulIdentifier",
														"src": "17708:3:13"
													},
													"nodeType": "YulFunctionCall",
													"src": "17708:15:13"
												},
												{
													"hexValue": "465420636f6e7472616374",
													"kind": "string",
													"nodeType": "YulLiteral",
													"src": "17725:13:13",
													"type": "",
													"value": "FT contract"
												}
											],
											"functionName": {
												"name": "mstore",
												"nodeType": "YulIdentifier",
												"src": "17701:6:13"
											},
											"nodeType": "YulFunctionCall",
											"src": "17701:38:13"
										},
										"nodeType": "YulExpressionStatement",
										"src": "17701:38:13"
									}
								]
							},
							"name": "store_literal_in_memory_af09f6db30e4867e53cba9916b467b745c1bb0ff7604dcbe2aeb26f6c0c4cbab",
							"nodeType": "YulFunctionDefinition",
							"parameters": [
								{
									"name": "memPtr",
									"nodeType": "YulTypedName",
									"src": "17614:6:13",
									"type": ""
								}
							],
							"src": "17516:230:13"
						},
						{
							"body": {
								"nodeType": "YulBlock",
								"src": "17898:220:13",
								"statements": [
									{
										"nodeType": "YulAssignment",
										"src": "17908:74:13",
										"value": {
											"arguments": [
												{
													"name": "pos",
													"nodeType": "YulIdentifier",
													"src": "17974:3:13"
												},
												{
													"kind": "number",
													"nodeType": "YulLiteral",
													"src": "17979:2:13",
													"type": "",
													"value": "43"
												}
											],
											"functionName": {
												"name": "array_storeLengthForEncoding_t_string_memory_ptr_fromStack",
												"nodeType": "YulIdentifier",
												"src": "17915:58:13"
											},
											"nodeType": "YulFunctionCall",
											"src": "17915:67:13"
										},
										"variableNames": [
											{
												"name": "pos",
												"nodeType": "YulIdentifier",
												"src": "17908:3:13"
											}
										]
									},
									{
										"expression": {
											"arguments": [
												{
													"name": "pos",
													"nodeType": "YulIdentifier",
													"src": "18080:3:13"
												}
											],
											"functionName": {
												"name": "store_literal_in_memory_af09f6db30e4867e53cba9916b467b745c1bb0ff7604dcbe2aeb26f6c0c4cbab",
												"nodeType": "YulIdentifier",
												"src": "17991:88:13"
											},
											"nodeType": "YulFunctionCall",
											"src": "17991:93:13"
										},
										"nodeType": "YulExpressionStatement",
										"src": "17991:93:13"
									},
									{
										"nodeType": "YulAssignment",
										"src": "18093:19:13",
										"value": {
											"arguments": [
												{
													"name": "pos",
													"nodeType": "YulIdentifier",
													"src": "18104:3:13"
												},
												{
													"kind": "number",
													"nodeType": "YulLiteral",
													"src": "18109:2:13",
													"type": "",
													"value": "64"
												}
											],
											"functionName": {
												"name": "add",
												"nodeType": "YulIdentifier",
												"src": "18100:3:13"
											},
											"nodeType": "YulFunctionCall",
											"src": "18100:12:13"
										},
										"variableNames": [
											{
												"name": "end",
												"nodeType": "YulIdentifier",
												"src": "18093:3:13"
											}
										]
									}
								]
							},
							"name": "abi_encode_t_stringliteral_af09f6db30e4867e53cba9916b467b745c1bb0ff7604dcbe2aeb26f6c0c4cbab_to_t_string_memory_ptr_fromStack",
							"nodeType": "YulFunctionDefinition",
							"parameters": [
								{
									"name": "pos",
									"nodeType": "YulTypedName",
									"src": "17886:3:13",
									"type": ""
								}
							],
							"returnVariables": [
								{
									"name": "end",
									"nodeType": "YulTypedName",
									"src": "17894:3:13",
									"type": ""
								}
							],
							"src": "17752:366:13"
						},
						{
							"body": {
								"nodeType": "YulBlock",
								"src": "18295:248:13",
								"statements": [
									{
										"nodeType": "YulAssignment",
										"src": "18305:26:13",
										"value": {
											"arguments": [
												{
													"name": "headStart",
													"nodeType": "YulIdentifier",
													"src": "18317:9:13"
												},
												{
													"kind": "number",
													"nodeType": "YulLiteral",
													"src": "18328:2:13",
													"type": "",
													"value": "32"
												}
											],
											"functionName": {
												"name": "add",
												"nodeType": "YulIdentifier",
												"src": "18313:3:13"
											},
											"nodeType": "YulFunctionCall",
											"src": "18313:18:13"
										},
										"variableNames": [
											{
												"name": "tail",
												"nodeType": "YulIdentifier",
												"src": "18305:4:13"
											}
										]
									},
									{
										"expression": {
											"arguments": [
												{
													"arguments": [
														{
															"name": "headStart",
															"nodeType": "YulIdentifier",
															"src": "18352:9:13"
														},
														{
															"kind": "number",
															"nodeType": "YulLiteral",
															"src": "18363:1:13",
															"type": "",
															"value": "0"
														}
													],
													"functionName": {
														"name": "add",
														"nodeType": "YulIdentifier",
														"src": "18348:3:13"
													},
													"nodeType": "YulFunctionCall",
													"src": "18348:17:13"
												},
												{
													"arguments": [
														{
															"name": "tail",
															"nodeType": "YulIdentifier",
															"src": "18371:4:13"
														},
														{
															"name": "headStart",
															"nodeType": "YulIdentifier",
															"src": "18377:9:13"
														}
													],
													"functionName": {
														"name": "sub",
														"nodeType": "YulIdentifier",
														"src": "18367:3:13"
													},
													"nodeType": "YulFunctionCall",
													"src": "18367:20:13"
												}
											],
											"functionName": {
												"name": "mstore",
												"nodeType": "YulIdentifier",
												"src": "18341:6:13"
											},
											"nodeType": "YulFunctionCall",
											"src": "18341:47:13"
										},
										"nodeType": "YulExpressionStatement",
										"src": "18341:47:13"
									},
									{
										"nodeType": "YulAssignment",
										"src": "18397:139:13",
										"value": {
											"arguments": [
												{
													"name": "tail",
													"nodeType": "YulIdentifier",
													"src": "18531:4:13"
												}
											],
											"functionName": {
												"name": "abi_encode_t_stringliteral_af09f6db30e4867e53cba9916b467b745c1bb0ff7604dcbe2aeb26f6c0c4cbab_to_t_string_memory_ptr_fromStack",
												"nodeType": "YulIdentifier",
												"src": "18405:124:13"
											},
											"nodeType": "YulFunctionCall",
											"src": "18405:131:13"
										},
										"variableNames": [
											{
												"name": "tail",
												"nodeType": "YulIdentifier",
												"src": "18397:4:13"
											}
										]
									}
								]
							},
							"name": "abi_encode_tuple_t_stringliteral_af09f6db30e4867e53cba9916b467b745c1bb0ff7604dcbe2aeb26f6c0c4cbab__to_t_string_memory_ptr__fromStack_reversed",
							"nodeType": "YulFunctionDefinition",
							"parameters": [
								{
									"name": "headStart",
									"nodeType": "YulTypedName",
									"src": "18275:9:13",
									"type": ""
								}
							],
							"returnVariables": [
								{
									"name": "tail",
									"nodeType": "YulTypedName",
									"src": "18290:4:13",
									"type": ""
								}
							],
							"src": "18124:419:13"
						},
						{
							"body": {
								"nodeType": "YulBlock",
								"src": "18655:61:13",
								"statements": [
									{
										"expression": {
											"arguments": [
												{
													"arguments": [
														{
															"name": "memPtr",
															"nodeType": "YulIdentifier",
															"src": "18677:6:13"
														},
														{
															"kind": "number",
															"nodeType": "YulLiteral",
															"src": "18685:1:13",
															"type": "",
															"value": "0"
														}
													],
													"functionName": {
														"name": "add",
														"nodeType": "YulIdentifier",
														"src": "18673:3:13"
													},
													"nodeType": "YulFunctionCall",
													"src": "18673:14:13"
												},
												{
													"hexValue": "4d69736d61746368656420617272617973",
													"kind": "string",
													"nodeType": "YulLiteral",
													"src": "18689:19:13",
													"type": "",
													"value": "Mismatched arrays"
												}
											],
											"functionName": {
												"name": "mstore",
												"nodeType": "YulIdentifier",
												"src": "18666:6:13"
											},
											"nodeType": "YulFunctionCall",
											"src": "18666:43:13"
										},
										"nodeType": "YulExpressionStatement",
										"src": "18666:43:13"
									}
								]
							},
							"name": "store_literal_in_memory_4fa02d1b88050f6a6a5d285d3489cc4bb24e4d1924dee6d5a2f903a871e4e481",
							"nodeType": "YulFunctionDefinition",
							"parameters": [
								{
									"name": "memPtr",
									"nodeType": "YulTypedName",
									"src": "18647:6:13",
									"type": ""
								}
							],
							"src": "18549:167:13"
						},
						{
							"body": {
								"nodeType": "YulBlock",
								"src": "18868:220:13",
								"statements": [
									{
										"nodeType": "YulAssignment",
										"src": "18878:74:13",
										"value": {
											"arguments": [
												{
													"name": "pos",
													"nodeType": "YulIdentifier",
													"src": "18944:3:13"
												},
												{
													"kind": "number",
													"nodeType": "YulLiteral",
													"src": "18949:2:13",
													"type": "",
													"value": "17"
												}
											],
											"functionName": {
												"name": "array_storeLengthForEncoding_t_string_memory_ptr_fromStack",
												"nodeType": "YulIdentifier",
												"src": "18885:58:13"
											},
											"nodeType": "YulFunctionCall",
											"src": "18885:67:13"
										},
										"variableNames": [
											{
												"name": "pos",
												"nodeType": "YulIdentifier",
												"src": "18878:3:13"
											}
										]
									},
									{
										"expression": {
											"arguments": [
												{
													"name": "pos",
													"nodeType": "YulIdentifier",
													"src": "19050:3:13"
												}
											],
											"functionName": {
												"name": "store_literal_in_memory_4fa02d1b88050f6a6a5d285d3489cc4bb24e4d1924dee6d5a2f903a871e4e481",
												"nodeType": "YulIdentifier",
												"src": "18961:88:13"
											},
											"nodeType": "YulFunctionCall",
											"src": "18961:93:13"
										},
										"nodeType": "YulExpressionStatement",
										"src": "18961:93:13"
									},
									{
										"nodeType": "YulAssignment",
										"src": "19063:19:13",
										"value": {
											"arguments": [
												{
													"name": "pos",
													"nodeType": "YulIdentifier",
													"src": "19074:3:13"
												},
												{
													"kind": "number",
													"nodeType": "YulLiteral",
													"src": "19079:2:13",
													"type": "",
													"value": "32"
												}
											],
											"functionName": {
												"name": "add",
												"nodeType": "YulIdentifier",
												"src": "19070:3:13"
											},
											"nodeType": "YulFunctionCall",
											"src": "19070:12:13"
										},
										"variableNames": [
											{
												"name": "end",
												"nodeType": "YulIdentifier",
												"src": "19063:3:13"
											}
										]
									}
								]
							},
							"name": "abi_encode_t_stringliteral_4fa02d1b88050f6a6a5d285d3489cc4bb24e4d1924dee6d5a2f903a871e4e481_to_t_string_memory_ptr_fromStack",
							"nodeType": "YulFunctionDefinition",
							"parameters": [
								{
									"name": "pos",
									"nodeType": "YulTypedName",
									"src": "18856:3:13",
									"type": ""
								}
							],
							"returnVariables": [
								{
									"name": "end",
									"nodeType": "YulTypedName",
									"src": "18864:3:13",
									"type": ""
								}
							],
							"src": "18722:366:13"
						},
						{
							"body": {
								"nodeType": "YulBlock",
								"src": "19265:248:13",
								"statements": [
									{
										"nodeType": "YulAssignment",
										"src": "19275:26:13",
										"value": {
											"arguments": [
												{
													"name": "headStart",
													"nodeType": "YulIdentifier",
													"src": "19287:9:13"
												},
												{
													"kind": "number",
													"nodeType": "YulLiteral",
													"src": "19298:2:13",
													"type": "",
													"value": "32"
												}
											],
											"functionName": {
												"name": "add",
												"nodeType": "YulIdentifier",
												"src": "19283:3:13"
											},
											"nodeType": "YulFunctionCall",
											"src": "19283:18:13"
										},
										"variableNames": [
											{
												"name": "tail",
												"nodeType": "YulIdentifier",
												"src": "19275:4:13"
											}
										]
									},
									{
										"expression": {
											"arguments": [
												{
													"arguments": [
														{
															"name": "headStart",
															"nodeType": "YulIdentifier",
															"src": "19322:9:13"
														},
														{
															"kind": "number",
															"nodeType": "YulLiteral",
															"src": "19333:1:13",
															"type": "",
															"value": "0"
														}
													],
													"functionName": {
														"name": "add",
														"nodeType": "YulIdentifier",
														"src": "19318:3:13"
													},
													"nodeType": "YulFunctionCall",
													"src": "19318:17:13"
												},
												{
													"arguments": [
														{
															"name": "tail",
															"nodeType": "YulIdentifier",
															"src": "19341:4:13"
														},
														{
															"name": "headStart",
															"nodeType": "YulIdentifier",
															"src": "19347:9:13"
														}
													],
													"functionName": {
														"name": "sub",
														"nodeType": "YulIdentifier",
														"src": "19337:3:13"
													},
													"nodeType": "YulFunctionCall",
													"src": "19337:20:13"
												}
											],
											"functionName": {
												"name": "mstore",
												"nodeType": "YulIdentifier",
												"src": "19311:6:13"
											},
											"nodeType": "YulFunctionCall",
											"src": "19311:47:13"
										},
										"nodeType": "YulExpressionStatement",
										"src": "19311:47:13"
									},
									{
										"nodeType": "YulAssignment",
										"src": "19367:139:13",
										"value": {
											"arguments": [
												{
													"name": "tail",
													"nodeType": "YulIdentifier",
													"src": "19501:4:13"
												}
											],
											"functionName": {
												"name": "abi_encode_t_stringliteral_4fa02d1b88050f6a6a5d285d3489cc4bb24e4d1924dee6d5a2f903a871e4e481_to_t_string_memory_ptr_fromStack",
												"nodeType": "YulIdentifier",
												"src": "19375:124:13"
											},
											"nodeType": "YulFunctionCall",
											"src": "19375:131:13"
										},
										"variableNames": [
											{
												"name": "tail",
												"nodeType": "YulIdentifier",
												"src": "19367:4:13"
											}
										]
									}
								]
							},
							"name": "abi_encode_tuple_t_stringliteral_4fa02d1b88050f6a6a5d285d3489cc4bb24e4d1924dee6d5a2f903a871e4e481__to_t_string_memory_ptr__fromStack_reversed",
							"nodeType": "YulFunctionDefinition",
							"parameters": [
								{
									"name": "headStart",
									"nodeType": "YulTypedName",
									"src": "19245:9:13",
									"type": ""
								}
							],
							"returnVariables": [
								{
									"name": "tail",
									"nodeType": "YulTypedName",
									"src": "19260:4:13",
									"type": ""
								}
							],
							"src": "19094:419:13"
						},
						{
							"body": {
								"nodeType": "YulBlock",
								"src": "19582:80:13",
								"statements": [
									{
										"nodeType": "YulAssignment",
										"src": "19592:22:13",
										"value": {
											"arguments": [
												{
													"name": "offset",
													"nodeType": "YulIdentifier",
													"src": "19607:6:13"
												}
											],
											"functionName": {
												"name": "mload",
												"nodeType": "YulIdentifier",
												"src": "19601:5:13"
											},
											"nodeType": "YulFunctionCall",
											"src": "19601:13:13"
										},
										"variableNames": [
											{
												"name": "value",
												"nodeType": "YulIdentifier",
												"src": "19592:5:13"
											}
										]
									},
									{
										"expression": {
											"arguments": [
												{
													"name": "value",
													"nodeType": "YulIdentifier",
													"src": "19650:5:13"
												}
											],
											"functionName": {
												"name": "validator_revert_t_address",
												"nodeType": "YulIdentifier",
												"src": "19623:26:13"
											},
											"nodeType": "YulFunctionCall",
											"src": "19623:33:13"
										},
										"nodeType": "YulExpressionStatement",
										"src": "19623:33:13"
									}
								]
							},
							"name": "abi_decode_t_address_fromMemory",
							"nodeType": "YulFunctionDefinition",
							"parameters": [
								{
									"name": "offset",
									"nodeType": "YulTypedName",
									"src": "19560:6:13",
									"type": ""
								},
								{
									"name": "end",
									"nodeType": "YulTypedName",
									"src": "19568:3:13",
									"type": ""
								}
							],
							"returnVariables": [
								{
									"name": "value",
									"nodeType": "YulTypedName",
									"src": "19576:5:13",
									"type": ""
								}
							],
							"src": "19519:143:13"
						},
						{
							"body": {
								"nodeType": "YulBlock",
								"src": "19745:274:13",
								"statements": [
									{
										"body": {
											"nodeType": "YulBlock",
											"src": "19791:83:13",
											"statements": [
												{
													"expression": {
														"arguments": [],
														"functionName": {
															"name": "revert_error_dbdddcbe895c83990c08b3492a0e83918d802a52331272ac6fdb6a7c4aea3b1b",
															"nodeType": "YulIdentifier",
															"src": "19793:77:13"
														},
														"nodeType": "YulFunctionCall",
														"src": "19793:79:13"
													},
													"nodeType": "YulExpressionStatement",
													"src": "19793:79:13"
												}
											]
										},
										"condition": {
											"arguments": [
												{
													"arguments": [
														{
															"name": "dataEnd",
															"nodeType": "YulIdentifier",
															"src": "19766:7:13"
														},
														{
															"name": "headStart",
															"nodeType": "YulIdentifier",
															"src": "19775:9:13"
														}
													],
													"functionName": {
														"name": "sub",
														"nodeType": "YulIdentifier",
														"src": "19762:3:13"
													},
													"nodeType": "YulFunctionCall",
													"src": "19762:23:13"
												},
												{
													"kind": "number",
													"nodeType": "YulLiteral",
													"src": "19787:2:13",
													"type": "",
													"value": "32"
												}
											],
											"functionName": {
												"name": "slt",
												"nodeType": "YulIdentifier",
												"src": "19758:3:13"
											},
											"nodeType": "YulFunctionCall",
											"src": "19758:32:13"
										},
										"nodeType": "YulIf",
										"src": "19755:119:13"
									},
									{
										"nodeType": "YulBlock",
										"src": "19884:128:13",
										"statements": [
											{
												"nodeType": "YulVariableDeclaration",
												"src": "19899:15:13",
												"value": {
													"kind": "number",
													"nodeType": "YulLiteral",
													"src": "19913:1:13",
													"type": "",
													"value": "0"
												},
												"variables": [
													{
														"name": "offset",
														"nodeType": "YulTypedName",
														"src": "19903:6:13",
														"type": ""
													}
												]
											},
											{
												"nodeType": "YulAssignment",
												"src": "19928:74:13",
												"value": {
													"arguments": [
														{
															"arguments": [
																{
																	"name": "headStart",
																	"nodeType": "YulIdentifier",
																	"src": "19974:9:13"
																},
																{
																	"name": "offset",
																	"nodeType": "YulIdentifier",
																	"src": "19985:6:13"
																}
															],
															"functionName": {
																"name": "add",
																"nodeType": "YulIdentifier",
																"src": "19970:3:13"
															},
															"nodeType": "YulFunctionCall",
															"src": "19970:22:13"
														},
														{
															"name": "dataEnd",
															"nodeType": "YulIdentifier",
															"src": "19994:7:13"
														}
													],
													"functionName": {
														"name": "abi_decode_t_address_fromMemory",
														"nodeType": "YulIdentifier",
														"src": "19938:31:13"
													},
													"nodeType": "YulFunctionCall",
													"src": "19938:64:13"
												},
												"variableNames": [
													{
														"name": "value0",
														"nodeType": "YulIdentifier",
														"src": "19928:6:13"
													}
												]
											}
										]
									}
								]
							},
							"name": "abi_decode_tuple_t_address_fromMemory",
							"nodeType": "YulFunctionDefinition",
							"parameters": [
								{
									"name": "headStart",
									"nodeType": "YulTypedName",
									"src": "19715:9:13",
									"type": ""
								},
								{
									"name": "dataEnd",
									"nodeType": "YulTypedName",
									"src": "19726:7:13",
									"type": ""
								}
							],
							"returnVariables": [
								{
									"name": "value0",
									"nodeType": "YulTypedName",
									"src": "19738:6:13",
									"type": ""
								}
							],
							"src": "19668:351:13"
						},
						{
							"body": {
								"nodeType": "YulBlock",
								"src": "20131:140:13",
								"statements": [
									{
										"expression": {
											"arguments": [
												{
													"arguments": [
														{
															"name": "memPtr",
															"nodeType": "YulIdentifier",
															"src": "20153:6:13"
														},
														{
															"kind": "number",
															"nodeType": "YulLiteral",
															"src": "20161:1:13",
															"type": "",
															"value": "0"
														}
													],
													"functionName": {
														"name": "add",
														"nodeType": "YulIdentifier",
														"src": "20149:3:13"
													},
													"nodeType": "YulFunctionCall",
													"src": "20149:14:13"
												},
												{
													"hexValue": "4f6e6c792074686520706572736f6e2077686f2063726561746564207661756c",
													"kind": "string",
													"nodeType": "YulLiteral",
													"src": "20165:34:13",
													"type": "",
													"value": "Only the person who created vaul"
												}
											],
											"functionName": {
												"name": "mstore",
												"nodeType": "YulIdentifier",
												"src": "20142:6:13"
											},
											"nodeType": "YulFunctionCall",
											"src": "20142:58:13"
										},
										"nodeType": "YulExpressionStatement",
										"src": "20142:58:13"
									},
									{
										"expression": {
											"arguments": [
												{
													"arguments": [
														{
															"name": "memPtr",
															"nodeType": "YulIdentifier",
															"src": "20221:6:13"
														},
														{
															"kind": "number",
															"nodeType": "YulLiteral",
															"src": "20229:2:13",
															"type": "",
															"value": "32"
														}
													],
													"functionName": {
														"name": "add",
														"nodeType": "YulIdentifier",
														"src": "20217:3:13"
													},
													"nodeType": "YulFunctionCall",
													"src": "20217:15:13"
												},
												{
													"hexValue": "742063616e206465706f7369742066756e647320696e746f206974",
													"kind": "string",
													"nodeType": "YulLiteral",
													"src": "20234:29:13",
													"type": "",
													"value": "t can deposit funds into it"
												}
											],
											"functionName": {
												"name": "mstore",
												"nodeType": "YulIdentifier",
												"src": "20210:6:13"
											},
											"nodeType": "YulFunctionCall",
											"src": "20210:54:13"
										},
										"nodeType": "YulExpressionStatement",
										"src": "20210:54:13"
									}
								]
							},
							"name": "store_literal_in_memory_8d454e2a084014abe0cb8b0220b87e9c52084abcf0f285c0683d2b62cc95c4d5",
							"nodeType": "YulFunctionDefinition",
							"parameters": [
								{
									"name": "memPtr",
									"nodeType": "YulTypedName",
									"src": "20123:6:13",
									"type": ""
								}
							],
							"src": "20025:246:13"
						},
						{
							"body": {
								"nodeType": "YulBlock",
								"src": "20423:220:13",
								"statements": [
									{
										"nodeType": "YulAssignment",
										"src": "20433:74:13",
										"value": {
											"arguments": [
												{
													"name": "pos",
													"nodeType": "YulIdentifier",
													"src": "20499:3:13"
												},
												{
													"kind": "number",
													"nodeType": "YulLiteral",
													"src": "20504:2:13",
													"type": "",
													"value": "59"
												}
											],
											"functionName": {
												"name": "array_storeLengthForEncoding_t_string_memory_ptr_fromStack",
												"nodeType": "YulIdentifier",
												"src": "20440:58:13"
											},
											"nodeType": "YulFunctionCall",
											"src": "20440:67:13"
										},
										"variableNames": [
											{
												"name": "pos",
												"nodeType": "YulIdentifier",
												"src": "20433:3:13"
											}
										]
									},
									{
										"expression": {
											"arguments": [
												{
													"name": "pos",
													"nodeType": "YulIdentifier",
													"src": "20605:3:13"
												}
											],
											"functionName": {
												"name": "store_literal_in_memory_8d454e2a084014abe0cb8b0220b87e9c52084abcf0f285c0683d2b62cc95c4d5",
												"nodeType": "YulIdentifier",
												"src": "20516:88:13"
											},
											"nodeType": "YulFunctionCall",
											"src": "20516:93:13"
										},
										"nodeType": "YulExpressionStatement",
										"src": "20516:93:13"
									},
									{
										"nodeType": "YulAssignment",
										"src": "20618:19:13",
										"value": {
											"arguments": [
												{
													"name": "pos",
													"nodeType": "YulIdentifier",
													"src": "20629:3:13"
												},
												{
													"kind": "number",
													"nodeType": "YulLiteral",
													"src": "20634:2:13",
													"type": "",
													"value": "64"
												}
											],
											"functionName": {
												"name": "add",
												"nodeType": "YulIdentifier",
												"src": "20625:3:13"
											},
											"nodeType": "YulFunctionCall",
											"src": "20625:12:13"
										},
										"variableNames": [
											{
												"name": "end",
												"nodeType": "YulIdentifier",
												"src": "20618:3:13"
											}
										]
									}
								]
							},
							"name": "abi_encode_t_stringliteral_8d454e2a084014abe0cb8b0220b87e9c52084abcf0f285c0683d2b62cc95c4d5_to_t_string_memory_ptr_fromStack",
							"nodeType": "YulFunctionDefinition",
							"parameters": [
								{
									"name": "pos",
									"nodeType": "YulTypedName",
									"src": "20411:3:13",
									"type": ""
								}
							],
							"returnVariables": [
								{
									"name": "end",
									"nodeType": "YulTypedName",
									"src": "20419:3:13",
									"type": ""
								}
							],
							"src": "20277:366:13"
						},
						{
							"body": {
								"nodeType": "YulBlock",
								"src": "20820:248:13",
								"statements": [
									{
										"nodeType": "YulAssignment",
										"src": "20830:26:13",
										"value": {
											"arguments": [
												{
													"name": "headStart",
													"nodeType": "YulIdentifier",
													"src": "20842:9:13"
												},
												{
													"kind": "number",
													"nodeType": "YulLiteral",
													"src": "20853:2:13",
													"type": "",
													"value": "32"
												}
											],
											"functionName": {
												"name": "add",
												"nodeType": "YulIdentifier",
												"src": "20838:3:13"
											},
											"nodeType": "YulFunctionCall",
											"src": "20838:18:13"
										},
										"variableNames": [
											{
												"name": "tail",
												"nodeType": "YulIdentifier",
												"src": "20830:4:13"
											}
										]
									},
									{
										"expression": {
											"arguments": [
												{
													"arguments": [
														{
															"name": "headStart",
															"nodeType": "YulIdentifier",
															"src": "20877:9:13"
														},
														{
															"kind": "number",
															"nodeType": "YulLiteral",
															"src": "20888:1:13",
															"type": "",
															"value": "0"
														}
													],
													"functionName": {
														"name": "add",
														"nodeType": "YulIdentifier",
														"src": "20873:3:13"
													},
													"nodeType": "YulFunctionCall",
													"src": "20873:17:13"
												},
												{
													"arguments": [
														{
															"name": "tail",
															"nodeType": "YulIdentifier",
															"src": "20896:4:13"
														},
														{
															"name": "headStart",
															"nodeType": "YulIdentifier",
															"src": "20902:9:13"
														}
													],
													"functionName": {
														"name": "sub",
														"nodeType": "YulIdentifier",
														"src": "20892:3:13"
													},
													"nodeType": "YulFunctionCall",
													"src": "20892:20:13"
												}
											],
											"functionName": {
												"name": "mstore",
												"nodeType": "YulIdentifier",
												"src": "20866:6:13"
											},
											"nodeType": "YulFunctionCall",
											"src": "20866:47:13"
										},
										"nodeType": "YulExpressionStatement",
										"src": "20866:47:13"
									},
									{
										"nodeType": "YulAssignment",
										"src": "20922:139:13",
										"value": {
											"arguments": [
												{
													"name": "tail",
													"nodeType": "YulIdentifier",
													"src": "21056:4:13"
												}
											],
											"functionName": {
												"name": "abi_encode_t_stringliteral_8d454e2a084014abe0cb8b0220b87e9c52084abcf0f285c0683d2b62cc95c4d5_to_t_string_memory_ptr_fromStack",
												"nodeType": "YulIdentifier",
												"src": "20930:124:13"
											},
											"nodeType": "YulFunctionCall",
											"src": "20930:131:13"
										},
										"variableNames": [
											{
												"name": "tail",
												"nodeType": "YulIdentifier",
												"src": "20922:4:13"
											}
										]
									}
								]
							},
							"name": "abi_encode_tuple_t_stringliteral_8d454e2a084014abe0cb8b0220b87e9c52084abcf0f285c0683d2b62cc95c4d5__to_t_string_memory_ptr__fromStack_reversed",
							"nodeType": "YulFunctionDefinition",
							"parameters": [
								{
									"name": "headStart",
									"nodeType": "YulTypedName",
									"src": "20800:9:13",
									"type": ""
								}
							],
							"returnVariables": [
								{
									"name": "tail",
									"nodeType": "YulTypedName",
									"src": "20815:4:13",
									"type": ""
								}
							],
							"src": "20649:419:13"
						},
						{
							"body": {
								"nodeType": "YulBlock",
								"src": "21118:147:13",
								"statements": [
									{
										"nodeType": "YulAssignment",
										"src": "21128:25:13",
										"value": {
											"arguments": [
												{
													"name": "x",
													"nodeType": "YulIdentifier",
													"src": "21151:1:13"
												}
											],
											"functionName": {
												"name": "cleanup_t_uint256",
												"nodeType": "YulIdentifier",
												"src": "21133:17:13"
											},
											"nodeType": "YulFunctionCall",
											"src": "21133:20:13"
										},
										"variableNames": [
											{
												"name": "x",
												"nodeType": "YulIdentifier",
												"src": "21128:1:13"
											}
										]
									},
									{
										"nodeType": "YulAssignment",
										"src": "21162:25:13",
										"value": {
											"arguments": [
												{
													"name": "y",
													"nodeType": "YulIdentifier",
													"src": "21185:1:13"
												}
											],
											"functionName": {
												"name": "cleanup_t_uint256",
												"nodeType": "YulIdentifier",
												"src": "21167:17:13"
											},
											"nodeType": "YulFunctionCall",
											"src": "21167:20:13"
										},
										"variableNames": [
											{
												"name": "y",
												"nodeType": "YulIdentifier",
												"src": "21162:1:13"
											}
										]
									},
									{
										"nodeType": "YulAssignment",
										"src": "21196:16:13",
										"value": {
											"arguments": [
												{
													"name": "x",
													"nodeType": "YulIdentifier",
													"src": "21207:1:13"
												},
												{
													"name": "y",
													"nodeType": "YulIdentifier",
													"src": "21210:1:13"
												}
											],
											"functionName": {
												"name": "add",
												"nodeType": "YulIdentifier",
												"src": "21203:3:13"
											},
											"nodeType": "YulFunctionCall",
											"src": "21203:9:13"
										},
										"variableNames": [
											{
												"name": "sum",
												"nodeType": "YulIdentifier",
												"src": "21196:3:13"
											}
										]
									},
									{
										"body": {
											"nodeType": "YulBlock",
											"src": "21236:22:13",
											"statements": [
												{
													"expression": {
														"arguments": [],
														"functionName": {
															"name": "panic_error_0x11",
															"nodeType": "YulIdentifier",
															"src": "21238:16:13"
														},
														"nodeType": "YulFunctionCall",
														"src": "21238:18:13"
													},
													"nodeType": "YulExpressionStatement",
													"src": "21238:18:13"
												}
											]
										},
										"condition": {
											"arguments": [
												{
													"name": "x",
													"nodeType": "YulIdentifier",
													"src": "21228:1:13"
												},
												{
													"name": "sum",
													"nodeType": "YulIdentifier",
													"src": "21231:3:13"
												}
											],
											"functionName": {
												"name": "gt",
												"nodeType": "YulIdentifier",
												"src": "21225:2:13"
											},
											"nodeType": "YulFunctionCall",
											"src": "21225:10:13"
										},
										"nodeType": "YulIf",
										"src": "21222:36:13"
									}
								]
							},
							"name": "checked_add_t_uint256",
							"nodeType": "YulFunctionDefinition",
							"parameters": [
								{
									"name": "x",
									"nodeType": "YulTypedName",
									"src": "21105:1:13",
									"type": ""
								},
								{
									"name": "y",
									"nodeType": "YulTypedName",
									"src": "21108:1:13",
									"type": ""
								}
							],
							"returnVariables": [
								{
									"name": "sum",
									"nodeType": "YulTypedName",
									"src": "21114:3:13",
									"type": ""
								}
							],
							"src": "21074:191:13"
						},
						{
							"body": {
								"nodeType": "YulBlock",
								"src": "21377:75:13",
								"statements": [
									{
										"expression": {
											"arguments": [
												{
													"arguments": [
														{
															"name": "memPtr",
															"nodeType": "YulIdentifier",
															"src": "21399:6:13"
														},
														{
															"kind": "number",
															"nodeType": "YulLiteral",
															"src": "21407:1:13",
															"type": "",
															"value": "0"
														}
													],
													"functionName": {
														"name": "add",
														"nodeType": "YulIdentifier",
														"src": "21395:3:13"
													},
													"nodeType": "YulFunctionCall",
													"src": "21395:14:13"
												},
												{
													"hexValue": "4d69736d61746368656420746f74616c206465706f73697420616d6f756e74",
													"kind": "string",
													"nodeType": "YulLiteral",
													"src": "21411:33:13",
													"type": "",
													"value": "Mismatched total deposit amount"
												}
											],
											"functionName": {
												"name": "mstore",
												"nodeType": "YulIdentifier",
												"src": "21388:6:13"
											},
											"nodeType": "YulFunctionCall",
											"src": "21388:57:13"
										},
										"nodeType": "YulExpressionStatement",
										"src": "21388:57:13"
									}
								]
							},
							"name": "store_literal_in_memory_a5e89270b3c56d4b9d1cf0a951d175d259ba209e17765637f05d1ed5391db802",
							"nodeType": "YulFunctionDefinition",
							"parameters": [
								{
									"name": "memPtr",
									"nodeType": "YulTypedName",
									"src": "21369:6:13",
									"type": ""
								}
							],
							"src": "21271:181:13"
						},
						{
							"body": {
								"nodeType": "YulBlock",
								"src": "21604:220:13",
								"statements": [
									{
										"nodeType": "YulAssignment",
										"src": "21614:74:13",
										"value": {
											"arguments": [
												{
													"name": "pos",
													"nodeType": "YulIdentifier",
													"src": "21680:3:13"
												},
												{
													"kind": "number",
													"nodeType": "YulLiteral",
													"src": "21685:2:13",
													"type": "",
													"value": "31"
												}
											],
											"functionName": {
												"name": "array_storeLengthForEncoding_t_string_memory_ptr_fromStack",
												"nodeType": "YulIdentifier",
												"src": "21621:58:13"
											},
											"nodeType": "YulFunctionCall",
											"src": "21621:67:13"
										},
										"variableNames": [
											{
												"name": "pos",
												"nodeType": "YulIdentifier",
												"src": "21614:3:13"
											}
										]
									},
									{
										"expression": {
											"arguments": [
												{
													"name": "pos",
													"nodeType": "YulIdentifier",
													"src": "21786:3:13"
												}
											],
											"functionName": {
												"name": "store_literal_in_memory_a5e89270b3c56d4b9d1cf0a951d175d259ba209e17765637f05d1ed5391db802",
												"nodeType": "YulIdentifier",
												"src": "21697:88:13"
											},
											"nodeType": "YulFunctionCall",
											"src": "21697:93:13"
										},
										"nodeType": "YulExpressionStatement",
										"src": "21697:93:13"
									},
									{
										"nodeType": "YulAssignment",
										"src": "21799:19:13",
										"value": {
											"arguments": [
												{
													"name": "pos",
													"nodeType": "YulIdentifier",
													"src": "21810:3:13"
												},
												{
													"kind": "number",
													"nodeType": "YulLiteral",
													"src": "21815:2:13",
													"type": "",
													"value": "32"
												}
											],
											"functionName": {
												"name": "add",
												"nodeType": "YulIdentifier",
												"src": "21806:3:13"
											},
											"nodeType": "YulFunctionCall",
											"src": "21806:12:13"
										},
										"variableNames": [
											{
												"name": "end",
												"nodeType": "YulIdentifier",
												"src": "21799:3:13"
											}
										]
									}
								]
							},
							"name": "abi_encode_t_stringliteral_a5e89270b3c56d4b9d1cf0a951d175d259ba209e17765637f05d1ed5391db802_to_t_string_memory_ptr_fromStack",
							"nodeType": "YulFunctionDefinition",
							"parameters": [
								{
									"name": "pos",
									"nodeType": "YulTypedName",
									"src": "21592:3:13",
									"type": ""
								}
							],
							"returnVariables": [
								{
									"name": "end",
									"nodeType": "YulTypedName",
									"src": "21600:3:13",
									"type": ""
								}
							],
							"src": "21458:366:13"
						},
						{
							"body": {
								"nodeType": "YulBlock",
								"src": "22001:248:13",
								"statements": [
									{
										"nodeType": "YulAssignment",
										"src": "22011:26:13",
										"value": {
											"arguments": [
												{
													"name": "headStart",
													"nodeType": "YulIdentifier",
													"src": "22023:9:13"
												},
												{
													"kind": "number",
													"nodeType": "YulLiteral",
													"src": "22034:2:13",
													"type": "",
													"value": "32"
												}
											],
											"functionName": {
												"name": "add",
												"nodeType": "YulIdentifier",
												"src": "22019:3:13"
											},
											"nodeType": "YulFunctionCall",
											"src": "22019:18:13"
										},
										"variableNames": [
											{
												"name": "tail",
												"nodeType": "YulIdentifier",
												"src": "22011:4:13"
											}
										]
									},
									{
										"expression": {
											"arguments": [
												{
													"arguments": [
														{
															"name": "headStart",
															"nodeType": "YulIdentifier",
															"src": "22058:9:13"
														},
														{
															"kind": "number",
															"nodeType": "YulLiteral",
															"src": "22069:1:13",
															"type": "",
															"value": "0"
														}
													],
													"functionName": {
														"name": "add",
														"nodeType": "YulIdentifier",
														"src": "22054:3:13"
													},
													"nodeType": "YulFunctionCall",
													"src": "22054:17:13"
												},
												{
													"arguments": [
														{
															"name": "tail",
															"nodeType": "YulIdentifier",
															"src": "22077:4:13"
														},
														{
															"name": "headStart",
															"nodeType": "YulIdentifier",
															"src": "22083:9:13"
														}
													],
													"functionName": {
														"name": "sub",
														"nodeType": "YulIdentifier",
														"src": "22073:3:13"
													},
													"nodeType": "YulFunctionCall",
													"src": "22073:20:13"
												}
											],
											"functionName": {
												"name": "mstore",
												"nodeType": "YulIdentifier",
												"src": "22047:6:13"
											},
											"nodeType": "YulFunctionCall",
											"src": "22047:47:13"
										},
										"nodeType": "YulExpressionStatement",
										"src": "22047:47:13"
									},
									{
										"nodeType": "YulAssignment",
										"src": "22103:139:13",
										"value": {
											"arguments": [
												{
													"name": "tail",
													"nodeType": "YulIdentifier",
													"src": "22237:4:13"
												}
											],
											"functionName": {
												"name": "abi_encode_t_stringliteral_a5e89270b3c56d4b9d1cf0a951d175d259ba209e17765637f05d1ed5391db802_to_t_string_memory_ptr_fromStack",
												"nodeType": "YulIdentifier",
												"src": "22111:124:13"
											},
											"nodeType": "YulFunctionCall",
											"src": "22111:131:13"
										},
										"variableNames": [
											{
												"name": "tail",
												"nodeType": "YulIdentifier",
												"src": "22103:4:13"
											}
										]
									}
								]
							},
							"name": "abi_encode_tuple_t_stringliteral_a5e89270b3c56d4b9d1cf0a951d175d259ba209e17765637f05d1ed5391db802__to_t_string_memory_ptr__fromStack_reversed",
							"nodeType": "YulFunctionDefinition",
							"parameters": [
								{
									"name": "headStart",
									"nodeType": "YulTypedName",
									"src": "21981:9:13",
									"type": ""
								}
							],
							"returnVariables": [
								{
									"name": "tail",
									"nodeType": "YulTypedName",
									"src": "21996:4:13",
									"type": ""
								}
							],
							"src": "21830:419:13"
						},
						{
							"body": {
								"nodeType": "YulBlock",
								"src": "22381:206:13",
								"statements": [
									{
										"nodeType": "YulAssignment",
										"src": "22391:26:13",
										"value": {
											"arguments": [
												{
													"name": "headStart",
													"nodeType": "YulIdentifier",
													"src": "22403:9:13"
												},
												{
													"kind": "number",
													"nodeType": "YulLiteral",
													"src": "22414:2:13",
													"type": "",
													"value": "64"
												}
											],
											"functionName": {
												"name": "add",
												"nodeType": "YulIdentifier",
												"src": "22399:3:13"
											},
											"nodeType": "YulFunctionCall",
											"src": "22399:18:13"
										},
										"variableNames": [
											{
												"name": "tail",
												"nodeType": "YulIdentifier",
												"src": "22391:4:13"
											}
										]
									},
									{
										"expression": {
											"arguments": [
												{
													"name": "value0",
													"nodeType": "YulIdentifier",
													"src": "22471:6:13"
												},
												{
													"arguments": [
														{
															"name": "headStart",
															"nodeType": "YulIdentifier",
															"src": "22484:9:13"
														},
														{
															"kind": "number",
															"nodeType": "YulLiteral",
															"src": "22495:1:13",
															"type": "",
															"value": "0"
														}
													],
													"functionName": {
														"name": "add",
														"nodeType": "YulIdentifier",
														"src": "22480:3:13"
													},
													"nodeType": "YulFunctionCall",
													"src": "22480:17:13"
												}
											],
											"functionName": {
												"name": "abi_encode_t_uint256_to_t_uint256_fromStack",
												"nodeType": "YulIdentifier",
												"src": "22427:43:13"
											},
											"nodeType": "YulFunctionCall",
											"src": "22427:71:13"
										},
										"nodeType": "YulExpressionStatement",
										"src": "22427:71:13"
									},
									{
										"expression": {
											"arguments": [
												{
													"name": "value1",
													"nodeType": "YulIdentifier",
													"src": "22552:6:13"
												},
												{
													"arguments": [
														{
															"name": "headStart",
															"nodeType": "YulIdentifier",
															"src": "22565:9:13"
														},
														{
															"kind": "number",
															"nodeType": "YulLiteral",
															"src": "22576:2:13",
															"type": "",
															"value": "32"
														}
													],
													"functionName": {
														"name": "add",
														"nodeType": "YulIdentifier",
														"src": "22561:3:13"
													},
													"nodeType": "YulFunctionCall",
													"src": "22561:18:13"
												}
											],
											"functionName": {
												"name": "abi_encode_t_uint256_to_t_uint256_fromStack",
												"nodeType": "YulIdentifier",
												"src": "22508:43:13"
											},
											"nodeType": "YulFunctionCall",
											"src": "22508:72:13"
										},
										"nodeType": "YulExpressionStatement",
										"src": "22508:72:13"
									}
								]
							},
							"name": "abi_encode_tuple_t_uint256_t_uint256__to_t_uint256_t_uint256__fromStack_reversed",
							"nodeType": "YulFunctionDefinition",
							"parameters": [
								{
									"name": "headStart",
									"nodeType": "YulTypedName",
									"src": "22345:9:13",
									"type": ""
								},
								{
									"name": "value1",
									"nodeType": "YulTypedName",
									"src": "22357:6:13",
									"type": ""
								},
								{
									"name": "value0",
									"nodeType": "YulTypedName",
									"src": "22365:6:13",
									"type": ""
								}
							],
							"returnVariables": [
								{
									"name": "tail",
									"nodeType": "YulTypedName",
									"src": "22376:4:13",
									"type": ""
								}
							],
							"src": "22255:332:13"
						},
						{
							"body": {
								"nodeType": "YulBlock",
								"src": "22699:133:13",
								"statements": [
									{
										"expression": {
											"arguments": [
												{
													"arguments": [
														{
															"name": "memPtr",
															"nodeType": "YulIdentifier",
															"src": "22721:6:13"
														},
														{
															"kind": "number",
															"nodeType": "YulLiteral",
															"src": "22729:1:13",
															"type": "",
															"value": "0"
														}
													],
													"functionName": {
														"name": "add",
														"nodeType": "YulIdentifier",
														"src": "22717:3:13"
													},
													"nodeType": "YulFunctionCall",
													"src": "22717:14:13"
												},
												{
													"hexValue": "4f6e6c792074686520706572736f6e2077686f2063726561746564207661756c",
													"kind": "string",
													"nodeType": "YulLiteral",
													"src": "22733:34:13",
													"type": "",
													"value": "Only the person who created vaul"
												}
											],
											"functionName": {
												"name": "mstore",
												"nodeType": "YulIdentifier",
												"src": "22710:6:13"
											},
											"nodeType": "YulFunctionCall",
											"src": "22710:58:13"
										},
										"nodeType": "YulExpressionStatement",
										"src": "22710:58:13"
									},
									{
										"expression": {
											"arguments": [
												{
													"arguments": [
														{
															"name": "memPtr",
															"nodeType": "YulIdentifier",
															"src": "22789:6:13"
														},
														{
															"kind": "number",
															"nodeType": "YulLiteral",
															"src": "22797:2:13",
															"type": "",
															"value": "32"
														}
													],
													"functionName": {
														"name": "add",
														"nodeType": "YulIdentifier",
														"src": "22785:3:13"
													},
													"nodeType": "YulFunctionCall",
													"src": "22785:15:13"
												},
												{
													"hexValue": "742063616e2077697468647261772066756e6473",
													"kind": "string",
													"nodeType": "YulLiteral",
													"src": "22802:22:13",
													"type": "",
													"value": "t can withdraw funds"
												}
											],
											"functionName": {
												"name": "mstore",
												"nodeType": "YulIdentifier",
												"src": "22778:6:13"
											},
											"nodeType": "YulFunctionCall",
											"src": "22778:47:13"
										},
										"nodeType": "YulExpressionStatement",
										"src": "22778:47:13"
									}
								]
							},
							"name": "store_literal_in_memory_02b8c2fb88814cea156c3111f16cfd94d03e5ad66e454c7339e3ad4f3d17e3e7",
							"nodeType": "YulFunctionDefinition",
							"parameters": [
								{
									"name": "memPtr",
									"nodeType": "YulTypedName",
									"src": "22691:6:13",
									"type": ""
								}
							],
							"src": "22593:239:13"
						},
						{
							"body": {
								"nodeType": "YulBlock",
								"src": "22984:220:13",
								"statements": [
									{
										"nodeType": "YulAssignment",
										"src": "22994:74:13",
										"value": {
											"arguments": [
												{
													"name": "pos",
													"nodeType": "YulIdentifier",
													"src": "23060:3:13"
												},
												{
													"kind": "number",
													"nodeType": "YulLiteral",
													"src": "23065:2:13",
													"type": "",
													"value": "52"
												}
											],
											"functionName": {
												"name": "array_storeLengthForEncoding_t_string_memory_ptr_fromStack",
												"nodeType": "YulIdentifier",
												"src": "23001:58:13"
											},
											"nodeType": "YulFunctionCall",
											"src": "23001:67:13"
										},
										"variableNames": [
											{
												"name": "pos",
												"nodeType": "YulIdentifier",
												"src": "22994:3:13"
											}
										]
									},
									{
										"expression": {
											"arguments": [
												{
													"name": "pos",
													"nodeType": "YulIdentifier",
													"src": "23166:3:13"
												}
											],
											"functionName": {
												"name": "store_literal_in_memory_02b8c2fb88814cea156c3111f16cfd94d03e5ad66e454c7339e3ad4f3d17e3e7",
												"nodeType": "YulIdentifier",
												"src": "23077:88:13"
											},
											"nodeType": "YulFunctionCall",
											"src": "23077:93:13"
										},
										"nodeType": "YulExpressionStatement",
										"src": "23077:93:13"
									},
									{
										"nodeType": "YulAssignment",
										"src": "23179:19:13",
										"value": {
											"arguments": [
												{
													"name": "pos",
													"nodeType": "YulIdentifier",
													"src": "23190:3:13"
												},
												{
													"kind": "number",
													"nodeType": "YulLiteral",
													"src": "23195:2:13",
													"type": "",
													"value": "64"
												}
											],
											"functionName": {
												"name": "add",
												"nodeType": "YulIdentifier",
												"src": "23186:3:13"
											},
											"nodeType": "YulFunctionCall",
											"src": "23186:12:13"
										},
										"variableNames": [
											{
												"name": "end",
												"nodeType": "YulIdentifier",
												"src": "23179:3:13"
											}
										]
									}
								]
							},
							"name": "abi_encode_t_stringliteral_02b8c2fb88814cea156c3111f16cfd94d03e5ad66e454c7339e3ad4f3d17e3e7_to_t_string_memory_ptr_fromStack",
							"nodeType": "YulFunctionDefinition",
							"parameters": [
								{
									"name": "pos",
									"nodeType": "YulTypedName",
									"src": "22972:3:13",
									"type": ""
								}
							],
							"returnVariables": [
								{
									"name": "end",
									"nodeType": "YulTypedName",
									"src": "22980:3:13",
									"type": ""
								}
							],
							"src": "22838:366:13"
						},
						{
							"body": {
								"nodeType": "YulBlock",
								"src": "23381:248:13",
								"statements": [
									{
										"nodeType": "YulAssignment",
										"src": "23391:26:13",
										"value": {
											"arguments": [
												{
													"name": "headStart",
													"nodeType": "YulIdentifier",
													"src": "23403:9:13"
												},
												{
													"kind": "number",
													"nodeType": "YulLiteral",
													"src": "23414:2:13",
													"type": "",
													"value": "32"
												}
											],
											"functionName": {
												"name": "add",
												"nodeType": "YulIdentifier",
												"src": "23399:3:13"
											},
											"nodeType": "YulFunctionCall",
											"src": "23399:18:13"
										},
										"variableNames": [
											{
												"name": "tail",
												"nodeType": "YulIdentifier",
												"src": "23391:4:13"
											}
										]
									},
									{
										"expression": {
											"arguments": [
												{
													"arguments": [
														{
															"name": "headStart",
															"nodeType": "YulIdentifier",
															"src": "23438:9:13"
														},
														{
															"kind": "number",
															"nodeType": "YulLiteral",
															"src": "23449:1:13",
															"type": "",
															"value": "0"
														}
													],
													"functionName": {
														"name": "add",
														"nodeType": "YulIdentifier",
														"src": "23434:3:13"
													},
													"nodeType": "YulFunctionCall",
													"src": "23434:17:13"
												},
												{
													"arguments": [
														{
															"name": "tail",
															"nodeType": "YulIdentifier",
															"src": "23457:4:13"
														},
														{
															"name": "headStart",
															"nodeType": "YulIdentifier",
															"src": "23463:9:13"
														}
													],
													"functionName": {
														"name": "sub",
														"nodeType": "YulIdentifier",
														"src": "23453:3:13"
													},
													"nodeType": "YulFunctionCall",
													"src": "23453:20:13"
												}
											],
											"functionName": {
												"name": "mstore",
												"nodeType": "YulIdentifier",
												"src": "23427:6:13"
											},
											"nodeType": "YulFunctionCall",
											"src": "23427:47:13"
										},
										"nodeType": "YulExpressionStatement",
										"src": "23427:47:13"
									},
									{
										"nodeType": "YulAssignment",
										"src": "23483:139:13",
										"value": {
											"arguments": [
												{
													"name": "tail",
													"nodeType": "YulIdentifier",
													"src": "23617:4:13"
												}
											],
											"functionName": {
												"name": "abi_encode_t_stringliteral_02b8c2fb88814cea156c3111f16cfd94d03e5ad66e454c7339e3ad4f3d17e3e7_to_t_string_memory_ptr_fromStack",
												"nodeType": "YulIdentifier",
												"src": "23491:124:13"
											},
											"nodeType": "YulFunctionCall",
											"src": "23491:131:13"
										},
										"variableNames": [
											{
												"name": "tail",
												"nodeType": "YulIdentifier",
												"src": "23483:4:13"
											}
										]
									}
								]
							},
							"name": "abi_encode_tuple_t_stringliteral_02b8c2fb88814cea156c3111f16cfd94d03e5ad66e454c7339e3ad4f3d17e3e7__to_t_string_memory_ptr__fromStack_reversed",
							"nodeType": "YulFunctionDefinition",
							"parameters": [
								{
									"name": "headStart",
									"nodeType": "YulTypedName",
									"src": "23361:9:13",
									"type": ""
								}
							],
							"returnVariables": [
								{
									"name": "tail",
									"nodeType": "YulTypedName",
									"src": "23376:4:13",
									"type": ""
								}
							],
							"src": "23210:419:13"
						},
						{
							"body": {
								"nodeType": "YulBlock",
								"src": "23688:51:13",
								"statements": [
									{
										"nodeType": "YulAssignment",
										"src": "23698:35:13",
										"value": {
											"arguments": [
												{
													"name": "value",
													"nodeType": "YulIdentifier",
													"src": "23727:5:13"
												}
											],
											"functionName": {
												"name": "cleanup_t_uint160",
												"nodeType": "YulIdentifier",
												"src": "23709:17:13"
											},
											"nodeType": "YulFunctionCall",
											"src": "23709:24:13"
										},
										"variableNames": [
											{
												"name": "cleaned",
												"nodeType": "YulIdentifier",
												"src": "23698:7:13"
											}
										]
									}
								]
							},
							"name": "cleanup_t_address_payable",
							"nodeType": "YulFunctionDefinition",
							"parameters": [
								{
									"name": "value",
									"nodeType": "YulTypedName",
									"src": "23670:5:13",
									"type": ""
								}
							],
							"returnVariables": [
								{
									"name": "cleaned",
									"nodeType": "YulTypedName",
									"src": "23680:7:13",
									"type": ""
								}
							],
							"src": "23635:104:13"
						},
						{
							"body": {
								"nodeType": "YulBlock",
								"src": "23826:61:13",
								"statements": [
									{
										"expression": {
											"arguments": [
												{
													"name": "pos",
													"nodeType": "YulIdentifier",
													"src": "23843:3:13"
												},
												{
													"arguments": [
														{
															"name": "value",
															"nodeType": "YulIdentifier",
															"src": "23874:5:13"
														}
													],
													"functionName": {
														"name": "cleanup_t_address_payable",
														"nodeType": "YulIdentifier",
														"src": "23848:25:13"
													},
													"nodeType": "YulFunctionCall",
													"src": "23848:32:13"
												}
											],
											"functionName": {
												"name": "mstore",
												"nodeType": "YulIdentifier",
												"src": "23836:6:13"
											},
											"nodeType": "YulFunctionCall",
											"src": "23836:45:13"
										},
										"nodeType": "YulExpressionStatement",
										"src": "23836:45:13"
									}
								]
							},
							"name": "abi_encode_t_address_payable_to_t_address_payable_fromStack",
							"nodeType": "YulFunctionDefinition",
							"parameters": [
								{
									"name": "value",
									"nodeType": "YulTypedName",
									"src": "23814:5:13",
									"type": ""
								},
								{
									"name": "pos",
									"nodeType": "YulTypedName",
									"src": "23821:3:13",
									"type": ""
								}
							],
							"src": "23745:142:13"
						},
						{
							"body": {
								"nodeType": "YulBlock",
								"src": "24004:73:13",
								"statements": [
									{
										"expression": {
											"arguments": [
												{
													"name": "pos",
													"nodeType": "YulIdentifier",
													"src": "24021:3:13"
												},
												{
													"name": "length",
													"nodeType": "YulIdentifier",
													"src": "24026:6:13"
												}
											],
											"functionName": {
												"name": "mstore",
												"nodeType": "YulIdentifier",
												"src": "24014:6:13"
											},
											"nodeType": "YulFunctionCall",
											"src": "24014:19:13"
										},
										"nodeType": "YulExpressionStatement",
										"src": "24014:19:13"
									},
									{
										"nodeType": "YulAssignment",
										"src": "24042:29:13",
										"value": {
											"arguments": [
												{
													"name": "pos",
													"nodeType": "YulIdentifier",
													"src": "24061:3:13"
												},
												{
													"kind": "number",
													"nodeType": "YulLiteral",
													"src": "24066:4:13",
													"type": "",
													"value": "0x20"
												}
											],
											"functionName": {
												"name": "add",
												"nodeType": "YulIdentifier",
												"src": "24057:3:13"
											},
											"nodeType": "YulFunctionCall",
											"src": "24057:14:13"
										},
										"variableNames": [
											{
												"name": "updated_pos",
												"nodeType": "YulIdentifier",
												"src": "24042:11:13"
											}
										]
									}
								]
							},
							"name": "array_storeLengthForEncoding_t_array$_t_uint256_$dyn_memory_ptr_fromStack",
							"nodeType": "YulFunctionDefinition",
							"parameters": [
								{
									"name": "pos",
									"nodeType": "YulTypedName",
									"src": "23976:3:13",
									"type": ""
								},
								{
									"name": "length",
									"nodeType": "YulTypedName",
									"src": "23981:6:13",
									"type": ""
								}
							],
							"returnVariables": [
								{
									"name": "updated_pos",
									"nodeType": "YulTypedName",
									"src": "23992:11:13",
									"type": ""
								}
							],
							"src": "23893:184:13"
						},
						{
							"body": {
								"nodeType": "YulBlock",
								"src": "24237:608:13",
								"statements": [
									{
										"nodeType": "YulVariableDeclaration",
										"src": "24247:68:13",
										"value": {
											"arguments": [
												{
													"name": "value",
													"nodeType": "YulIdentifier",
													"src": "24309:5:13"
												}
											],
											"functionName": {
												"name": "array_length_t_array$_t_uint256_$dyn_memory_ptr",
												"nodeType": "YulIdentifier",
												"src": "24261:47:13"
											},
											"nodeType": "YulFunctionCall",
											"src": "24261:54:13"
										},
										"variables": [
											{
												"name": "length",
												"nodeType": "YulTypedName",
												"src": "24251:6:13",
												"type": ""
											}
										]
									},
									{
										"nodeType": "YulAssignment",
										"src": "24324:93:13",
										"value": {
											"arguments": [
												{
													"name": "pos",
													"nodeType": "YulIdentifier",
													"src": "24405:3:13"
												},
												{
													"name": "length",
													"nodeType": "YulIdentifier",
													"src": "24410:6:13"
												}
											],
											"functionName": {
												"name": "array_storeLengthForEncoding_t_array$_t_uint256_$dyn_memory_ptr_fromStack",
												"nodeType": "YulIdentifier",
												"src": "24331:73:13"
											},
											"nodeType": "YulFunctionCall",
											"src": "24331:86:13"
										},
										"variableNames": [
											{
												"name": "pos",
												"nodeType": "YulIdentifier",
												"src": "24324:3:13"
											}
										]
									},
									{
										"nodeType": "YulVariableDeclaration",
										"src": "24426:71:13",
										"value": {
											"arguments": [
												{
													"name": "value",
													"nodeType": "YulIdentifier",
													"src": "24491:5:13"
												}
											],
											"functionName": {
												"name": "array_dataslot_t_array$_t_uint256_$dyn_memory_ptr",
												"nodeType": "YulIdentifier",
												"src": "24441:49:13"
											},
											"nodeType": "YulFunctionCall",
											"src": "24441:56:13"
										},
										"variables": [
											{
												"name": "baseRef",
												"nodeType": "YulTypedName",
												"src": "24430:7:13",
												"type": ""
											}
										]
									},
									{
										"nodeType": "YulVariableDeclaration",
										"src": "24506:21:13",
										"value": {
											"name": "baseRef",
											"nodeType": "YulIdentifier",
											"src": "24520:7:13"
										},
										"variables": [
											{
												"name": "srcPtr",
												"nodeType": "YulTypedName",
												"src": "24510:6:13",
												"type": ""
											}
										]
									},
									{
										"body": {
											"nodeType": "YulBlock",
											"src": "24596:224:13",
											"statements": [
												{
													"nodeType": "YulVariableDeclaration",
													"src": "24610:34:13",
													"value": {
														"arguments": [
															{
																"name": "srcPtr",
																"nodeType": "YulIdentifier",
																"src": "24637:6:13"
															}
														],
														"functionName": {
															"name": "mload",
															"nodeType": "YulIdentifier",
															"src": "24631:5:13"
														},
														"nodeType": "YulFunctionCall",
														"src": "24631:13:13"
													},
													"variables": [
														{
															"name": "elementValue0",
															"nodeType": "YulTypedName",
															"src": "24614:13:13",
															"type": ""
														}
													]
												},
												{
													"nodeType": "YulAssignment",
													"src": "24657:70:13",
													"value": {
														"arguments": [
															{
																"name": "elementValue0",
																"nodeType": "YulIdentifier",
																"src": "24708:13:13"
															},
															{
																"name": "pos",
																"nodeType": "YulIdentifier",
																"src": "24723:3:13"
															}
														],
														"functionName": {
															"name": "abi_encodeUpdatedPos_t_uint256_to_t_uint256",
															"nodeType": "YulIdentifier",
															"src": "24664:43:13"
														},
														"nodeType": "YulFunctionCall",
														"src": "24664:63:13"
													},
													"variableNames": [
														{
															"name": "pos",
															"nodeType": "YulIdentifier",
															"src": "24657:3:13"
														}
													]
												},
												{
													"nodeType": "YulAssignment",
													"src": "24740:70:13",
													"value": {
														"arguments": [
															{
																"name": "srcPtr",
																"nodeType": "YulIdentifier",
																"src": "24803:6:13"
															}
														],
														"functionName": {
															"name": "array_nextElement_t_array$_t_uint256_$dyn_memory_ptr",
															"nodeType": "YulIdentifier",
															"src": "24750:52:13"
														},
														"nodeType": "YulFunctionCall",
														"src": "24750:60:13"
													},
													"variableNames": [
														{
															"name": "srcPtr",
															"nodeType": "YulIdentifier",
															"src": "24740:6:13"
														}
													]
												}
											]
										},
										"condition": {
											"arguments": [
												{
													"name": "i",
													"nodeType": "YulIdentifier",
													"src": "24558:1:13"
												},
												{
													"name": "length",
													"nodeType": "YulIdentifier",
													"src": "24561:6:13"
												}
											],
											"functionName": {
												"name": "lt",
												"nodeType": "YulIdentifier",
												"src": "24555:2:13"
											},
											"nodeType": "YulFunctionCall",
											"src": "24555:13:13"
										},
										"nodeType": "YulForLoop",
										"post": {
											"nodeType": "YulBlock",
											"src": "24569:18:13",
											"statements": [
												{
													"nodeType": "YulAssignment",
													"src": "24571:14:13",
													"value": {
														"arguments": [
															{
																"name": "i",
																"nodeType": "YulIdentifier",
																"src": "24580:1:13"
															},
															{
																"kind": "number",
																"nodeType": "YulLiteral",
																"src": "24583:1:13",
																"type": "",
																"value": "1"
															}
														],
														"functionName": {
															"name": "add",
															"nodeType": "YulIdentifier",
															"src": "24576:3:13"
														},
														"nodeType": "YulFunctionCall",
														"src": "24576:9:13"
													},
													"variableNames": [
														{
															"name": "i",
															"nodeType": "YulIdentifier",
															"src": "24571:1:13"
														}
													]
												}
											]
										},
										"pre": {
											"nodeType": "YulBlock",
											"src": "24540:14:13",
											"statements": [
												{
													"nodeType": "YulVariableDeclaration",
													"src": "24542:10:13",
													"value": {
														"kind": "number",
														"nodeType": "YulLiteral",
														"src": "24551:1:13",
														"type": "",
														"value": "0"
													},
													"variables": [
														{
															"name": "i",
															"nodeType": "YulTypedName",
															"src": "24546:1:13",
															"type": ""
														}
													]
												}
											]
										},
										"src": "24536:284:13"
									},
									{
										"nodeType": "YulAssignment",
										"src": "24829:10:13",
										"value": {
											"name": "pos",
											"nodeType": "YulIdentifier",
											"src": "24836:3:13"
										},
										"variableNames": [
											{
												"name": "end",
												"nodeType": "YulIdentifier",
												"src": "24829:3:13"
											}
										]
									}
								]
							},
							"name": "abi_encode_t_array$_t_uint256_$dyn_memory_ptr_to_t_array$_t_uint256_$dyn_memory_ptr_fromStack",
							"nodeType": "YulFunctionDefinition",
							"parameters": [
								{
									"name": "value",
									"nodeType": "YulTypedName",
									"src": "24216:5:13",
									"type": ""
								},
								{
									"name": "pos",
									"nodeType": "YulTypedName",
									"src": "24223:3:13",
									"type": ""
								}
							],
							"returnVariables": [
								{
									"name": "end",
									"nodeType": "YulTypedName",
									"src": "24232:3:13",
									"type": ""
								}
							],
							"src": "24113:732:13"
						},
						{
							"body": {
								"nodeType": "YulBlock",
								"src": "25043:323:13",
								"statements": [
									{
										"nodeType": "YulAssignment",
										"src": "25053:26:13",
										"value": {
											"arguments": [
												{
													"name": "headStart",
													"nodeType": "YulIdentifier",
													"src": "25065:9:13"
												},
												{
													"kind": "number",
													"nodeType": "YulLiteral",
													"src": "25076:2:13",
													"type": "",
													"value": "64"
												}
											],
											"functionName": {
												"name": "add",
												"nodeType": "YulIdentifier",
												"src": "25061:3:13"
											},
											"nodeType": "YulFunctionCall",
											"src": "25061:18:13"
										},
										"variableNames": [
											{
												"name": "tail",
												"nodeType": "YulIdentifier",
												"src": "25053:4:13"
											}
										]
									},
									{
										"expression": {
											"arguments": [
												{
													"name": "value0",
													"nodeType": "YulIdentifier",
													"src": "25149:6:13"
												},
												{
													"arguments": [
														{
															"name": "headStart",
															"nodeType": "YulIdentifier",
															"src": "25162:9:13"
														},
														{
															"kind": "number",
															"nodeType": "YulLiteral",
															"src": "25173:1:13",
															"type": "",
															"value": "0"
														}
													],
													"functionName": {
														"name": "add",
														"nodeType": "YulIdentifier",
														"src": "25158:3:13"
													},
													"nodeType": "YulFunctionCall",
													"src": "25158:17:13"
												}
											],
											"functionName": {
												"name": "abi_encode_t_address_payable_to_t_address_payable_fromStack",
												"nodeType": "YulIdentifier",
												"src": "25089:59:13"
											},
											"nodeType": "YulFunctionCall",
											"src": "25089:87:13"
										},
										"nodeType": "YulExpressionStatement",
										"src": "25089:87:13"
									},
									{
										"expression": {
											"arguments": [
												{
													"arguments": [
														{
															"name": "headStart",
															"nodeType": "YulIdentifier",
															"src": "25197:9:13"
														},
														{
															"kind": "number",
															"nodeType": "YulLiteral",
															"src": "25208:2:13",
															"type": "",
															"value": "32"
														}
													],
													"functionName": {
														"name": "add",
														"nodeType": "YulIdentifier",
														"src": "25193:3:13"
													},
													"nodeType": "YulFunctionCall",
													"src": "25193:18:13"
												},
												{
													"arguments": [
														{
															"name": "tail",
															"nodeType": "YulIdentifier",
															"src": "25217:4:13"
														},
														{
															"name": "headStart",
															"nodeType": "YulIdentifier",
															"src": "25223:9:13"
														}
													],
													"functionName": {
														"name": "sub",
														"nodeType": "YulIdentifier",
														"src": "25213:3:13"
													},
													"nodeType": "YulFunctionCall",
													"src": "25213:20:13"
												}
											],
											"functionName": {
												"name": "mstore",
												"nodeType": "YulIdentifier",
												"src": "25186:6:13"
											},
											"nodeType": "YulFunctionCall",
											"src": "25186:48:13"
										},
										"nodeType": "YulExpressionStatement",
										"src": "25186:48:13"
									},
									{
										"nodeType": "YulAssignment",
										"src": "25243:116:13",
										"value": {
											"arguments": [
												{
													"name": "value1",
													"nodeType": "YulIdentifier",
													"src": "25345:6:13"
												},
												{
													"name": "tail",
													"nodeType": "YulIdentifier",
													"src": "25354:4:13"
												}
											],
											"functionName": {
												"name": "abi_encode_t_array$_t_uint256_$dyn_memory_ptr_to_t_array$_t_uint256_$dyn_memory_ptr_fromStack",
												"nodeType": "YulIdentifier",
												"src": "25251:93:13"
											},
											"nodeType": "YulFunctionCall",
											"src": "25251:108:13"
										},
										"variableNames": [
											{
												"name": "tail",
												"nodeType": "YulIdentifier",
												"src": "25243:4:13"
											}
										]
									}
								]
							},
							"name": "abi_encode_tuple_t_address_payable_t_array$_t_uint256_$dyn_memory_ptr__to_t_address_payable_t_array$_t_uint256_$dyn_memory_ptr__fromStack_reversed",
							"nodeType": "YulFunctionDefinition",
							"parameters": [
								{
									"name": "headStart",
									"nodeType": "YulTypedName",
									"src": "25007:9:13",
									"type": ""
								},
								{
									"name": "value1",
									"nodeType": "YulTypedName",
									"src": "25019:6:13",
									"type": ""
								},
								{
									"name": "value0",
									"nodeType": "YulTypedName",
									"src": "25027:6:13",
									"type": ""
								}
							],
							"returnVariables": [
								{
									"name": "tail",
									"nodeType": "YulTypedName",
									"src": "25038:4:13",
									"type": ""
								}
							],
							"src": "24851:515:13"
						},
						{
							"body": {
								"nodeType": "YulBlock",
								"src": "25470:124:13",
								"statements": [
									{
										"nodeType": "YulAssignment",
										"src": "25480:26:13",
										"value": {
											"arguments": [
												{
													"name": "headStart",
													"nodeType": "YulIdentifier",
													"src": "25492:9:13"
												},
												{
													"kind": "number",
													"nodeType": "YulLiteral",
													"src": "25503:2:13",
													"type": "",
													"value": "32"
												}
											],
											"functionName": {
												"name": "add",
												"nodeType": "YulIdentifier",
												"src": "25488:3:13"
											},
											"nodeType": "YulFunctionCall",
											"src": "25488:18:13"
										},
										"variableNames": [
											{
												"name": "tail",
												"nodeType": "YulIdentifier",
												"src": "25480:4:13"
											}
										]
									},
									{
										"expression": {
											"arguments": [
												{
													"name": "value0",
													"nodeType": "YulIdentifier",
													"src": "25560:6:13"
												},
												{
													"arguments": [
														{
															"name": "headStart",
															"nodeType": "YulIdentifier",
															"src": "25573:9:13"
														},
														{
															"kind": "number",
															"nodeType": "YulLiteral",
															"src": "25584:1:13",
															"type": "",
															"value": "0"
														}
													],
													"functionName": {
														"name": "add",
														"nodeType": "YulIdentifier",
														"src": "25569:3:13"
													},
													"nodeType": "YulFunctionCall",
													"src": "25569:17:13"
												}
											],
											"functionName": {
												"name": "abi_encode_t_uint256_to_t_uint256_fromStack",
												"nodeType": "YulIdentifier",
												"src": "25516:43:13"
											},
											"nodeType": "YulFunctionCall",
											"src": "25516:71:13"
										},
										"nodeType": "YulExpressionStatement",
										"src": "25516:71:13"
									}
								]
							},
							"name": "abi_encode_tuple_t_uint256__to_t_uint256__fromStack_reversed",
							"nodeType": "YulFunctionDefinition",
							"parameters": [
								{
									"name": "headStart",
									"nodeType": "YulTypedName",
									"src": "25442:9:13",
									"type": ""
								},
								{
									"name": "value0",
									"nodeType": "YulTypedName",
									"src": "25454:6:13",
									"type": ""
								}
							],
							"returnVariables": [
								{
									"name": "tail",
									"nodeType": "YulTypedName",
									"src": "25465:4:13",
									"type": ""
								}
							],
							"src": "25372:222:13"
						},
						{
							"body": {
								"nodeType": "YulBlock",
								"src": "25706:117:13",
								"statements": [
									{
										"expression": {
											"arguments": [
												{
													"arguments": [
														{
															"name": "memPtr",
															"nodeType": "YulIdentifier",
															"src": "25728:6:13"
														},
														{
															"kind": "number",
															"nodeType": "YulLiteral",
															"src": "25736:1:13",
															"type": "",
															"value": "0"
														}
													],
													"functionName": {
														"name": "add",
														"nodeType": "YulIdentifier",
														"src": "25724:3:13"
													},
													"nodeType": "YulFunctionCall",
													"src": "25724:14:13"
												},
												{
													"hexValue": "596f7520617265206e6f7420746865206f776e6572206f66207468697320746f",
													"kind": "string",
													"nodeType": "YulLiteral",
													"src": "25740:34:13",
													"type": "",
													"value": "You are not the owner of this to"
												}
											],
											"functionName": {
												"name": "mstore",
												"nodeType": "YulIdentifier",
												"src": "25717:6:13"
											},
											"nodeType": "YulFunctionCall",
											"src": "25717:58:13"
										},
										"nodeType": "YulExpressionStatement",
										"src": "25717:58:13"
									},
									{
										"expression": {
											"arguments": [
												{
													"arguments": [
														{
															"name": "memPtr",
															"nodeType": "YulIdentifier",
															"src": "25796:6:13"
														},
														{
															"kind": "number",
															"nodeType": "YulLiteral",
															"src": "25804:2:13",
															"type": "",
															"value": "32"
														}
													],
													"functionName": {
														"name": "add",
														"nodeType": "YulIdentifier",
														"src": "25792:3:13"
													},
													"nodeType": "YulFunctionCall",
													"src": "25792:15:13"
												},
												{
													"hexValue": "6b656e21",
													"kind": "string",
													"nodeType": "YulLiteral",
													"src": "25809:6:13",
													"type": "",
													"value": "ken!"
												}
											],
											"functionName": {
												"name": "mstore",
												"nodeType": "YulIdentifier",
												"src": "25785:6:13"
											},
											"nodeType": "YulFunctionCall",
											"src": "25785:31:13"
										},
										"nodeType": "YulExpressionStatement",
										"src": "25785:31:13"
									}
								]
							},
							"name": "store_literal_in_memory_8f0021d44dc3c6a184f0ca9bb2b581abde8876c7afea5879ec72cd3feb6a7120",
							"nodeType": "YulFunctionDefinition",
							"parameters": [
								{
									"name": "memPtr",
									"nodeType": "YulTypedName",
									"src": "25698:6:13",
									"type": ""
								}
							],
							"src": "25600:223:13"
						},
						{
							"body": {
								"nodeType": "YulBlock",
								"src": "25975:220:13",
								"statements": [
									{
										"nodeType": "YulAssignment",
										"src": "25985:74:13",
										"value": {
											"arguments": [
												{
													"name": "pos",
													"nodeType": "YulIdentifier",
													"src": "26051:3:13"
												},
												{
													"kind": "number",
													"nodeType": "YulLiteral",
													"src": "26056:2:13",
													"type": "",
													"value": "36"
												}
											],
											"functionName": {
												"name": "array_storeLengthForEncoding_t_string_memory_ptr_fromStack",
												"nodeType": "YulIdentifier",
												"src": "25992:58:13"
											},
											"nodeType": "YulFunctionCall",
											"src": "25992:67:13"
										},
										"variableNames": [
											{
												"name": "pos",
												"nodeType": "YulIdentifier",
												"src": "25985:3:13"
											}
										]
									},
									{
										"expression": {
											"arguments": [
												{
													"name": "pos",
													"nodeType": "YulIdentifier",
													"src": "26157:3:13"
												}
											],
											"functionName": {
												"name": "store_literal_in_memory_8f0021d44dc3c6a184f0ca9bb2b581abde8876c7afea5879ec72cd3feb6a7120",
												"nodeType": "YulIdentifier",
												"src": "26068:88:13"
											},
											"nodeType": "YulFunctionCall",
											"src": "26068:93:13"
										},
										"nodeType": "YulExpressionStatement",
										"src": "26068:93:13"
									},
									{
										"nodeType": "YulAssignment",
										"src": "26170:19:13",
										"value": {
											"arguments": [
												{
													"name": "pos",
													"nodeType": "YulIdentifier",
													"src": "26181:3:13"
												},
												{
													"kind": "number",
													"nodeType": "YulLiteral",
													"src": "26186:2:13",
													"type": "",
													"value": "64"
												}
											],
											"functionName": {
												"name": "add",
												"nodeType": "YulIdentifier",
												"src": "26177:3:13"
											},
											"nodeType": "YulFunctionCall",
											"src": "26177:12:13"
										},
										"variableNames": [
											{
												"name": "end",
												"nodeType": "YulIdentifier",
												"src": "26170:3:13"
											}
										]
									}
								]
							},
							"name": "abi_encode_t_stringliteral_8f0021d44dc3c6a184f0ca9bb2b581abde8876c7afea5879ec72cd3feb6a7120_to_t_string_memory_ptr_fromStack",
							"nodeType": "YulFunctionDefinition",
							"parameters": [
								{
									"name": "pos",
									"nodeType": "YulTypedName",
									"src": "25963:3:13",
									"type": ""
								}
							],
							"returnVariables": [
								{
									"name": "end",
									"nodeType": "YulTypedName",
									"src": "25971:3:13",
									"type": ""
								}
							],
							"src": "25829:366:13"
						},
						{
							"body": {
								"nodeType": "YulBlock",
								"src": "26372:248:13",
								"statements": [
									{
										"nodeType": "YulAssignment",
										"src": "26382:26:13",
										"value": {
											"arguments": [
												{
													"name": "headStart",
													"nodeType": "YulIdentifier",
													"src": "26394:9:13"
												},
												{
													"kind": "number",
													"nodeType": "YulLiteral",
													"src": "26405:2:13",
													"type": "",
													"value": "32"
												}
											],
											"functionName": {
												"name": "add",
												"nodeType": "YulIdentifier",
												"src": "26390:3:13"
											},
											"nodeType": "YulFunctionCall",
											"src": "26390:18:13"
										},
										"variableNames": [
											{
												"name": "tail",
												"nodeType": "YulIdentifier",
												"src": "26382:4:13"
											}
										]
									},
									{
										"expression": {
											"arguments": [
												{
													"arguments": [
														{
															"name": "headStart",
															"nodeType": "YulIdentifier",
															"src": "26429:9:13"
														},
														{
															"kind": "number",
															"nodeType": "YulLiteral",
															"src": "26440:1:13",
															"type": "",
															"value": "0"
														}
													],
													"functionName": {
														"name": "add",
														"nodeType": "YulIdentifier",
														"src": "26425:3:13"
													},
													"nodeType": "YulFunctionCall",
													"src": "26425:17:13"
												},
												{
													"arguments": [
														{
															"name": "tail",
															"nodeType": "YulIdentifier",
															"src": "26448:4:13"
														},
														{
															"name": "headStart",
															"nodeType": "YulIdentifier",
															"src": "26454:9:13"
														}
													],
													"functionName": {
														"name": "sub",
														"nodeType": "YulIdentifier",
														"src": "26444:3:13"
													},
													"nodeType": "YulFunctionCall",
													"src": "26444:20:13"
												}
											],
											"functionName": {
												"name": "mstore",
												"nodeType": "YulIdentifier",
												"src": "26418:6:13"
											},
											"nodeType": "YulFunctionCall",
											"src": "26418:47:13"
										},
										"nodeType": "YulExpressionStatement",
										"src": "26418:47:13"
									},
									{
										"nodeType": "YulAssignment",
										"src": "26474:139:13",
										"value": {
											"arguments": [
												{
													"name": "tail",
													"nodeType": "YulIdentifier",
													"src": "26608:4:13"
												}
											],
											"functionName": {
												"name": "abi_encode_t_stringliteral_8f0021d44dc3c6a184f0ca9bb2b581abde8876c7afea5879ec72cd3feb6a7120_to_t_string_memory_ptr_fromStack",
												"nodeType": "YulIdentifier",
												"src": "26482:124:13"
											},
											"nodeType": "YulFunctionCall",
											"src": "26482:131:13"
										},
										"variableNames": [
											{
												"name": "tail",
												"nodeType": "YulIdentifier",
												"src": "26474:4:13"
											}
										]
									}
								]
							},
							"name": "abi_encode_tuple_t_stringliteral_8f0021d44dc3c6a184f0ca9bb2b581abde8876c7afea5879ec72cd3feb6a7120__to_t_string_memory_ptr__fromStack_reversed",
							"nodeType": "YulFunctionDefinition",
							"parameters": [
								{
									"name": "headStart",
									"nodeType": "YulTypedName",
									"src": "26352:9:13",
									"type": ""
								}
							],
							"returnVariables": [
								{
									"name": "tail",
									"nodeType": "YulTypedName",
									"src": "26367:4:13",
									"type": ""
								}
							],
							"src": "26201:419:13"
						},
						{
							"body": {
								"nodeType": "YulBlock",
								"src": "26732:116:13",
								"statements": [
									{
										"expression": {
											"arguments": [
												{
													"arguments": [
														{
															"name": "memPtr",
															"nodeType": "YulIdentifier",
															"src": "26754:6:13"
														},
														{
															"kind": "number",
															"nodeType": "YulLiteral",
															"src": "26762:1:13",
															"type": "",
															"value": "0"
														}
													],
													"functionName": {
														"name": "add",
														"nodeType": "YulIdentifier",
														"src": "26750:3:13"
													},
													"nodeType": "YulFunctionCall",
													"src": "26750:14:13"
												},
												{
													"hexValue": "436f6e7472616374206e6f7420617070726f76656420746f206275726e20746f",
													"kind": "string",
													"nodeType": "YulLiteral",
													"src": "26766:34:13",
													"type": "",
													"value": "Contract not approved to burn to"
												}
											],
											"functionName": {
												"name": "mstore",
												"nodeType": "YulIdentifier",
												"src": "26743:6:13"
											},
											"nodeType": "YulFunctionCall",
											"src": "26743:58:13"
										},
										"nodeType": "YulExpressionStatement",
										"src": "26743:58:13"
									},
									{
										"expression": {
											"arguments": [
												{
													"arguments": [
														{
															"name": "memPtr",
															"nodeType": "YulIdentifier",
															"src": "26822:6:13"
														},
														{
															"kind": "number",
															"nodeType": "YulLiteral",
															"src": "26830:2:13",
															"type": "",
															"value": "32"
														}
													],
													"functionName": {
														"name": "add",
														"nodeType": "YulIdentifier",
														"src": "26818:3:13"
													},
													"nodeType": "YulFunctionCall",
													"src": "26818:15:13"
												},
												{
													"hexValue": "6b656e",
													"kind": "string",
													"nodeType": "YulLiteral",
													"src": "26835:5:13",
													"type": "",
													"value": "ken"
												}
											],
											"functionName": {
												"name": "mstore",
												"nodeType": "YulIdentifier",
												"src": "26811:6:13"
											},
											"nodeType": "YulFunctionCall",
											"src": "26811:30:13"
										},
										"nodeType": "YulExpressionStatement",
										"src": "26811:30:13"
									}
								]
							},
							"name": "store_literal_in_memory_4f4fa40674b63d9f789043d4550fa5f5291b0482fc45cbbc7ace27126a67c59b",
							"nodeType": "YulFunctionDefinition",
							"parameters": [
								{
									"name": "memPtr",
									"nodeType": "YulTypedName",
									"src": "26724:6:13",
									"type": ""
								}
							],
							"src": "26626:222:13"
						},
						{
							"body": {
								"nodeType": "YulBlock",
								"src": "27000:220:13",
								"statements": [
									{
										"nodeType": "YulAssignment",
										"src": "27010:74:13",
										"value": {
											"arguments": [
												{
													"name": "pos",
													"nodeType": "YulIdentifier",
													"src": "27076:3:13"
												},
												{
													"kind": "number",
													"nodeType": "YulLiteral",
													"src": "27081:2:13",
													"type": "",
													"value": "35"
												}
											],
											"functionName": {
												"name": "array_storeLengthForEncoding_t_string_memory_ptr_fromStack",
												"nodeType": "YulIdentifier",
												"src": "27017:58:13"
											},
											"nodeType": "YulFunctionCall",
											"src": "27017:67:13"
										},
										"variableNames": [
											{
												"name": "pos",
												"nodeType": "YulIdentifier",
												"src": "27010:3:13"
											}
										]
									},
									{
										"expression": {
											"arguments": [
												{
													"name": "pos",
													"nodeType": "YulIdentifier",
													"src": "27182:3:13"
												}
											],
											"functionName": {
												"name": "store_literal_in_memory_4f4fa40674b63d9f789043d4550fa5f5291b0482fc45cbbc7ace27126a67c59b",
												"nodeType": "YulIdentifier",
												"src": "27093:88:13"
											},
											"nodeType": "YulFunctionCall",
											"src": "27093:93:13"
										},
										"nodeType": "YulExpressionStatement",
										"src": "27093:93:13"
									},
									{
										"nodeType": "YulAssignment",
										"src": "27195:19:13",
										"value": {
											"arguments": [
												{
													"name": "pos",
													"nodeType": "YulIdentifier",
													"src": "27206:3:13"
												},
												{
													"kind": "number",
													"nodeType": "YulLiteral",
													"src": "27211:2:13",
													"type": "",
													"value": "64"
												}
											],
											"functionName": {
												"name": "add",
												"nodeType": "YulIdentifier",
												"src": "27202:3:13"
											},
											"nodeType": "YulFunctionCall",
											"src": "27202:12:13"
										},
										"variableNames": [
											{
												"name": "end",
												"nodeType": "YulIdentifier",
												"src": "27195:3:13"
											}
										]
									}
								]
							},
							"name": "abi_encode_t_stringliteral_4f4fa40674b63d9f789043d4550fa5f5291b0482fc45cbbc7ace27126a67c59b_to_t_string_memory_ptr_fromStack",
							"nodeType": "YulFunctionDefinition",
							"parameters": [
								{
									"name": "pos",
									"nodeType": "YulTypedName",
									"src": "26988:3:13",
									"type": ""
								}
							],
							"returnVariables": [
								{
									"name": "end",
									"nodeType": "YulTypedName",
									"src": "26996:3:13",
									"type": ""
								}
							],
							"src": "26854:366:13"
						},
						{
							"body": {
								"nodeType": "YulBlock",
								"src": "27397:248:13",
								"statements": [
									{
										"nodeType": "YulAssignment",
										"src": "27407:26:13",
										"value": {
											"arguments": [
												{
													"name": "headStart",
													"nodeType": "YulIdentifier",
													"src": "27419:9:13"
												},
												{
													"kind": "number",
													"nodeType": "YulLiteral",
													"src": "27430:2:13",
													"type": "",
													"value": "32"
												}
											],
											"functionName": {
												"name": "add",
												"nodeType": "YulIdentifier",
												"src": "27415:3:13"
											},
											"nodeType": "YulFunctionCall",
											"src": "27415:18:13"
										},
										"variableNames": [
											{
												"name": "tail",
												"nodeType": "YulIdentifier",
												"src": "27407:4:13"
											}
										]
									},
									{
										"expression": {
											"arguments": [
												{
													"arguments": [
														{
															"name": "headStart",
															"nodeType": "YulIdentifier",
															"src": "27454:9:13"
														},
														{
															"kind": "number",
															"nodeType": "YulLiteral",
															"src": "27465:1:13",
															"type": "",
															"value": "0"
														}
													],
													"functionName": {
														"name": "add",
														"nodeType": "YulIdentifier",
														"src": "27450:3:13"
													},
													"nodeType": "YulFunctionCall",
													"src": "27450:17:13"
												},
												{
													"arguments": [
														{
															"name": "tail",
															"nodeType": "YulIdentifier",
															"src": "27473:4:13"
														},
														{
															"name": "headStart",
															"nodeType": "YulIdentifier",
															"src": "27479:9:13"
														}
													],
													"functionName": {
														"name": "sub",
														"nodeType": "YulIdentifier",
														"src": "27469:3:13"
													},
													"nodeType": "YulFunctionCall",
													"src": "27469:20:13"
												}
											],
											"functionName": {
												"name": "mstore",
												"nodeType": "YulIdentifier",
												"src": "27443:6:13"
											},
											"nodeType": "YulFunctionCall",
											"src": "27443:47:13"
										},
										"nodeType": "YulExpressionStatement",
										"src": "27443:47:13"
									},
									{
										"nodeType": "YulAssignment",
										"src": "27499:139:13",
										"value": {
											"arguments": [
												{
													"name": "tail",
													"nodeType": "YulIdentifier",
													"src": "27633:4:13"
												}
											],
											"functionName": {
												"name": "abi_encode_t_stringliteral_4f4fa40674b63d9f789043d4550fa5f5291b0482fc45cbbc7ace27126a67c59b_to_t_string_memory_ptr_fromStack",
												"nodeType": "YulIdentifier",
												"src": "27507:124:13"
											},
											"nodeType": "YulFunctionCall",
											"src": "27507:131:13"
										},
										"variableNames": [
											{
												"name": "tail",
												"nodeType": "YulIdentifier",
												"src": "27499:4:13"
											}
										]
									}
								]
							},
							"name": "abi_encode_tuple_t_stringliteral_4f4fa40674b63d9f789043d4550fa5f5291b0482fc45cbbc7ace27126a67c59b__to_t_string_memory_ptr__fromStack_reversed",
							"nodeType": "YulFunctionDefinition",
							"parameters": [
								{
									"name": "headStart",
									"nodeType": "YulTypedName",
									"src": "27377:9:13",
									"type": ""
								}
							],
							"returnVariables": [
								{
									"name": "tail",
									"nodeType": "YulTypedName",
									"src": "27392:4:13",
									"type": ""
								}
							],
							"src": "27226:419:13"
						},
						{
							"body": {
								"nodeType": "YulBlock",
								"src": "27793:222:13",
								"statements": [
									{
										"nodeType": "YulAssignment",
										"src": "27803:26:13",
										"value": {
											"arguments": [
												{
													"name": "headStart",
													"nodeType": "YulIdentifier",
													"src": "27815:9:13"
												},
												{
													"kind": "number",
													"nodeType": "YulLiteral",
													"src": "27826:2:13",
													"type": "",
													"value": "64"
												}
											],
											"functionName": {
												"name": "add",
												"nodeType": "YulIdentifier",
												"src": "27811:3:13"
											},
											"nodeType": "YulFunctionCall",
											"src": "27811:18:13"
										},
										"variableNames": [
											{
												"name": "tail",
												"nodeType": "YulIdentifier",
												"src": "27803:4:13"
											}
										]
									},
									{
										"expression": {
											"arguments": [
												{
													"name": "value0",
													"nodeType": "YulIdentifier",
													"src": "27899:6:13"
												},
												{
													"arguments": [
														{
															"name": "headStart",
															"nodeType": "YulIdentifier",
															"src": "27912:9:13"
														},
														{
															"kind": "number",
															"nodeType": "YulLiteral",
															"src": "27923:1:13",
															"type": "",
															"value": "0"
														}
													],
													"functionName": {
														"name": "add",
														"nodeType": "YulIdentifier",
														"src": "27908:3:13"
													},
													"nodeType": "YulFunctionCall",
													"src": "27908:17:13"
												}
											],
											"functionName": {
												"name": "abi_encode_t_address_payable_to_t_address_payable_fromStack",
												"nodeType": "YulIdentifier",
												"src": "27839:59:13"
											},
											"nodeType": "YulFunctionCall",
											"src": "27839:87:13"
										},
										"nodeType": "YulExpressionStatement",
										"src": "27839:87:13"
									},
									{
										"expression": {
											"arguments": [
												{
													"name": "value1",
													"nodeType": "YulIdentifier",
													"src": "27980:6:13"
												},
												{
													"arguments": [
														{
															"name": "headStart",
															"nodeType": "YulIdentifier",
															"src": "27993:9:13"
														},
														{
															"kind": "number",
															"nodeType": "YulLiteral",
															"src": "28004:2:13",
															"type": "",
															"value": "32"
														}
													],
													"functionName": {
														"name": "add",
														"nodeType": "YulIdentifier",
														"src": "27989:3:13"
													},
													"nodeType": "YulFunctionCall",
													"src": "27989:18:13"
												}
											],
											"functionName": {
												"name": "abi_encode_t_uint256_to_t_uint256_fromStack",
												"nodeType": "YulIdentifier",
												"src": "27936:43:13"
											},
											"nodeType": "YulFunctionCall",
											"src": "27936:72:13"
										},
										"nodeType": "YulExpressionStatement",
										"src": "27936:72:13"
									}
								]
							},
							"name": "abi_encode_tuple_t_address_payable_t_uint256__to_t_address_payable_t_uint256__fromStack_reversed",
							"nodeType": "YulFunctionDefinition",
							"parameters": [
								{
									"name": "headStart",
									"nodeType": "YulTypedName",
									"src": "27757:9:13",
									"type": ""
								},
								{
									"name": "value1",
									"nodeType": "YulTypedName",
									"src": "27769:6:13",
									"type": ""
								},
								{
									"name": "value0",
									"nodeType": "YulTypedName",
									"src": "27777:6:13",
									"type": ""
								}
							],
							"returnVariables": [
								{
									"name": "tail",
									"nodeType": "YulTypedName",
									"src": "27788:4:13",
									"type": ""
								}
							],
							"src": "27651:364:13"
						}
					]
				},
				"contents": "{\n\n    function allocate_unbounded() -> memPtr {\n        memPtr := mload(64)\n    }\n\n    function revert_error_dbdddcbe895c83990c08b3492a0e83918d802a52331272ac6fdb6a7c4aea3b1b() {\n        revert(0, 0)\n    }\n\n    function revert_error_c1322bf8034eace5e0b5c7295db60986aa89aae5e0ea0873e4689e076861a5db() {\n        revert(0, 0)\n    }\n\n    function cleanup_t_uint160(value) -> cleaned {\n        cleaned := and(value, 0xffffffffffffffffffffffffffffffffffffffff)\n    }\n\n    function cleanup_t_address(value) -> cleaned {\n        cleaned := cleanup_t_uint160(value)\n    }\n\n    function validator_revert_t_address(value) {\n        if iszero(eq(value, cleanup_t_address(value))) { revert(0, 0) }\n    }\n\n    function abi_decode_t_address(offset, end) -> value {\n        value := calldataload(offset)\n        validator_revert_t_address(value)\n    }\n\n    function abi_decode_tuple_t_address(headStart, dataEnd) -> value0 {\n        if slt(sub(dataEnd, headStart), 32) { revert_error_dbdddcbe895c83990c08b3492a0e83918d802a52331272ac6fdb6a7c4aea3b1b() }\n\n        {\n\n            let offset := 0\n\n            value0 := abi_decode_t_address(add(headStart, offset), dataEnd)\n        }\n\n    }\n\n    function abi_encode_t_address_to_t_address_fromStack(value, pos) {\n        mstore(pos, cleanup_t_address(value))\n    }\n\n    function abi_encode_tuple_t_address__to_t_address__fromStack_reversed(headStart , value0) -> tail {\n        tail := add(headStart, 32)\n\n        abi_encode_t_address_to_t_address_fromStack(value0,  add(headStart, 0))\n\n    }\n\n    function array_length_t_array$_t_struct$_VaultDetails_$2953_memory_ptr_$dyn_memory_ptr(value) -> length {\n\n        length := mload(value)\n\n    }\n\n    function array_storeLengthForEncoding_t_array$_t_struct$_VaultDetails_$2953_memory_ptr_$dyn_memory_ptr_fromStack(pos, length) -> updated_pos {\n        mstore(pos, length)\n        updated_pos := add(pos, 0x20)\n    }\n\n    function array_dataslot_t_array$_t_struct$_VaultDetails_$2953_memory_ptr_$dyn_memory_ptr(ptr) -> data {\n        data := ptr\n\n        data := add(ptr, 0x20)\n\n    }\n\n    function cleanup_t_uint256(value) -> cleaned {\n        cleaned := value\n    }\n\n    function abi_encode_t_uint256_to_t_uint256(value, pos) {\n        mstore(pos, cleanup_t_uint256(value))\n    }\n\n    function array_length_t_array$_t_uint256_$dyn_memory_ptr(value) -> length {\n\n        length := mload(value)\n\n    }\n\n    function array_storeLengthForEncoding_t_array$_t_uint256_$dyn_memory_ptr(pos, length) -> updated_pos {\n        mstore(pos, length)\n        updated_pos := add(pos, 0x20)\n    }\n\n    function array_dataslot_t_array$_t_uint256_$dyn_memory_ptr(ptr) -> data {\n        data := ptr\n\n        data := add(ptr, 0x20)\n\n    }\n\n    function abi_encodeUpdatedPos_t_uint256_to_t_uint256(value0, pos) -> updatedPos {\n        abi_encode_t_uint256_to_t_uint256(value0, pos)\n        updatedPos := add(pos, 0x20)\n    }\n\n    function array_nextElement_t_array$_t_uint256_$dyn_memory_ptr(ptr) -> next {\n        next := add(ptr, 0x20)\n    }\n\n    // uint256[] -> uint256[]\n    function abi_encode_t_array$_t_uint256_$dyn_memory_ptr_to_t_array$_t_uint256_$dyn_memory_ptr(value, pos)  -> end  {\n        let length := array_length_t_array$_t_uint256_$dyn_memory_ptr(value)\n        pos := array_storeLengthForEncoding_t_array$_t_uint256_$dyn_memory_ptr(pos, length)\n        let baseRef := array_dataslot_t_array$_t_uint256_$dyn_memory_ptr(value)\n        let srcPtr := baseRef\n        for { let i := 0 } lt(i, length) { i := add(i, 1) }\n        {\n            let elementValue0 := mload(srcPtr)\n            pos := abi_encodeUpdatedPos_t_uint256_to_t_uint256(elementValue0, pos)\n            srcPtr := array_nextElement_t_array$_t_uint256_$dyn_memory_ptr(srcPtr)\n        }\n        end := pos\n    }\n\n    function abi_encode_t_address_to_t_address(value, pos) {\n        mstore(pos, cleanup_t_address(value))\n    }\n\n    // struct Bitsurance.VaultDetails -> struct Bitsurance.VaultDetails\n    function abi_encode_t_struct$_VaultDetails_$2953_memory_ptr_to_t_struct$_VaultDetails_$2953_memory_ptr(value, pos)  -> end  {\n        let tail := add(pos, 0x80)\n\n        {\n            // totalBalance\n\n            let memberValue0 := mload(add(value, 0x00))\n            abi_encode_t_uint256_to_t_uint256(memberValue0, add(pos, 0x00))\n        }\n\n        {\n            // minimumWithdrawTime\n\n            let memberValue0 := mload(add(value, 0x20))\n            abi_encode_t_uint256_to_t_uint256(memberValue0, add(pos, 0x20))\n        }\n\n        {\n            // insuredTokenIds\n\n            let memberValue0 := mload(add(value, 0x40))\n\n            mstore(add(pos, 0x40), sub(tail, pos))\n            tail := abi_encode_t_array$_t_uint256_$dyn_memory_ptr_to_t_array$_t_uint256_$dyn_memory_ptr(memberValue0, tail)\n\n        }\n\n        {\n            // nftContractAddress\n\n            let memberValue0 := mload(add(value, 0x60))\n            abi_encode_t_address_to_t_address(memberValue0, add(pos, 0x60))\n        }\n\n        end := tail\n    }\n\n    function abi_encodeUpdatedPos_t_struct$_VaultDetails_$2953_memory_ptr_to_t_struct$_VaultDetails_$2953_memory_ptr(value0, pos) -> updatedPos {\n        updatedPos := abi_encode_t_struct$_VaultDetails_$2953_memory_ptr_to_t_struct$_VaultDetails_$2953_memory_ptr(value0, pos)\n    }\n\n    function array_nextElement_t_array$_t_struct$_VaultDetails_$2953_memory_ptr_$dyn_memory_ptr(ptr) -> next {\n        next := add(ptr, 0x20)\n    }\n\n    // struct Bitsurance.VaultDetails[] -> struct Bitsurance.VaultDetails[]\n    function abi_encode_t_array$_t_struct$_VaultDetails_$2953_memory_ptr_$dyn_memory_ptr_to_t_array$_t_struct$_VaultDetails_$2953_memory_ptr_$dyn_memory_ptr_fromStack(value, pos)  -> end  {\n        let length := array_length_t_array$_t_struct$_VaultDetails_$2953_memory_ptr_$dyn_memory_ptr(value)\n        pos := array_storeLengthForEncoding_t_array$_t_struct$_VaultDetails_$2953_memory_ptr_$dyn_memory_ptr_fromStack(pos, length)\n        let headStart := pos\n        let tail := add(pos, mul(length, 0x20))\n        let baseRef := array_dataslot_t_array$_t_struct$_VaultDetails_$2953_memory_ptr_$dyn_memory_ptr(value)\n        let srcPtr := baseRef\n        for { let i := 0 } lt(i, length) { i := add(i, 1) }\n        {\n            mstore(pos, sub(tail, headStart))\n            let elementValue0 := mload(srcPtr)\n            tail := abi_encodeUpdatedPos_t_struct$_VaultDetails_$2953_memory_ptr_to_t_struct$_VaultDetails_$2953_memory_ptr(elementValue0, tail)\n            srcPtr := array_nextElement_t_array$_t_struct$_VaultDetails_$2953_memory_ptr_$dyn_memory_ptr(srcPtr)\n            pos := add(pos, 0x20)\n        }\n        pos := tail\n        end := pos\n    }\n\n    function abi_encode_tuple_t_array$_t_struct$_VaultDetails_$2953_memory_ptr_$dyn_memory_ptr__to_t_array$_t_struct$_VaultDetails_$2953_memory_ptr_$dyn_memory_ptr__fromStack_reversed(headStart , value0) -> tail {\n        tail := add(headStart, 32)\n\n        mstore(add(headStart, 0), sub(tail, headStart))\n        tail := abi_encode_t_array$_t_struct$_VaultDetails_$2953_memory_ptr_$dyn_memory_ptr_to_t_array$_t_struct$_VaultDetails_$2953_memory_ptr_$dyn_memory_ptr_fromStack(value0,  tail)\n\n    }\n\n    function validator_revert_t_uint256(value) {\n        if iszero(eq(value, cleanup_t_uint256(value))) { revert(0, 0) }\n    }\n\n    function abi_decode_t_uint256(offset, end) -> value {\n        value := calldataload(offset)\n        validator_revert_t_uint256(value)\n    }\n\n    function abi_decode_tuple_t_addresst_uint256(headStart, dataEnd) -> value0, value1 {\n        if slt(sub(dataEnd, headStart), 64) { revert_error_dbdddcbe895c83990c08b3492a0e83918d802a52331272ac6fdb6a7c4aea3b1b() }\n\n        {\n\n            let offset := 0\n\n            value0 := abi_decode_t_address(add(headStart, offset), dataEnd)\n        }\n\n        {\n\n            let offset := 32\n\n            value1 := abi_decode_t_uint256(add(headStart, offset), dataEnd)\n        }\n\n    }\n\n    function revert_error_1b9f4a0a5773e33b91aa01db23bf8c55fce1411167c872835e7fa00a4f17d46d() {\n        revert(0, 0)\n    }\n\n    function round_up_to_mul_of_32(value) -> result {\n        result := and(add(value, 31), not(31))\n    }\n\n    function panic_error_0x41() {\n        mstore(0, 35408467139433450592217433187231851964531694900788300625387963629091585785856)\n        mstore(4, 0x41)\n        revert(0, 0x24)\n    }\n\n    function finalize_allocation(memPtr, size) {\n        let newFreePtr := add(memPtr, round_up_to_mul_of_32(size))\n        // protect against overflow\n        if or(gt(newFreePtr, 0xffffffffffffffff), lt(newFreePtr, memPtr)) { panic_error_0x41() }\n        mstore(64, newFreePtr)\n    }\n\n    function allocate_memory(size) -> memPtr {\n        memPtr := allocate_unbounded()\n        finalize_allocation(memPtr, size)\n    }\n\n    function array_allocation_size_t_array$_t_uint256_$dyn_memory_ptr(length) -> size {\n        // Make sure we can allocate memory without overflow\n        if gt(length, 0xffffffffffffffff) { panic_error_0x41() }\n\n        size := mul(length, 0x20)\n\n        // add length slot\n        size := add(size, 0x20)\n\n    }\n\n    function revert_error_81385d8c0b31fffe14be1da910c8bd3a80be4cfa248e04f42ec0faea3132a8ef() {\n        revert(0, 0)\n    }\n\n    // uint256[]\n    function abi_decode_available_length_t_array$_t_uint256_$dyn_memory_ptr(offset, length, end) -> array {\n        array := allocate_memory(array_allocation_size_t_array$_t_uint256_$dyn_memory_ptr(length))\n        let dst := array\n\n        mstore(array, length)\n        dst := add(array, 0x20)\n\n        let srcEnd := add(offset, mul(length, 0x20))\n        if gt(srcEnd, end) {\n            revert_error_81385d8c0b31fffe14be1da910c8bd3a80be4cfa248e04f42ec0faea3132a8ef()\n        }\n        for { let src := offset } lt(src, srcEnd) { src := add(src, 0x20) }\n        {\n\n            let elementPos := src\n\n            mstore(dst, abi_decode_t_uint256(elementPos, end))\n            dst := add(dst, 0x20)\n        }\n    }\n\n    // uint256[]\n    function abi_decode_t_array$_t_uint256_$dyn_memory_ptr(offset, end) -> array {\n        if iszero(slt(add(offset, 0x1f), end)) { revert_error_1b9f4a0a5773e33b91aa01db23bf8c55fce1411167c872835e7fa00a4f17d46d() }\n        let length := calldataload(offset)\n        array := abi_decode_available_length_t_array$_t_uint256_$dyn_memory_ptr(add(offset, 0x20), length, end)\n    }\n\n    function abi_decode_tuple_t_addresst_array$_t_uint256_$dyn_memory_ptrt_array$_t_uint256_$dyn_memory_ptr(headStart, dataEnd) -> value0, value1, value2 {\n        if slt(sub(dataEnd, headStart), 96) { revert_error_dbdddcbe895c83990c08b3492a0e83918d802a52331272ac6fdb6a7c4aea3b1b() }\n\n        {\n\n            let offset := 0\n\n            value0 := abi_decode_t_address(add(headStart, offset), dataEnd)\n        }\n\n        {\n\n            let offset := calldataload(add(headStart, 32))\n            if gt(offset, 0xffffffffffffffff) { revert_error_c1322bf8034eace5e0b5c7295db60986aa89aae5e0ea0873e4689e076861a5db() }\n\n            value1 := abi_decode_t_array$_t_uint256_$dyn_memory_ptr(add(headStart, offset), dataEnd)\n        }\n\n        {\n\n            let offset := calldataload(add(headStart, 64))\n            if gt(offset, 0xffffffffffffffff) { revert_error_c1322bf8034eace5e0b5c7295db60986aa89aae5e0ea0873e4689e076861a5db() }\n\n            value2 := abi_decode_t_array$_t_uint256_$dyn_memory_ptr(add(headStart, offset), dataEnd)\n        }\n\n    }\n\n    function abi_decode_tuple_t_addresst_array$_t_uint256_$dyn_memory_ptr(headStart, dataEnd) -> value0, value1 {\n        if slt(sub(dataEnd, headStart), 64) { revert_error_dbdddcbe895c83990c08b3492a0e83918d802a52331272ac6fdb6a7c4aea3b1b() }\n\n        {\n\n            let offset := 0\n\n            value0 := abi_decode_t_address(add(headStart, offset), dataEnd)\n        }\n\n        {\n\n            let offset := calldataload(add(headStart, 32))\n            if gt(offset, 0xffffffffffffffff) { revert_error_c1322bf8034eace5e0b5c7295db60986aa89aae5e0ea0873e4689e076861a5db() }\n\n            value1 := abi_decode_t_array$_t_uint256_$dyn_memory_ptr(add(headStart, offset), dataEnd)\n        }\n\n    }\n\n    function panic_error_0x32() {\n        mstore(0, 35408467139433450592217433187231851964531694900788300625387963629091585785856)\n        mstore(4, 0x32)\n        revert(0, 0x24)\n    }\n\n    function abi_decode_t_uint256_fromMemory(offset, end) -> value {\n        value := mload(offset)\n        validator_revert_t_uint256(value)\n    }\n\n    // uint256[]\n    function abi_decode_available_length_t_array$_t_uint256_$dyn_memory_ptr_fromMemory(offset, length, end) -> array {\n        array := allocate_memory(array_allocation_size_t_array$_t_uint256_$dyn_memory_ptr(length))\n        let dst := array\n\n        mstore(array, length)\n        dst := add(array, 0x20)\n\n        let srcEnd := add(offset, mul(length, 0x20))\n        if gt(srcEnd, end) {\n            revert_error_81385d8c0b31fffe14be1da910c8bd3a80be4cfa248e04f42ec0faea3132a8ef()\n        }\n        for { let src := offset } lt(src, srcEnd) { src := add(src, 0x20) }\n        {\n\n            let elementPos := src\n\n            mstore(dst, abi_decode_t_uint256_fromMemory(elementPos, end))\n            dst := add(dst, 0x20)\n        }\n    }\n\n    // uint256[]\n    function abi_decode_t_array$_t_uint256_$dyn_memory_ptr_fromMemory(offset, end) -> array {\n        if iszero(slt(add(offset, 0x1f), end)) { revert_error_1b9f4a0a5773e33b91aa01db23bf8c55fce1411167c872835e7fa00a4f17d46d() }\n        let length := mload(offset)\n        array := abi_decode_available_length_t_array$_t_uint256_$dyn_memory_ptr_fromMemory(add(offset, 0x20), length, end)\n    }\n\n    function abi_decode_tuple_t_array$_t_uint256_$dyn_memory_ptr_fromMemory(headStart, dataEnd) -> value0 {\n        if slt(sub(dataEnd, headStart), 32) { revert_error_dbdddcbe895c83990c08b3492a0e83918d802a52331272ac6fdb6a7c4aea3b1b() }\n\n        {\n\n            let offset := mload(add(headStart, 0))\n            if gt(offset, 0xffffffffffffffff) { revert_error_c1322bf8034eace5e0b5c7295db60986aa89aae5e0ea0873e4689e076861a5db() }\n\n            value0 := abi_decode_t_array$_t_uint256_$dyn_memory_ptr_fromMemory(add(headStart, offset), dataEnd)\n        }\n\n    }\n\n    function abi_decode_tuple_t_uint256_fromMemory(headStart, dataEnd) -> value0 {\n        if slt(sub(dataEnd, headStart), 32) { revert_error_dbdddcbe895c83990c08b3492a0e83918d802a52331272ac6fdb6a7c4aea3b1b() }\n\n        {\n\n            let offset := 0\n\n            value0 := abi_decode_t_uint256_fromMemory(add(headStart, offset), dataEnd)\n        }\n\n    }\n\n    function panic_error_0x11() {\n        mstore(0, 35408467139433450592217433187231851964531694900788300625387963629091585785856)\n        mstore(4, 0x11)\n        revert(0, 0x24)\n    }\n\n    function checked_mul_t_uint256(x, y) -> product {\n        x := cleanup_t_uint256(x)\n        y := cleanup_t_uint256(y)\n        let product_raw := mul(x, y)\n        product := cleanup_t_uint256(product_raw)\n\n        // overflow, if x != 0 and y != product/x\n        if iszero(\n            or(\n                iszero(x),\n                eq(y, div(product, x))\n            )\n        ) { panic_error_0x11() }\n\n    }\n\n    function increment_t_uint256(value) -> ret {\n        value := cleanup_t_uint256(value)\n        if eq(value, 0xffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff) { panic_error_0x11() }\n        ret := add(value, 1)\n    }\n\n    function array_storeLengthForEncoding_t_string_memory_ptr_fromStack(pos, length) -> updated_pos {\n        mstore(pos, length)\n        updated_pos := add(pos, 0x20)\n    }\n\n    function store_literal_in_memory_5824732942b65793939b349ae446a33529c5efa78f9adc0aff8550635fa44b27(memPtr) {\n\n        mstore(add(memPtr, 0), \"Vault already exists for this NF\")\n\n        mstore(add(memPtr, 32), \"T contract\")\n\n    }\n\n    function abi_encode_t_stringliteral_5824732942b65793939b349ae446a33529c5efa78f9adc0aff8550635fa44b27_to_t_string_memory_ptr_fromStack(pos) -> end {\n        pos := array_storeLengthForEncoding_t_string_memory_ptr_fromStack(pos, 42)\n        store_literal_in_memory_5824732942b65793939b349ae446a33529c5efa78f9adc0aff8550635fa44b27(pos)\n        end := add(pos, 64)\n    }\n\n    function abi_encode_tuple_t_stringliteral_5824732942b65793939b349ae446a33529c5efa78f9adc0aff8550635fa44b27__to_t_string_memory_ptr__fromStack_reversed(headStart ) -> tail {\n        tail := add(headStart, 32)\n\n        mstore(add(headStart, 0), sub(tail, headStart))\n        tail := abi_encode_t_stringliteral_5824732942b65793939b349ae446a33529c5efa78f9adc0aff8550635fa44b27_to_t_string_memory_ptr_fromStack( tail)\n\n    }\n\n    function abi_encode_t_uint256_to_t_uint256_fromStack(value, pos) {\n        mstore(pos, cleanup_t_uint256(value))\n    }\n\n    function abi_encode_tuple_t_address_t_uint256_t_address__to_t_address_t_uint256_t_address__fromStack_reversed(headStart , value2, value1, value0) -> tail {\n        tail := add(headStart, 96)\n\n        abi_encode_t_address_to_t_address_fromStack(value0,  add(headStart, 0))\n\n        abi_encode_t_uint256_to_t_uint256_fromStack(value1,  add(headStart, 32))\n\n        abi_encode_t_address_to_t_address_fromStack(value2,  add(headStart, 64))\n\n    }\n\n    function abi_encode_tuple_t_uint256_t_address_t_address__to_t_uint256_t_address_t_address__fromStack_reversed(headStart , value2, value1, value0) -> tail {\n        tail := add(headStart, 96)\n\n        abi_encode_t_uint256_to_t_uint256_fromStack(value0,  add(headStart, 0))\n\n        abi_encode_t_address_to_t_address_fromStack(value1,  add(headStart, 32))\n\n        abi_encode_t_address_to_t_address_fromStack(value2,  add(headStart, 64))\n\n    }\n\n    function store_literal_in_memory_af09f6db30e4867e53cba9916b467b745c1bb0ff7604dcbe2aeb26f6c0c4cbab(memPtr) {\n\n        mstore(add(memPtr, 0), \"Vault does not exists for this N\")\n\n        mstore(add(memPtr, 32), \"FT contract\")\n\n    }\n\n    function abi_encode_t_stringliteral_af09f6db30e4867e53cba9916b467b745c1bb0ff7604dcbe2aeb26f6c0c4cbab_to_t_string_memory_ptr_fromStack(pos) -> end {\n        pos := array_storeLengthForEncoding_t_string_memory_ptr_fromStack(pos, 43)\n        store_literal_in_memory_af09f6db30e4867e53cba9916b467b745c1bb0ff7604dcbe2aeb26f6c0c4cbab(pos)\n        end := add(pos, 64)\n    }\n\n    function abi_encode_tuple_t_stringliteral_af09f6db30e4867e53cba9916b467b745c1bb0ff7604dcbe2aeb26f6c0c4cbab__to_t_string_memory_ptr__fromStack_reversed(headStart ) -> tail {\n        tail := add(headStart, 32)\n\n        mstore(add(headStart, 0), sub(tail, headStart))\n        tail := abi_encode_t_stringliteral_af09f6db30e4867e53cba9916b467b745c1bb0ff7604dcbe2aeb26f6c0c4cbab_to_t_string_memory_ptr_fromStack( tail)\n\n    }\n\n    function store_literal_in_memory_4fa02d1b88050f6a6a5d285d3489cc4bb24e4d1924dee6d5a2f903a871e4e481(memPtr) {\n\n        mstore(add(memPtr, 0), \"Mismatched arrays\")\n\n    }\n\n    function abi_encode_t_stringliteral_4fa02d1b88050f6a6a5d285d3489cc4bb24e4d1924dee6d5a2f903a871e4e481_to_t_string_memory_ptr_fromStack(pos) -> end {\n        pos := array_storeLengthForEncoding_t_string_memory_ptr_fromStack(pos, 17)\n        store_literal_in_memory_4fa02d1b88050f6a6a5d285d3489cc4bb24e4d1924dee6d5a2f903a871e4e481(pos)\n        end := add(pos, 32)\n    }\n\n    function abi_encode_tuple_t_stringliteral_4fa02d1b88050f6a6a5d285d3489cc4bb24e4d1924dee6d5a2f903a871e4e481__to_t_string_memory_ptr__fromStack_reversed(headStart ) -> tail {\n        tail := add(headStart, 32)\n\n        mstore(add(headStart, 0), sub(tail, headStart))\n        tail := abi_encode_t_stringliteral_4fa02d1b88050f6a6a5d285d3489cc4bb24e4d1924dee6d5a2f903a871e4e481_to_t_string_memory_ptr_fromStack( tail)\n\n    }\n\n    function abi_decode_t_address_fromMemory(offset, end) -> value {\n        value := mload(offset)\n        validator_revert_t_address(value)\n    }\n\n    function abi_decode_tuple_t_address_fromMemory(headStart, dataEnd) -> value0 {\n        if slt(sub(dataEnd, headStart), 32) { revert_error_dbdddcbe895c83990c08b3492a0e83918d802a52331272ac6fdb6a7c4aea3b1b() }\n\n        {\n\n            let offset := 0\n\n            value0 := abi_decode_t_address_fromMemory(add(headStart, offset), dataEnd)\n        }\n\n    }\n\n    function store_literal_in_memory_8d454e2a084014abe0cb8b0220b87e9c52084abcf0f285c0683d2b62cc95c4d5(memPtr) {\n\n        mstore(add(memPtr, 0), \"Only the person who created vaul\")\n\n        mstore(add(memPtr, 32), \"t can deposit funds into it\")\n\n    }\n\n    function abi_encode_t_stringliteral_8d454e2a084014abe0cb8b0220b87e9c52084abcf0f285c0683d2b62cc95c4d5_to_t_string_memory_ptr_fromStack(pos) -> end {\n        pos := array_storeLengthForEncoding_t_string_memory_ptr_fromStack(pos, 59)\n        store_literal_in_memory_8d454e2a084014abe0cb8b0220b87e9c52084abcf0f285c0683d2b62cc95c4d5(pos)\n        end := add(pos, 64)\n    }\n\n    function abi_encode_tuple_t_stringliteral_8d454e2a084014abe0cb8b0220b87e9c52084abcf0f285c0683d2b62cc95c4d5__to_t_string_memory_ptr__fromStack_reversed(headStart ) -> tail {\n        tail := add(headStart, 32)\n\n        mstore(add(headStart, 0), sub(tail, headStart))\n        tail := abi_encode_t_stringliteral_8d454e2a084014abe0cb8b0220b87e9c52084abcf0f285c0683d2b62cc95c4d5_to_t_string_memory_ptr_fromStack( tail)\n\n    }\n\n    function checked_add_t_uint256(x, y) -> sum {\n        x := cleanup_t_uint256(x)\n        y := cleanup_t_uint256(y)\n        sum := add(x, y)\n\n        if gt(x, sum) { panic_error_0x11() }\n\n    }\n\n    function store_literal_in_memory_a5e89270b3c56d4b9d1cf0a951d175d259ba209e17765637f05d1ed5391db802(memPtr) {\n\n        mstore(add(memPtr, 0), \"Mismatched total deposit amount\")\n\n    }\n\n    function abi_encode_t_stringliteral_a5e89270b3c56d4b9d1cf0a951d175d259ba209e17765637f05d1ed5391db802_to_t_string_memory_ptr_fromStack(pos) -> end {\n        pos := array_storeLengthForEncoding_t_string_memory_ptr_fromStack(pos, 31)\n        store_literal_in_memory_a5e89270b3c56d4b9d1cf0a951d175d259ba209e17765637f05d1ed5391db802(pos)\n        end := add(pos, 32)\n    }\n\n    function abi_encode_tuple_t_stringliteral_a5e89270b3c56d4b9d1cf0a951d175d259ba209e17765637f05d1ed5391db802__to_t_string_memory_ptr__fromStack_reversed(headStart ) -> tail {\n        tail := add(headStart, 32)\n\n        mstore(add(headStart, 0), sub(tail, headStart))\n        tail := abi_encode_t_stringliteral_a5e89270b3c56d4b9d1cf0a951d175d259ba209e17765637f05d1ed5391db802_to_t_string_memory_ptr_fromStack( tail)\n\n    }\n\n    function abi_encode_tuple_t_uint256_t_uint256__to_t_uint256_t_uint256__fromStack_reversed(headStart , value1, value0) -> tail {\n        tail := add(headStart, 64)\n\n        abi_encode_t_uint256_to_t_uint256_fromStack(value0,  add(headStart, 0))\n\n        abi_encode_t_uint256_to_t_uint256_fromStack(value1,  add(headStart, 32))\n\n    }\n\n    function store_literal_in_memory_02b8c2fb88814cea156c3111f16cfd94d03e5ad66e454c7339e3ad4f3d17e3e7(memPtr) {\n\n        mstore(add(memPtr, 0), \"Only the person who created vaul\")\n\n        mstore(add(memPtr, 32), \"t can withdraw funds\")\n\n    }\n\n    function abi_encode_t_stringliteral_02b8c2fb88814cea156c3111f16cfd94d03e5ad66e454c7339e3ad4f3d17e3e7_to_t_string_memory_ptr_fromStack(pos) -> end {\n        pos := array_storeLengthForEncoding_t_string_memory_ptr_fromStack(pos, 52)\n        store_literal_in_memory_02b8c2fb88814cea156c3111f16cfd94d03e5ad66e454c7339e3ad4f3d17e3e7(pos)\n        end := add(pos, 64)\n    }\n\n    function abi_encode_tuple_t_stringliteral_02b8c2fb88814cea156c3111f16cfd94d03e5ad66e454c7339e3ad4f3d17e3e7__to_t_string_memory_ptr__fromStack_reversed(headStart ) -> tail {\n        tail := add(headStart, 32)\n\n        mstore(add(headStart, 0), sub(tail, headStart))\n        tail := abi_encode_t_stringliteral_02b8c2fb88814cea156c3111f16cfd94d03e5ad66e454c7339e3ad4f3d17e3e7_to_t_string_memory_ptr_fromStack( tail)\n\n    }\n\n    function cleanup_t_address_payable(value) -> cleaned {\n        cleaned := cleanup_t_uint160(value)\n    }\n\n    function abi_encode_t_address_payable_to_t_address_payable_fromStack(value, pos) {\n        mstore(pos, cleanup_t_address_payable(value))\n    }\n\n    function array_storeLengthForEncoding_t_array$_t_uint256_$dyn_memory_ptr_fromStack(pos, length) -> updated_pos {\n        mstore(pos, length)\n        updated_pos := add(pos, 0x20)\n    }\n\n    // uint256[] -> uint256[]\n    function abi_encode_t_array$_t_uint256_$dyn_memory_ptr_to_t_array$_t_uint256_$dyn_memory_ptr_fromStack(value, pos)  -> end  {\n        let length := array_length_t_array$_t_uint256_$dyn_memory_ptr(value)\n        pos := array_storeLengthForEncoding_t_array$_t_uint256_$dyn_memory_ptr_fromStack(pos, length)\n        let baseRef := array_dataslot_t_array$_t_uint256_$dyn_memory_ptr(value)\n        let srcPtr := baseRef\n        for { let i := 0 } lt(i, length) { i := add(i, 1) }\n        {\n            let elementValue0 := mload(srcPtr)\n            pos := abi_encodeUpdatedPos_t_uint256_to_t_uint256(elementValue0, pos)\n            srcPtr := array_nextElement_t_array$_t_uint256_$dyn_memory_ptr(srcPtr)\n        }\n        end := pos\n    }\n\n    function abi_encode_tuple_t_address_payable_t_array$_t_uint256_$dyn_memory_ptr__to_t_address_payable_t_array$_t_uint256_$dyn_memory_ptr__fromStack_reversed(headStart , value1, value0) -> tail {\n        tail := add(headStart, 64)\n\n        abi_encode_t_address_payable_to_t_address_payable_fromStack(value0,  add(headStart, 0))\n\n        mstore(add(headStart, 32), sub(tail, headStart))\n        tail := abi_encode_t_array$_t_uint256_$dyn_memory_ptr_to_t_array$_t_uint256_$dyn_memory_ptr_fromStack(value1,  tail)\n\n    }\n\n    function abi_encode_tuple_t_uint256__to_t_uint256__fromStack_reversed(headStart , value0) -> tail {\n        tail := add(headStart, 32)\n\n        abi_encode_t_uint256_to_t_uint256_fromStack(value0,  add(headStart, 0))\n\n    }\n\n    function store_literal_in_memory_8f0021d44dc3c6a184f0ca9bb2b581abde8876c7afea5879ec72cd3feb6a7120(memPtr) {\n\n        mstore(add(memPtr, 0), \"You are not the owner of this to\")\n\n        mstore(add(memPtr, 32), \"ken!\")\n\n    }\n\n    function abi_encode_t_stringliteral_8f0021d44dc3c6a184f0ca9bb2b581abde8876c7afea5879ec72cd3feb6a7120_to_t_string_memory_ptr_fromStack(pos) -> end {\n        pos := array_storeLengthForEncoding_t_string_memory_ptr_fromStack(pos, 36)\n        store_literal_in_memory_8f0021d44dc3c6a184f0ca9bb2b581abde8876c7afea5879ec72cd3feb6a7120(pos)\n        end := add(pos, 64)\n    }\n\n    function abi_encode_tuple_t_stringliteral_8f0021d44dc3c6a184f0ca9bb2b581abde8876c7afea5879ec72cd3feb6a7120__to_t_string_memory_ptr__fromStack_reversed(headStart ) -> tail {\n        tail := add(headStart, 32)\n\n        mstore(add(headStart, 0), sub(tail, headStart))\n        tail := abi_encode_t_stringliteral_8f0021d44dc3c6a184f0ca9bb2b581abde8876c7afea5879ec72cd3feb6a7120_to_t_string_memory_ptr_fromStack( tail)\n\n    }\n\n    function store_literal_in_memory_4f4fa40674b63d9f789043d4550fa5f5291b0482fc45cbbc7ace27126a67c59b(memPtr) {\n\n        mstore(add(memPtr, 0), \"Contract not approved to burn to\")\n\n        mstore(add(memPtr, 32), \"ken\")\n\n    }\n\n    function abi_encode_t_stringliteral_4f4fa40674b63d9f789043d4550fa5f5291b0482fc45cbbc7ace27126a67c59b_to_t_string_memory_ptr_fromStack(pos) -> end {\n        pos := array_storeLengthForEncoding_t_string_memory_ptr_fromStack(pos, 35)\n        store_literal_in_memory_4f4fa40674b63d9f789043d4550fa5f5291b0482fc45cbbc7ace27126a67c59b(pos)\n        end := add(pos, 64)\n    }\n\n    function abi_encode_tuple_t_stringliteral_4f4fa40674b63d9f789043d4550fa5f5291b0482fc45cbbc7ace27126a67c59b__to_t_string_memory_ptr__fromStack_reversed(headStart ) -> tail {\n        tail := add(headStart, 32)\n\n        mstore(add(headStart, 0), sub(tail, headStart))\n        tail := abi_encode_t_stringliteral_4f4fa40674b63d9f789043d4550fa5f5291b0482fc45cbbc7ace27126a67c59b_to_t_string_memory_ptr_fromStack( tail)\n\n    }\n\n    function abi_encode_tuple_t_address_payable_t_uint256__to_t_address_payable_t_uint256__fromStack_reversed(headStart , value1, value0) -> tail {\n        tail := add(headStart, 64)\n\n        abi_encode_t_address_payable_to_t_address_payable_fromStack(value0,  add(headStart, 0))\n\n        abi_encode_t_uint256_to_t_uint256_fromStack(value1,  add(headStart, 32))\n\n    }\n\n}\n",
				"id": 13,
				"language": "Yul",
				"name": "#utility.yul"
			}
		],
		"immutableReferences": {},
		"linkReferences": {},
		"object": "608060405260043610620000865760003560e01c80637f30952311620000555780637f3095231462000171578063a3648ec01462000191578063aad3ec9614620001b1578063f7c7349014620001d15762000086565b80631cb3d314146200008b578063533092ef14620000cf5780635f76dfc014620000ff578063622bc90e146200012d575b600080fd5b3480156200009857600080fd5b50620000b76004803603810190620000b19190620013c4565b62000215565b604051620000c6919062001407565b60405180910390f35b348015620000dc57600080fd5b50620000e762000248565b604051620000f6919062001648565b60405180910390f35b3480156200010c57600080fd5b506200012b60048036038101906200012591906200169d565b620005af565b005b3480156200013a57600080fd5b50620001596004803603810190620001539190620013c4565b62000884565b60405162000168919062001407565b60405180910390f35b6200018f600480360381019062000189919062001859565b620008ed565b005b620001af6004803603810190620001a99190620018f3565b62000cb7565b005b620001cf6004803603810190620001c991906200169d565b62000ef5565b005b348015620001de57600080fd5b50620001fd6004803603810190620001f791906200169d565b620012b0565b6040516200020c919062001407565b60405180910390f35b60016020528060005260406000206000915054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b60606000600260003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000208054806020026020016040519081016040528092919081815260200182805480156200030d57602002820191906000526020600020905b8160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019060010190808311620002c2575b505050505090506000815167ffffffffffffffff811115620003345762000333620016fa565b5b6040519080825280602002602001820160405280156200037157816020015b6200035d620012ff565b815260200190600190039081620003535790505b50905060005b8251811015620005a6576000600160008584815181106200039d576200039c62001959565b5b602002602001015173ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16905060008173ffffffffffffffffffffffffffffffffffffffff166367f718a96040518163ffffffff1660e01b8152600401600060405180830381865afa15801562000450573d6000803e3d6000fd5b505050506040513d6000823e3d601f19601f820116820180604052508101906200047b919062001a46565b9050600060405180608001604052808473ffffffffffffffffffffffffffffffffffffffff163181526020018473ffffffffffffffffffffffffffffffffffffffff16631aa430786040518163ffffffff1660e01b8152600401602060405180830381865afa158015620004f3573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019062000519919062001a97565b600262000527919062001af8565b815260200183815260200187868151811062000548576200054762001959565b5b602002602001015173ffffffffffffffffffffffffffffffffffffffff1681525090508085858151811062000582576200058162001959565b5b602002602001018190525050505080806200059d9062001b43565b91505062000377565b50809250505090565b600073ffffffffffffffffffffffffffffffffffffffff16600160008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff161462000680576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401620006779062001c17565b60405180910390fd5b600082823360405162000693906200133d565b620006a19392919062001c4a565b604051809103906000f080158015620006be573d6000803e3d6000fd5b5090506000819080600181540180825580915050600190039060005260206000200160009091909190916101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555080600160008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff160217905550600260003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020839080600181540180825580915050600190039060005260206000200160009091909190916101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055507fa8596cc4a052ecc7656e9ca0fb7a10472573699e3aa34ac5659bc37c1b0a44fc428285604051620008779392919062001c87565b60405180910390a1505050565b6000600160008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff169050919050565b600073ffffffffffffffffffffffffffffffffffffffff16600160008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1603620009be576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401620009b59062001d3a565b60405180910390fd5b805182511462000a05576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401620009fc9062001dac565b60405180910390fd5b6000349050600062000a178562000884565b905060008190503373ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff1663f851a4406040518163ffffffff1660e01b8152600401602060405180830381865afa15801562000a81573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019062000aa7919062001de5565b73ffffffffffffffffffffffffffffffffffffffff161462000b00576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040162000af79062001e8d565b60405180910390fd5b6000805b865181101562000b515785818151811062000b245762000b2362001959565b5b60200260200101518262000b39919062001eaf565b9150808062000b489062001b43565b91505062000b04565b5080841462000b97576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040162000b8e9062001f3a565b60405180910390fd5b60005b865181101562000c65578273ffffffffffffffffffffffffffffffffffffffff1663a40398a688838151811062000bd65762000bd562001959565b5b602002602001015188848151811062000bf45762000bf362001959565b5b60200260200101516040518363ffffffff1660e01b815260040162000c1b92919062001f5c565b600060405180830381600087803b15801562000c3657600080fd5b505af115801562000c4b573d6000803e3d6000fd5b50505050808062000c5c9062001b43565b91505062000b9a565b508273ffffffffffffffffffffffffffffffffffffffff166108fc829081150290604051600060405180830381858888f1935050505015801562000cad573d6000803e3d6000fd5b5050505050505050565b600073ffffffffffffffffffffffffffffffffffffffff16600160008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff160362000d88576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040162000d7f9062001d3a565b60405180910390fd5b600062000d958362000884565b905060008190503373ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff1663f851a4406040518163ffffffff1660e01b8152600401602060405180830381865afa15801562000dff573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019062000e25919062001de5565b73ffffffffffffffffffffffffffffffffffffffff161462000e7e576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040162000e759062001fff565b60405180910390fd5b8073ffffffffffffffffffffffffffffffffffffffff16638293744b33856040518363ffffffff1660e01b815260040162000ebb929190620020c1565b600060405180830381600087803b15801562000ed657600080fd5b505af115801562000eeb573d6000803e3d6000fd5b5050505050505050565b600073ffffffffffffffffffffffffffffffffffffffff16600160008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff160362000fc6576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040162000fbd9062001d3a565b60405180910390fd5b6000829050600062000fd88462000884565b905060008273ffffffffffffffffffffffffffffffffffffffff16636352211e856040518263ffffffff1660e01b8152600401620010179190620020f5565b602060405180830381865afa15801562001035573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906200105b919062001de5565b90503373ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff1614620010ce576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401620010c59062002188565b60405180910390fd5b3073ffffffffffffffffffffffffffffffffffffffff168373ffffffffffffffffffffffffffffffffffffffff1663081812fc866040518263ffffffff1660e01b8152600401620011209190620020f5565b602060405180830381865afa1580156200113e573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019062001164919062001de5565b73ffffffffffffffffffffffffffffffffffffffff1614620011bd576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401620011b49062002220565b60405180910390fd5b8273ffffffffffffffffffffffffffffffffffffffff166342966c68856040518263ffffffff1660e01b8152600401620011f89190620020f5565b600060405180830381600087803b1580156200121357600080fd5b505af115801562001228573d6000803e3d6000fd5b50505050600033905060008390508073ffffffffffffffffffffffffffffffffffffffff1663ed2b40ea83886040518363ffffffff1660e01b81526004016200127392919062002242565b600060405180830381600087803b1580156200128e57600080fd5b505af1158015620012a3573d6000803e3d6000fd5b5050505050505050505050565b60026020528160005260406000208181548110620012cd57600080fd5b906000526020600020016000915091509054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b6040518060800160405280600081526020016000815260200160608152602001600073ffffffffffffffffffffffffffffffffffffffff1681525090565b61121f806200227083390190565b6000604051905090565b600080fd5b600080fd5b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b60006200138c826200135f565b9050919050565b6200139e816200137f565b8114620013aa57600080fd5b50565b600081359050620013be8162001393565b92915050565b600060208284031215620013dd57620013dc62001355565b5b6000620013ed84828501620013ad565b91505092915050565b62001401816200137f565b82525050565b60006020820190506200141e6000830184620013f6565b92915050565b600081519050919050565b600082825260208201905092915050565b6000819050602082019050919050565b6000819050919050565b620014658162001450565b82525050565b600081519050919050565b600082825260208201905092915050565b6000819050602082019050919050565b6000620014a583836200145a565b60208301905092915050565b6000602082019050919050565b6000620014cb826200146b565b620014d7818562001476565b9350620014e48362001487565b8060005b838110156200151b578151620014ff888262001497565b97506200150c83620014b1565b925050600181019050620014e8565b5085935050505092915050565b62001533816200137f565b82525050565b60006080830160008301516200155360008601826200145a565b5060208301516200156860208601826200145a565b5060408301518482036040860152620015828282620014be565b915050606083015162001599606086018262001528565b508091505092915050565b6000620015b2838362001539565b905092915050565b6000602082019050919050565b6000620015d48262001424565b620015e081856200142f565b935083602082028501620015f48562001440565b8060005b85811015620016365784840389528151620016148582620015a4565b94506200162183620015ba565b925060208a01995050600181019050620015f8565b50829750879550505050505092915050565b60006020820190508181036000830152620016648184620015c7565b905092915050565b620016778162001450565b81146200168357600080fd5b50565b60008135905062001697816200166c565b92915050565b60008060408385031215620016b757620016b662001355565b5b6000620016c785828601620013ad565b9250506020620016da8582860162001686565b9150509250929050565b600080fd5b6000601f19601f8301169050919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b6200173482620016e9565b810181811067ffffffffffffffff82111715620017565762001755620016fa565b5b80604052505050565b60006200176b6200134b565b905062001779828262001729565b919050565b600067ffffffffffffffff8211156200179c576200179b620016fa565b5b602082029050602081019050919050565b600080fd5b6000620017c9620017c3846200177e565b6200175f565b90508083825260208201905060208402830185811115620017ef57620017ee620017ad565b5b835b818110156200181c578062001807888262001686565b845260208401935050602081019050620017f1565b5050509392505050565b600082601f8301126200183e576200183d620016e4565b5b813562001850848260208601620017b2565b91505092915050565b60008060006060848603121562001875576200187462001355565b5b60006200188586828701620013ad565b935050602084013567ffffffffffffffff811115620018a957620018a86200135a565b5b620018b78682870162001826565b925050604084013567ffffffffffffffff811115620018db57620018da6200135a565b5b620018e98682870162001826565b9150509250925092565b600080604083850312156200190d576200190c62001355565b5b60006200191d85828601620013ad565b925050602083013567ffffffffffffffff8111156200194157620019406200135a565b5b6200194f8582860162001826565b9150509250929050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b60008151905062001999816200166c565b92915050565b6000620019b6620019b0846200177e565b6200175f565b90508083825260208201905060208402830185811115620019dc57620019db620017ad565b5b835b8181101562001a095780620019f4888262001988565b845260208401935050602081019050620019de565b5050509392505050565b600082601f83011262001a2b5762001a2a620016e4565b5b815162001a3d8482602086016200199f565b91505092915050565b60006020828403121562001a5f5762001a5e62001355565b5b600082015167ffffffffffffffff81111562001a805762001a7f6200135a565b5b62001a8e8482850162001a13565b91505092915050565b60006020828403121562001ab05762001aaf62001355565b5b600062001ac08482850162001988565b91505092915050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b600062001b058262001450565b915062001b128362001450565b925082820262001b228162001450565b9150828204841483151762001b3c5762001b3b62001ac9565b5b5092915050565b600062001b508262001450565b91507fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff820362001b855762001b8462001ac9565b5b600182019050919050565b600082825260208201905092915050565b7f5661756c7420616c72656164792065786973747320666f722074686973204e4660008201527f5420636f6e747261637400000000000000000000000000000000000000000000602082015250565b600062001bff602a8362001b90565b915062001c0c8262001ba1565b604082019050919050565b6000602082019050818103600083015262001c328162001bf0565b9050919050565b62001c448162001450565b82525050565b600060608201905062001c616000830186620013f6565b62001c70602083018562001c39565b62001c7f6040830184620013f6565b949350505050565b600060608201905062001c9e600083018662001c39565b62001cad6020830185620013f6565b62001cbc6040830184620013f6565b949350505050565b7f5661756c7420646f6573206e6f742065786973747320666f722074686973204e60008201527f465420636f6e7472616374000000000000000000000000000000000000000000602082015250565b600062001d22602b8362001b90565b915062001d2f8262001cc4565b604082019050919050565b6000602082019050818103600083015262001d558162001d13565b9050919050565b7f4d69736d61746368656420617272617973000000000000000000000000000000600082015250565b600062001d9460118362001b90565b915062001da18262001d5c565b602082019050919050565b6000602082019050818103600083015262001dc78162001d85565b9050919050565b60008151905062001ddf8162001393565b92915050565b60006020828403121562001dfe5762001dfd62001355565b5b600062001e0e8482850162001dce565b91505092915050565b7f4f6e6c792074686520706572736f6e2077686f2063726561746564207661756c60008201527f742063616e206465706f7369742066756e647320696e746f2069740000000000602082015250565b600062001e75603b8362001b90565b915062001e828262001e17565b604082019050919050565b6000602082019050818103600083015262001ea88162001e66565b9050919050565b600062001ebc8262001450565b915062001ec98362001450565b925082820190508082111562001ee45762001ee362001ac9565b5b92915050565b7f4d69736d61746368656420746f74616c206465706f73697420616d6f756e7400600082015250565b600062001f22601f8362001b90565b915062001f2f8262001eea565b602082019050919050565b6000602082019050818103600083015262001f558162001f13565b9050919050565b600060408201905062001f73600083018562001c39565b62001f82602083018462001c39565b9392505050565b7f4f6e6c792074686520706572736f6e2077686f2063726561746564207661756c60008201527f742063616e2077697468647261772066756e6473000000000000000000000000602082015250565b600062001fe760348362001b90565b915062001ff48262001f89565b604082019050919050565b600060208201905081810360008301526200201a8162001fd8565b9050919050565b60006200202e826200135f565b9050919050565b620020408162002021565b82525050565b600082825260208201905092915050565b600062002064826200146b565b62002070818562002046565b93506200207d8362001487565b8060005b83811015620020b457815162002098888262001497565b9750620020a583620014b1565b92505060018101905062002081565b5085935050505092915050565b6000604082019050620020d8600083018562002035565b8181036020830152620020ec818462002057565b90509392505050565b60006020820190506200210c600083018462001c39565b92915050565b7f596f7520617265206e6f7420746865206f776e6572206f66207468697320746f60008201527f6b656e2100000000000000000000000000000000000000000000000000000000602082015250565b60006200217060248362001b90565b91506200217d8262002112565b604082019050919050565b60006020820190508181036000830152620021a38162002161565b9050919050565b7f436f6e7472616374206e6f7420617070726f76656420746f206275726e20746f60008201527f6b656e0000000000000000000000000000000000000000000000000000000000602082015250565b60006200220860238362001b90565b91506200221582620021aa565b604082019050919050565b600060208201905081810360008301526200223b81620021f9565b9050919050565b600060408201905062002259600083018562002035565b62002268602083018462001c39565b939250505056fe60806040523480156200001157600080fd5b506040516200121f3803806200121f8339818101604052810190620000379190620001b5565b826000806101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055508160028190555080600560006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055504260038190555033600460006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555050505062000211565b600080fd5b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b6000620001428262000115565b9050919050565b620001548162000135565b81146200016057600080fd5b50565b600081519050620001748162000149565b92915050565b6000819050919050565b6200018f816200017a565b81146200019b57600080fd5b50565b600081519050620001af8162000184565b92915050565b600080600060608486031215620001d157620001d062000110565b5b6000620001e18682870162000163565b9350506020620001f4868287016200019e565b9250506040620002078682870162000163565b9150509250925092565b610ffe80620002216000396000f3fe6080604052600436106100a05760003560e01c80638293744b116100645780638293744b14610192578063a40398a6146101ae578063d58778d6146101d7578063d8270dce14610214578063ed2b40ea1461023f578063f851a4401461025b576100a7565b80631aa43078146100a957806331c2273b146100d4578063505658d9146100ff5780635e4f6cab1461012a57806367f718a914610167576100a7565b366100a757005b005b3480156100b557600080fd5b506100be610286565b6040516100cb91906108a0565b60405180910390f35b3480156100e057600080fd5b506100e961028c565b6040516100f691906108fc565b60405180910390f35b34801561010b57600080fd5b506101146102b0565b60405161012191906108fc565b60405180910390f35b34801561013657600080fd5b50610151600480360381019061014c9190610957565b6102d6565b60405161015e91906108a0565b60405180910390f35b34801561017357600080fd5b5061017c6102ee565b6040516101899190610a42565b60405180910390f35b6101ac60048036038101906101a79190610bfb565b610346565b005b3480156101ba57600080fd5b506101d560048036038101906101d09190610c57565b61057f565b005b3480156101e357600080fd5b506101fe60048036038101906101f99190610957565b610682565b60405161020b91906108a0565b60405180910390f35b34801561022057600080fd5b506102296106a6565b60405161023691906108a0565b60405180910390f35b61025960048036038101906102549190610c97565b6106ac565b005b34801561026757600080fd5b50610270610861565b60405161027d91906108fc565b60405180910390f35b60025481565b60008054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b600460009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b60016020528060005260406000206000915090505481565b6060600680548060200260200160405190810160405280929190818152602001828054801561033c57602002820191906000526020600020905b815481526020019060010190808311610328575b5050505050905090565b600460009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff16146103d6576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016103cd90610d5a565b60405180910390fd5b60025460026103e59190610da9565b600354426103f39190610deb565b1015610434576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161042b90610e91565b60405180910390fd5b6000805b82518110156105325760006001600085848151811061045a57610459610eb1565b5b6020026020010151815260200190815260200160002054116104b1576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016104a890610f2c565b60405180910390fd5b600160008483815181106104c8576104c7610eb1565b5b6020026020010151815260200190815260200160002054826104ea9190610f4c565b915060006001600085848151811061050557610504610eb1565b5b6020026020010151815260200190815260200160002081905550808061052a90610f80565b915050610438565b508273ffffffffffffffffffffffffffffffffffffffff166108fc829081150290604051600060405180830381858888f19350505050158015610579573d6000803e3d6000fd5b50505050565b600460009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff161461060f576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161060690610d5a565b60405180910390fd5b60006001600084815260200190815260200160002054036106545760068290806001815401808255809150506001900390600052602060002001600090919091909150555b806001600084815260200190815260200160002060008282546106779190610f4c565b925050819055505050565b6006818154811061069257600080fd5b906000526020600020016000915090505481565b60035481565b600460009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff161461073c576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161073390610d5a565b60405180910390fd5b6000600160008381526020019081526020016000205411610792576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161078990610f2c565b60405180910390fd5b600254600354426107a39190610deb565b10156107e4576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016107db90610e91565b60405180910390fd5b600060016000838152602001908152602001600020549050600060016000848152602001908152602001600020819055508273ffffffffffffffffffffffffffffffffffffffff166108fc829081150290604051600060405180830381858888f1935050505015801561085b573d6000803e3d6000fd5b50505050565b600560009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b6000819050919050565b61089a81610887565b82525050565b60006020820190506108b56000830184610891565b92915050565b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b60006108e6826108bb565b9050919050565b6108f6816108db565b82525050565b600060208201905061091160008301846108ed565b92915050565b6000604051905090565b600080fd5b600080fd5b61093481610887565b811461093f57600080fd5b50565b6000813590506109518161092b565b92915050565b60006020828403121561096d5761096c610921565b5b600061097b84828501610942565b91505092915050565b600081519050919050565b600082825260208201905092915050565b6000819050602082019050919050565b6109b981610887565b82525050565b60006109cb83836109b0565b60208301905092915050565b6000602082019050919050565b60006109ef82610984565b6109f9818561098f565b9350610a04836109a0565b8060005b83811015610a35578151610a1c88826109bf565b9750610a27836109d7565b925050600181019050610a08565b5085935050505092915050565b60006020820190508181036000830152610a5c81846109e4565b905092915050565b6000610a6f826108bb565b9050919050565b610a7f81610a64565b8114610a8a57600080fd5b50565b600081359050610a9c81610a76565b92915050565b600080fd5b6000601f19601f8301169050919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b610af082610aa7565b810181811067ffffffffffffffff82111715610b0f57610b0e610ab8565b5b80604052505050565b6000610b22610917565b9050610b2e8282610ae7565b919050565b600067ffffffffffffffff821115610b4e57610b4d610ab8565b5b602082029050602081019050919050565b600080fd5b6000610b77610b7284610b33565b610b18565b90508083825260208201905060208402830185811115610b9a57610b99610b5f565b5b835b81811015610bc35780610baf8882610942565b845260208401935050602081019050610b9c565b5050509392505050565b600082601f830112610be257610be1610aa2565b5b8135610bf2848260208601610b64565b91505092915050565b60008060408385031215610c1257610c11610921565b5b6000610c2085828601610a8d565b925050602083013567ffffffffffffffff811115610c4157610c40610926565b5b610c4d85828601610bcd565b9150509250929050565b60008060408385031215610c6e57610c6d610921565b5b6000610c7c85828601610942565b9250506020610c8d85828601610942565b9150509250929050565b60008060408385031215610cae57610cad610921565b5b6000610cbc85828601610a8d565b9250506020610ccd85828601610942565b9150509250929050565b600082825260208201905092915050565b7f4f6e6c7920426974737572616e636520636f6e74726163742063616e2063616c60008201527f6c20746869732066756e6374696f6e0000000000000000000000000000000000602082015250565b6000610d44602f83610cd7565b9150610d4f82610ce8565b604082019050919050565b60006020820190508181036000830152610d7381610d37565b9050919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b6000610db482610887565b9150610dbf83610887565b9250828202610dcd81610887565b91508282048414831517610de457610de3610d7a565b5b5092915050565b6000610df682610887565b9150610e0183610887565b9250828203905081811115610e1957610e18610d7a565b5b92915050565b7f43616e6e6f74206163636573732066756e6374696f6e206265666f726520746860008201527f65206d696e696d756d2074696d65206861732070617373656400000000000000602082015250565b6000610e7b603983610cd7565b9150610e8682610e1f565b604082019050919050565b60006020820190508181036000830152610eaa81610e6e565b9050919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b7f4e6f2062616c616e636520666f72207468697320746f6b656e49440000000000600082015250565b6000610f16601b83610cd7565b9150610f2182610ee0565b602082019050919050565b60006020820190508181036000830152610f4581610f09565b9050919050565b6000610f5782610887565b9150610f6283610887565b9250828201905080821115610f7a57610f79610d7a565b5b92915050565b6000610f8b82610887565b91507fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff8203610fbd57610fbc610d7a565b5b60018201905091905056fea264697066735822122011a10ff03714d958d5e29459cfbe1e6c94ebc24593150cd74968d15922ca2c4964736f6c63430008120033a2646970667358221220f9d91ebbc88cb5d1f59f55bb9a1a28895dbc444bd4b85d62c925d516aa83f4fc64736f6c63430008120033",
		"opcodes": "PUSH1 0x80 PUSH1 0x40 MSTORE PUSH1 0x4 CALLDATASIZE LT PUSH3 0x86 JUMPI PUSH1 0x0 CALLDATALOAD PUSH1 0xE0 SHR DUP1 PUSH4 0x7F309523 GT PUSH3 0x55 JUMPI DUP1 PUSH4 0x7F309523 EQ PUSH3 0x171 JUMPI DUP1 PUSH4 0xA3648EC0 EQ PUSH3 0x191 JUMPI DUP1 PUSH4 0xAAD3EC96 EQ PUSH3 0x1B1 JUMPI DUP1 PUSH4 0xF7C73490 EQ PUSH3 0x1D1 JUMPI PUSH3 0x86 JUMP JUMPDEST DUP1 PUSH4 0x1CB3D314 EQ PUSH3 0x8B JUMPI DUP1 PUSH4 0x533092EF EQ PUSH3 0xCF JUMPI DUP1 PUSH4 0x5F76DFC0 EQ PUSH3 0xFF JUMPI DUP1 PUSH4 0x622BC90E EQ PUSH3 0x12D JUMPI JUMPDEST PUSH1 0x0 DUP1 REVERT JUMPDEST CALLVALUE DUP1 ISZERO PUSH3 0x98 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH3 0xB7 PUSH1 0x4 DUP1 CALLDATASIZE SUB DUP2 ADD SWAP1 PUSH3 0xB1 SWAP2 SWAP1 PUSH3 0x13C4 JUMP JUMPDEST PUSH3 0x215 JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH3 0xC6 SWAP2 SWAP1 PUSH3 0x1407 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 RETURN JUMPDEST CALLVALUE DUP1 ISZERO PUSH3 0xDC JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH3 0xE7 PUSH3 0x248 JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH3 0xF6 SWAP2 SWAP1 PUSH3 0x1648 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 RETURN JUMPDEST CALLVALUE DUP1 ISZERO PUSH3 0x10C JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH3 0x12B PUSH1 0x4 DUP1 CALLDATASIZE SUB DUP2 ADD SWAP1 PUSH3 0x125 SWAP2 SWAP1 PUSH3 0x169D JUMP JUMPDEST PUSH3 0x5AF JUMP JUMPDEST STOP JUMPDEST CALLVALUE DUP1 ISZERO PUSH3 0x13A JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH3 0x159 PUSH1 0x4 DUP1 CALLDATASIZE SUB DUP2 ADD SWAP1 PUSH3 0x153 SWAP2 SWAP1 PUSH3 0x13C4 JUMP JUMPDEST PUSH3 0x884 JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH3 0x168 SWAP2 SWAP1 PUSH3 0x1407 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 RETURN JUMPDEST PUSH3 0x18F PUSH1 0x4 DUP1 CALLDATASIZE SUB DUP2 ADD SWAP1 PUSH3 0x189 SWAP2 SWAP1 PUSH3 0x1859 JUMP JUMPDEST PUSH3 0x8ED JUMP JUMPDEST STOP JUMPDEST PUSH3 0x1AF PUSH1 0x4 DUP1 CALLDATASIZE SUB DUP2 ADD SWAP1 PUSH3 0x1A9 SWAP2 SWAP1 PUSH3 0x18F3 JUMP JUMPDEST PUSH3 0xCB7 JUMP JUMPDEST STOP JUMPDEST PUSH3 0x1CF PUSH1 0x4 DUP1 CALLDATASIZE SUB DUP2 ADD SWAP1 PUSH3 0x1C9 SWAP2 SWAP1 PUSH3 0x169D JUMP JUMPDEST PUSH3 0xEF5 JUMP JUMPDEST STOP JUMPDEST CALLVALUE DUP1 ISZERO PUSH3 0x1DE JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH3 0x1FD PUSH1 0x4 DUP1 CALLDATASIZE SUB DUP2 ADD SWAP1 PUSH3 0x1F7 SWAP2 SWAP1 PUSH3 0x169D JUMP JUMPDEST PUSH3 0x12B0 JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH3 0x20C SWAP2 SWAP1 PUSH3 0x1407 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 RETURN JUMPDEST PUSH1 0x1 PUSH1 0x20 MSTORE DUP1 PUSH1 0x0 MSTORE PUSH1 0x40 PUSH1 0x0 KECCAK256 PUSH1 0x0 SWAP2 POP SLOAD SWAP1 PUSH2 0x100 EXP SWAP1 DIV PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP2 JUMP JUMPDEST PUSH1 0x60 PUSH1 0x0 PUSH1 0x2 PUSH1 0x0 CALLER PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP2 MSTORE PUSH1 0x20 ADD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 KECCAK256 DUP1 SLOAD DUP1 PUSH1 0x20 MUL PUSH1 0x20 ADD PUSH1 0x40 MLOAD SWAP1 DUP2 ADD PUSH1 0x40 MSTORE DUP1 SWAP3 SWAP2 SWAP1 DUP2 DUP2 MSTORE PUSH1 0x20 ADD DUP3 DUP1 SLOAD DUP1 ISZERO PUSH3 0x30D JUMPI PUSH1 0x20 MUL DUP3 ADD SWAP2 SWAP1 PUSH1 0x0 MSTORE PUSH1 0x20 PUSH1 0x0 KECCAK256 SWAP1 JUMPDEST DUP2 PUSH1 0x0 SWAP1 SLOAD SWAP1 PUSH2 0x100 EXP SWAP1 DIV PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP2 MSTORE PUSH1 0x20 ADD SWAP1 PUSH1 0x1 ADD SWAP1 DUP1 DUP4 GT PUSH3 0x2C2 JUMPI JUMPDEST POP POP POP POP POP SWAP1 POP PUSH1 0x0 DUP2 MLOAD PUSH8 0xFFFFFFFFFFFFFFFF DUP2 GT ISZERO PUSH3 0x334 JUMPI PUSH3 0x333 PUSH3 0x16FA JUMP JUMPDEST JUMPDEST PUSH1 0x40 MLOAD SWAP1 DUP1 DUP3 MSTORE DUP1 PUSH1 0x20 MUL PUSH1 0x20 ADD DUP3 ADD PUSH1 0x40 MSTORE DUP1 ISZERO PUSH3 0x371 JUMPI DUP2 PUSH1 0x20 ADD JUMPDEST PUSH3 0x35D PUSH3 0x12FF JUMP JUMPDEST DUP2 MSTORE PUSH1 0x20 ADD SWAP1 PUSH1 0x1 SWAP1 SUB SWAP1 DUP2 PUSH3 0x353 JUMPI SWAP1 POP JUMPDEST POP SWAP1 POP PUSH1 0x0 JUMPDEST DUP3 MLOAD DUP2 LT ISZERO PUSH3 0x5A6 JUMPI PUSH1 0x0 PUSH1 0x1 PUSH1 0x0 DUP6 DUP5 DUP2 MLOAD DUP2 LT PUSH3 0x39D JUMPI PUSH3 0x39C PUSH3 0x1959 JUMP JUMPDEST JUMPDEST PUSH1 0x20 MUL PUSH1 0x20 ADD ADD MLOAD PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP2 MSTORE PUSH1 0x20 ADD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 KECCAK256 PUSH1 0x0 SWAP1 SLOAD SWAP1 PUSH2 0x100 EXP SWAP1 DIV PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND SWAP1 POP PUSH1 0x0 DUP2 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH4 0x67F718A9 PUSH1 0x40 MLOAD DUP2 PUSH4 0xFFFFFFFF AND PUSH1 0xE0 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH1 0x0 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 DUP7 GAS STATICCALL ISZERO DUP1 ISZERO PUSH3 0x450 JUMPI RETURNDATASIZE PUSH1 0x0 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH1 0x0 REVERT JUMPDEST POP POP POP POP PUSH1 0x40 MLOAD RETURNDATASIZE PUSH1 0x0 DUP3 RETURNDATACOPY RETURNDATASIZE PUSH1 0x1F NOT PUSH1 0x1F DUP3 ADD AND DUP3 ADD DUP1 PUSH1 0x40 MSTORE POP DUP2 ADD SWAP1 PUSH3 0x47B SWAP2 SWAP1 PUSH3 0x1A46 JUMP JUMPDEST SWAP1 POP PUSH1 0x0 PUSH1 0x40 MLOAD DUP1 PUSH1 0x80 ADD PUSH1 0x40 MSTORE DUP1 DUP5 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND BALANCE DUP2 MSTORE PUSH1 0x20 ADD DUP5 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH4 0x1AA43078 PUSH1 0x40 MLOAD DUP2 PUSH4 0xFFFFFFFF AND PUSH1 0xE0 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH1 0x20 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 DUP7 GAS STATICCALL ISZERO DUP1 ISZERO PUSH3 0x4F3 JUMPI RETURNDATASIZE PUSH1 0x0 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH1 0x0 REVERT JUMPDEST POP POP POP POP PUSH1 0x40 MLOAD RETURNDATASIZE PUSH1 0x1F NOT PUSH1 0x1F DUP3 ADD AND DUP3 ADD DUP1 PUSH1 0x40 MSTORE POP DUP2 ADD SWAP1 PUSH3 0x519 SWAP2 SWAP1 PUSH3 0x1A97 JUMP JUMPDEST PUSH1 0x2 PUSH3 0x527 SWAP2 SWAP1 PUSH3 0x1AF8 JUMP JUMPDEST DUP2 MSTORE PUSH1 0x20 ADD DUP4 DUP2 MSTORE PUSH1 0x20 ADD DUP8 DUP7 DUP2 MLOAD DUP2 LT PUSH3 0x548 JUMPI PUSH3 0x547 PUSH3 0x1959 JUMP JUMPDEST JUMPDEST PUSH1 0x20 MUL PUSH1 0x20 ADD ADD MLOAD PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP2 MSTORE POP SWAP1 POP DUP1 DUP6 DUP6 DUP2 MLOAD DUP2 LT PUSH3 0x582 JUMPI PUSH3 0x581 PUSH3 0x1959 JUMP JUMPDEST JUMPDEST PUSH1 0x20 MUL PUSH1 0x20 ADD ADD DUP2 SWAP1 MSTORE POP POP POP POP DUP1 DUP1 PUSH3 0x59D SWAP1 PUSH3 0x1B43 JUMP JUMPDEST SWAP2 POP POP PUSH3 0x377 JUMP JUMPDEST POP DUP1 SWAP3 POP POP POP SWAP1 JUMP JUMPDEST PUSH1 0x0 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH1 0x1 PUSH1 0x0 DUP5 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP2 MSTORE PUSH1 0x20 ADD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 KECCAK256 PUSH1 0x0 SWAP1 SLOAD SWAP1 PUSH2 0x100 EXP SWAP1 DIV PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND EQ PUSH3 0x680 JUMPI PUSH1 0x40 MLOAD PUSH32 0x8C379A000000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD PUSH3 0x677 SWAP1 PUSH3 0x1C17 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST PUSH1 0x0 DUP3 DUP3 CALLER PUSH1 0x40 MLOAD PUSH3 0x693 SWAP1 PUSH3 0x133D JUMP JUMPDEST PUSH3 0x6A1 SWAP4 SWAP3 SWAP2 SWAP1 PUSH3 0x1C4A JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 PUSH1 0x0 CREATE DUP1 ISZERO DUP1 ISZERO PUSH3 0x6BE JUMPI RETURNDATASIZE PUSH1 0x0 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH1 0x0 REVERT JUMPDEST POP SWAP1 POP PUSH1 0x0 DUP2 SWAP1 DUP1 PUSH1 0x1 DUP2 SLOAD ADD DUP1 DUP3 SSTORE DUP1 SWAP2 POP POP PUSH1 0x1 SWAP1 SUB SWAP1 PUSH1 0x0 MSTORE PUSH1 0x20 PUSH1 0x0 KECCAK256 ADD PUSH1 0x0 SWAP1 SWAP2 SWAP1 SWAP2 SWAP1 SWAP2 PUSH2 0x100 EXP DUP2 SLOAD DUP2 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF MUL NOT AND SWAP1 DUP4 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND MUL OR SWAP1 SSTORE POP DUP1 PUSH1 0x1 PUSH1 0x0 DUP6 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP2 MSTORE PUSH1 0x20 ADD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 KECCAK256 PUSH1 0x0 PUSH2 0x100 EXP DUP2 SLOAD DUP2 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF MUL NOT AND SWAP1 DUP4 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND MUL OR SWAP1 SSTORE POP PUSH1 0x2 PUSH1 0x0 CALLER PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP2 MSTORE PUSH1 0x20 ADD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 KECCAK256 DUP4 SWAP1 DUP1 PUSH1 0x1 DUP2 SLOAD ADD DUP1 DUP3 SSTORE DUP1 SWAP2 POP POP PUSH1 0x1 SWAP1 SUB SWAP1 PUSH1 0x0 MSTORE PUSH1 0x20 PUSH1 0x0 KECCAK256 ADD PUSH1 0x0 SWAP1 SWAP2 SWAP1 SWAP2 SWAP1 SWAP2 PUSH2 0x100 EXP DUP2 SLOAD DUP2 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF MUL NOT AND SWAP1 DUP4 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND MUL OR SWAP1 SSTORE POP PUSH32 0xA8596CC4A052ECC7656E9CA0FB7A10472573699E3AA34AC5659BC37C1B0A44FC TIMESTAMP DUP3 DUP6 PUSH1 0x40 MLOAD PUSH3 0x877 SWAP4 SWAP3 SWAP2 SWAP1 PUSH3 0x1C87 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 LOG1 POP POP POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x1 PUSH1 0x0 DUP4 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP2 MSTORE PUSH1 0x20 ADD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 KECCAK256 PUSH1 0x0 SWAP1 SLOAD SWAP1 PUSH2 0x100 EXP SWAP1 DIV PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH1 0x1 PUSH1 0x0 DUP6 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP2 MSTORE PUSH1 0x20 ADD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 KECCAK256 PUSH1 0x0 SWAP1 SLOAD SWAP1 PUSH2 0x100 EXP SWAP1 DIV PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND SUB PUSH3 0x9BE JUMPI PUSH1 0x40 MLOAD PUSH32 0x8C379A000000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD PUSH3 0x9B5 SWAP1 PUSH3 0x1D3A JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST DUP1 MLOAD DUP3 MLOAD EQ PUSH3 0xA05 JUMPI PUSH1 0x40 MLOAD PUSH32 0x8C379A000000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD PUSH3 0x9FC SWAP1 PUSH3 0x1DAC JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST PUSH1 0x0 CALLVALUE SWAP1 POP PUSH1 0x0 PUSH3 0xA17 DUP6 PUSH3 0x884 JUMP JUMPDEST SWAP1 POP PUSH1 0x0 DUP2 SWAP1 POP CALLER PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP2 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH4 0xF851A440 PUSH1 0x40 MLOAD DUP2 PUSH4 0xFFFFFFFF AND PUSH1 0xE0 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH1 0x20 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 DUP7 GAS STATICCALL ISZERO DUP1 ISZERO PUSH3 0xA81 JUMPI RETURNDATASIZE PUSH1 0x0 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH1 0x0 REVERT JUMPDEST POP POP POP POP PUSH1 0x40 MLOAD RETURNDATASIZE PUSH1 0x1F NOT PUSH1 0x1F DUP3 ADD AND DUP3 ADD DUP1 PUSH1 0x40 MSTORE POP DUP2 ADD SWAP1 PUSH3 0xAA7 SWAP2 SWAP1 PUSH3 0x1DE5 JUMP JUMPDEST PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND EQ PUSH3 0xB00 JUMPI PUSH1 0x40 MLOAD PUSH32 0x8C379A000000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD PUSH3 0xAF7 SWAP1 PUSH3 0x1E8D JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST PUSH1 0x0 DUP1 JUMPDEST DUP7 MLOAD DUP2 LT ISZERO PUSH3 0xB51 JUMPI DUP6 DUP2 DUP2 MLOAD DUP2 LT PUSH3 0xB24 JUMPI PUSH3 0xB23 PUSH3 0x1959 JUMP JUMPDEST JUMPDEST PUSH1 0x20 MUL PUSH1 0x20 ADD ADD MLOAD DUP3 PUSH3 0xB39 SWAP2 SWAP1 PUSH3 0x1EAF JUMP JUMPDEST SWAP2 POP DUP1 DUP1 PUSH3 0xB48 SWAP1 PUSH3 0x1B43 JUMP JUMPDEST SWAP2 POP POP PUSH3 0xB04 JUMP JUMPDEST POP DUP1 DUP5 EQ PUSH3 0xB97 JUMPI PUSH1 0x40 MLOAD PUSH32 0x8C379A000000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD PUSH3 0xB8E SWAP1 PUSH3 0x1F3A JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST PUSH1 0x0 JUMPDEST DUP7 MLOAD DUP2 LT ISZERO PUSH3 0xC65 JUMPI DUP3 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH4 0xA40398A6 DUP9 DUP4 DUP2 MLOAD DUP2 LT PUSH3 0xBD6 JUMPI PUSH3 0xBD5 PUSH3 0x1959 JUMP JUMPDEST JUMPDEST PUSH1 0x20 MUL PUSH1 0x20 ADD ADD MLOAD DUP9 DUP5 DUP2 MLOAD DUP2 LT PUSH3 0xBF4 JUMPI PUSH3 0xBF3 PUSH3 0x1959 JUMP JUMPDEST JUMPDEST PUSH1 0x20 MUL PUSH1 0x20 ADD ADD MLOAD PUSH1 0x40 MLOAD DUP4 PUSH4 0xFFFFFFFF AND PUSH1 0xE0 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH3 0xC1B SWAP3 SWAP2 SWAP1 PUSH3 0x1F5C JUMP JUMPDEST PUSH1 0x0 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 PUSH1 0x0 DUP8 DUP1 EXTCODESIZE ISZERO DUP1 ISZERO PUSH3 0xC36 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP GAS CALL ISZERO DUP1 ISZERO PUSH3 0xC4B JUMPI RETURNDATASIZE PUSH1 0x0 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH1 0x0 REVERT JUMPDEST POP POP POP POP DUP1 DUP1 PUSH3 0xC5C SWAP1 PUSH3 0x1B43 JUMP JUMPDEST SWAP2 POP POP PUSH3 0xB9A JUMP JUMPDEST POP DUP3 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH2 0x8FC DUP3 SWAP1 DUP2 ISZERO MUL SWAP1 PUSH1 0x40 MLOAD PUSH1 0x0 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 DUP6 DUP9 DUP9 CALL SWAP4 POP POP POP POP ISZERO DUP1 ISZERO PUSH3 0xCAD JUMPI RETURNDATASIZE PUSH1 0x0 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH1 0x0 REVERT JUMPDEST POP POP POP POP POP POP POP POP JUMP JUMPDEST PUSH1 0x0 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH1 0x1 PUSH1 0x0 DUP5 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP2 MSTORE PUSH1 0x20 ADD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 KECCAK256 PUSH1 0x0 SWAP1 SLOAD SWAP1 PUSH2 0x100 EXP SWAP1 DIV PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND SUB PUSH3 0xD88 JUMPI PUSH1 0x40 MLOAD PUSH32 0x8C379A000000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD PUSH3 0xD7F SWAP1 PUSH3 0x1D3A JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST PUSH1 0x0 PUSH3 0xD95 DUP4 PUSH3 0x884 JUMP JUMPDEST SWAP1 POP PUSH1 0x0 DUP2 SWAP1 POP CALLER PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP2 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH4 0xF851A440 PUSH1 0x40 MLOAD DUP2 PUSH4 0xFFFFFFFF AND PUSH1 0xE0 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH1 0x20 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 DUP7 GAS STATICCALL ISZERO DUP1 ISZERO PUSH3 0xDFF JUMPI RETURNDATASIZE PUSH1 0x0 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH1 0x0 REVERT JUMPDEST POP POP POP POP PUSH1 0x40 MLOAD RETURNDATASIZE PUSH1 0x1F NOT PUSH1 0x1F DUP3 ADD AND DUP3 ADD DUP1 PUSH1 0x40 MSTORE POP DUP2 ADD SWAP1 PUSH3 0xE25 SWAP2 SWAP1 PUSH3 0x1DE5 JUMP JUMPDEST PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND EQ PUSH3 0xE7E JUMPI PUSH1 0x40 MLOAD PUSH32 0x8C379A000000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD PUSH3 0xE75 SWAP1 PUSH3 0x1FFF JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST DUP1 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH4 0x8293744B CALLER DUP6 PUSH1 0x40 MLOAD DUP4 PUSH4 0xFFFFFFFF AND PUSH1 0xE0 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH3 0xEBB SWAP3 SWAP2 SWAP1 PUSH3 0x20C1 JUMP JUMPDEST PUSH1 0x0 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 PUSH1 0x0 DUP8 DUP1 EXTCODESIZE ISZERO DUP1 ISZERO PUSH3 0xED6 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP GAS CALL ISZERO DUP1 ISZERO PUSH3 0xEEB JUMPI RETURNDATASIZE PUSH1 0x0 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH1 0x0 REVERT JUMPDEST POP POP POP POP POP POP POP POP JUMP JUMPDEST PUSH1 0x0 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH1 0x1 PUSH1 0x0 DUP5 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP2 MSTORE PUSH1 0x20 ADD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 KECCAK256 PUSH1 0x0 SWAP1 SLOAD SWAP1 PUSH2 0x100 EXP SWAP1 DIV PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND SUB PUSH3 0xFC6 JUMPI PUSH1 0x40 MLOAD PUSH32 0x8C379A000000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD PUSH3 0xFBD SWAP1 PUSH3 0x1D3A JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST PUSH1 0x0 DUP3 SWAP1 POP PUSH1 0x0 PUSH3 0xFD8 DUP5 PUSH3 0x884 JUMP JUMPDEST SWAP1 POP PUSH1 0x0 DUP3 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH4 0x6352211E DUP6 PUSH1 0x40 MLOAD DUP3 PUSH4 0xFFFFFFFF AND PUSH1 0xE0 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH3 0x1017 SWAP2 SWAP1 PUSH3 0x20F5 JUMP JUMPDEST PUSH1 0x20 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 DUP7 GAS STATICCALL ISZERO DUP1 ISZERO PUSH3 0x1035 JUMPI RETURNDATASIZE PUSH1 0x0 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH1 0x0 REVERT JUMPDEST POP POP POP POP PUSH1 0x40 MLOAD RETURNDATASIZE PUSH1 0x1F NOT PUSH1 0x1F DUP3 ADD AND DUP3 ADD DUP1 PUSH1 0x40 MSTORE POP DUP2 ADD SWAP1 PUSH3 0x105B SWAP2 SWAP1 PUSH3 0x1DE5 JUMP JUMPDEST SWAP1 POP CALLER PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP2 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND EQ PUSH3 0x10CE JUMPI PUSH1 0x40 MLOAD PUSH32 0x8C379A000000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD PUSH3 0x10C5 SWAP1 PUSH3 0x2188 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST ADDRESS PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP4 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH4 0x81812FC DUP7 PUSH1 0x40 MLOAD DUP3 PUSH4 0xFFFFFFFF AND PUSH1 0xE0 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH3 0x1120 SWAP2 SWAP1 PUSH3 0x20F5 JUMP JUMPDEST PUSH1 0x20 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 DUP7 GAS STATICCALL ISZERO DUP1 ISZERO PUSH3 0x113E JUMPI RETURNDATASIZE PUSH1 0x0 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH1 0x0 REVERT JUMPDEST POP POP POP POP PUSH1 0x40 MLOAD RETURNDATASIZE PUSH1 0x1F NOT PUSH1 0x1F DUP3 ADD AND DUP3 ADD DUP1 PUSH1 0x40 MSTORE POP DUP2 ADD SWAP1 PUSH3 0x1164 SWAP2 SWAP1 PUSH3 0x1DE5 JUMP JUMPDEST PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND EQ PUSH3 0x11BD JUMPI PUSH1 0x40 MLOAD PUSH32 0x8C379A000000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD PUSH3 0x11B4 SWAP1 PUSH3 0x2220 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST DUP3 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH4 0x42966C68 DUP6 PUSH1 0x40 MLOAD DUP3 PUSH4 0xFFFFFFFF AND PUSH1 0xE0 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH3 0x11F8 SWAP2 SWAP1 PUSH3 0x20F5 JUMP JUMPDEST PUSH1 0x0 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 PUSH1 0x0 DUP8 DUP1 EXTCODESIZE ISZERO DUP1 ISZERO PUSH3 0x1213 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP GAS CALL ISZERO DUP1 ISZERO PUSH3 0x1228 JUMPI RETURNDATASIZE PUSH1 0x0 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH1 0x0 REVERT JUMPDEST POP POP POP POP PUSH1 0x0 CALLER SWAP1 POP PUSH1 0x0 DUP4 SWAP1 POP DUP1 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH4 0xED2B40EA DUP4 DUP9 PUSH1 0x40 MLOAD DUP4 PUSH4 0xFFFFFFFF AND PUSH1 0xE0 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH3 0x1273 SWAP3 SWAP2 SWAP1 PUSH3 0x2242 JUMP JUMPDEST PUSH1 0x0 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 PUSH1 0x0 DUP8 DUP1 EXTCODESIZE ISZERO DUP1 ISZERO PUSH3 0x128E JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP GAS CALL ISZERO DUP1 ISZERO PUSH3 0x12A3 JUMPI RETURNDATASIZE PUSH1 0x0 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH1 0x0 REVERT JUMPDEST POP POP POP POP POP POP POP POP POP POP POP JUMP JUMPDEST PUSH1 0x2 PUSH1 0x20 MSTORE DUP2 PUSH1 0x0 MSTORE PUSH1 0x40 PUSH1 0x0 KECCAK256 DUP2 DUP2 SLOAD DUP2 LT PUSH3 0x12CD JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST SWAP1 PUSH1 0x0 MSTORE PUSH1 0x20 PUSH1 0x0 KECCAK256 ADD PUSH1 0x0 SWAP2 POP SWAP2 POP SWAP1 SLOAD SWAP1 PUSH2 0x100 EXP SWAP1 DIV PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP2 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 PUSH1 0x80 ADD PUSH1 0x40 MSTORE DUP1 PUSH1 0x0 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x60 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP2 MSTORE POP SWAP1 JUMP JUMPDEST PUSH2 0x121F DUP1 PUSH3 0x2270 DUP4 CODECOPY ADD SWAP1 JUMP JUMPDEST PUSH1 0x0 PUSH1 0x40 MLOAD SWAP1 POP SWAP1 JUMP JUMPDEST PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH1 0x0 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF DUP3 AND SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 PUSH3 0x138C DUP3 PUSH3 0x135F JUMP JUMPDEST SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH3 0x139E DUP2 PUSH3 0x137F JUMP JUMPDEST DUP2 EQ PUSH3 0x13AA JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP JUMP JUMPDEST PUSH1 0x0 DUP2 CALLDATALOAD SWAP1 POP PUSH3 0x13BE DUP2 PUSH3 0x1393 JUMP JUMPDEST SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 DUP5 SUB SLT ISZERO PUSH3 0x13DD JUMPI PUSH3 0x13DC PUSH3 0x1355 JUMP JUMPDEST JUMPDEST PUSH1 0x0 PUSH3 0x13ED DUP5 DUP3 DUP6 ADD PUSH3 0x13AD JUMP JUMPDEST SWAP2 POP POP SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH3 0x1401 DUP2 PUSH3 0x137F JUMP JUMPDEST DUP3 MSTORE POP POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 ADD SWAP1 POP PUSH3 0x141E PUSH1 0x0 DUP4 ADD DUP5 PUSH3 0x13F6 JUMP JUMPDEST SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 DUP2 MLOAD SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 DUP3 DUP3 MSTORE PUSH1 0x20 DUP3 ADD SWAP1 POP SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 DUP2 SWAP1 POP PUSH1 0x20 DUP3 ADD SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 DUP2 SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH3 0x1465 DUP2 PUSH3 0x1450 JUMP JUMPDEST DUP3 MSTORE POP POP JUMP JUMPDEST PUSH1 0x0 DUP2 MLOAD SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 DUP3 DUP3 MSTORE PUSH1 0x20 DUP3 ADD SWAP1 POP SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 DUP2 SWAP1 POP PUSH1 0x20 DUP3 ADD SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 PUSH3 0x14A5 DUP4 DUP4 PUSH3 0x145A JUMP JUMPDEST PUSH1 0x20 DUP4 ADD SWAP1 POP SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 ADD SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 PUSH3 0x14CB DUP3 PUSH3 0x146B JUMP JUMPDEST PUSH3 0x14D7 DUP2 DUP6 PUSH3 0x1476 JUMP JUMPDEST SWAP4 POP PUSH3 0x14E4 DUP4 PUSH3 0x1487 JUMP JUMPDEST DUP1 PUSH1 0x0 JUMPDEST DUP4 DUP2 LT ISZERO PUSH3 0x151B JUMPI DUP2 MLOAD PUSH3 0x14FF DUP9 DUP3 PUSH3 0x1497 JUMP JUMPDEST SWAP8 POP PUSH3 0x150C DUP4 PUSH3 0x14B1 JUMP JUMPDEST SWAP3 POP POP PUSH1 0x1 DUP2 ADD SWAP1 POP PUSH3 0x14E8 JUMP JUMPDEST POP DUP6 SWAP4 POP POP POP POP SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH3 0x1533 DUP2 PUSH3 0x137F JUMP JUMPDEST DUP3 MSTORE POP POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x80 DUP4 ADD PUSH1 0x0 DUP4 ADD MLOAD PUSH3 0x1553 PUSH1 0x0 DUP7 ADD DUP3 PUSH3 0x145A JUMP JUMPDEST POP PUSH1 0x20 DUP4 ADD MLOAD PUSH3 0x1568 PUSH1 0x20 DUP7 ADD DUP3 PUSH3 0x145A JUMP JUMPDEST POP PUSH1 0x40 DUP4 ADD MLOAD DUP5 DUP3 SUB PUSH1 0x40 DUP7 ADD MSTORE PUSH3 0x1582 DUP3 DUP3 PUSH3 0x14BE JUMP JUMPDEST SWAP2 POP POP PUSH1 0x60 DUP4 ADD MLOAD PUSH3 0x1599 PUSH1 0x60 DUP7 ADD DUP3 PUSH3 0x1528 JUMP JUMPDEST POP DUP1 SWAP2 POP POP SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 PUSH3 0x15B2 DUP4 DUP4 PUSH3 0x1539 JUMP JUMPDEST SWAP1 POP SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 ADD SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 PUSH3 0x15D4 DUP3 PUSH3 0x1424 JUMP JUMPDEST PUSH3 0x15E0 DUP2 DUP6 PUSH3 0x142F JUMP JUMPDEST SWAP4 POP DUP4 PUSH1 0x20 DUP3 MUL DUP6 ADD PUSH3 0x15F4 DUP6 PUSH3 0x1440 JUMP JUMPDEST DUP1 PUSH1 0x0 JUMPDEST DUP6 DUP2 LT ISZERO PUSH3 0x1636 JUMPI DUP5 DUP5 SUB DUP10 MSTORE DUP2 MLOAD PUSH3 0x1614 DUP6 DUP3 PUSH3 0x15A4 JUMP JUMPDEST SWAP5 POP PUSH3 0x1621 DUP4 PUSH3 0x15BA JUMP JUMPDEST SWAP3 POP PUSH1 0x20 DUP11 ADD SWAP10 POP POP PUSH1 0x1 DUP2 ADD SWAP1 POP PUSH3 0x15F8 JUMP JUMPDEST POP DUP3 SWAP8 POP DUP8 SWAP6 POP POP POP POP POP POP SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 ADD SWAP1 POP DUP2 DUP2 SUB PUSH1 0x0 DUP4 ADD MSTORE PUSH3 0x1664 DUP2 DUP5 PUSH3 0x15C7 JUMP JUMPDEST SWAP1 POP SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH3 0x1677 DUP2 PUSH3 0x1450 JUMP JUMPDEST DUP2 EQ PUSH3 0x1683 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP JUMP JUMPDEST PUSH1 0x0 DUP2 CALLDATALOAD SWAP1 POP PUSH3 0x1697 DUP2 PUSH3 0x166C JUMP JUMPDEST SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x40 DUP4 DUP6 SUB SLT ISZERO PUSH3 0x16B7 JUMPI PUSH3 0x16B6 PUSH3 0x1355 JUMP JUMPDEST JUMPDEST PUSH1 0x0 PUSH3 0x16C7 DUP6 DUP3 DUP7 ADD PUSH3 0x13AD JUMP JUMPDEST SWAP3 POP POP PUSH1 0x20 PUSH3 0x16DA DUP6 DUP3 DUP7 ADD PUSH3 0x1686 JUMP JUMPDEST SWAP2 POP POP SWAP3 POP SWAP3 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH1 0x0 PUSH1 0x1F NOT PUSH1 0x1F DUP4 ADD AND SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH32 0x4E487B7100000000000000000000000000000000000000000000000000000000 PUSH1 0x0 MSTORE PUSH1 0x41 PUSH1 0x4 MSTORE PUSH1 0x24 PUSH1 0x0 REVERT JUMPDEST PUSH3 0x1734 DUP3 PUSH3 0x16E9 JUMP JUMPDEST DUP2 ADD DUP2 DUP2 LT PUSH8 0xFFFFFFFFFFFFFFFF DUP3 GT OR ISZERO PUSH3 0x1756 JUMPI PUSH3 0x1755 PUSH3 0x16FA JUMP JUMPDEST JUMPDEST DUP1 PUSH1 0x40 MSTORE POP POP POP JUMP JUMPDEST PUSH1 0x0 PUSH3 0x176B PUSH3 0x134B JUMP JUMPDEST SWAP1 POP PUSH3 0x1779 DUP3 DUP3 PUSH3 0x1729 JUMP JUMPDEST SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 PUSH8 0xFFFFFFFFFFFFFFFF DUP3 GT ISZERO PUSH3 0x179C JUMPI PUSH3 0x179B PUSH3 0x16FA JUMP JUMPDEST JUMPDEST PUSH1 0x20 DUP3 MUL SWAP1 POP PUSH1 0x20 DUP2 ADD SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH1 0x0 PUSH3 0x17C9 PUSH3 0x17C3 DUP5 PUSH3 0x177E JUMP JUMPDEST PUSH3 0x175F JUMP JUMPDEST SWAP1 POP DUP1 DUP4 DUP3 MSTORE PUSH1 0x20 DUP3 ADD SWAP1 POP PUSH1 0x20 DUP5 MUL DUP4 ADD DUP6 DUP2 GT ISZERO PUSH3 0x17EF JUMPI PUSH3 0x17EE PUSH3 0x17AD JUMP JUMPDEST JUMPDEST DUP4 JUMPDEST DUP2 DUP2 LT ISZERO PUSH3 0x181C JUMPI DUP1 PUSH3 0x1807 DUP9 DUP3 PUSH3 0x1686 JUMP JUMPDEST DUP5 MSTORE PUSH1 0x20 DUP5 ADD SWAP4 POP POP PUSH1 0x20 DUP2 ADD SWAP1 POP PUSH3 0x17F1 JUMP JUMPDEST POP POP POP SWAP4 SWAP3 POP POP POP JUMP JUMPDEST PUSH1 0x0 DUP3 PUSH1 0x1F DUP4 ADD SLT PUSH3 0x183E JUMPI PUSH3 0x183D PUSH3 0x16E4 JUMP JUMPDEST JUMPDEST DUP2 CALLDATALOAD PUSH3 0x1850 DUP5 DUP3 PUSH1 0x20 DUP7 ADD PUSH3 0x17B2 JUMP JUMPDEST SWAP2 POP POP SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x0 PUSH1 0x60 DUP5 DUP7 SUB SLT ISZERO PUSH3 0x1875 JUMPI PUSH3 0x1874 PUSH3 0x1355 JUMP JUMPDEST JUMPDEST PUSH1 0x0 PUSH3 0x1885 DUP7 DUP3 DUP8 ADD PUSH3 0x13AD JUMP JUMPDEST SWAP4 POP POP PUSH1 0x20 DUP5 ADD CALLDATALOAD PUSH8 0xFFFFFFFFFFFFFFFF DUP2 GT ISZERO PUSH3 0x18A9 JUMPI PUSH3 0x18A8 PUSH3 0x135A JUMP JUMPDEST JUMPDEST PUSH3 0x18B7 DUP7 DUP3 DUP8 ADD PUSH3 0x1826 JUMP JUMPDEST SWAP3 POP POP PUSH1 0x40 DUP5 ADD CALLDATALOAD PUSH8 0xFFFFFFFFFFFFFFFF DUP2 GT ISZERO PUSH3 0x18DB JUMPI PUSH3 0x18DA PUSH3 0x135A JUMP JUMPDEST JUMPDEST PUSH3 0x18E9 DUP7 DUP3 DUP8 ADD PUSH3 0x1826 JUMP JUMPDEST SWAP2 POP POP SWAP3 POP SWAP3 POP SWAP3 JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x40 DUP4 DUP6 SUB SLT ISZERO PUSH3 0x190D JUMPI PUSH3 0x190C PUSH3 0x1355 JUMP JUMPDEST JUMPDEST PUSH1 0x0 PUSH3 0x191D DUP6 DUP3 DUP7 ADD PUSH3 0x13AD JUMP JUMPDEST SWAP3 POP POP PUSH1 0x20 DUP4 ADD CALLDATALOAD PUSH8 0xFFFFFFFFFFFFFFFF DUP2 GT ISZERO PUSH3 0x1941 JUMPI PUSH3 0x1940 PUSH3 0x135A JUMP JUMPDEST JUMPDEST PUSH3 0x194F DUP6 DUP3 DUP7 ADD PUSH3 0x1826 JUMP JUMPDEST SWAP2 POP POP SWAP3 POP SWAP3 SWAP1 POP JUMP JUMPDEST PUSH32 0x4E487B7100000000000000000000000000000000000000000000000000000000 PUSH1 0x0 MSTORE PUSH1 0x32 PUSH1 0x4 MSTORE PUSH1 0x24 PUSH1 0x0 REVERT JUMPDEST PUSH1 0x0 DUP2 MLOAD SWAP1 POP PUSH3 0x1999 DUP2 PUSH3 0x166C JUMP JUMPDEST SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 PUSH3 0x19B6 PUSH3 0x19B0 DUP5 PUSH3 0x177E JUMP JUMPDEST PUSH3 0x175F JUMP JUMPDEST SWAP1 POP DUP1 DUP4 DUP3 MSTORE PUSH1 0x20 DUP3 ADD SWAP1 POP PUSH1 0x20 DUP5 MUL DUP4 ADD DUP6 DUP2 GT ISZERO PUSH3 0x19DC JUMPI PUSH3 0x19DB PUSH3 0x17AD JUMP JUMPDEST JUMPDEST DUP4 JUMPDEST DUP2 DUP2 LT ISZERO PUSH3 0x1A09 JUMPI DUP1 PUSH3 0x19F4 DUP9 DUP3 PUSH3 0x1988 JUMP JUMPDEST DUP5 MSTORE PUSH1 0x20 DUP5 ADD SWAP4 POP POP PUSH1 0x20 DUP2 ADD SWAP1 POP PUSH3 0x19DE JUMP JUMPDEST POP POP POP SWAP4 SWAP3 POP POP POP JUMP JUMPDEST PUSH1 0x0 DUP3 PUSH1 0x1F DUP4 ADD SLT PUSH3 0x1A2B JUMPI PUSH3 0x1A2A PUSH3 0x16E4 JUMP JUMPDEST JUMPDEST DUP2 MLOAD PUSH3 0x1A3D DUP5 DUP3 PUSH1 0x20 DUP7 ADD PUSH3 0x199F JUMP JUMPDEST SWAP2 POP POP SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 DUP5 SUB SLT ISZERO PUSH3 0x1A5F JUMPI PUSH3 0x1A5E PUSH3 0x1355 JUMP JUMPDEST JUMPDEST PUSH1 0x0 DUP3 ADD MLOAD PUSH8 0xFFFFFFFFFFFFFFFF DUP2 GT ISZERO PUSH3 0x1A80 JUMPI PUSH3 0x1A7F PUSH3 0x135A JUMP JUMPDEST JUMPDEST PUSH3 0x1A8E DUP5 DUP3 DUP6 ADD PUSH3 0x1A13 JUMP JUMPDEST SWAP2 POP POP SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 DUP5 SUB SLT ISZERO PUSH3 0x1AB0 JUMPI PUSH3 0x1AAF PUSH3 0x1355 JUMP JUMPDEST JUMPDEST PUSH1 0x0 PUSH3 0x1AC0 DUP5 DUP3 DUP6 ADD PUSH3 0x1988 JUMP JUMPDEST SWAP2 POP POP SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH32 0x4E487B7100000000000000000000000000000000000000000000000000000000 PUSH1 0x0 MSTORE PUSH1 0x11 PUSH1 0x4 MSTORE PUSH1 0x24 PUSH1 0x0 REVERT JUMPDEST PUSH1 0x0 PUSH3 0x1B05 DUP3 PUSH3 0x1450 JUMP JUMPDEST SWAP2 POP PUSH3 0x1B12 DUP4 PUSH3 0x1450 JUMP JUMPDEST SWAP3 POP DUP3 DUP3 MUL PUSH3 0x1B22 DUP2 PUSH3 0x1450 JUMP JUMPDEST SWAP2 POP DUP3 DUP3 DIV DUP5 EQ DUP4 ISZERO OR PUSH3 0x1B3C JUMPI PUSH3 0x1B3B PUSH3 0x1AC9 JUMP JUMPDEST JUMPDEST POP SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 PUSH3 0x1B50 DUP3 PUSH3 0x1450 JUMP JUMPDEST SWAP2 POP PUSH32 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF DUP3 SUB PUSH3 0x1B85 JUMPI PUSH3 0x1B84 PUSH3 0x1AC9 JUMP JUMPDEST JUMPDEST PUSH1 0x1 DUP3 ADD SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 DUP3 DUP3 MSTORE PUSH1 0x20 DUP3 ADD SWAP1 POP SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH32 0x5661756C7420616C72656164792065786973747320666F722074686973204E46 PUSH1 0x0 DUP3 ADD MSTORE PUSH32 0x5420636F6E747261637400000000000000000000000000000000000000000000 PUSH1 0x20 DUP3 ADD MSTORE POP JUMP JUMPDEST PUSH1 0x0 PUSH3 0x1BFF PUSH1 0x2A DUP4 PUSH3 0x1B90 JUMP JUMPDEST SWAP2 POP PUSH3 0x1C0C DUP3 PUSH3 0x1BA1 JUMP JUMPDEST PUSH1 0x40 DUP3 ADD SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 ADD SWAP1 POP DUP2 DUP2 SUB PUSH1 0x0 DUP4 ADD MSTORE PUSH3 0x1C32 DUP2 PUSH3 0x1BF0 JUMP JUMPDEST SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH3 0x1C44 DUP2 PUSH3 0x1450 JUMP JUMPDEST DUP3 MSTORE POP POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x60 DUP3 ADD SWAP1 POP PUSH3 0x1C61 PUSH1 0x0 DUP4 ADD DUP7 PUSH3 0x13F6 JUMP JUMPDEST PUSH3 0x1C70 PUSH1 0x20 DUP4 ADD DUP6 PUSH3 0x1C39 JUMP JUMPDEST PUSH3 0x1C7F PUSH1 0x40 DUP4 ADD DUP5 PUSH3 0x13F6 JUMP JUMPDEST SWAP5 SWAP4 POP POP POP POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x60 DUP3 ADD SWAP1 POP PUSH3 0x1C9E PUSH1 0x0 DUP4 ADD DUP7 PUSH3 0x1C39 JUMP JUMPDEST PUSH3 0x1CAD PUSH1 0x20 DUP4 ADD DUP6 PUSH3 0x13F6 JUMP JUMPDEST PUSH3 0x1CBC PUSH1 0x40 DUP4 ADD DUP5 PUSH3 0x13F6 JUMP JUMPDEST SWAP5 SWAP4 POP POP POP POP JUMP JUMPDEST PUSH32 0x5661756C7420646F6573206E6F742065786973747320666F722074686973204E PUSH1 0x0 DUP3 ADD MSTORE PUSH32 0x465420636F6E7472616374000000000000000000000000000000000000000000 PUSH1 0x20 DUP3 ADD MSTORE POP JUMP JUMPDEST PUSH1 0x0 PUSH3 0x1D22 PUSH1 0x2B DUP4 PUSH3 0x1B90 JUMP JUMPDEST SWAP2 POP PUSH3 0x1D2F DUP3 PUSH3 0x1CC4 JUMP JUMPDEST PUSH1 0x40 DUP3 ADD SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 ADD SWAP1 POP DUP2 DUP2 SUB PUSH1 0x0 DUP4 ADD MSTORE PUSH3 0x1D55 DUP2 PUSH3 0x1D13 JUMP JUMPDEST SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH32 0x4D69736D61746368656420617272617973000000000000000000000000000000 PUSH1 0x0 DUP3 ADD MSTORE POP JUMP JUMPDEST PUSH1 0x0 PUSH3 0x1D94 PUSH1 0x11 DUP4 PUSH3 0x1B90 JUMP JUMPDEST SWAP2 POP PUSH3 0x1DA1 DUP3 PUSH3 0x1D5C JUMP JUMPDEST PUSH1 0x20 DUP3 ADD SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 ADD SWAP1 POP DUP2 DUP2 SUB PUSH1 0x0 DUP4 ADD MSTORE PUSH3 0x1DC7 DUP2 PUSH3 0x1D85 JUMP JUMPDEST SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 DUP2 MLOAD SWAP1 POP PUSH3 0x1DDF DUP2 PUSH3 0x1393 JUMP JUMPDEST SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 DUP5 SUB SLT ISZERO PUSH3 0x1DFE JUMPI PUSH3 0x1DFD PUSH3 0x1355 JUMP JUMPDEST JUMPDEST PUSH1 0x0 PUSH3 0x1E0E DUP5 DUP3 DUP6 ADD PUSH3 0x1DCE JUMP JUMPDEST SWAP2 POP POP SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH32 0x4F6E6C792074686520706572736F6E2077686F2063726561746564207661756C PUSH1 0x0 DUP3 ADD MSTORE PUSH32 0x742063616E206465706F7369742066756E647320696E746F2069740000000000 PUSH1 0x20 DUP3 ADD MSTORE POP JUMP JUMPDEST PUSH1 0x0 PUSH3 0x1E75 PUSH1 0x3B DUP4 PUSH3 0x1B90 JUMP JUMPDEST SWAP2 POP PUSH3 0x1E82 DUP3 PUSH3 0x1E17 JUMP JUMPDEST PUSH1 0x40 DUP3 ADD SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 ADD SWAP1 POP DUP2 DUP2 SUB PUSH1 0x0 DUP4 ADD MSTORE PUSH3 0x1EA8 DUP2 PUSH3 0x1E66 JUMP JUMPDEST SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 PUSH3 0x1EBC DUP3 PUSH3 0x1450 JUMP JUMPDEST SWAP2 POP PUSH3 0x1EC9 DUP4 PUSH3 0x1450 JUMP JUMPDEST SWAP3 POP DUP3 DUP3 ADD SWAP1 POP DUP1 DUP3 GT ISZERO PUSH3 0x1EE4 JUMPI PUSH3 0x1EE3 PUSH3 0x1AC9 JUMP JUMPDEST JUMPDEST SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH32 0x4D69736D61746368656420746F74616C206465706F73697420616D6F756E7400 PUSH1 0x0 DUP3 ADD MSTORE POP JUMP JUMPDEST PUSH1 0x0 PUSH3 0x1F22 PUSH1 0x1F DUP4 PUSH3 0x1B90 JUMP JUMPDEST SWAP2 POP PUSH3 0x1F2F DUP3 PUSH3 0x1EEA JUMP JUMPDEST PUSH1 0x20 DUP3 ADD SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 ADD SWAP1 POP DUP2 DUP2 SUB PUSH1 0x0 DUP4 ADD MSTORE PUSH3 0x1F55 DUP2 PUSH3 0x1F13 JUMP JUMPDEST SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x40 DUP3 ADD SWAP1 POP PUSH3 0x1F73 PUSH1 0x0 DUP4 ADD DUP6 PUSH3 0x1C39 JUMP JUMPDEST PUSH3 0x1F82 PUSH1 0x20 DUP4 ADD DUP5 PUSH3 0x1C39 JUMP JUMPDEST SWAP4 SWAP3 POP POP POP JUMP JUMPDEST PUSH32 0x4F6E6C792074686520706572736F6E2077686F2063726561746564207661756C PUSH1 0x0 DUP3 ADD MSTORE PUSH32 0x742063616E2077697468647261772066756E6473000000000000000000000000 PUSH1 0x20 DUP3 ADD MSTORE POP JUMP JUMPDEST PUSH1 0x0 PUSH3 0x1FE7 PUSH1 0x34 DUP4 PUSH3 0x1B90 JUMP JUMPDEST SWAP2 POP PUSH3 0x1FF4 DUP3 PUSH3 0x1F89 JUMP JUMPDEST PUSH1 0x40 DUP3 ADD SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 ADD SWAP1 POP DUP2 DUP2 SUB PUSH1 0x0 DUP4 ADD MSTORE PUSH3 0x201A DUP2 PUSH3 0x1FD8 JUMP JUMPDEST SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 PUSH3 0x202E DUP3 PUSH3 0x135F JUMP JUMPDEST SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH3 0x2040 DUP2 PUSH3 0x2021 JUMP JUMPDEST DUP3 MSTORE POP POP JUMP JUMPDEST PUSH1 0x0 DUP3 DUP3 MSTORE PUSH1 0x20 DUP3 ADD SWAP1 POP SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 PUSH3 0x2064 DUP3 PUSH3 0x146B JUMP JUMPDEST PUSH3 0x2070 DUP2 DUP6 PUSH3 0x2046 JUMP JUMPDEST SWAP4 POP PUSH3 0x207D DUP4 PUSH3 0x1487 JUMP JUMPDEST DUP1 PUSH1 0x0 JUMPDEST DUP4 DUP2 LT ISZERO PUSH3 0x20B4 JUMPI DUP2 MLOAD PUSH3 0x2098 DUP9 DUP3 PUSH3 0x1497 JUMP JUMPDEST SWAP8 POP PUSH3 0x20A5 DUP4 PUSH3 0x14B1 JUMP JUMPDEST SWAP3 POP POP PUSH1 0x1 DUP2 ADD SWAP1 POP PUSH3 0x2081 JUMP JUMPDEST POP DUP6 SWAP4 POP POP POP POP SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x40 DUP3 ADD SWAP1 POP PUSH3 0x20D8 PUSH1 0x0 DUP4 ADD DUP6 PUSH3 0x2035 JUMP JUMPDEST DUP2 DUP2 SUB PUSH1 0x20 DUP4 ADD MSTORE PUSH3 0x20EC DUP2 DUP5 PUSH3 0x2057 JUMP JUMPDEST SWAP1 POP SWAP4 SWAP3 POP POP POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 ADD SWAP1 POP PUSH3 0x210C PUSH1 0x0 DUP4 ADD DUP5 PUSH3 0x1C39 JUMP JUMPDEST SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH32 0x596F7520617265206E6F7420746865206F776E6572206F66207468697320746F PUSH1 0x0 DUP3 ADD MSTORE PUSH32 0x6B656E2100000000000000000000000000000000000000000000000000000000 PUSH1 0x20 DUP3 ADD MSTORE POP JUMP JUMPDEST PUSH1 0x0 PUSH3 0x2170 PUSH1 0x24 DUP4 PUSH3 0x1B90 JUMP JUMPDEST SWAP2 POP PUSH3 0x217D DUP3 PUSH3 0x2112 JUMP JUMPDEST PUSH1 0x40 DUP3 ADD SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 ADD SWAP1 POP DUP2 DUP2 SUB PUSH1 0x0 DUP4 ADD MSTORE PUSH3 0x21A3 DUP2 PUSH3 0x2161 JUMP JUMPDEST SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH32 0x436F6E7472616374206E6F7420617070726F76656420746F206275726E20746F PUSH1 0x0 DUP3 ADD MSTORE PUSH32 0x6B656E0000000000000000000000000000000000000000000000000000000000 PUSH1 0x20 DUP3 ADD MSTORE POP JUMP JUMPDEST PUSH1 0x0 PUSH3 0x2208 PUSH1 0x23 DUP4 PUSH3 0x1B90 JUMP JUMPDEST SWAP2 POP PUSH3 0x2215 DUP3 PUSH3 0x21AA JUMP JUMPDEST PUSH1 0x40 DUP3 ADD SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 ADD SWAP1 POP DUP2 DUP2 SUB PUSH1 0x0 DUP4 ADD MSTORE PUSH3 0x223B DUP2 PUSH3 0x21F9 JUMP JUMPDEST SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x40 DUP3 ADD SWAP1 POP PUSH3 0x2259 PUSH1 0x0 DUP4 ADD DUP6 PUSH3 0x2035 JUMP JUMPDEST PUSH3 0x2268 PUSH1 0x20 DUP4 ADD DUP5 PUSH3 0x1C39 JUMP JUMPDEST SWAP4 SWAP3 POP POP POP JUMP INVALID PUSH1 0x80 PUSH1 0x40 MSTORE CALLVALUE DUP1 ISZERO PUSH3 0x11 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH1 0x40 MLOAD PUSH3 0x121F CODESIZE SUB DUP1 PUSH3 0x121F DUP4 CODECOPY DUP2 DUP2 ADD PUSH1 0x40 MSTORE DUP2 ADD SWAP1 PUSH3 0x37 SWAP2 SWAP1 PUSH3 0x1B5 JUMP JUMPDEST DUP3 PUSH1 0x0 DUP1 PUSH2 0x100 EXP DUP2 SLOAD DUP2 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF MUL NOT AND SWAP1 DUP4 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND MUL OR SWAP1 SSTORE POP DUP2 PUSH1 0x2 DUP2 SWAP1 SSTORE POP DUP1 PUSH1 0x5 PUSH1 0x0 PUSH2 0x100 EXP DUP2 SLOAD DUP2 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF MUL NOT AND SWAP1 DUP4 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND MUL OR SWAP1 SSTORE POP TIMESTAMP PUSH1 0x3 DUP2 SWAP1 SSTORE POP CALLER PUSH1 0x4 PUSH1 0x0 PUSH2 0x100 EXP DUP2 SLOAD DUP2 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF MUL NOT AND SWAP1 DUP4 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND MUL OR SWAP1 SSTORE POP POP POP POP PUSH3 0x211 JUMP JUMPDEST PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH1 0x0 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF DUP3 AND SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 PUSH3 0x142 DUP3 PUSH3 0x115 JUMP JUMPDEST SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH3 0x154 DUP2 PUSH3 0x135 JUMP JUMPDEST DUP2 EQ PUSH3 0x160 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP JUMP JUMPDEST PUSH1 0x0 DUP2 MLOAD SWAP1 POP PUSH3 0x174 DUP2 PUSH3 0x149 JUMP JUMPDEST SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 DUP2 SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH3 0x18F DUP2 PUSH3 0x17A JUMP JUMPDEST DUP2 EQ PUSH3 0x19B JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP JUMP JUMPDEST PUSH1 0x0 DUP2 MLOAD SWAP1 POP PUSH3 0x1AF DUP2 PUSH3 0x184 JUMP JUMPDEST SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x0 PUSH1 0x60 DUP5 DUP7 SUB SLT ISZERO PUSH3 0x1D1 JUMPI PUSH3 0x1D0 PUSH3 0x110 JUMP JUMPDEST JUMPDEST PUSH1 0x0 PUSH3 0x1E1 DUP7 DUP3 DUP8 ADD PUSH3 0x163 JUMP JUMPDEST SWAP4 POP POP PUSH1 0x20 PUSH3 0x1F4 DUP7 DUP3 DUP8 ADD PUSH3 0x19E JUMP JUMPDEST SWAP3 POP POP PUSH1 0x40 PUSH3 0x207 DUP7 DUP3 DUP8 ADD PUSH3 0x163 JUMP JUMPDEST SWAP2 POP POP SWAP3 POP SWAP3 POP SWAP3 JUMP JUMPDEST PUSH2 0xFFE DUP1 PUSH3 0x221 PUSH1 0x0 CODECOPY PUSH1 0x0 RETURN INVALID PUSH1 0x80 PUSH1 0x40 MSTORE PUSH1 0x4 CALLDATASIZE LT PUSH2 0xA0 JUMPI PUSH1 0x0 CALLDATALOAD PUSH1 0xE0 SHR DUP1 PUSH4 0x8293744B GT PUSH2 0x64 JUMPI DUP1 PUSH4 0x8293744B EQ PUSH2 0x192 JUMPI DUP1 PUSH4 0xA40398A6 EQ PUSH2 0x1AE JUMPI DUP1 PUSH4 0xD58778D6 EQ PUSH2 0x1D7 JUMPI DUP1 PUSH4 0xD8270DCE EQ PUSH2 0x214 JUMPI DUP1 PUSH4 0xED2B40EA EQ PUSH2 0x23F JUMPI DUP1 PUSH4 0xF851A440 EQ PUSH2 0x25B JUMPI PUSH2 0xA7 JUMP JUMPDEST DUP1 PUSH4 0x1AA43078 EQ PUSH2 0xA9 JUMPI DUP1 PUSH4 0x31C2273B EQ PUSH2 0xD4 JUMPI DUP1 PUSH4 0x505658D9 EQ PUSH2 0xFF JUMPI DUP1 PUSH4 0x5E4F6CAB EQ PUSH2 0x12A JUMPI DUP1 PUSH4 0x67F718A9 EQ PUSH2 0x167 JUMPI PUSH2 0xA7 JUMP JUMPDEST CALLDATASIZE PUSH2 0xA7 JUMPI STOP JUMPDEST STOP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0xB5 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0xBE PUSH2 0x286 JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH2 0xCB SWAP2 SWAP1 PUSH2 0x8A0 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 RETURN JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0xE0 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0xE9 PUSH2 0x28C JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH2 0xF6 SWAP2 SWAP1 PUSH2 0x8FC JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 RETURN JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x10B JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x114 PUSH2 0x2B0 JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH2 0x121 SWAP2 SWAP1 PUSH2 0x8FC JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 RETURN JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x136 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x151 PUSH1 0x4 DUP1 CALLDATASIZE SUB DUP2 ADD SWAP1 PUSH2 0x14C SWAP2 SWAP1 PUSH2 0x957 JUMP JUMPDEST PUSH2 0x2D6 JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH2 0x15E SWAP2 SWAP1 PUSH2 0x8A0 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 RETURN JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x173 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x17C PUSH2 0x2EE JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH2 0x189 SWAP2 SWAP1 PUSH2 0xA42 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 RETURN JUMPDEST PUSH2 0x1AC PUSH1 0x4 DUP1 CALLDATASIZE SUB DUP2 ADD SWAP1 PUSH2 0x1A7 SWAP2 SWAP1 PUSH2 0xBFB JUMP JUMPDEST PUSH2 0x346 JUMP JUMPDEST STOP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x1BA JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x1D5 PUSH1 0x4 DUP1 CALLDATASIZE SUB DUP2 ADD SWAP1 PUSH2 0x1D0 SWAP2 SWAP1 PUSH2 0xC57 JUMP JUMPDEST PUSH2 0x57F JUMP JUMPDEST STOP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x1E3 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x1FE PUSH1 0x4 DUP1 CALLDATASIZE SUB DUP2 ADD SWAP1 PUSH2 0x1F9 SWAP2 SWAP1 PUSH2 0x957 JUMP JUMPDEST PUSH2 0x682 JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH2 0x20B SWAP2 SWAP1 PUSH2 0x8A0 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 RETURN JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x220 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x229 PUSH2 0x6A6 JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH2 0x236 SWAP2 SWAP1 PUSH2 0x8A0 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 RETURN JUMPDEST PUSH2 0x259 PUSH1 0x4 DUP1 CALLDATASIZE SUB DUP2 ADD SWAP1 PUSH2 0x254 SWAP2 SWAP1 PUSH2 0xC97 JUMP JUMPDEST PUSH2 0x6AC JUMP JUMPDEST STOP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x267 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x270 PUSH2 0x861 JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH2 0x27D SWAP2 SWAP1 PUSH2 0x8FC JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 RETURN JUMPDEST PUSH1 0x2 SLOAD DUP2 JUMP JUMPDEST PUSH1 0x0 DUP1 SLOAD SWAP1 PUSH2 0x100 EXP SWAP1 DIV PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP2 JUMP JUMPDEST PUSH1 0x4 PUSH1 0x0 SWAP1 SLOAD SWAP1 PUSH2 0x100 EXP SWAP1 DIV PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP2 JUMP JUMPDEST PUSH1 0x1 PUSH1 0x20 MSTORE DUP1 PUSH1 0x0 MSTORE PUSH1 0x40 PUSH1 0x0 KECCAK256 PUSH1 0x0 SWAP2 POP SWAP1 POP SLOAD DUP2 JUMP JUMPDEST PUSH1 0x60 PUSH1 0x6 DUP1 SLOAD DUP1 PUSH1 0x20 MUL PUSH1 0x20 ADD PUSH1 0x40 MLOAD SWAP1 DUP2 ADD PUSH1 0x40 MSTORE DUP1 SWAP3 SWAP2 SWAP1 DUP2 DUP2 MSTORE PUSH1 0x20 ADD DUP3 DUP1 SLOAD DUP1 ISZERO PUSH2 0x33C JUMPI PUSH1 0x20 MUL DUP3 ADD SWAP2 SWAP1 PUSH1 0x0 MSTORE PUSH1 0x20 PUSH1 0x0 KECCAK256 SWAP1 JUMPDEST DUP2 SLOAD DUP2 MSTORE PUSH1 0x20 ADD SWAP1 PUSH1 0x1 ADD SWAP1 DUP1 DUP4 GT PUSH2 0x328 JUMPI JUMPDEST POP POP POP POP POP SWAP1 POP SWAP1 JUMP JUMPDEST PUSH1 0x4 PUSH1 0x0 SWAP1 SLOAD SWAP1 PUSH2 0x100 EXP SWAP1 DIV PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND CALLER PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND EQ PUSH2 0x3D6 JUMPI PUSH1 0x40 MLOAD PUSH32 0x8C379A000000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x3CD SWAP1 PUSH2 0xD5A JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST PUSH1 0x2 SLOAD PUSH1 0x2 PUSH2 0x3E5 SWAP2 SWAP1 PUSH2 0xDA9 JUMP JUMPDEST PUSH1 0x3 SLOAD TIMESTAMP PUSH2 0x3F3 SWAP2 SWAP1 PUSH2 0xDEB JUMP JUMPDEST LT ISZERO PUSH2 0x434 JUMPI PUSH1 0x40 MLOAD PUSH32 0x8C379A000000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x42B SWAP1 PUSH2 0xE91 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST PUSH1 0x0 DUP1 JUMPDEST DUP3 MLOAD DUP2 LT ISZERO PUSH2 0x532 JUMPI PUSH1 0x0 PUSH1 0x1 PUSH1 0x0 DUP6 DUP5 DUP2 MLOAD DUP2 LT PUSH2 0x45A JUMPI PUSH2 0x459 PUSH2 0xEB1 JUMP JUMPDEST JUMPDEST PUSH1 0x20 MUL PUSH1 0x20 ADD ADD MLOAD DUP2 MSTORE PUSH1 0x20 ADD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 KECCAK256 SLOAD GT PUSH2 0x4B1 JUMPI PUSH1 0x40 MLOAD PUSH32 0x8C379A000000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x4A8 SWAP1 PUSH2 0xF2C JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST PUSH1 0x1 PUSH1 0x0 DUP5 DUP4 DUP2 MLOAD DUP2 LT PUSH2 0x4C8 JUMPI PUSH2 0x4C7 PUSH2 0xEB1 JUMP JUMPDEST JUMPDEST PUSH1 0x20 MUL PUSH1 0x20 ADD ADD MLOAD DUP2 MSTORE PUSH1 0x20 ADD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 KECCAK256 SLOAD DUP3 PUSH2 0x4EA SWAP2 SWAP1 PUSH2 0xF4C JUMP JUMPDEST SWAP2 POP PUSH1 0x0 PUSH1 0x1 PUSH1 0x0 DUP6 DUP5 DUP2 MLOAD DUP2 LT PUSH2 0x505 JUMPI PUSH2 0x504 PUSH2 0xEB1 JUMP JUMPDEST JUMPDEST PUSH1 0x20 MUL PUSH1 0x20 ADD ADD MLOAD DUP2 MSTORE PUSH1 0x20 ADD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 KECCAK256 DUP2 SWAP1 SSTORE POP DUP1 DUP1 PUSH2 0x52A SWAP1 PUSH2 0xF80 JUMP JUMPDEST SWAP2 POP POP PUSH2 0x438 JUMP JUMPDEST POP DUP3 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH2 0x8FC DUP3 SWAP1 DUP2 ISZERO MUL SWAP1 PUSH1 0x40 MLOAD PUSH1 0x0 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 DUP6 DUP9 DUP9 CALL SWAP4 POP POP POP POP ISZERO DUP1 ISZERO PUSH2 0x579 JUMPI RETURNDATASIZE PUSH1 0x0 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH1 0x0 REVERT JUMPDEST POP POP POP POP JUMP JUMPDEST PUSH1 0x4 PUSH1 0x0 SWAP1 SLOAD SWAP1 PUSH2 0x100 EXP SWAP1 DIV PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND CALLER PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND EQ PUSH2 0x60F JUMPI PUSH1 0x40 MLOAD PUSH32 0x8C379A000000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x606 SWAP1 PUSH2 0xD5A JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST PUSH1 0x0 PUSH1 0x1 PUSH1 0x0 DUP5 DUP2 MSTORE PUSH1 0x20 ADD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 KECCAK256 SLOAD SUB PUSH2 0x654 JUMPI PUSH1 0x6 DUP3 SWAP1 DUP1 PUSH1 0x1 DUP2 SLOAD ADD DUP1 DUP3 SSTORE DUP1 SWAP2 POP POP PUSH1 0x1 SWAP1 SUB SWAP1 PUSH1 0x0 MSTORE PUSH1 0x20 PUSH1 0x0 KECCAK256 ADD PUSH1 0x0 SWAP1 SWAP2 SWAP1 SWAP2 SWAP1 SWAP2 POP SSTORE JUMPDEST DUP1 PUSH1 0x1 PUSH1 0x0 DUP5 DUP2 MSTORE PUSH1 0x20 ADD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 KECCAK256 PUSH1 0x0 DUP3 DUP3 SLOAD PUSH2 0x677 SWAP2 SWAP1 PUSH2 0xF4C JUMP JUMPDEST SWAP3 POP POP DUP2 SWAP1 SSTORE POP POP POP JUMP JUMPDEST PUSH1 0x6 DUP2 DUP2 SLOAD DUP2 LT PUSH2 0x692 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST SWAP1 PUSH1 0x0 MSTORE PUSH1 0x20 PUSH1 0x0 KECCAK256 ADD PUSH1 0x0 SWAP2 POP SWAP1 POP SLOAD DUP2 JUMP JUMPDEST PUSH1 0x3 SLOAD DUP2 JUMP JUMPDEST PUSH1 0x4 PUSH1 0x0 SWAP1 SLOAD SWAP1 PUSH2 0x100 EXP SWAP1 DIV PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND CALLER PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND EQ PUSH2 0x73C JUMPI PUSH1 0x40 MLOAD PUSH32 0x8C379A000000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x733 SWAP1 PUSH2 0xD5A JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST PUSH1 0x0 PUSH1 0x1 PUSH1 0x0 DUP4 DUP2 MSTORE PUSH1 0x20 ADD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 KECCAK256 SLOAD GT PUSH2 0x792 JUMPI PUSH1 0x40 MLOAD PUSH32 0x8C379A000000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x789 SWAP1 PUSH2 0xF2C JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST PUSH1 0x2 SLOAD PUSH1 0x3 SLOAD TIMESTAMP PUSH2 0x7A3 SWAP2 SWAP1 PUSH2 0xDEB JUMP JUMPDEST LT ISZERO PUSH2 0x7E4 JUMPI PUSH1 0x40 MLOAD PUSH32 0x8C379A000000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x7DB SWAP1 PUSH2 0xE91 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST PUSH1 0x0 PUSH1 0x1 PUSH1 0x0 DUP4 DUP2 MSTORE PUSH1 0x20 ADD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 KECCAK256 SLOAD SWAP1 POP PUSH1 0x0 PUSH1 0x1 PUSH1 0x0 DUP5 DUP2 MSTORE PUSH1 0x20 ADD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 KECCAK256 DUP2 SWAP1 SSTORE POP DUP3 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH2 0x8FC DUP3 SWAP1 DUP2 ISZERO MUL SWAP1 PUSH1 0x40 MLOAD PUSH1 0x0 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 DUP6 DUP9 DUP9 CALL SWAP4 POP POP POP POP ISZERO DUP1 ISZERO PUSH2 0x85B JUMPI RETURNDATASIZE PUSH1 0x0 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH1 0x0 REVERT JUMPDEST POP POP POP POP JUMP JUMPDEST PUSH1 0x5 PUSH1 0x0 SWAP1 SLOAD SWAP1 PUSH2 0x100 EXP SWAP1 DIV PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP2 JUMP JUMPDEST PUSH1 0x0 DUP2 SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH2 0x89A DUP2 PUSH2 0x887 JUMP JUMPDEST DUP3 MSTORE POP POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 ADD SWAP1 POP PUSH2 0x8B5 PUSH1 0x0 DUP4 ADD DUP5 PUSH2 0x891 JUMP JUMPDEST SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF DUP3 AND SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0x8E6 DUP3 PUSH2 0x8BB JUMP JUMPDEST SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH2 0x8F6 DUP2 PUSH2 0x8DB JUMP JUMPDEST DUP3 MSTORE POP POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 ADD SWAP1 POP PUSH2 0x911 PUSH1 0x0 DUP4 ADD DUP5 PUSH2 0x8ED JUMP JUMPDEST SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x40 MLOAD SWAP1 POP SWAP1 JUMP JUMPDEST PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH2 0x934 DUP2 PUSH2 0x887 JUMP JUMPDEST DUP2 EQ PUSH2 0x93F JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP JUMP JUMPDEST PUSH1 0x0 DUP2 CALLDATALOAD SWAP1 POP PUSH2 0x951 DUP2 PUSH2 0x92B JUMP JUMPDEST SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 DUP5 SUB SLT ISZERO PUSH2 0x96D JUMPI PUSH2 0x96C PUSH2 0x921 JUMP JUMPDEST JUMPDEST PUSH1 0x0 PUSH2 0x97B DUP5 DUP3 DUP6 ADD PUSH2 0x942 JUMP JUMPDEST SWAP2 POP POP SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 DUP2 MLOAD SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 DUP3 DUP3 MSTORE PUSH1 0x20 DUP3 ADD SWAP1 POP SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 DUP2 SWAP1 POP PUSH1 0x20 DUP3 ADD SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH2 0x9B9 DUP2 PUSH2 0x887 JUMP JUMPDEST DUP3 MSTORE POP POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0x9CB DUP4 DUP4 PUSH2 0x9B0 JUMP JUMPDEST PUSH1 0x20 DUP4 ADD SWAP1 POP SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 ADD SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0x9EF DUP3 PUSH2 0x984 JUMP JUMPDEST PUSH2 0x9F9 DUP2 DUP6 PUSH2 0x98F JUMP JUMPDEST SWAP4 POP PUSH2 0xA04 DUP4 PUSH2 0x9A0 JUMP JUMPDEST DUP1 PUSH1 0x0 JUMPDEST DUP4 DUP2 LT ISZERO PUSH2 0xA35 JUMPI DUP2 MLOAD PUSH2 0xA1C DUP9 DUP3 PUSH2 0x9BF JUMP JUMPDEST SWAP8 POP PUSH2 0xA27 DUP4 PUSH2 0x9D7 JUMP JUMPDEST SWAP3 POP POP PUSH1 0x1 DUP2 ADD SWAP1 POP PUSH2 0xA08 JUMP JUMPDEST POP DUP6 SWAP4 POP POP POP POP SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 ADD SWAP1 POP DUP2 DUP2 SUB PUSH1 0x0 DUP4 ADD MSTORE PUSH2 0xA5C DUP2 DUP5 PUSH2 0x9E4 JUMP JUMPDEST SWAP1 POP SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0xA6F DUP3 PUSH2 0x8BB JUMP JUMPDEST SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH2 0xA7F DUP2 PUSH2 0xA64 JUMP JUMPDEST DUP2 EQ PUSH2 0xA8A JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP JUMP JUMPDEST PUSH1 0x0 DUP2 CALLDATALOAD SWAP1 POP PUSH2 0xA9C DUP2 PUSH2 0xA76 JUMP JUMPDEST SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH1 0x0 PUSH1 0x1F NOT PUSH1 0x1F DUP4 ADD AND SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH32 0x4E487B7100000000000000000000000000000000000000000000000000000000 PUSH1 0x0 MSTORE PUSH1 0x41 PUSH1 0x4 MSTORE PUSH1 0x24 PUSH1 0x0 REVERT JUMPDEST PUSH2 0xAF0 DUP3 PUSH2 0xAA7 JUMP JUMPDEST DUP2 ADD DUP2 DUP2 LT PUSH8 0xFFFFFFFFFFFFFFFF DUP3 GT OR ISZERO PUSH2 0xB0F JUMPI PUSH2 0xB0E PUSH2 0xAB8 JUMP JUMPDEST JUMPDEST DUP1 PUSH1 0x40 MSTORE POP POP POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0xB22 PUSH2 0x917 JUMP JUMPDEST SWAP1 POP PUSH2 0xB2E DUP3 DUP3 PUSH2 0xAE7 JUMP JUMPDEST SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 PUSH8 0xFFFFFFFFFFFFFFFF DUP3 GT ISZERO PUSH2 0xB4E JUMPI PUSH2 0xB4D PUSH2 0xAB8 JUMP JUMPDEST JUMPDEST PUSH1 0x20 DUP3 MUL SWAP1 POP PUSH1 0x20 DUP2 ADD SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH1 0x0 PUSH2 0xB77 PUSH2 0xB72 DUP5 PUSH2 0xB33 JUMP JUMPDEST PUSH2 0xB18 JUMP JUMPDEST SWAP1 POP DUP1 DUP4 DUP3 MSTORE PUSH1 0x20 DUP3 ADD SWAP1 POP PUSH1 0x20 DUP5 MUL DUP4 ADD DUP6 DUP2 GT ISZERO PUSH2 0xB9A JUMPI PUSH2 0xB99 PUSH2 0xB5F JUMP JUMPDEST JUMPDEST DUP4 JUMPDEST DUP2 DUP2 LT ISZERO PUSH2 0xBC3 JUMPI DUP1 PUSH2 0xBAF DUP9 DUP3 PUSH2 0x942 JUMP JUMPDEST DUP5 MSTORE PUSH1 0x20 DUP5 ADD SWAP4 POP POP PUSH1 0x20 DUP2 ADD SWAP1 POP PUSH2 0xB9C JUMP JUMPDEST POP POP POP SWAP4 SWAP3 POP POP POP JUMP JUMPDEST PUSH1 0x0 DUP3 PUSH1 0x1F DUP4 ADD SLT PUSH2 0xBE2 JUMPI PUSH2 0xBE1 PUSH2 0xAA2 JUMP JUMPDEST JUMPDEST DUP2 CALLDATALOAD PUSH2 0xBF2 DUP5 DUP3 PUSH1 0x20 DUP7 ADD PUSH2 0xB64 JUMP JUMPDEST SWAP2 POP POP SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x40 DUP4 DUP6 SUB SLT ISZERO PUSH2 0xC12 JUMPI PUSH2 0xC11 PUSH2 0x921 JUMP JUMPDEST JUMPDEST PUSH1 0x0 PUSH2 0xC20 DUP6 DUP3 DUP7 ADD PUSH2 0xA8D JUMP JUMPDEST SWAP3 POP POP PUSH1 0x20 DUP4 ADD CALLDATALOAD PUSH8 0xFFFFFFFFFFFFFFFF DUP2 GT ISZERO PUSH2 0xC41 JUMPI PUSH2 0xC40 PUSH2 0x926 JUMP JUMPDEST JUMPDEST PUSH2 0xC4D DUP6 DUP3 DUP7 ADD PUSH2 0xBCD JUMP JUMPDEST SWAP2 POP POP SWAP3 POP SWAP3 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x40 DUP4 DUP6 SUB SLT ISZERO PUSH2 0xC6E JUMPI PUSH2 0xC6D PUSH2 0x921 JUMP JUMPDEST JUMPDEST PUSH1 0x0 PUSH2 0xC7C DUP6 DUP3 DUP7 ADD PUSH2 0x942 JUMP JUMPDEST SWAP3 POP POP PUSH1 0x20 PUSH2 0xC8D DUP6 DUP3 DUP7 ADD PUSH2 0x942 JUMP JUMPDEST SWAP2 POP POP SWAP3 POP SWAP3 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x40 DUP4 DUP6 SUB SLT ISZERO PUSH2 0xCAE JUMPI PUSH2 0xCAD PUSH2 0x921 JUMP JUMPDEST JUMPDEST PUSH1 0x0 PUSH2 0xCBC DUP6 DUP3 DUP7 ADD PUSH2 0xA8D JUMP JUMPDEST SWAP3 POP POP PUSH1 0x20 PUSH2 0xCCD DUP6 DUP3 DUP7 ADD PUSH2 0x942 JUMP JUMPDEST SWAP2 POP POP SWAP3 POP SWAP3 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 DUP3 DUP3 MSTORE PUSH1 0x20 DUP3 ADD SWAP1 POP SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH32 0x4F6E6C7920426974737572616E636520636F6E74726163742063616E2063616C PUSH1 0x0 DUP3 ADD MSTORE PUSH32 0x6C20746869732066756E6374696F6E0000000000000000000000000000000000 PUSH1 0x20 DUP3 ADD MSTORE POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0xD44 PUSH1 0x2F DUP4 PUSH2 0xCD7 JUMP JUMPDEST SWAP2 POP PUSH2 0xD4F DUP3 PUSH2 0xCE8 JUMP JUMPDEST PUSH1 0x40 DUP3 ADD SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 ADD SWAP1 POP DUP2 DUP2 SUB PUSH1 0x0 DUP4 ADD MSTORE PUSH2 0xD73 DUP2 PUSH2 0xD37 JUMP JUMPDEST SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH32 0x4E487B7100000000000000000000000000000000000000000000000000000000 PUSH1 0x0 MSTORE PUSH1 0x11 PUSH1 0x4 MSTORE PUSH1 0x24 PUSH1 0x0 REVERT JUMPDEST PUSH1 0x0 PUSH2 0xDB4 DUP3 PUSH2 0x887 JUMP JUMPDEST SWAP2 POP PUSH2 0xDBF DUP4 PUSH2 0x887 JUMP JUMPDEST SWAP3 POP DUP3 DUP3 MUL PUSH2 0xDCD DUP2 PUSH2 0x887 JUMP JUMPDEST SWAP2 POP DUP3 DUP3 DIV DUP5 EQ DUP4 ISZERO OR PUSH2 0xDE4 JUMPI PUSH2 0xDE3 PUSH2 0xD7A JUMP JUMPDEST JUMPDEST POP SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0xDF6 DUP3 PUSH2 0x887 JUMP JUMPDEST SWAP2 POP PUSH2 0xE01 DUP4 PUSH2 0x887 JUMP JUMPDEST SWAP3 POP DUP3 DUP3 SUB SWAP1 POP DUP2 DUP2 GT ISZERO PUSH2 0xE19 JUMPI PUSH2 0xE18 PUSH2 0xD7A JUMP JUMPDEST JUMPDEST SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH32 0x43616E6E6F74206163636573732066756E6374696F6E206265666F7265207468 PUSH1 0x0 DUP3 ADD MSTORE PUSH32 0x65206D696E696D756D2074696D65206861732070617373656400000000000000 PUSH1 0x20 DUP3 ADD MSTORE POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0xE7B PUSH1 0x39 DUP4 PUSH2 0xCD7 JUMP JUMPDEST SWAP2 POP PUSH2 0xE86 DUP3 PUSH2 0xE1F JUMP JUMPDEST PUSH1 0x40 DUP3 ADD SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 ADD SWAP1 POP DUP2 DUP2 SUB PUSH1 0x0 DUP4 ADD MSTORE PUSH2 0xEAA DUP2 PUSH2 0xE6E JUMP JUMPDEST SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH32 0x4E487B7100000000000000000000000000000000000000000000000000000000 PUSH1 0x0 MSTORE PUSH1 0x32 PUSH1 0x4 MSTORE PUSH1 0x24 PUSH1 0x0 REVERT JUMPDEST PUSH32 0x4E6F2062616C616E636520666F72207468697320746F6B656E49440000000000 PUSH1 0x0 DUP3 ADD MSTORE POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0xF16 PUSH1 0x1B DUP4 PUSH2 0xCD7 JUMP JUMPDEST SWAP2 POP PUSH2 0xF21 DUP3 PUSH2 0xEE0 JUMP JUMPDEST PUSH1 0x20 DUP3 ADD SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 ADD SWAP1 POP DUP2 DUP2 SUB PUSH1 0x0 DUP4 ADD MSTORE PUSH2 0xF45 DUP2 PUSH2 0xF09 JUMP JUMPDEST SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0xF57 DUP3 PUSH2 0x887 JUMP JUMPDEST SWAP2 POP PUSH2 0xF62 DUP4 PUSH2 0x887 JUMP JUMPDEST SWAP3 POP DUP3 DUP3 ADD SWAP1 POP DUP1 DUP3 GT ISZERO PUSH2 0xF7A JUMPI PUSH2 0xF79 PUSH2 0xD7A JUMP JUMPDEST JUMPDEST SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0xF8B DUP3 PUSH2 0x887 JUMP JUMPDEST SWAP2 POP PUSH32 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF DUP3 SUB PUSH2 0xFBD JUMPI PUSH2 0xFBC PUSH2 0xD7A JUMP JUMPDEST JUMPDEST PUSH1 0x1 DUP3 ADD SWAP1 POP SWAP2 SWAP1 POP JUMP INVALID LOG2 PUSH5 0x6970667358 0x22 SLT KECCAK256 GT LOG1 0xF CREATE CALLDATACOPY EQ 0xD9 PC 0xD5 0xE2 SWAP5 MSIZE 0xCF 0xBE 0x1E PUSH13 0x94EBC24593150CD74968D15922 0xCA 0x2C 0x49 PUSH5 0x736F6C6343 STOP ADDMOD SLT STOP CALLER LOG2 PUSH5 0x6970667358 0x22 SLT KECCAK256 0xF9 0xD9 0x1E 0xBB 0xC8 DUP13 0xB5 0xD1 CREATE2 SWAP16 SSTORE 0xBB SWAP11 BYTE 0x28 DUP10 0x5D 0xBC PREVRANDAO 0x4B 0xD4 0xB8 0x5D PUSH3 0xC925D5 AND 0xAA DUP4 DELEGATECALL 0xFC PUSH5 0x736F6C6343 STOP ADDMOD SLT STOP CALLER ",
		"sourceMap": "3317:5712:12:-:0;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;3777:47;;;;;;;;;;;;;;;;;;;;;;;:::i;:::-;;:::i;:::-;;;;;;;:::i;:::-;;;;;;;;8204:823;;;;;;;;;;;;;:::i;:::-;;;;;;;:::i;:::-;;;;;;;;4115:501;;;;;;;;;;;;;;;;;;;;;;;:::i;:::-;;:::i;:::-;;7777:140;;;;;;;;;;;;;;;;;;;;;;;:::i;:::-;;:::i;:::-;;;;;;;:::i;:::-;;;;;;;;4870:1022;;;;;;;;;;;;;:::i;:::-;;:::i;:::-;;6084:527;;;;;;;;;;;;;:::i;:::-;;:::i;:::-;;6789:798;;;;;;;;;;;;;:::i;:::-;;:::i;:::-;;3877:56;;;;;;;;;;;;;;;;;;;;;;;:::i;:::-;;:::i;:::-;;;;;;;:::i;:::-;;;;;;;;3777:47;;;;;;;;;;;;;;;;;;;;;;:::o;8204:823::-;8252:21;8285:29;8317:19;:31;8337:10;8317:31;;;;;;;;;;;;;;;8285:63;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;8358:38;8418:12;:19;8399:39;;;;;;;;:::i;:::-;;;;;;;;;;;;;;;;;;;;;;;;;;;:::i;:::-;;;;;;;;;;;;;;;;;8358:80;;8454:6;8449:539;8470:12;:19;8466:1;:23;8449:539;;;8510:11;8538:12;:29;8551:12;8564:1;8551:15;;;;;;;;:::i;:::-;;;;;;;;8538:29;;;;;;;;;;;;;;;;;;;;;;;;;8510:59;;8583:32;8618:5;:17;;;:19;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;:::i;:::-;8583:54;;8651:32;8686:243;;;;;;;;8739:5;8731:22;;;8686:243;;;;8796:5;:13;;;:15;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;:::i;:::-;8792:1;:19;;;;:::i;:::-;8686:243;;;;8846:15;8686:243;;;;8899:12;8912:1;8899:15;;;;;;;;:::i;:::-;;;;;;;;8686:243;;;;;8651:278;;8965:12;8943:16;8960:1;8943:19;;;;;;;;:::i;:::-;;;;;;;:34;;;;8496:492;;;8491:3;;;;;:::i;:::-;;;;8449:539;;;;9004:16;8997:23;;;;8204:823;:::o;4115:501::-;4252:1;4207:47;;:12;:33;4220:19;4207:33;;;;;;;;;;;;;;;;;;;;;;;;;:47;;;4199:102;;;;;;;;;;;;:::i;:::-;;;;;;;;;4311:11;4335:19;4355:8;4365:10;4325:51;;;;;:::i;:::-;;;;;;;:::i;:::-;;;;;;;;;;;;;;;;;;;;;;;;4311:65;;4386:6;4398:5;4386:18;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;4457:5;4414:12;:33;4427:19;4414:33;;;;;;;;;;;;;;;;:49;;;;;;;;;;;;;;;;;;4473:19;:31;4493:10;4473:31;;;;;;;;;;;;;;;4510:19;4473:57;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;4545:64;4558:15;4582:5;4589:19;4545:64;;;;;;;;:::i;:::-;;;;;;;;4189:427;4115:501;;:::o;7777:140::-;7853:7;7878:12;:32;7891:18;7878:32;;;;;;;;;;;;;;;;;;;;;;;;;7871:39;;7777:140;;;:::o;4870:1022::-;5050:1;5006:46;;:12;:32;5019:18;5006:32;;;;;;;;;;;;;;;;;;;;;;;;;:46;;;4998:102;;;;;;;;;;;;:::i;:::-;;;;;;;;;5138:7;:14;5118:9;:16;:34;5110:64;;;;;;;;;;;;:::i;:::-;;;;;;;;;5193:18;5214:9;5193:30;;5233:37;5281:38;5300:18;5281;:38::i;:::-;5233:87;;5331:11;5351:21;5331:42;;5408:10;5391:27;;:5;:11;;;:13;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;:::i;:::-;:27;;;5383:99;;;;;;;;;;;;:::i;:::-;;;;;;;;;5493:19;5539:9;5534:97;5558:9;:16;5554:1;:20;5534:97;;;5610:7;5618:1;5610:10;;;;;;;;:::i;:::-;;;;;;;;5595:25;;;;;:::i;:::-;;;5576:3;;;;;:::i;:::-;;;;5534:97;;;;5662:11;5648:10;:25;5640:69;;;;;;;;;;;;:::i;:::-;;;;;;;;;5724:9;5719:114;5743:9;:16;5739:1;:20;5719:114;;;5780:5;:16;;;5797:9;5807:1;5797:12;;;;;;;;:::i;:::-;;;;;;;;5811:7;5819:1;5811:10;;;;;;;;:::i;:::-;;;;;;;;5780:42;;;;;;;;;;;;;;;;:::i;:::-;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;5761:3;;;;;:::i;:::-;;;;5719:114;;;;5842:21;:30;;:43;5873:11;5842:43;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;4988:904;;;;4870:1022;;;:::o;6084:527::-;6238:1;6194:46;;:12;:32;6207:18;6194:32;;;;;;;;;;;;;;;;;;;;;;;;;:46;;;6186:102;;;;;;;;;;;;:::i;:::-;;;;;;;;;6307:37;6355:38;6374:18;6355;:38::i;:::-;6307:87;;6404:11;6424:21;6404:42;;6481:10;6464:27;;:5;:11;;;:13;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;:::i;:::-;:27;;;6456:92;;;;;;;;;;;;:::i;:::-;;;;;;;;;6559:5;:14;;;6582:10;6595:8;6559:45;;;;;;;;;;;;;;;;:::i;:::-;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;6176:435;;6084:527;;:::o;6789:798::-;6927:1;6883:46;;:12;:32;6896:18;6883:32;;;;;;;;;;;;;;;;;;;;;;;;;:46;;;6875:102;;;;;;;;;;;;:::i;:::-;;;;;;;;;6988:20;7026:18;6988:57;;7056:37;7104:38;7123:18;7104;:38::i;:::-;7056:87;;7153:18;7174:5;:13;;;7188:8;7174:23;;;;;;;;;;;;;;;:::i;:::-;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;:::i;:::-;7153:44;;7238:10;7224:24;;:10;:24;;;7216:73;;;;;;;;;;;;:::i;:::-;;;;;;;;;7346:4;7307:44;;:5;:17;;;7325:8;7307:27;;;;;;;;;;;;;;;:::i;:::-;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;:::i;:::-;:44;;;7299:92;;;;;;;;;;;;:::i;:::-;;;;;;;;;7402:5;:10;;;7413:8;7402:20;;;;;;;;;;;;;;;:::i;:::-;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;7433:25;7469:10;7433:47;;7490:11;7510:21;7490:42;;7543:5;:16;;;7560:9;7571:8;7543:37;;;;;;;;;;;;;;;;:::i;:::-;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;6865:722;;;;;6789:798;;:::o;3877:56::-;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;:::o;-1:-1:-1:-;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;:::o;:::-;;;;;;;;:::o;7:75:13:-;40:6;73:2;67:9;57:19;;7:75;:::o;88:117::-;197:1;194;187:12;211:117;320:1;317;310:12;334:126;371:7;411:42;404:5;400:54;389:65;;334:126;;;:::o;466:96::-;503:7;532:24;550:5;532:24;:::i;:::-;521:35;;466:96;;;:::o;568:122::-;641:24;659:5;641:24;:::i;:::-;634:5;631:35;621:63;;680:1;677;670:12;621:63;568:122;:::o;696:139::-;742:5;780:6;767:20;758:29;;796:33;823:5;796:33;:::i;:::-;696:139;;;;:::o;841:329::-;900:6;949:2;937:9;928:7;924:23;920:32;917:119;;;955:79;;:::i;:::-;917:119;1075:1;1100:53;1145:7;1136:6;1125:9;1121:22;1100:53;:::i;:::-;1090:63;;1046:117;841:329;;;;:::o;1176:118::-;1263:24;1281:5;1263:24;:::i;:::-;1258:3;1251:37;1176:118;;:::o;1300:222::-;1393:4;1431:2;1420:9;1416:18;1408:26;;1444:71;1512:1;1501:9;1497:17;1488:6;1444:71;:::i;:::-;1300:222;;;;:::o;1528:144::-;1625:6;1659:5;1653:12;1643:22;;1528:144;;;:::o;1678:214::-;1807:11;1841:6;1836:3;1829:19;1881:4;1876:3;1872:14;1857:29;;1678:214;;;;:::o;1898:162::-;1995:4;2018:3;2010:11;;2048:4;2043:3;2039:14;2031:22;;1898:162;;;:::o;2066:77::-;2103:7;2132:5;2121:16;;2066:77;;;:::o;2149:108::-;2226:24;2244:5;2226:24;:::i;:::-;2221:3;2214:37;2149:108;;:::o;2263:114::-;2330:6;2364:5;2358:12;2348:22;;2263:114;;;:::o;2383:174::-;2472:11;2506:6;2501:3;2494:19;2546:4;2541:3;2537:14;2522:29;;2383:174;;;;:::o;2563:132::-;2630:4;2653:3;2645:11;;2683:4;2678:3;2674:14;2666:22;;2563:132;;;:::o;2701:179::-;2770:10;2791:46;2833:3;2825:6;2791:46;:::i;:::-;2869:4;2864:3;2860:14;2846:28;;2701:179;;;;:::o;2886:113::-;2956:4;2988;2983:3;2979:14;2971:22;;2886:113;;;:::o;3035:712::-;3144:3;3173:54;3221:5;3173:54;:::i;:::-;3243:76;3312:6;3307:3;3243:76;:::i;:::-;3236:83;;3343:56;3393:5;3343:56;:::i;:::-;3422:7;3453:1;3438:284;3463:6;3460:1;3457:13;3438:284;;;3539:6;3533:13;3566:63;3625:3;3610:13;3566:63;:::i;:::-;3559:70;;3652:60;3705:6;3652:60;:::i;:::-;3642:70;;3498:224;3485:1;3482;3478:9;3473:14;;3438:284;;;3442:14;3738:3;3731:10;;3149:598;;;3035:712;;;;:::o;3753:108::-;3830:24;3848:5;3830:24;:::i;:::-;3825:3;3818:37;3753:108;;:::o;3939:1032::-;4058:3;4094:4;4089:3;4085:14;4189:4;4182:5;4178:16;4172:23;4208:63;4265:4;4260:3;4256:14;4242:12;4208:63;:::i;:::-;4109:172;4378:4;4371:5;4367:16;4361:23;4397:63;4454:4;4449:3;4445:14;4431:12;4397:63;:::i;:::-;4291:179;4563:4;4556:5;4552:16;4546:23;4616:3;4610:4;4606:14;4599:4;4594:3;4590:14;4583:38;4642:103;4740:4;4726:12;4642:103;:::i;:::-;4634:111;;4480:276;4852:4;4845:5;4841:16;4835:23;4871:63;4928:4;4923:3;4919:14;4905:12;4871:63;:::i;:::-;4766:178;4961:4;4954:11;;4063:908;3939:1032;;;;:::o;4977:276::-;5106:10;5141:106;5243:3;5235:6;5141:106;:::i;:::-;5127:120;;4977:276;;;;:::o;5259:143::-;5359:4;5391;5386:3;5382:14;5374:22;;5259:143;;;:::o;5484:1151::-;5663:3;5692:84;5770:5;5692:84;:::i;:::-;5792:116;5901:6;5896:3;5792:116;:::i;:::-;5785:123;;5934:3;5979:4;5971:6;5967:17;5962:3;5958:27;6009:86;6089:5;6009:86;:::i;:::-;6118:7;6149:1;6134:456;6159:6;6156:1;6153:13;6134:456;;;6230:9;6224:4;6220:20;6215:3;6208:33;6281:6;6275:13;6309:124;6428:4;6413:13;6309:124;:::i;:::-;6301:132;;6456:90;6539:6;6456:90;:::i;:::-;6446:100;;6575:4;6570:3;6566:14;6559:21;;6194:396;6181:1;6178;6174:9;6169:14;;6134:456;;;6138:14;6606:4;6599:11;;6626:3;6619:10;;5668:967;;;;;5484:1151;;;;:::o;6641:493::-;6844:4;6882:2;6871:9;6867:18;6859:26;;6931:9;6925:4;6921:20;6917:1;6906:9;6902:17;6895:47;6959:168;7122:4;7113:6;6959:168;:::i;:::-;6951:176;;6641:493;;;;:::o;7140:122::-;7213:24;7231:5;7213:24;:::i;:::-;7206:5;7203:35;7193:63;;7252:1;7249;7242:12;7193:63;7140:122;:::o;7268:139::-;7314:5;7352:6;7339:20;7330:29;;7368:33;7395:5;7368:33;:::i;:::-;7268:139;;;;:::o;7413:474::-;7481:6;7489;7538:2;7526:9;7517:7;7513:23;7509:32;7506:119;;;7544:79;;:::i;:::-;7506:119;7664:1;7689:53;7734:7;7725:6;7714:9;7710:22;7689:53;:::i;:::-;7679:63;;7635:117;7791:2;7817:53;7862:7;7853:6;7842:9;7838:22;7817:53;:::i;:::-;7807:63;;7762:118;7413:474;;;;;:::o;7893:117::-;8002:1;7999;7992:12;8016:102;8057:6;8108:2;8104:7;8099:2;8092:5;8088:14;8084:28;8074:38;;8016:102;;;:::o;8124:180::-;8172:77;8169:1;8162:88;8269:4;8266:1;8259:15;8293:4;8290:1;8283:15;8310:281;8393:27;8415:4;8393:27;:::i;:::-;8385:6;8381:40;8523:6;8511:10;8508:22;8487:18;8475:10;8472:34;8469:62;8466:88;;;8534:18;;:::i;:::-;8466:88;8574:10;8570:2;8563:22;8353:238;8310:281;;:::o;8597:129::-;8631:6;8658:20;;:::i;:::-;8648:30;;8687:33;8715:4;8707:6;8687:33;:::i;:::-;8597:129;;;:::o;8732:311::-;8809:4;8899:18;8891:6;8888:30;8885:56;;;8921:18;;:::i;:::-;8885:56;8971:4;8963:6;8959:17;8951:25;;9031:4;9025;9021:15;9013:23;;8732:311;;;:::o;9049:117::-;9158:1;9155;9148:12;9189:710;9285:5;9310:81;9326:64;9383:6;9326:64;:::i;:::-;9310:81;:::i;:::-;9301:90;;9411:5;9440:6;9433:5;9426:21;9474:4;9467:5;9463:16;9456:23;;9527:4;9519:6;9515:17;9507:6;9503:30;9556:3;9548:6;9545:15;9542:122;;;9575:79;;:::i;:::-;9542:122;9690:6;9673:220;9707:6;9702:3;9699:15;9673:220;;;9782:3;9811:37;9844:3;9832:10;9811:37;:::i;:::-;9806:3;9799:50;9878:4;9873:3;9869:14;9862:21;;9749:144;9733:4;9728:3;9724:14;9717:21;;9673:220;;;9677:21;9291:608;;9189:710;;;;;:::o;9922:370::-;9993:5;10042:3;10035:4;10027:6;10023:17;10019:27;10009:122;;10050:79;;:::i;:::-;10009:122;10167:6;10154:20;10192:94;10282:3;10274:6;10267:4;10259:6;10255:17;10192:94;:::i;:::-;10183:103;;9999:293;9922:370;;;;:::o;10298:1039::-;10425:6;10433;10441;10490:2;10478:9;10469:7;10465:23;10461:32;10458:119;;;10496:79;;:::i;:::-;10458:119;10616:1;10641:53;10686:7;10677:6;10666:9;10662:22;10641:53;:::i;:::-;10631:63;;10587:117;10771:2;10760:9;10756:18;10743:32;10802:18;10794:6;10791:30;10788:117;;;10824:79;;:::i;:::-;10788:117;10929:78;10999:7;10990:6;10979:9;10975:22;10929:78;:::i;:::-;10919:88;;10714:303;11084:2;11073:9;11069:18;11056:32;11115:18;11107:6;11104:30;11101:117;;;11137:79;;:::i;:::-;11101:117;11242:78;11312:7;11303:6;11292:9;11288:22;11242:78;:::i;:::-;11232:88;;11027:303;10298:1039;;;;;:::o;11343:684::-;11436:6;11444;11493:2;11481:9;11472:7;11468:23;11464:32;11461:119;;;11499:79;;:::i;:::-;11461:119;11619:1;11644:53;11689:7;11680:6;11669:9;11665:22;11644:53;:::i;:::-;11634:63;;11590:117;11774:2;11763:9;11759:18;11746:32;11805:18;11797:6;11794:30;11791:117;;;11827:79;;:::i;:::-;11791:117;11932:78;12002:7;11993:6;11982:9;11978:22;11932:78;:::i;:::-;11922:88;;11717:303;11343:684;;;;;:::o;12033:180::-;12081:77;12078:1;12071:88;12178:4;12175:1;12168:15;12202:4;12199:1;12192:15;12219:143;12276:5;12307:6;12301:13;12292:22;;12323:33;12350:5;12323:33;:::i;:::-;12219:143;;;;:::o;12385:732::-;12492:5;12517:81;12533:64;12590:6;12533:64;:::i;:::-;12517:81;:::i;:::-;12508:90;;12618:5;12647:6;12640:5;12633:21;12681:4;12674:5;12670:16;12663:23;;12734:4;12726:6;12722:17;12714:6;12710:30;12763:3;12755:6;12752:15;12749:122;;;12782:79;;:::i;:::-;12749:122;12897:6;12880:231;12914:6;12909:3;12906:15;12880:231;;;12989:3;13018:48;13062:3;13050:10;13018:48;:::i;:::-;13013:3;13006:61;13096:4;13091:3;13087:14;13080:21;;12956:155;12940:4;12935:3;12931:14;12924:21;;12880:231;;;12884:21;12498:619;;12385:732;;;;;:::o;13140:385::-;13222:5;13271:3;13264:4;13256:6;13252:17;13248:27;13238:122;;13279:79;;:::i;:::-;13238:122;13389:6;13383:13;13414:105;13515:3;13507:6;13500:4;13492:6;13488:17;13414:105;:::i;:::-;13405:114;;13228:297;13140:385;;;;:::o;13531:554::-;13626:6;13675:2;13663:9;13654:7;13650:23;13646:32;13643:119;;;13681:79;;:::i;:::-;13643:119;13822:1;13811:9;13807:17;13801:24;13852:18;13844:6;13841:30;13838:117;;;13874:79;;:::i;:::-;13838:117;13979:89;14060:7;14051:6;14040:9;14036:22;13979:89;:::i;:::-;13969:99;;13772:306;13531:554;;;;:::o;14091:351::-;14161:6;14210:2;14198:9;14189:7;14185:23;14181:32;14178:119;;;14216:79;;:::i;:::-;14178:119;14336:1;14361:64;14417:7;14408:6;14397:9;14393:22;14361:64;:::i;:::-;14351:74;;14307:128;14091:351;;;;:::o;14448:180::-;14496:77;14493:1;14486:88;14593:4;14590:1;14583:15;14617:4;14614:1;14607:15;14634:410;14674:7;14697:20;14715:1;14697:20;:::i;:::-;14692:25;;14731:20;14749:1;14731:20;:::i;:::-;14726:25;;14786:1;14783;14779:9;14808:30;14826:11;14808:30;:::i;:::-;14797:41;;14987:1;14978:7;14974:15;14971:1;14968:22;14948:1;14941:9;14921:83;14898:139;;15017:18;;:::i;:::-;14898:139;14682:362;14634:410;;;;:::o;15050:233::-;15089:3;15112:24;15130:5;15112:24;:::i;:::-;15103:33;;15158:66;15151:5;15148:77;15145:103;;15228:18;;:::i;:::-;15145:103;15275:1;15268:5;15264:13;15257:20;;15050:233;;;:::o;15289:169::-;15373:11;15407:6;15402:3;15395:19;15447:4;15442:3;15438:14;15423:29;;15289:169;;;;:::o;15464:229::-;15604:34;15600:1;15592:6;15588:14;15581:58;15673:12;15668:2;15660:6;15656:15;15649:37;15464:229;:::o;15699:366::-;15841:3;15862:67;15926:2;15921:3;15862:67;:::i;:::-;15855:74;;15938:93;16027:3;15938:93;:::i;:::-;16056:2;16051:3;16047:12;16040:19;;15699:366;;;:::o;16071:419::-;16237:4;16275:2;16264:9;16260:18;16252:26;;16324:9;16318:4;16314:20;16310:1;16299:9;16295:17;16288:47;16352:131;16478:4;16352:131;:::i;:::-;16344:139;;16071:419;;;:::o;16496:118::-;16583:24;16601:5;16583:24;:::i;:::-;16578:3;16571:37;16496:118;;:::o;16620:442::-;16769:4;16807:2;16796:9;16792:18;16784:26;;16820:71;16888:1;16877:9;16873:17;16864:6;16820:71;:::i;:::-;16901:72;16969:2;16958:9;16954:18;16945:6;16901:72;:::i;:::-;16983;17051:2;17040:9;17036:18;17027:6;16983:72;:::i;:::-;16620:442;;;;;;:::o;17068:::-;17217:4;17255:2;17244:9;17240:18;17232:26;;17268:71;17336:1;17325:9;17321:17;17312:6;17268:71;:::i;:::-;17349:72;17417:2;17406:9;17402:18;17393:6;17349:72;:::i;:::-;17431;17499:2;17488:9;17484:18;17475:6;17431:72;:::i;:::-;17068:442;;;;;;:::o;17516:230::-;17656:34;17652:1;17644:6;17640:14;17633:58;17725:13;17720:2;17712:6;17708:15;17701:38;17516:230;:::o;17752:366::-;17894:3;17915:67;17979:2;17974:3;17915:67;:::i;:::-;17908:74;;17991:93;18080:3;17991:93;:::i;:::-;18109:2;18104:3;18100:12;18093:19;;17752:366;;;:::o;18124:419::-;18290:4;18328:2;18317:9;18313:18;18305:26;;18377:9;18371:4;18367:20;18363:1;18352:9;18348:17;18341:47;18405:131;18531:4;18405:131;:::i;:::-;18397:139;;18124:419;;;:::o;18549:167::-;18689:19;18685:1;18677:6;18673:14;18666:43;18549:167;:::o;18722:366::-;18864:3;18885:67;18949:2;18944:3;18885:67;:::i;:::-;18878:74;;18961:93;19050:3;18961:93;:::i;:::-;19079:2;19074:3;19070:12;19063:19;;18722:366;;;:::o;19094:419::-;19260:4;19298:2;19287:9;19283:18;19275:26;;19347:9;19341:4;19337:20;19333:1;19322:9;19318:17;19311:47;19375:131;19501:4;19375:131;:::i;:::-;19367:139;;19094:419;;;:::o;19519:143::-;19576:5;19607:6;19601:13;19592:22;;19623:33;19650:5;19623:33;:::i;:::-;19519:143;;;;:::o;19668:351::-;19738:6;19787:2;19775:9;19766:7;19762:23;19758:32;19755:119;;;19793:79;;:::i;:::-;19755:119;19913:1;19938:64;19994:7;19985:6;19974:9;19970:22;19938:64;:::i;:::-;19928:74;;19884:128;19668:351;;;;:::o;20025:246::-;20165:34;20161:1;20153:6;20149:14;20142:58;20234:29;20229:2;20221:6;20217:15;20210:54;20025:246;:::o;20277:366::-;20419:3;20440:67;20504:2;20499:3;20440:67;:::i;:::-;20433:74;;20516:93;20605:3;20516:93;:::i;:::-;20634:2;20629:3;20625:12;20618:19;;20277:366;;;:::o;20649:419::-;20815:4;20853:2;20842:9;20838:18;20830:26;;20902:9;20896:4;20892:20;20888:1;20877:9;20873:17;20866:47;20930:131;21056:4;20930:131;:::i;:::-;20922:139;;20649:419;;;:::o;21074:191::-;21114:3;21133:20;21151:1;21133:20;:::i;:::-;21128:25;;21167:20;21185:1;21167:20;:::i;:::-;21162:25;;21210:1;21207;21203:9;21196:16;;21231:3;21228:1;21225:10;21222:36;;;21238:18;;:::i;:::-;21222:36;21074:191;;;;:::o;21271:181::-;21411:33;21407:1;21399:6;21395:14;21388:57;21271:181;:::o;21458:366::-;21600:3;21621:67;21685:2;21680:3;21621:67;:::i;:::-;21614:74;;21697:93;21786:3;21697:93;:::i;:::-;21815:2;21810:3;21806:12;21799:19;;21458:366;;;:::o;21830:419::-;21996:4;22034:2;22023:9;22019:18;22011:26;;22083:9;22077:4;22073:20;22069:1;22058:9;22054:17;22047:47;22111:131;22237:4;22111:131;:::i;:::-;22103:139;;21830:419;;;:::o;22255:332::-;22376:4;22414:2;22403:9;22399:18;22391:26;;22427:71;22495:1;22484:9;22480:17;22471:6;22427:71;:::i;:::-;22508:72;22576:2;22565:9;22561:18;22552:6;22508:72;:::i;:::-;22255:332;;;;;:::o;22593:239::-;22733:34;22729:1;22721:6;22717:14;22710:58;22802:22;22797:2;22789:6;22785:15;22778:47;22593:239;:::o;22838:366::-;22980:3;23001:67;23065:2;23060:3;23001:67;:::i;:::-;22994:74;;23077:93;23166:3;23077:93;:::i;:::-;23195:2;23190:3;23186:12;23179:19;;22838:366;;;:::o;23210:419::-;23376:4;23414:2;23403:9;23399:18;23391:26;;23463:9;23457:4;23453:20;23449:1;23438:9;23434:17;23427:47;23491:131;23617:4;23491:131;:::i;:::-;23483:139;;23210:419;;;:::o;23635:104::-;23680:7;23709:24;23727:5;23709:24;:::i;:::-;23698:35;;23635:104;;;:::o;23745:142::-;23848:32;23874:5;23848:32;:::i;:::-;23843:3;23836:45;23745:142;;:::o;23893:184::-;23992:11;24026:6;24021:3;24014:19;24066:4;24061:3;24057:14;24042:29;;23893:184;;;;:::o;24113:732::-;24232:3;24261:54;24309:5;24261:54;:::i;:::-;24331:86;24410:6;24405:3;24331:86;:::i;:::-;24324:93;;24441:56;24491:5;24441:56;:::i;:::-;24520:7;24551:1;24536:284;24561:6;24558:1;24555:13;24536:284;;;24637:6;24631:13;24664:63;24723:3;24708:13;24664:63;:::i;:::-;24657:70;;24750:60;24803:6;24750:60;:::i;:::-;24740:70;;24596:224;24583:1;24580;24576:9;24571:14;;24536:284;;;24540:14;24836:3;24829:10;;24237:608;;;24113:732;;;;:::o;24851:515::-;25038:4;25076:2;25065:9;25061:18;25053:26;;25089:87;25173:1;25162:9;25158:17;25149:6;25089:87;:::i;:::-;25223:9;25217:4;25213:20;25208:2;25197:9;25193:18;25186:48;25251:108;25354:4;25345:6;25251:108;:::i;:::-;25243:116;;24851:515;;;;;:::o;25372:222::-;25465:4;25503:2;25492:9;25488:18;25480:26;;25516:71;25584:1;25573:9;25569:17;25560:6;25516:71;:::i;:::-;25372:222;;;;:::o;25600:223::-;25740:34;25736:1;25728:6;25724:14;25717:58;25809:6;25804:2;25796:6;25792:15;25785:31;25600:223;:::o;25829:366::-;25971:3;25992:67;26056:2;26051:3;25992:67;:::i;:::-;25985:74;;26068:93;26157:3;26068:93;:::i;:::-;26186:2;26181:3;26177:12;26170:19;;25829:366;;;:::o;26201:419::-;26367:4;26405:2;26394:9;26390:18;26382:26;;26454:9;26448:4;26444:20;26440:1;26429:9;26425:17;26418:47;26482:131;26608:4;26482:131;:::i;:::-;26474:139;;26201:419;;;:::o;26626:222::-;26766:34;26762:1;26754:6;26750:14;26743:58;26835:5;26830:2;26822:6;26818:15;26811:30;26626:222;:::o;26854:366::-;26996:3;27017:67;27081:2;27076:3;27017:67;:::i;:::-;27010:74;;27093:93;27182:3;27093:93;:::i;:::-;27211:2;27206:3;27202:12;27195:19;;26854:366;;;:::o;27226:419::-;27392:4;27430:2;27419:9;27415:18;27407:26;;27479:9;27473:4;27469:20;27465:1;27454:9;27450:17;27443:47;27507:131;27633:4;27507:131;:::i;:::-;27499:139;;27226:419;;;:::o;27651:364::-;27788:4;27826:2;27815:9;27811:18;27803:26;;27839:87;27923:1;27912:9;27908:17;27899:6;27839:87;:::i;:::-;27936:72;28004:2;27993:9;27989:18;27980:6;27936:72;:::i;:::-;27651:364;;;;;:::o"
	},
	"Assembly": ".code\n  PUSH 80\t\t\tcontract Bitsurance {\\n\\n    s...\n  PUSH 40\t\t\tcontract Bitsurance {\\n\\n    s...\n  MSTORE \t\t\tcontract Bitsurance {\\n\\n    s...\n  CALLVALUE \t\t\tcontract Bitsurance {\\n\\n    s...\n  DUP1 \t\t\tcontract Bitsurance {\\n\\n    s...\n  ISZERO \t\t\tcontract Bitsurance {\\n\\n    s...\n  PUSH [tag] 1\t\t\tcontract Bitsurance {\\n\\n    s...\n  JUMPI \t\t\tcontract Bitsurance {\\n\\n    s...\n  PUSH 0\t\t\tcontract Bitsurance {\\n\\n    s...\n  DUP1 \t\t\tcontract Bitsurance {\\n\\n    s...\n  REVERT \t\t\tcontract Bitsurance {\\n\\n    s...\ntag 1\t\t\tcontract Bitsurance {\\n\\n    s...\n  JUMPDEST \t\t\tcontract Bitsurance {\\n\\n    s...\n  POP \t\t\tcontract Bitsurance {\\n\\n    s...\n  PUSH #[$] 0000000000000000000000000000000000000000000000000000000000000000\t\t\tcontract Bitsurance {\\n\\n    s...\n  DUP1 \t\t\tcontract Bitsurance {\\n\\n    s...\n  PUSH [$] 0000000000000000000000000000000000000000000000000000000000000000\t\t\tcontract Bitsurance {\\n\\n    s...\n  PUSH 0\t\t\tcontract Bitsurance {\\n\\n    s...\n  CODECOPY \t\t\tcontract Bitsurance {\\n\\n    s...\n  PUSH 0\t\t\tcontract Bitsurance {\\n\\n    s...\n  RETURN \t\t\tcontract Bitsurance {\\n\\n    s...\n.data\n  0:\n    .code\n      PUSH 80\t\t\tcontract Bitsurance {\\n\\n    s...\n      PUSH 40\t\t\tcontract Bitsurance {\\n\\n    s...\n      MSTORE \t\t\tcontract Bitsurance {\\n\\n    s...\n      PUSH 4\t\t\tcontract Bitsurance {\\n\\n    s...\n      CALLDATASIZE \t\t\tcontract Bitsurance {\\n\\n    s...\n      LT \t\t\tcontract Bitsurance {\\n\\n    s...\n      PUSH [tag] 1\t\t\tcontract Bitsurance {\\n\\n    s...\n      JUMPI \t\t\tcontract Bitsurance {\\n\\n    s...\n      PUSH 0\t\t\tcontract Bitsurance {\\n\\n    s...\n      CALLDATALOAD \t\t\tcontract Bitsurance {\\n\\n    s...\n      PUSH E0\t\t\tcontract Bitsurance {\\n\\n    s...\n      SHR \t\t\tcontract Bitsurance {\\n\\n    s...\n      DUP1 \t\t\tcontract Bitsurance {\\n\\n    s...\n      PUSH 7F309523\t\t\tcontract Bitsurance {\\n\\n    s...\n      GT \t\t\tcontract Bitsurance {\\n\\n    s...\n      PUSH [tag] 10\t\t\tcontract Bitsurance {\\n\\n    s...\n      JUMPI \t\t\tcontract Bitsurance {\\n\\n    s...\n      DUP1 \t\t\tcontract Bitsurance {\\n\\n    s...\n      PUSH 7F309523\t\t\tcontract Bitsurance {\\n\\n    s...\n      EQ \t\t\tcontract Bitsurance {\\n\\n    s...\n      PUSH [tag] 6\t\t\tcontract Bitsurance {\\n\\n    s...\n      JUMPI \t\t\tcontract Bitsurance {\\n\\n    s...\n      DUP1 \t\t\tcontract Bitsurance {\\n\\n    s...\n      PUSH A3648EC0\t\t\tcontract Bitsurance {\\n\\n    s...\n      EQ \t\t\tcontract Bitsurance {\\n\\n    s...\n      PUSH [tag] 7\t\t\tcontract Bitsurance {\\n\\n    s...\n      JUMPI \t\t\tcontract Bitsurance {\\n\\n    s...\n      DUP1 \t\t\tcontract Bitsurance {\\n\\n    s...\n      PUSH AAD3EC96\t\t\tcontract Bitsurance {\\n\\n    s...\n      EQ \t\t\tcontract Bitsurance {\\n\\n    s...\n      PUSH [tag] 8\t\t\tcontract Bitsurance {\\n\\n    s...\n      JUMPI \t\t\tcontract Bitsurance {\\n\\n    s...\n      DUP1 \t\t\tcontract Bitsurance {\\n\\n    s...\n      PUSH F7C73490\t\t\tcontract Bitsurance {\\n\\n    s...\n      EQ \t\t\tcontract Bitsurance {\\n\\n    s...\n      PUSH [tag] 9\t\t\tcontract Bitsurance {\\n\\n    s...\n      JUMPI \t\t\tcontract Bitsurance {\\n\\n    s...\n      PUSH [tag] 1\t\t\tcontract Bitsurance {\\n\\n    s...\n      JUMP \t\t\tcontract Bitsurance {\\n\\n    s...\n    tag 10\t\t\tcontract Bitsurance {\\n\\n    s...\n      JUMPDEST \t\t\tcontract Bitsurance {\\n\\n    s...\n      DUP1 \t\t\tcontract Bitsurance {\\n\\n    s...\n      PUSH 1CB3D314\t\t\tcontract Bitsurance {\\n\\n    s...\n      EQ \t\t\tcontract Bitsurance {\\n\\n    s...\n      PUSH [tag] 2\t\t\tcontract Bitsurance {\\n\\n    s...\n      JUMPI \t\t\tcontract Bitsurance {\\n\\n    s...\n      DUP1 \t\t\tcontract Bitsurance {\\n\\n    s...\n      PUSH 533092EF\t\t\tcontract Bitsurance {\\n\\n    s...\n      EQ \t\t\tcontract Bitsurance {\\n\\n    s...\n      PUSH [tag] 3\t\t\tcontract Bitsurance {\\n\\n    s...\n      JUMPI \t\t\tcontract Bitsurance {\\n\\n    s...\n      DUP1 \t\t\tcontract Bitsurance {\\n\\n    s...\n      PUSH 5F76DFC0\t\t\tcontract Bitsurance {\\n\\n    s...\n      EQ \t\t\tcontract Bitsurance {\\n\\n    s...\n      PUSH [tag] 4\t\t\tcontract Bitsurance {\\n\\n    s...\n      JUMPI \t\t\tcontract Bitsurance {\\n\\n    s...\n      DUP1 \t\t\tcontract Bitsurance {\\n\\n    s...\n      PUSH 622BC90E\t\t\tcontract Bitsurance {\\n\\n    s...\n      EQ \t\t\tcontract Bitsurance {\\n\\n    s...\n      PUSH [tag] 5\t\t\tcontract Bitsurance {\\n\\n    s...\n      JUMPI \t\t\tcontract Bitsurance {\\n\\n    s...\n    tag 1\t\t\tcontract Bitsurance {\\n\\n    s...\n      JUMPDEST \t\t\tcontract Bitsurance {\\n\\n    s...\n      PUSH 0\t\t\tcontract Bitsurance {\\n\\n    s...\n      DUP1 \t\t\tcontract Bitsurance {\\n\\n    s...\n      REVERT \t\t\tcontract Bitsurance {\\n\\n    s...\n    tag 2\t\t\tmapping(address => address) pu...\n      JUMPDEST \t\t\tmapping(address => address) pu...\n      CALLVALUE \t\t\tmapping(address => address) pu...\n      DUP1 \t\t\tmapping(address => address) pu...\n      ISZERO \t\t\tmapping(address => address) pu...\n      PUSH [tag] 11\t\t\tmapping(address => address) pu...\n      JUMPI \t\t\tmapping(address => address) pu...\n      PUSH 0\t\t\tmapping(address => address) pu...\n      DUP1 \t\t\tmapping(address => address) pu...\n      REVERT \t\t\tmapping(address => address) pu...\n    tag 11\t\t\tmapping(address => address) pu...\n      JUMPDEST \t\t\tmapping(address => address) pu...\n      POP \t\t\tmapping(address => address) pu...\n      PUSH [tag] 12\t\t\tmapping(address => address) pu...\n      PUSH 4\t\t\tmapping(address => address) pu...\n      DUP1 \t\t\tmapping(address => address) pu...\n      CALLDATASIZE \t\t\tmapping(address => address) pu...\n      SUB \t\t\tmapping(address => address) pu...\n      DUP2 \t\t\tmapping(address => address) pu...\n      ADD \t\t\tmapping(address => address) pu...\n      SWAP1 \t\t\tmapping(address => address) pu...\n      PUSH [tag] 13\t\t\tmapping(address => address) pu...\n      SWAP2 \t\t\tmapping(address => address) pu...\n      SWAP1 \t\t\tmapping(address => address) pu...\n      PUSH [tag] 14\t\t\tmapping(address => address) pu...\n      JUMP \t\t\tmapping(address => address) pu...\n    tag 13\t\t\tmapping(address => address) pu...\n      JUMPDEST \t\t\tmapping(address => address) pu...\n      PUSH [tag] 15\t\t\tmapping(address => address) pu...\n      JUMP \t\t\tmapping(address => address) pu...\n    tag 12\t\t\tmapping(address => address) pu...\n      JUMPDEST \t\t\tmapping(address => address) pu...\n      PUSH 40\t\t\tmapping(address => address) pu...\n      MLOAD \t\t\tmapping(address => address) pu...\n      PUSH [tag] 16\t\t\tmapping(address => address) pu...\n      SWAP2 \t\t\tmapping(address => address) pu...\n      SWAP1 \t\t\tmapping(address => address) pu...\n      PUSH [tag] 17\t\t\tmapping(address => address) pu...\n      JUMP \t\t\tmapping(address => address) pu...\n    tag 16\t\t\tmapping(address => address) pu...\n      JUMPDEST \t\t\tmapping(address => address) pu...\n      PUSH 40\t\t\tmapping(address => address) pu...\n      MLOAD \t\t\tmapping(address => address) pu...\n      DUP1 \t\t\tmapping(address => address) pu...\n      SWAP2 \t\t\tmapping(address => address) pu...\n      SUB \t\t\tmapping(address => address) pu...\n      SWAP1 \t\t\tmapping(address => address) pu...\n      RETURN \t\t\tmapping(address => address) pu...\n    tag 3\t\t\tfunction getVaultDetails() pub...\n      JUMPDEST \t\t\tfunction getVaultDetails() pub...\n      CALLVALUE \t\t\tfunction getVaultDetails() pub...\n      DUP1 \t\t\tfunction getVaultDetails() pub...\n      ISZERO \t\t\tfunction getVaultDetails() pub...\n      PUSH [tag] 18\t\t\tfunction getVaultDetails() pub...\n      JUMPI \t\t\tfunction getVaultDetails() pub...\n      PUSH 0\t\t\tfunction getVaultDetails() pub...\n      DUP1 \t\t\tfunction getVaultDetails() pub...\n      REVERT \t\t\tfunction getVaultDetails() pub...\n    tag 18\t\t\tfunction getVaultDetails() pub...\n      JUMPDEST \t\t\tfunction getVaultDetails() pub...\n      POP \t\t\tfunction getVaultDetails() pub...\n      PUSH [tag] 19\t\t\tfunction getVaultDetails() pub...\n      PUSH [tag] 20\t\t\tfunction getVaultDetails() pub...\n      JUMP \t\t\tfunction getVaultDetails() pub...\n    tag 19\t\t\tfunction getVaultDetails() pub...\n      JUMPDEST \t\t\tfunction getVaultDetails() pub...\n      PUSH 40\t\t\tfunction getVaultDetails() pub...\n      MLOAD \t\t\tfunction getVaultDetails() pub...\n      PUSH [tag] 21\t\t\tfunction getVaultDetails() pub...\n      SWAP2 \t\t\tfunction getVaultDetails() pub...\n      SWAP1 \t\t\tfunction getVaultDetails() pub...\n      PUSH [tag] 22\t\t\tfunction getVaultDetails() pub...\n      JUMP \t\t\tfunction getVaultDetails() pub...\n    tag 21\t\t\tfunction getVaultDetails() pub...\n      JUMPDEST \t\t\tfunction getVaultDetails() pub...\n      PUSH 40\t\t\tfunction getVaultDetails() pub...\n      MLOAD \t\t\tfunction getVaultDetails() pub...\n      DUP1 \t\t\tfunction getVaultDetails() pub...\n      SWAP2 \t\t\tfunction getVaultDetails() pub...\n      SUB \t\t\tfunction getVaultDetails() pub...\n      SWAP1 \t\t\tfunction getVaultDetails() pub...\n      RETURN \t\t\tfunction getVaultDetails() pub...\n    tag 4\t\t\tfunction createVault(address _...\n      JUMPDEST \t\t\tfunction createVault(address _...\n      CALLVALUE \t\t\tfunction createVault(address _...\n      DUP1 \t\t\tfunction createVault(address _...\n      ISZERO \t\t\tfunction createVault(address _...\n      PUSH [tag] 23\t\t\tfunction createVault(address _...\n      JUMPI \t\t\tfunction createVault(address _...\n      PUSH 0\t\t\tfunction createVault(address _...\n      DUP1 \t\t\tfunction createVault(address _...\n      REVERT \t\t\tfunction createVault(address _...\n    tag 23\t\t\tfunction createVault(address _...\n      JUMPDEST \t\t\tfunction createVault(address _...\n      POP \t\t\tfunction createVault(address _...\n      PUSH [tag] 24\t\t\tfunction createVault(address _...\n      PUSH 4\t\t\tfunction createVault(address _...\n      DUP1 \t\t\tfunction createVault(address _...\n      CALLDATASIZE \t\t\tfunction createVault(address _...\n      SUB \t\t\tfunction createVault(address _...\n      DUP2 \t\t\tfunction createVault(address _...\n      ADD \t\t\tfunction createVault(address _...\n      SWAP1 \t\t\tfunction createVault(address _...\n      PUSH [tag] 25\t\t\tfunction createVault(address _...\n      SWAP2 \t\t\tfunction createVault(address _...\n      SWAP1 \t\t\tfunction createVault(address _...\n      PUSH [tag] 26\t\t\tfunction createVault(address _...\n      JUMP \t\t\tfunction createVault(address _...\n    tag 25\t\t\tfunction createVault(address _...\n      JUMPDEST \t\t\tfunction createVault(address _...\n      PUSH [tag] 27\t\t\tfunction createVault(address _...\n      JUMP \t\t\tfunction createVault(address _...\n    tag 24\t\t\tfunction createVault(address _...\n      JUMPDEST \t\t\tfunction createVault(address _...\n      STOP \t\t\tfunction createVault(address _...\n    tag 5\t\t\tfunction getContractAddress(ad...\n      JUMPDEST \t\t\tfunction getContractAddress(ad...\n      CALLVALUE \t\t\tfunction getContractAddress(ad...\n      DUP1 \t\t\tfunction getContractAddress(ad...\n      ISZERO \t\t\tfunction getContractAddress(ad...\n      PUSH [tag] 28\t\t\tfunction getContractAddress(ad...\n      JUMPI \t\t\tfunction getContractAddress(ad...\n      PUSH 0\t\t\tfunction getContractAddress(ad...\n      DUP1 \t\t\tfunction getContractAddress(ad...\n      REVERT \t\t\tfunction getContractAddress(ad...\n    tag 28\t\t\tfunction getContractAddress(ad...\n      JUMPDEST \t\t\tfunction getContractAddress(ad...\n      POP \t\t\tfunction getContractAddress(ad...\n      PUSH [tag] 29\t\t\tfunction getContractAddress(ad...\n      PUSH 4\t\t\tfunction getContractAddress(ad...\n      DUP1 \t\t\tfunction getContractAddress(ad...\n      CALLDATASIZE \t\t\tfunction getContractAddress(ad...\n      SUB \t\t\tfunction getContractAddress(ad...\n      DUP2 \t\t\tfunction getContractAddress(ad...\n      ADD \t\t\tfunction getContractAddress(ad...\n      SWAP1 \t\t\tfunction getContractAddress(ad...\n      PUSH [tag] 30\t\t\tfunction getContractAddress(ad...\n      SWAP2 \t\t\tfunction getContractAddress(ad...\n      SWAP1 \t\t\tfunction getContractAddress(ad...\n      PUSH [tag] 14\t\t\tfunction getContractAddress(ad...\n      JUMP \t\t\tfunction getContractAddress(ad...\n    tag 30\t\t\tfunction getContractAddress(ad...\n      JUMPDEST \t\t\tfunction getContractAddress(ad...\n      PUSH [tag] 31\t\t\tfunction getContractAddress(ad...\n      JUMP \t\t\tfunction getContractAddress(ad...\n    tag 29\t\t\tfunction getContractAddress(ad...\n      JUMPDEST \t\t\tfunction getContractAddress(ad...\n      PUSH 40\t\t\tfunction getContractAddress(ad...\n      MLOAD \t\t\tfunction getContractAddress(ad...\n      PUSH [tag] 32\t\t\tfunction getContractAddress(ad...\n      SWAP2 \t\t\tfunction getContractAddress(ad...\n      SWAP1 \t\t\tfunction getContractAddress(ad...\n      PUSH [tag] 17\t\t\tfunction getContractAddress(ad...\n      JUMP \t\t\tfunction getContractAddress(ad...\n    tag 32\t\t\tfunction getContractAddress(ad...\n      JUMPDEST \t\t\tfunction getContractAddress(ad...\n      PUSH 40\t\t\tfunction getContractAddress(ad...\n      MLOAD \t\t\tfunction getContractAddress(ad...\n      DUP1 \t\t\tfunction getContractAddress(ad...\n      SWAP2 \t\t\tfunction getContractAddress(ad...\n      SUB \t\t\tfunction getContractAddress(ad...\n      SWAP1 \t\t\tfunction getContractAddress(ad...\n      RETURN \t\t\tfunction getContractAddress(ad...\n    tag 6\t\t\tfunction depositFunds(address ...\n      JUMPDEST \t\t\tfunction depositFunds(address ...\n      PUSH [tag] 33\t\t\tfunction depositFunds(address ...\n      PUSH 4\t\t\tfunction depositFunds(address ...\n      DUP1 \t\t\tfunction depositFunds(address ...\n      CALLDATASIZE \t\t\tfunction depositFunds(address ...\n      SUB \t\t\tfunction depositFunds(address ...\n      DUP2 \t\t\tfunction depositFunds(address ...\n      ADD \t\t\tfunction depositFunds(address ...\n      SWAP1 \t\t\tfunction depositFunds(address ...\n      PUSH [tag] 34\t\t\tfunction depositFunds(address ...\n      SWAP2 \t\t\tfunction depositFunds(address ...\n      SWAP1 \t\t\tfunction depositFunds(address ...\n      PUSH [tag] 35\t\t\tfunction depositFunds(address ...\n      JUMP \t\t\tfunction depositFunds(address ...\n    tag 34\t\t\tfunction depositFunds(address ...\n      JUMPDEST \t\t\tfunction depositFunds(address ...\n      PUSH [tag] 36\t\t\tfunction depositFunds(address ...\n      JUMP \t\t\tfunction depositFunds(address ...\n    tag 33\t\t\tfunction depositFunds(address ...\n      JUMPDEST \t\t\tfunction depositFunds(address ...\n      STOP \t\t\tfunction depositFunds(address ...\n    tag 7\t\t\tfunction withdrawFunds(address...\n      JUMPDEST \t\t\tfunction withdrawFunds(address...\n      PUSH [tag] 37\t\t\tfunction withdrawFunds(address...\n      PUSH 4\t\t\tfunction withdrawFunds(address...\n      DUP1 \t\t\tfunction withdrawFunds(address...\n      CALLDATASIZE \t\t\tfunction withdrawFunds(address...\n      SUB \t\t\tfunction withdrawFunds(address...\n      DUP2 \t\t\tfunction withdrawFunds(address...\n      ADD \t\t\tfunction withdrawFunds(address...\n      SWAP1 \t\t\tfunction withdrawFunds(address...\n      PUSH [tag] 38\t\t\tfunction withdrawFunds(address...\n      SWAP2 \t\t\tfunction withdrawFunds(address...\n      SWAP1 \t\t\tfunction withdrawFunds(address...\n      PUSH [tag] 39\t\t\tfunction withdrawFunds(address...\n      JUMP \t\t\tfunction withdrawFunds(address...\n    tag 38\t\t\tfunction withdrawFunds(address...\n      JUMPDEST \t\t\tfunction withdrawFunds(address...\n      PUSH [tag] 40\t\t\tfunction withdrawFunds(address...\n      JUMP \t\t\tfunction withdrawFunds(address...\n    tag 37\t\t\tfunction withdrawFunds(address...\n      JUMPDEST \t\t\tfunction withdrawFunds(address...\n      STOP \t\t\tfunction withdrawFunds(address...\n    tag 8\t\t\tfunction claim(address NFTCont...\n      JUMPDEST \t\t\tfunction claim(address NFTCont...\n      PUSH [tag] 41\t\t\tfunction claim(address NFTCont...\n      PUSH 4\t\t\tfunction claim(address NFTCont...\n      DUP1 \t\t\tfunction claim(address NFTCont...\n      CALLDATASIZE \t\t\tfunction claim(address NFTCont...\n      SUB \t\t\tfunction claim(address NFTCont...\n      DUP2 \t\t\tfunction claim(address NFTCont...\n      ADD \t\t\tfunction claim(address NFTCont...\n      SWAP1 \t\t\tfunction claim(address NFTCont...\n      PUSH [tag] 42\t\t\tfunction claim(address NFTCont...\n      SWAP2 \t\t\tfunction claim(address NFTCont...\n      SWAP1 \t\t\tfunction claim(address NFTCont...\n      PUSH [tag] 26\t\t\tfunction claim(address NFTCont...\n      JUMP \t\t\tfunction claim(address NFTCont...\n    tag 42\t\t\tfunction claim(address NFTCont...\n      JUMPDEST \t\t\tfunction claim(address NFTCont...\n      PUSH [tag] 43\t\t\tfunction claim(address NFTCont...\n      JUMP \t\t\tfunction claim(address NFTCont...\n    tag 41\t\t\tfunction claim(address NFTCont...\n      JUMPDEST \t\t\tfunction claim(address NFTCont...\n      STOP \t\t\tfunction claim(address NFTCont...\n    tag 9\t\t\tmapping(address => address[]) ...\n      JUMPDEST \t\t\tmapping(address => address[]) ...\n      CALLVALUE \t\t\tmapping(address => address[]) ...\n      DUP1 \t\t\tmapping(address => address[]) ...\n      ISZERO \t\t\tmapping(address => address[]) ...\n      PUSH [tag] 44\t\t\tmapping(address => address[]) ...\n      JUMPI \t\t\tmapping(address => address[]) ...\n      PUSH 0\t\t\tmapping(address => address[]) ...\n      DUP1 \t\t\tmapping(address => address[]) ...\n      REVERT \t\t\tmapping(address => address[]) ...\n    tag 44\t\t\tmapping(address => address[]) ...\n      JUMPDEST \t\t\tmapping(address => address[]) ...\n      POP \t\t\tmapping(address => address[]) ...\n      PUSH [tag] 45\t\t\tmapping(address => address[]) ...\n      PUSH 4\t\t\tmapping(address => address[]) ...\n      DUP1 \t\t\tmapping(address => address[]) ...\n      CALLDATASIZE \t\t\tmapping(address => address[]) ...\n      SUB \t\t\tmapping(address => address[]) ...\n      DUP2 \t\t\tmapping(address => address[]) ...\n      ADD \t\t\tmapping(address => address[]) ...\n      SWAP1 \t\t\tmapping(address => address[]) ...\n      PUSH [tag] 46\t\t\tmapping(address => address[]) ...\n      SWAP2 \t\t\tmapping(address => address[]) ...\n      SWAP1 \t\t\tmapping(address => address[]) ...\n      PUSH [tag] 26\t\t\tmapping(address => address[]) ...\n      JUMP \t\t\tmapping(address => address[]) ...\n    tag 46\t\t\tmapping(address => address[]) ...\n      JUMPDEST \t\t\tmapping(address => address[]) ...\n      PUSH [tag] 47\t\t\tmapping(address => address[]) ...\n      JUMP \t\t\tmapping(address => address[]) ...\n    tag 45\t\t\tmapping(address => address[]) ...\n      JUMPDEST \t\t\tmapping(address => address[]) ...\n      PUSH 40\t\t\tmapping(address => address[]) ...\n      MLOAD \t\t\tmapping(address => address[]) ...\n      PUSH [tag] 48\t\t\tmapping(address => address[]) ...\n      SWAP2 \t\t\tmapping(address => address[]) ...\n      SWAP1 \t\t\tmapping(address => address[]) ...\n      PUSH [tag] 17\t\t\tmapping(address => address[]) ...\n      JUMP \t\t\tmapping(address => address[]) ...\n    tag 48\t\t\tmapping(address => address[]) ...\n      JUMPDEST \t\t\tmapping(address => address[]) ...\n      PUSH 40\t\t\tmapping(address => address[]) ...\n      MLOAD \t\t\tmapping(address => address[]) ...\n      DUP1 \t\t\tmapping(address => address[]) ...\n      SWAP2 \t\t\tmapping(address => address[]) ...\n      SUB \t\t\tmapping(address => address[]) ...\n      SWAP1 \t\t\tmapping(address => address[]) ...\n      RETURN \t\t\tmapping(address => address[]) ...\n    tag 15\t\t\tmapping(address => address) pu...\n      JUMPDEST \t\t\tmapping(address => address) pu...\n      PUSH 1\t\t\tmapping(address => address) pu...\n      PUSH 20\t\t\tmapping(address => address) pu...\n      MSTORE \t\t\tmapping(address => address) pu...\n      DUP1 \t\t\tmapping(address => address) pu...\n      PUSH 0\t\t\tmapping(address => address) pu...\n      MSTORE \t\t\tmapping(address => address) pu...\n      PUSH 40\t\t\tmapping(address => address) pu...\n      PUSH 0\t\t\tmapping(address => address) pu...\n      KECCAK256 \t\t\tmapping(address => address) pu...\n      PUSH 0\t\t\tmapping(address => address) pu...\n      SWAP2 \t\t\tmapping(address => address) pu...\n      POP \t\t\tmapping(address => address) pu...\n      SLOAD \t\t\tmapping(address => address) pu...\n      SWAP1 \t\t\tmapping(address => address) pu...\n      PUSH 100\t\t\tmapping(address => address) pu...\n      EXP \t\t\tmapping(address => address) pu...\n      SWAP1 \t\t\tmapping(address => address) pu...\n      DIV \t\t\tmapping(address => address) pu...\n      PUSH FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF\t\t\tmapping(address => address) pu...\n      AND \t\t\tmapping(address => address) pu...\n      DUP2 \t\t\tmapping(address => address) pu...\n      JUMP \t\t\tmapping(address => address) pu...\n    tag 20\t\t\tfunction getVaultDetails() pub...\n      JUMPDEST \t\t\tfunction getVaultDetails() pub...\n      PUSH 60\t\t\tVaultDetails[] memory\n      PUSH 0\t\t\taddress[] memory nftContracts\n      PUSH 2\t\t\tadminToNFTContracts\n      PUSH 0\t\t\tadminToNFTContracts[msg.sender...\n      CALLER \t\t\tmsg.sender\n      PUSH FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF\t\t\tadminToNFTContracts[msg.sender...\n      AND \t\t\tadminToNFTContracts[msg.sender...\n      PUSH FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF\t\t\tadminToNFTContracts[msg.sender...\n      AND \t\t\tadminToNFTContracts[msg.sender...\n      DUP2 \t\t\tadminToNFTContracts[msg.sender...\n      MSTORE \t\t\tadminToNFTContracts[msg.sender...\n      PUSH 20\t\t\tadminToNFTContracts[msg.sender...\n      ADD \t\t\tadminToNFTContracts[msg.sender...\n      SWAP1 \t\t\tadminToNFTContracts[msg.sender...\n      DUP2 \t\t\tadminToNFTContracts[msg.sender...\n      MSTORE \t\t\tadminToNFTContracts[msg.sender...\n      PUSH 20\t\t\tadminToNFTContracts[msg.sender...\n      ADD \t\t\tadminToNFTContracts[msg.sender...\n      PUSH 0\t\t\tadminToNFTContracts[msg.sender...\n      KECCAK256 \t\t\tadminToNFTContracts[msg.sender...\n      DUP1 \t\t\taddress[] memory nftContracts ...\n      SLOAD \t\t\taddress[] memory nftContracts ...\n      DUP1 \t\t\taddress[] memory nftContracts ...\n      PUSH 20\t\t\taddress[] memory nftContracts ...\n      MUL \t\t\taddress[] memory nftContracts ...\n      PUSH 20\t\t\taddress[] memory nftContracts ...\n      ADD \t\t\taddress[] memory nftContracts ...\n      PUSH 40\t\t\taddress[] memory nftContracts ...\n      MLOAD \t\t\taddress[] memory nftContracts ...\n      SWAP1 \t\t\taddress[] memory nftContracts ...\n      DUP2 \t\t\taddress[] memory nftContracts ...\n      ADD \t\t\taddress[] memory nftContracts ...\n      PUSH 40\t\t\taddress[] memory nftContracts ...\n      MSTORE \t\t\taddress[] memory nftContracts ...\n      DUP1 \t\t\taddress[] memory nftContracts ...\n      SWAP3 \t\t\taddress[] memory nftContracts ...\n      SWAP2 \t\t\taddress[] memory nftContracts ...\n      SWAP1 \t\t\taddress[] memory nftContracts ...\n      DUP2 \t\t\taddress[] memory nftContracts ...\n      DUP2 \t\t\taddress[] memory nftContracts ...\n      MSTORE \t\t\taddress[] memory nftContracts ...\n      PUSH 20\t\t\taddress[] memory nftContracts ...\n      ADD \t\t\taddress[] memory nftContracts ...\n      DUP3 \t\t\taddress[] memory nftContracts ...\n      DUP1 \t\t\taddress[] memory nftContracts ...\n      SLOAD \t\t\taddress[] memory nftContracts ...\n      DUP1 \t\t\taddress[] memory nftContracts ...\n      ISZERO \t\t\taddress[] memory nftContracts ...\n      PUSH [tag] 50\t\t\taddress[] memory nftContracts ...\n      JUMPI \t\t\taddress[] memory nftContracts ...\n      PUSH 20\t\t\taddress[] memory nftContracts ...\n      MUL \t\t\taddress[] memory nftContracts ...\n      DUP3 \t\t\taddress[] memory nftContracts ...\n      ADD \t\t\taddress[] memory nftContracts ...\n      SWAP2 \t\t\taddress[] memory nftContracts ...\n      SWAP1 \t\t\taddress[] memory nftContracts ...\n      PUSH 0\t\t\taddress[] memory nftContracts ...\n      MSTORE \t\t\taddress[] memory nftContracts ...\n      PUSH 20\t\t\taddress[] memory nftContracts ...\n      PUSH 0\t\t\taddress[] memory nftContracts ...\n      KECCAK256 \t\t\taddress[] memory nftContracts ...\n      SWAP1 \t\t\taddress[] memory nftContracts ...\n    tag 51\t\t\taddress[] memory nftContracts ...\n      JUMPDEST \t\t\taddress[] memory nftContracts ...\n      DUP2 \t\t\taddress[] memory nftContracts ...\n      PUSH 0\t\t\taddress[] memory nftContracts ...\n      SWAP1 \t\t\taddress[] memory nftContracts ...\n      SLOAD \t\t\taddress[] memory nftContracts ...\n      SWAP1 \t\t\taddress[] memory nftContracts ...\n      PUSH 100\t\t\taddress[] memory nftContracts ...\n      EXP \t\t\taddress[] memory nftContracts ...\n      SWAP1 \t\t\taddress[] memory nftContracts ...\n      DIV \t\t\taddress[] memory nftContracts ...\n      PUSH FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF\t\t\taddress[] memory nftContracts ...\n      AND \t\t\taddress[] memory nftContracts ...\n      PUSH FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF\t\t\taddress[] memory nftContracts ...\n      AND \t\t\taddress[] memory nftContracts ...\n      DUP2 \t\t\taddress[] memory nftContracts ...\n      MSTORE \t\t\taddress[] memory nftContracts ...\n      PUSH 20\t\t\taddress[] memory nftContracts ...\n      ADD \t\t\taddress[] memory nftContracts ...\n      SWAP1 \t\t\taddress[] memory nftContracts ...\n      PUSH 1\t\t\taddress[] memory nftContracts ...\n      ADD \t\t\taddress[] memory nftContracts ...\n      SWAP1 \t\t\taddress[] memory nftContracts ...\n      DUP1 \t\t\taddress[] memory nftContracts ...\n      DUP4 \t\t\taddress[] memory nftContracts ...\n      GT \t\t\taddress[] memory nftContracts ...\n      PUSH [tag] 51\t\t\taddress[] memory nftContracts ...\n      JUMPI \t\t\taddress[] memory nftContracts ...\n    tag 50\t\t\taddress[] memory nftContracts ...\n      JUMPDEST \t\t\taddress[] memory nftContracts ...\n      POP \t\t\taddress[] memory nftContracts ...\n      POP \t\t\taddress[] memory nftContracts ...\n      POP \t\t\taddress[] memory nftContracts ...\n      POP \t\t\taddress[] memory nftContracts ...\n      POP \t\t\taddress[] memory nftContracts ...\n      SWAP1 \t\t\taddress[] memory nftContracts ...\n      POP \t\t\taddress[] memory nftContracts ...\n      PUSH 0\t\t\tVaultDetails[] memory vaultDet...\n      DUP2 \t\t\tnftContracts\n      MLOAD \t\t\tnftContracts.length\n      PUSH FFFFFFFFFFFFFFFF\t\t\tnew VaultDetails[](nftContract...\n      DUP2 \t\t\tnew VaultDetails[](nftContract...\n      GT \t\t\tnew VaultDetails[](nftContract...\n      ISZERO \t\t\tnew VaultDetails[](nftContract...\n      PUSH [tag] 52\t\t\tnew VaultDetails[](nftContract...\n      JUMPI \t\t\tnew VaultDetails[](nftContract...\n      PUSH [tag] 53\t\t\tnew VaultDetails[](nftContract...\n      PUSH [tag] 54\t\t\tnew VaultDetails[](nftContract...\n      JUMP \t\t\tnew VaultDetails[](nftContract...\n    tag 53\t\t\tnew VaultDetails[](nftContract...\n      JUMPDEST \t\t\tnew VaultDetails[](nftContract...\n    tag 52\t\t\tnew VaultDetails[](nftContract...\n      JUMPDEST \t\t\tnew VaultDetails[](nftContract...\n      PUSH 40\t\t\tnew VaultDetails[](nftContract...\n      MLOAD \t\t\tnew VaultDetails[](nftContract...\n      SWAP1 \t\t\tnew VaultDetails[](nftContract...\n      DUP1 \t\t\tnew VaultDetails[](nftContract...\n      DUP3 \t\t\tnew VaultDetails[](nftContract...\n      MSTORE \t\t\tnew VaultDetails[](nftContract...\n      DUP1 \t\t\tnew VaultDetails[](nftContract...\n      PUSH 20\t\t\tnew VaultDetails[](nftContract...\n      MUL \t\t\tnew VaultDetails[](nftContract...\n      PUSH 20\t\t\tnew VaultDetails[](nftContract...\n      ADD \t\t\tnew VaultDetails[](nftContract...\n      DUP3 \t\t\tnew VaultDetails[](nftContract...\n      ADD \t\t\tnew VaultDetails[](nftContract...\n      PUSH 40\t\t\tnew VaultDetails[](nftContract...\n      MSTORE \t\t\tnew VaultDetails[](nftContract...\n      DUP1 \t\t\tnew VaultDetails[](nftContract...\n      ISZERO \t\t\tnew VaultDetails[](nftContract...\n      PUSH [tag] 55\t\t\tnew VaultDetails[](nftContract...\n      JUMPI \t\t\tnew VaultDetails[](nftContract...\n      DUP2 \t\t\tnew VaultDetails[](nftContract...\n      PUSH 20\t\t\tnew VaultDetails[](nftContract...\n      ADD \t\t\tnew VaultDetails[](nftContract...\n    tag 56\t\t\tnew VaultDetails[](nftContract...\n      JUMPDEST \t\t\tnew VaultDetails[](nftContract...\n      PUSH [tag] 57\t\t\tnew VaultDetails[](nftContract...\n      PUSH [tag] 58\t\t\tnew VaultDetails[](nftContract...\n      JUMP \t\t\tnew VaultDetails[](nftContract...\n    tag 57\t\t\tnew VaultDetails[](nftContract...\n      JUMPDEST \t\t\tnew VaultDetails[](nftContract...\n      DUP2 \t\t\tnew VaultDetails[](nftContract...\n      MSTORE \t\t\tnew VaultDetails[](nftContract...\n      PUSH 20\t\t\tnew VaultDetails[](nftContract...\n      ADD \t\t\tnew VaultDetails[](nftContract...\n      SWAP1 \t\t\tnew VaultDetails[](nftContract...\n      PUSH 1\t\t\tnew VaultDetails[](nftContract...\n      SWAP1 \t\t\tnew VaultDetails[](nftContract...\n      SUB \t\t\tnew VaultDetails[](nftContract...\n      SWAP1 \t\t\tnew VaultDetails[](nftContract...\n      DUP2 \t\t\tnew VaultDetails[](nftContract...\n      PUSH [tag] 56\t\t\tnew VaultDetails[](nftContract...\n      JUMPI \t\t\tnew VaultDetails[](nftContract...\n      SWAP1 \t\t\tnew VaultDetails[](nftContract...\n      POP \t\t\tnew VaultDetails[](nftContract...\n    tag 55\t\t\tnew VaultDetails[](nftContract...\n      JUMPDEST \t\t\tnew VaultDetails[](nftContract...\n      POP \t\t\tnew VaultDetails[](nftContract...\n      SWAP1 \t\t\tVaultDetails[] memory vaultDet...\n      POP \t\t\tVaultDetails[] memory vaultDet...\n      PUSH 0\t\t\tuint i\n    tag 59\t\t\tfor (uint i = 0; i < nftContra...\n      JUMPDEST \t\t\tfor (uint i = 0; i < nftContra...\n      DUP3 \t\t\tnftContracts\n      MLOAD \t\t\tnftContracts.length\n      DUP2 \t\t\ti\n      LT \t\t\ti < nftContracts.length\n      ISZERO \t\t\tfor (uint i = 0; i < nftContra...\n      PUSH [tag] 60\t\t\tfor (uint i = 0; i < nftContra...\n      JUMPI \t\t\tfor (uint i = 0; i < nftContra...\n      PUSH 0\t\t\tVault vault\n      PUSH 1\t\t\tvaultAddress\n      PUSH 0\t\t\tvaultAddress[nftContracts[i]]\n      DUP6 \t\t\tnftContracts\n      DUP5 \t\t\ti\n      DUP2 \t\t\tnftContracts[i]\n      MLOAD \t\t\tnftContracts[i]\n      DUP2 \t\t\tnftContracts[i]\n      LT \t\t\tnftContracts[i]\n      PUSH [tag] 62\t\t\tnftContracts[i]\n      JUMPI \t\t\tnftContracts[i]\n      PUSH [tag] 63\t\t\tnftContracts[i]\n      PUSH [tag] 64\t\t\tnftContracts[i]\n      JUMP \t\t\tnftContracts[i]\n    tag 63\t\t\tnftContracts[i]\n      JUMPDEST \t\t\tnftContracts[i]\n    tag 62\t\t\tnftContracts[i]\n      JUMPDEST \t\t\tnftContracts[i]\n      PUSH 20\t\t\tnftContracts[i]\n      MUL \t\t\tnftContracts[i]\n      PUSH 20\t\t\tnftContracts[i]\n      ADD \t\t\tnftContracts[i]\n      ADD \t\t\tnftContracts[i]\n      MLOAD \t\t\tnftContracts[i]\n      PUSH FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF\t\t\tvaultAddress[nftContracts[i]]\n      AND \t\t\tvaultAddress[nftContracts[i]]\n      PUSH FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF\t\t\tvaultAddress[nftContracts[i]]\n      AND \t\t\tvaultAddress[nftContracts[i]]\n      DUP2 \t\t\tvaultAddress[nftContracts[i]]\n      MSTORE \t\t\tvaultAddress[nftContracts[i]]\n      PUSH 20\t\t\tvaultAddress[nftContracts[i]]\n      ADD \t\t\tvaultAddress[nftContracts[i]]\n      SWAP1 \t\t\tvaultAddress[nftContracts[i]]\n      DUP2 \t\t\tvaultAddress[nftContracts[i]]\n      MSTORE \t\t\tvaultAddress[nftContracts[i]]\n      PUSH 20\t\t\tvaultAddress[nftContracts[i]]\n      ADD \t\t\tvaultAddress[nftContracts[i]]\n      PUSH 0\t\t\tvaultAddress[nftContracts[i]]\n      KECCAK256 \t\t\tvaultAddress[nftContracts[i]]\n      PUSH 0\t\t\tvaultAddress[nftContracts[i]]\n      SWAP1 \t\t\tvaultAddress[nftContracts[i]]\n      SLOAD \t\t\tvaultAddress[nftContracts[i]]\n      SWAP1 \t\t\tvaultAddress[nftContracts[i]]\n      PUSH 100\t\t\tvaultAddress[nftContracts[i]]\n      EXP \t\t\tvaultAddress[nftContracts[i]]\n      SWAP1 \t\t\tvaultAddress[nftContracts[i]]\n      DIV \t\t\tvaultAddress[nftContracts[i]]\n      PUSH FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF\t\t\tvaultAddress[nftContracts[i]]\n      AND \t\t\tvaultAddress[nftContracts[i]]\n      SWAP1 \t\t\tVault vault = Vault(payable(va...\n      POP \t\t\tVault vault = Vault(payable(va...\n      PUSH 0\t\t\tuint256[] memory insuredTokenI...\n      DUP2 \t\t\tvault\n      PUSH FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF\t\t\tvault.getTokenIds\n      AND \t\t\tvault.getTokenIds\n      PUSH 67F718A9\t\t\tvault.getTokenIds\n      PUSH 40\t\t\tvault.getTokenIds()\n      MLOAD \t\t\tvault.getTokenIds()\n      DUP2 \t\t\tvault.getTokenIds()\n      PUSH FFFFFFFF\t\t\tvault.getTokenIds()\n      AND \t\t\tvault.getTokenIds()\n      PUSH E0\t\t\tvault.getTokenIds()\n      SHL \t\t\tvault.getTokenIds()\n      DUP2 \t\t\tvault.getTokenIds()\n      MSTORE \t\t\tvault.getTokenIds()\n      PUSH 4\t\t\tvault.getTokenIds()\n      ADD \t\t\tvault.getTokenIds()\n      PUSH 0\t\t\tvault.getTokenIds()\n      PUSH 40\t\t\tvault.getTokenIds()\n      MLOAD \t\t\tvault.getTokenIds()\n      DUP1 \t\t\tvault.getTokenIds()\n      DUP4 \t\t\tvault.getTokenIds()\n      SUB \t\t\tvault.getTokenIds()\n      DUP2 \t\t\tvault.getTokenIds()\n      DUP7 \t\t\tvault.getTokenIds()\n      GAS \t\t\tvault.getTokenIds()\n      STATICCALL \t\t\tvault.getTokenIds()\n      ISZERO \t\t\tvault.getTokenIds()\n      DUP1 \t\t\tvault.getTokenIds()\n      ISZERO \t\t\tvault.getTokenIds()\n      PUSH [tag] 66\t\t\tvault.getTokenIds()\n      JUMPI \t\t\tvault.getTokenIds()\n      RETURNDATASIZE \t\t\tvault.getTokenIds()\n      PUSH 0\t\t\tvault.getTokenIds()\n      DUP1 \t\t\tvault.getTokenIds()\n      RETURNDATACOPY \t\t\tvault.getTokenIds()\n      RETURNDATASIZE \t\t\tvault.getTokenIds()\n      PUSH 0\t\t\tvault.getTokenIds()\n      REVERT \t\t\tvault.getTokenIds()\n    tag 66\t\t\tvault.getTokenIds()\n      JUMPDEST \t\t\tvault.getTokenIds()\n      POP \t\t\tvault.getTokenIds()\n      POP \t\t\tvault.getTokenIds()\n      POP \t\t\tvault.getTokenIds()\n      POP \t\t\tvault.getTokenIds()\n      PUSH 40\t\t\tvault.getTokenIds()\n      MLOAD \t\t\tvault.getTokenIds()\n      RETURNDATASIZE \t\t\tvault.getTokenIds()\n      PUSH 0\t\t\tvault.getTokenIds()\n      DUP3 \t\t\tvault.getTokenIds()\n      RETURNDATACOPY \t\t\tvault.getTokenIds()\n      RETURNDATASIZE \t\t\tvault.getTokenIds()\n      PUSH 1F\t\t\tvault.getTokenIds()\n      NOT \t\t\tvault.getTokenIds()\n      PUSH 1F\t\t\tvault.getTokenIds()\n      DUP3 \t\t\tvault.getTokenIds()\n      ADD \t\t\tvault.getTokenIds()\n      AND \t\t\tvault.getTokenIds()\n      DUP3 \t\t\tvault.getTokenIds()\n      ADD \t\t\tvault.getTokenIds()\n      DUP1 \t\t\tvault.getTokenIds()\n      PUSH 40\t\t\tvault.getTokenIds()\n      MSTORE \t\t\tvault.getTokenIds()\n      POP \t\t\tvault.getTokenIds()\n      DUP2 \t\t\tvault.getTokenIds()\n      ADD \t\t\tvault.getTokenIds()\n      SWAP1 \t\t\tvault.getTokenIds()\n      PUSH [tag] 67\t\t\tvault.getTokenIds()\n      SWAP2 \t\t\tvault.getTokenIds()\n      SWAP1 \t\t\tvault.getTokenIds()\n      PUSH [tag] 68\t\t\tvault.getTokenIds()\n      JUMP \t\t\tvault.getTokenIds()\n    tag 67\t\t\tvault.getTokenIds()\n      JUMPDEST \t\t\tvault.getTokenIds()\n      SWAP1 \t\t\tuint256[] memory insuredTokenI...\n      POP \t\t\tuint256[] memory insuredTokenI...\n      PUSH 0\t\t\tVaultDetails memory vaultDetai...\n      PUSH 40\t\t\tVaultDetails({\\n              ...\n      MLOAD \t\t\tVaultDetails({\\n              ...\n      DUP1 \t\t\tVaultDetails({\\n              ...\n      PUSH 80\t\t\tVaultDetails({\\n              ...\n      ADD \t\t\tVaultDetails({\\n              ...\n      PUSH 40\t\t\tVaultDetails({\\n              ...\n      MSTORE \t\t\tVaultDetails({\\n              ...\n      DUP1 \t\t\tVaultDetails({\\n              ...\n      DUP5 \t\t\tvault\n      PUSH FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF\t\t\taddress(vault).balance\n      AND \t\t\taddress(vault).balance\n      BALANCE \t\t\taddress(vault).balance\n      DUP2 \t\t\tVaultDetails({\\n              ...\n      MSTORE \t\t\tVaultDetails({\\n              ...\n      PUSH 20\t\t\tVaultDetails({\\n              ...\n      ADD \t\t\tVaultDetails({\\n              ...\n      DUP5 \t\t\tvault\n      PUSH FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF\t\t\tvault.minTime\n      AND \t\t\tvault.minTime\n      PUSH 1AA43078\t\t\tvault.minTime\n      PUSH 40\t\t\tvault.minTime()\n      MLOAD \t\t\tvault.minTime()\n      DUP2 \t\t\tvault.minTime()\n      PUSH FFFFFFFF\t\t\tvault.minTime()\n      AND \t\t\tvault.minTime()\n      PUSH E0\t\t\tvault.minTime()\n      SHL \t\t\tvault.minTime()\n      DUP2 \t\t\tvault.minTime()\n      MSTORE \t\t\tvault.minTime()\n      PUSH 4\t\t\tvault.minTime()\n      ADD \t\t\tvault.minTime()\n      PUSH 20\t\t\tvault.minTime()\n      PUSH 40\t\t\tvault.minTime()\n      MLOAD \t\t\tvault.minTime()\n      DUP1 \t\t\tvault.minTime()\n      DUP4 \t\t\tvault.minTime()\n      SUB \t\t\tvault.minTime()\n      DUP2 \t\t\tvault.minTime()\n      DUP7 \t\t\tvault.minTime()\n      GAS \t\t\tvault.minTime()\n      STATICCALL \t\t\tvault.minTime()\n      ISZERO \t\t\tvault.minTime()\n      DUP1 \t\t\tvault.minTime()\n      ISZERO \t\t\tvault.minTime()\n      PUSH [tag] 70\t\t\tvault.minTime()\n      JUMPI \t\t\tvault.minTime()\n      RETURNDATASIZE \t\t\tvault.minTime()\n      PUSH 0\t\t\tvault.minTime()\n      DUP1 \t\t\tvault.minTime()\n      RETURNDATACOPY \t\t\tvault.minTime()\n      RETURNDATASIZE \t\t\tvault.minTime()\n      PUSH 0\t\t\tvault.minTime()\n      REVERT \t\t\tvault.minTime()\n    tag 70\t\t\tvault.minTime()\n      JUMPDEST \t\t\tvault.minTime()\n      POP \t\t\tvault.minTime()\n      POP \t\t\tvault.minTime()\n      POP \t\t\tvault.minTime()\n      POP \t\t\tvault.minTime()\n      PUSH 40\t\t\tvault.minTime()\n      MLOAD \t\t\tvault.minTime()\n      RETURNDATASIZE \t\t\tvault.minTime()\n      PUSH 1F\t\t\tvault.minTime()\n      NOT \t\t\tvault.minTime()\n      PUSH 1F\t\t\tvault.minTime()\n      DUP3 \t\t\tvault.minTime()\n      ADD \t\t\tvault.minTime()\n      AND \t\t\tvault.minTime()\n      DUP3 \t\t\tvault.minTime()\n      ADD \t\t\tvault.minTime()\n      DUP1 \t\t\tvault.minTime()\n      PUSH 40\t\t\tvault.minTime()\n      MSTORE \t\t\tvault.minTime()\n      POP \t\t\tvault.minTime()\n      DUP2 \t\t\tvault.minTime()\n      ADD \t\t\tvault.minTime()\n      SWAP1 \t\t\tvault.minTime()\n      PUSH [tag] 71\t\t\tvault.minTime()\n      SWAP2 \t\t\tvault.minTime()\n      SWAP1 \t\t\tvault.minTime()\n      PUSH [tag] 72\t\t\tvault.minTime()\n      JUMP \t\t\tvault.minTime()\n    tag 71\t\t\tvault.minTime()\n      JUMPDEST \t\t\tvault.minTime()\n      PUSH 2\t\t\t2\n      PUSH [tag] 73\t\t\t2 * vault.minTime()\n      SWAP2 \t\t\t2 * vault.minTime()\n      SWAP1 \t\t\t2 * vault.minTime()\n      PUSH [tag] 74\t\t\t2 * vault.minTime()\n      JUMP \t\t\t2 * vault.minTime()\n    tag 73\t\t\t2 * vault.minTime()\n      JUMPDEST \t\t\t2 * vault.minTime()\n      DUP2 \t\t\tVaultDetails({\\n              ...\n      MSTORE \t\t\tVaultDetails({\\n              ...\n      PUSH 20\t\t\tVaultDetails({\\n              ...\n      ADD \t\t\tVaultDetails({\\n              ...\n      DUP4 \t\t\tinsuredTokenIds\n      DUP2 \t\t\tVaultDetails({\\n              ...\n      MSTORE \t\t\tVaultDetails({\\n              ...\n      PUSH 20\t\t\tVaultDetails({\\n              ...\n      ADD \t\t\tVaultDetails({\\n              ...\n      DUP8 \t\t\tnftContracts\n      DUP7 \t\t\ti\n      DUP2 \t\t\tnftContracts[i]\n      MLOAD \t\t\tnftContracts[i]\n      DUP2 \t\t\tnftContracts[i]\n      LT \t\t\tnftContracts[i]\n      PUSH [tag] 75\t\t\tnftContracts[i]\n      JUMPI \t\t\tnftContracts[i]\n      PUSH [tag] 76\t\t\tnftContracts[i]\n      PUSH [tag] 64\t\t\tnftContracts[i]\n      JUMP \t\t\tnftContracts[i]\n    tag 76\t\t\tnftContracts[i]\n      JUMPDEST \t\t\tnftContracts[i]\n    tag 75\t\t\tnftContracts[i]\n      JUMPDEST \t\t\tnftContracts[i]\n      PUSH 20\t\t\tnftContracts[i]\n      MUL \t\t\tnftContracts[i]\n      PUSH 20\t\t\tnftContracts[i]\n      ADD \t\t\tnftContracts[i]\n      ADD \t\t\tnftContracts[i]\n      MLOAD \t\t\tnftContracts[i]\n      PUSH FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF\t\t\tVaultDetails({\\n              ...\n      AND \t\t\tVaultDetails({\\n              ...\n      DUP2 \t\t\tVaultDetails({\\n              ...\n      MSTORE \t\t\tVaultDetails({\\n              ...\n      POP \t\t\tVaultDetails({\\n              ...\n      SWAP1 \t\t\tVaultDetails memory vaultDetai...\n      POP \t\t\tVaultDetails memory vaultDetai...\n      DUP1 \t\t\tvaultDetails\n      DUP6 \t\t\tvaultDetailArray\n      DUP6 \t\t\ti\n      DUP2 \t\t\tvaultDetailArray[i]\n      MLOAD \t\t\tvaultDetailArray[i]\n      DUP2 \t\t\tvaultDetailArray[i]\n      LT \t\t\tvaultDetailArray[i]\n      PUSH [tag] 77\t\t\tvaultDetailArray[i]\n      JUMPI \t\t\tvaultDetailArray[i]\n      PUSH [tag] 78\t\t\tvaultDetailArray[i]\n      PUSH [tag] 64\t\t\tvaultDetailArray[i]\n      JUMP \t\t\tvaultDetailArray[i]\n    tag 78\t\t\tvaultDetailArray[i]\n      JUMPDEST \t\t\tvaultDetailArray[i]\n    tag 77\t\t\tvaultDetailArray[i]\n      JUMPDEST \t\t\tvaultDetailArray[i]\n      PUSH 20\t\t\tvaultDetailArray[i]\n      MUL \t\t\tvaultDetailArray[i]\n      PUSH 20\t\t\tvaultDetailArray[i]\n      ADD \t\t\tvaultDetailArray[i]\n      ADD \t\t\tvaultDetailArray[i]\n      DUP2 \t\t\tvaultDetailArray[i] = vaultDet...\n      SWAP1 \t\t\tvaultDetailArray[i] = vaultDet...\n      MSTORE \t\t\tvaultDetailArray[i] = vaultDet...\n      POP \t\t\tvaultDetailArray[i] = vaultDet...\n      POP \t\t\t{\\n            Vault vault = V...\n      POP \t\t\t{\\n            Vault vault = V...\n      POP \t\t\t{\\n            Vault vault = V...\n      DUP1 \t\t\ti++\n      DUP1 \t\t\ti++\n      PUSH [tag] 79\t\t\ti++\n      SWAP1 \t\t\ti++\n      PUSH [tag] 80\t\t\ti++\n      JUMP \t\t\ti++\n    tag 79\t\t\ti++\n      JUMPDEST \t\t\ti++\n      SWAP2 \t\t\ti++\n      POP \t\t\ti++\n      POP \t\t\ti++\n      PUSH [tag] 59\t\t\tfor (uint i = 0; i < nftContra...\n      JUMP \t\t\tfor (uint i = 0; i < nftContra...\n    tag 60\t\t\tfor (uint i = 0; i < nftContra...\n      JUMPDEST \t\t\tfor (uint i = 0; i < nftContra...\n      POP \t\t\tfor (uint i = 0; i < nftContra...\n      DUP1 \t\t\tvaultDetailArray\n      SWAP3 \t\t\treturn vaultDetailArray\n      POP \t\t\treturn vaultDetailArray\n      POP \t\t\treturn vaultDetailArray\n      POP \t\t\treturn vaultDetailArray\n      SWAP1 \t\t\tfunction getVaultDetails() pub...\n      JUMP \t\t\tfunction getVaultDetails() pub...\n    tag 27\t\t\tfunction createVault(address _...\n      JUMPDEST \t\t\tfunction createVault(address _...\n      PUSH 0\t\t\t0\n      PUSH FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF\t\t\tvaultAddress[_NFTContractAddre...\n      AND \t\t\tvaultAddress[_NFTContractAddre...\n      PUSH 1\t\t\tvaultAddress\n      PUSH 0\t\t\tvaultAddress[_NFTContractAddre...\n      DUP5 \t\t\t_NFTContractAddress\n      PUSH FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF\t\t\tvaultAddress[_NFTContractAddre...\n      AND \t\t\tvaultAddress[_NFTContractAddre...\n      PUSH FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF\t\t\tvaultAddress[_NFTContractAddre...\n      AND \t\t\tvaultAddress[_NFTContractAddre...\n      DUP2 \t\t\tvaultAddress[_NFTContractAddre...\n      MSTORE \t\t\tvaultAddress[_NFTContractAddre...\n      PUSH 20\t\t\tvaultAddress[_NFTContractAddre...\n      ADD \t\t\tvaultAddress[_NFTContractAddre...\n      SWAP1 \t\t\tvaultAddress[_NFTContractAddre...\n      DUP2 \t\t\tvaultAddress[_NFTContractAddre...\n      MSTORE \t\t\tvaultAddress[_NFTContractAddre...\n      PUSH 20\t\t\tvaultAddress[_NFTContractAddre...\n      ADD \t\t\tvaultAddress[_NFTContractAddre...\n      PUSH 0\t\t\tvaultAddress[_NFTContractAddre...\n      KECCAK256 \t\t\tvaultAddress[_NFTContractAddre...\n      PUSH 0\t\t\tvaultAddress[_NFTContractAddre...\n      SWAP1 \t\t\tvaultAddress[_NFTContractAddre...\n      SLOAD \t\t\tvaultAddress[_NFTContractAddre...\n      SWAP1 \t\t\tvaultAddress[_NFTContractAddre...\n      PUSH 100\t\t\tvaultAddress[_NFTContractAddre...\n      EXP \t\t\tvaultAddress[_NFTContractAddre...\n      SWAP1 \t\t\tvaultAddress[_NFTContractAddre...\n      DIV \t\t\tvaultAddress[_NFTContractAddre...\n      PUSH FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF\t\t\tvaultAddress[_NFTContractAddre...\n      AND \t\t\tvaultAddress[_NFTContractAddre...\n      PUSH FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF\t\t\tvaultAddress[_NFTContractAddre...\n      AND \t\t\tvaultAddress[_NFTContractAddre...\n      EQ \t\t\tvaultAddress[_NFTContractAddre...\n      PUSH [tag] 82\t\t\trequire(vaultAddress[_NFTContr...\n      JUMPI \t\t\trequire(vaultAddress[_NFTContr...\n      PUSH 40\t\t\trequire(vaultAddress[_NFTContr...\n      MLOAD \t\t\trequire(vaultAddress[_NFTContr...\n      PUSH 8C379A000000000000000000000000000000000000000000000000000000000\t\t\trequire(vaultAddress[_NFTContr...\n      DUP2 \t\t\trequire(vaultAddress[_NFTContr...\n      MSTORE \t\t\trequire(vaultAddress[_NFTContr...\n      PUSH 4\t\t\trequire(vaultAddress[_NFTContr...\n      ADD \t\t\trequire(vaultAddress[_NFTContr...\n      PUSH [tag] 83\t\t\trequire(vaultAddress[_NFTContr...\n      SWAP1 \t\t\trequire(vaultAddress[_NFTContr...\n      PUSH [tag] 84\t\t\trequire(vaultAddress[_NFTContr...\n      JUMP \t\t\trequire(vaultAddress[_NFTContr...\n    tag 83\t\t\trequire(vaultAddress[_NFTContr...\n      JUMPDEST \t\t\trequire(vaultAddress[_NFTContr...\n      PUSH 40\t\t\trequire(vaultAddress[_NFTContr...\n      MLOAD \t\t\trequire(vaultAddress[_NFTContr...\n      DUP1 \t\t\trequire(vaultAddress[_NFTContr...\n      SWAP2 \t\t\trequire(vaultAddress[_NFTContr...\n      SUB \t\t\trequire(vaultAddress[_NFTContr...\n      SWAP1 \t\t\trequire(vaultAddress[_NFTContr...\n      REVERT \t\t\trequire(vaultAddress[_NFTContr...\n    tag 82\t\t\trequire(vaultAddress[_NFTContr...\n      JUMPDEST \t\t\trequire(vaultAddress[_NFTContr...\n      PUSH 0\t\t\tVault vault\n      DUP3 \t\t\t_NFTContractAddress\n      DUP3 \t\t\t_minTime\n      CALLER \t\t\tmsg.sender\n      PUSH 40\t\t\tnew Vault(_NFTContractAddress,...\n      MLOAD \t\t\tnew Vault(_NFTContractAddress,...\n      PUSH [tag] 85\t\t\tnew Vault(_NFTContractAddress,...\n      SWAP1 \t\t\tnew Vault(_NFTContractAddress,...\n      PUSH [tag] 86\t\t\tnew Vault(_NFTContractAddress,...\n      JUMP \t\t\tnew Vault(_NFTContractAddress,...\n    tag 85\t\t\tnew Vault(_NFTContractAddress,...\n      JUMPDEST \t\t\tnew Vault(_NFTContractAddress,...\n      PUSH [tag] 87\t\t\tnew Vault(_NFTContractAddress,...\n      SWAP4 \t\t\tnew Vault(_NFTContractAddress,...\n      SWAP3 \t\t\tnew Vault(_NFTContractAddress,...\n      SWAP2 \t\t\tnew Vault(_NFTContractAddress,...\n      SWAP1 \t\t\tnew Vault(_NFTContractAddress,...\n      PUSH [tag] 88\t\t\tnew Vault(_NFTContractAddress,...\n      JUMP \t\t\tnew Vault(_NFTContractAddress,...\n    tag 87\t\t\tnew Vault(_NFTContractAddress,...\n      JUMPDEST \t\t\tnew Vault(_NFTContractAddress,...\n      PUSH 40\t\t\tnew Vault(_NFTContractAddress,...\n      MLOAD \t\t\tnew Vault(_NFTContractAddress,...\n      DUP1 \t\t\tnew Vault(_NFTContractAddress,...\n      SWAP2 \t\t\tnew Vault(_NFTContractAddress,...\n      SUB \t\t\tnew Vault(_NFTContractAddress,...\n      SWAP1 \t\t\tnew Vault(_NFTContractAddress,...\n      PUSH 0\t\t\tnew Vault(_NFTContractAddress,...\n      CREATE \t\t\tnew Vault(_NFTContractAddress,...\n      DUP1 \t\t\tnew Vault(_NFTContractAddress,...\n      ISZERO \t\t\tnew Vault(_NFTContractAddress,...\n      DUP1 \t\t\tnew Vault(_NFTContractAddress,...\n      ISZERO \t\t\tnew Vault(_NFTContractAddress,...\n      PUSH [tag] 89\t\t\tnew Vault(_NFTContractAddress,...\n      JUMPI \t\t\tnew Vault(_NFTContractAddress,...\n      RETURNDATASIZE \t\t\tnew Vault(_NFTContractAddress,...\n      PUSH 0\t\t\tnew Vault(_NFTContractAddress,...\n      DUP1 \t\t\tnew Vault(_NFTContractAddress,...\n      RETURNDATACOPY \t\t\tnew Vault(_NFTContractAddress,...\n      RETURNDATASIZE \t\t\tnew Vault(_NFTContractAddress,...\n      PUSH 0\t\t\tnew Vault(_NFTContractAddress,...\n      REVERT \t\t\tnew Vault(_NFTContractAddress,...\n    tag 89\t\t\tnew Vault(_NFTContractAddress,...\n      JUMPDEST \t\t\tnew Vault(_NFTContractAddress,...\n      POP \t\t\tnew Vault(_NFTContractAddress,...\n      SWAP1 \t\t\tVault vault = new Vault(_NFTCo...\n      POP \t\t\tVault vault = new Vault(_NFTCo...\n      PUSH 0\t\t\tvaults\n      DUP2 \t\t\tvault\n      SWAP1 \t\t\tvaults.push(vault)\n      DUP1 \t\t\tvaults.push(vault)\n      PUSH 1\t\t\tvaults.push(vault)\n      DUP2 \t\t\tvaults.push(vault)\n      SLOAD \t\t\tvaults.push(vault)\n      ADD \t\t\tvaults.push(vault)\n      DUP1 \t\t\tvaults.push(vault)\n      DUP3 \t\t\tvaults.push(vault)\n      SSTORE \t\t\tvaults.push(vault)\n      DUP1 \t\t\tvaults.push(vault)\n      SWAP2 \t\t\tvaults.push(vault)\n      POP \t\t\tvaults.push(vault)\n      POP \t\t\tvaults.push(vault)\n      PUSH 1\t\t\tvaults.push(vault)\n      SWAP1 \t\t\tvaults.push(vault)\n      SUB \t\t\tvaults.push(vault)\n      SWAP1 \t\t\tvaults.push(vault)\n      PUSH 0\t\t\tvaults.push(vault)\n      MSTORE \t\t\tvaults.push(vault)\n      PUSH 20\t\t\tvaults.push(vault)\n      PUSH 0\t\t\tvaults.push(vault)\n      KECCAK256 \t\t\tvaults.push(vault)\n      ADD \t\t\tvaults.push(vault)\n      PUSH 0\t\t\tvaults.push(vault)\n      SWAP1 \t\t\tvaults.push(vault)\n      SWAP2 \t\t\tvaults.push(vault)\n      SWAP1 \t\t\tvaults.push(vault)\n      SWAP2 \t\t\tvaults.push(vault)\n      SWAP1 \t\t\tvaults.push(vault)\n      SWAP2 \t\t\tvaults.push(vault)\n      PUSH 100\t\t\tvaults.push(vault)\n      EXP \t\t\tvaults.push(vault)\n      DUP2 \t\t\tvaults.push(vault)\n      SLOAD \t\t\tvaults.push(vault)\n      DUP2 \t\t\tvaults.push(vault)\n      PUSH FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF\t\t\tvaults.push(vault)\n      MUL \t\t\tvaults.push(vault)\n      NOT \t\t\tvaults.push(vault)\n      AND \t\t\tvaults.push(vault)\n      SWAP1 \t\t\tvaults.push(vault)\n      DUP4 \t\t\tvaults.push(vault)\n      PUSH FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF\t\t\tvaults.push(vault)\n      AND \t\t\tvaults.push(vault)\n      MUL \t\t\tvaults.push(vault)\n      OR \t\t\tvaults.push(vault)\n      SWAP1 \t\t\tvaults.push(vault)\n      SSTORE \t\t\tvaults.push(vault)\n      POP \t\t\tvaults.push(vault)\n      DUP1 \t\t\tvault\n      PUSH 1\t\t\tvaultAddress\n      PUSH 0\t\t\tvaultAddress[_NFTContractAddre...\n      DUP6 \t\t\t_NFTContractAddress\n      PUSH FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF\t\t\tvaultAddress[_NFTContractAddre...\n      AND \t\t\tvaultAddress[_NFTContractAddre...\n      PUSH FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF\t\t\tvaultAddress[_NFTContractAddre...\n      AND \t\t\tvaultAddress[_NFTContractAddre...\n      DUP2 \t\t\tvaultAddress[_NFTContractAddre...\n      MSTORE \t\t\tvaultAddress[_NFTContractAddre...\n      PUSH 20\t\t\tvaultAddress[_NFTContractAddre...\n      ADD \t\t\tvaultAddress[_NFTContractAddre...\n      SWAP1 \t\t\tvaultAddress[_NFTContractAddre...\n      DUP2 \t\t\tvaultAddress[_NFTContractAddre...\n      MSTORE \t\t\tvaultAddress[_NFTContractAddre...\n      PUSH 20\t\t\tvaultAddress[_NFTContractAddre...\n      ADD \t\t\tvaultAddress[_NFTContractAddre...\n      PUSH 0\t\t\tvaultAddress[_NFTContractAddre...\n      KECCAK256 \t\t\tvaultAddress[_NFTContractAddre...\n      PUSH 0\t\t\tvaultAddress[_NFTContractAddre...\n      PUSH 100\t\t\tvaultAddress[_NFTContractAddre...\n      EXP \t\t\tvaultAddress[_NFTContractAddre...\n      DUP2 \t\t\tvaultAddress[_NFTContractAddre...\n      SLOAD \t\t\tvaultAddress[_NFTContractAddre...\n      DUP2 \t\t\tvaultAddress[_NFTContractAddre...\n      PUSH FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF\t\t\tvaultAddress[_NFTContractAddre...\n      MUL \t\t\tvaultAddress[_NFTContractAddre...\n      NOT \t\t\tvaultAddress[_NFTContractAddre...\n      AND \t\t\tvaultAddress[_NFTContractAddre...\n      SWAP1 \t\t\tvaultAddress[_NFTContractAddre...\n      DUP4 \t\t\tvaultAddress[_NFTContractAddre...\n      PUSH FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF\t\t\tvaultAddress[_NFTContractAddre...\n      AND \t\t\tvaultAddress[_NFTContractAddre...\n      MUL \t\t\tvaultAddress[_NFTContractAddre...\n      OR \t\t\tvaultAddress[_NFTContractAddre...\n      SWAP1 \t\t\tvaultAddress[_NFTContractAddre...\n      SSTORE \t\t\tvaultAddress[_NFTContractAddre...\n      POP \t\t\tvaultAddress[_NFTContractAddre...\n      PUSH 2\t\t\tadminToNFTContracts\n      PUSH 0\t\t\tadminToNFTContracts[msg.sender...\n      CALLER \t\t\tmsg.sender\n      PUSH FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF\t\t\tadminToNFTContracts[msg.sender...\n      AND \t\t\tadminToNFTContracts[msg.sender...\n      PUSH FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF\t\t\tadminToNFTContracts[msg.sender...\n      AND \t\t\tadminToNFTContracts[msg.sender...\n      DUP2 \t\t\tadminToNFTContracts[msg.sender...\n      MSTORE \t\t\tadminToNFTContracts[msg.sender...\n      PUSH 20\t\t\tadminToNFTContracts[msg.sender...\n      ADD \t\t\tadminToNFTContracts[msg.sender...\n      SWAP1 \t\t\tadminToNFTContracts[msg.sender...\n      DUP2 \t\t\tadminToNFTContracts[msg.sender...\n      MSTORE \t\t\tadminToNFTContracts[msg.sender...\n      PUSH 20\t\t\tadminToNFTContracts[msg.sender...\n      ADD \t\t\tadminToNFTContracts[msg.sender...\n      PUSH 0\t\t\tadminToNFTContracts[msg.sender...\n      KECCAK256 \t\t\tadminToNFTContracts[msg.sender...\n      DUP4 \t\t\t_NFTContractAddress\n      SWAP1 \t\t\tadminToNFTContracts[msg.sender...\n      DUP1 \t\t\tadminToNFTContracts[msg.sender...\n      PUSH 1\t\t\tadminToNFTContracts[msg.sender...\n      DUP2 \t\t\tadminToNFTContracts[msg.sender...\n      SLOAD \t\t\tadminToNFTContracts[msg.sender...\n      ADD \t\t\tadminToNFTContracts[msg.sender...\n      DUP1 \t\t\tadminToNFTContracts[msg.sender...\n      DUP3 \t\t\tadminToNFTContracts[msg.sender...\n      SSTORE \t\t\tadminToNFTContracts[msg.sender...\n      DUP1 \t\t\tadminToNFTContracts[msg.sender...\n      SWAP2 \t\t\tadminToNFTContracts[msg.sender...\n      POP \t\t\tadminToNFTContracts[msg.sender...\n      POP \t\t\tadminToNFTContracts[msg.sender...\n      PUSH 1\t\t\tadminToNFTContracts[msg.sender...\n      SWAP1 \t\t\tadminToNFTContracts[msg.sender...\n      SUB \t\t\tadminToNFTContracts[msg.sender...\n      SWAP1 \t\t\tadminToNFTContracts[msg.sender...\n      PUSH 0\t\t\tadminToNFTContracts[msg.sender...\n      MSTORE \t\t\tadminToNFTContracts[msg.sender...\n      PUSH 20\t\t\tadminToNFTContracts[msg.sender...\n      PUSH 0\t\t\tadminToNFTContracts[msg.sender...\n      KECCAK256 \t\t\tadminToNFTContracts[msg.sender...\n      ADD \t\t\tadminToNFTContracts[msg.sender...\n      PUSH 0\t\t\tadminToNFTContracts[msg.sender...\n      SWAP1 \t\t\tadminToNFTContracts[msg.sender...\n      SWAP2 \t\t\tadminToNFTContracts[msg.sender...\n      SWAP1 \t\t\tadminToNFTContracts[msg.sender...\n      SWAP2 \t\t\tadminToNFTContracts[msg.sender...\n      SWAP1 \t\t\tadminToNFTContracts[msg.sender...\n      SWAP2 \t\t\tadminToNFTContracts[msg.sender...\n      PUSH 100\t\t\tadminToNFTContracts[msg.sender...\n      EXP \t\t\tadminToNFTContracts[msg.sender...\n      DUP2 \t\t\tadminToNFTContracts[msg.sender...\n      SLOAD \t\t\tadminToNFTContracts[msg.sender...\n      DUP2 \t\t\tadminToNFTContracts[msg.sender...\n      PUSH FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF\t\t\tadminToNFTContracts[msg.sender...\n      MUL \t\t\tadminToNFTContracts[msg.sender...\n      NOT \t\t\tadminToNFTContracts[msg.sender...\n      AND \t\t\tadminToNFTContracts[msg.sender...\n      SWAP1 \t\t\tadminToNFTContracts[msg.sender...\n      DUP4 \t\t\tadminToNFTContracts[msg.sender...\n      PUSH FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF\t\t\tadminToNFTContracts[msg.sender...\n      AND \t\t\tadminToNFTContracts[msg.sender...\n      MUL \t\t\tadminToNFTContracts[msg.sender...\n      OR \t\t\tadminToNFTContracts[msg.sender...\n      SWAP1 \t\t\tadminToNFTContracts[msg.sender...\n      SSTORE \t\t\tadminToNFTContracts[msg.sender...\n      POP \t\t\tadminToNFTContracts[msg.sender...\n      PUSH A8596CC4A052ECC7656E9CA0FB7A10472573699E3AA34AC5659BC37C1B0A44FC\t\t\tVaultCreated(block.timestamp,a...\n      TIMESTAMP \t\t\tblock.timestamp\n      DUP3 \t\t\tvault\n      DUP6 \t\t\t_NFTContractAddress\n      PUSH 40\t\t\tVaultCreated(block.timestamp,a...\n      MLOAD \t\t\tVaultCreated(block.timestamp,a...\n      PUSH [tag] 92\t\t\tVaultCreated(block.timestamp,a...\n      SWAP4 \t\t\tVaultCreated(block.timestamp,a...\n      SWAP3 \t\t\tVaultCreated(block.timestamp,a...\n      SWAP2 \t\t\tVaultCreated(block.timestamp,a...\n      SWAP1 \t\t\tVaultCreated(block.timestamp,a...\n      PUSH [tag] 93\t\t\tVaultCreated(block.timestamp,a...\n      JUMP \t\t\tVaultCreated(block.timestamp,a...\n    tag 92\t\t\tVaultCreated(block.timestamp,a...\n      JUMPDEST \t\t\tVaultCreated(block.timestamp,a...\n      PUSH 40\t\t\tVaultCreated(block.timestamp,a...\n      MLOAD \t\t\tVaultCreated(block.timestamp,a...\n      DUP1 \t\t\tVaultCreated(block.timestamp,a...\n      SWAP2 \t\t\tVaultCreated(block.timestamp,a...\n      SUB \t\t\tVaultCreated(block.timestamp,a...\n      SWAP1 \t\t\tVaultCreated(block.timestamp,a...\n      LOG1 \t\t\tVaultCreated(block.timestamp,a...\n      POP \t\t\t{\\n        require(vaultAddres...\n      POP \t\t\tfunction createVault(address _...\n      POP \t\t\tfunction createVault(address _...\n      JUMP \t\t\tfunction createVault(address _...\n    tag 31\t\t\tfunction getContractAddress(ad...\n      JUMPDEST \t\t\tfunction getContractAddress(ad...\n      PUSH 0\t\t\taddress\n      PUSH 1\t\t\tvaultAddress\n      PUSH 0\t\t\tvaultAddress[NFTContractAddres...\n      DUP4 \t\t\tNFTContractAddress\n      PUSH FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF\t\t\tvaultAddress[NFTContractAddres...\n      AND \t\t\tvaultAddress[NFTContractAddres...\n      PUSH FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF\t\t\tvaultAddress[NFTContractAddres...\n      AND \t\t\tvaultAddress[NFTContractAddres...\n      DUP2 \t\t\tvaultAddress[NFTContractAddres...\n      MSTORE \t\t\tvaultAddress[NFTContractAddres...\n      PUSH 20\t\t\tvaultAddress[NFTContractAddres...\n      ADD \t\t\tvaultAddress[NFTContractAddres...\n      SWAP1 \t\t\tvaultAddress[NFTContractAddres...\n      DUP2 \t\t\tvaultAddress[NFTContractAddres...\n      MSTORE \t\t\tvaultAddress[NFTContractAddres...\n      PUSH 20\t\t\tvaultAddress[NFTContractAddres...\n      ADD \t\t\tvaultAddress[NFTContractAddres...\n      PUSH 0\t\t\tvaultAddress[NFTContractAddres...\n      KECCAK256 \t\t\tvaultAddress[NFTContractAddres...\n      PUSH 0\t\t\tvaultAddress[NFTContractAddres...\n      SWAP1 \t\t\tvaultAddress[NFTContractAddres...\n      SLOAD \t\t\tvaultAddress[NFTContractAddres...\n      SWAP1 \t\t\tvaultAddress[NFTContractAddres...\n      PUSH 100\t\t\tvaultAddress[NFTContractAddres...\n      EXP \t\t\tvaultAddress[NFTContractAddres...\n      SWAP1 \t\t\tvaultAddress[NFTContractAddres...\n      DIV \t\t\tvaultAddress[NFTContractAddres...\n      PUSH FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF\t\t\tvaultAddress[NFTContractAddres...\n      AND \t\t\tvaultAddress[NFTContractAddres...\n      SWAP1 \t\t\treturn vaultAddress[NFTContrac...\n      POP \t\t\treturn vaultAddress[NFTContrac...\n      SWAP2 \t\t\tfunction getContractAddress(ad...\n      SWAP1 \t\t\tfunction getContractAddress(ad...\n      POP \t\t\tfunction getContractAddress(ad...\n      JUMP \t\t\tfunction getContractAddress(ad...\n    tag 36\t\t\tfunction depositFunds(address ...\n      JUMPDEST \t\t\tfunction depositFunds(address ...\n      PUSH 0\t\t\t0\n      PUSH FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF\t\t\tvaultAddress[NFTContractAddres...\n      AND \t\t\tvaultAddress[NFTContractAddres...\n      PUSH 1\t\t\tvaultAddress\n      PUSH 0\t\t\tvaultAddress[NFTContractAddres...\n      DUP6 \t\t\tNFTContractAddress\n      PUSH FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF\t\t\tvaultAddress[NFTContractAddres...\n      AND \t\t\tvaultAddress[NFTContractAddres...\n      PUSH FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF\t\t\tvaultAddress[NFTContractAddres...\n      AND \t\t\tvaultAddress[NFTContractAddres...\n      DUP2 \t\t\tvaultAddress[NFTContractAddres...\n      MSTORE \t\t\tvaultAddress[NFTContractAddres...\n      PUSH 20\t\t\tvaultAddress[NFTContractAddres...\n      ADD \t\t\tvaultAddress[NFTContractAddres...\n      SWAP1 \t\t\tvaultAddress[NFTContractAddres...\n      DUP2 \t\t\tvaultAddress[NFTContractAddres...\n      MSTORE \t\t\tvaultAddress[NFTContractAddres...\n      PUSH 20\t\t\tvaultAddress[NFTContractAddres...\n      ADD \t\t\tvaultAddress[NFTContractAddres...\n      PUSH 0\t\t\tvaultAddress[NFTContractAddres...\n      KECCAK256 \t\t\tvaultAddress[NFTContractAddres...\n      PUSH 0\t\t\tvaultAddress[NFTContractAddres...\n      SWAP1 \t\t\tvaultAddress[NFTContractAddres...\n      SLOAD \t\t\tvaultAddress[NFTContractAddres...\n      SWAP1 \t\t\tvaultAddress[NFTContractAddres...\n      PUSH 100\t\t\tvaultAddress[NFTContractAddres...\n      EXP \t\t\tvaultAddress[NFTContractAddres...\n      SWAP1 \t\t\tvaultAddress[NFTContractAddres...\n      DIV \t\t\tvaultAddress[NFTContractAddres...\n      PUSH FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF\t\t\tvaultAddress[NFTContractAddres...\n      AND \t\t\tvaultAddress[NFTContractAddres...\n      PUSH FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF\t\t\tvaultAddress[NFTContractAddres...\n      AND \t\t\tvaultAddress[NFTContractAddres...\n      SUB \t\t\tvaultAddress[NFTContractAddres...\n      PUSH [tag] 96\t\t\trequire(vaultAddress[NFTContra...\n      JUMPI \t\t\trequire(vaultAddress[NFTContra...\n      PUSH 40\t\t\trequire(vaultAddress[NFTContra...\n      MLOAD \t\t\trequire(vaultAddress[NFTContra...\n      PUSH 8C379A000000000000000000000000000000000000000000000000000000000\t\t\trequire(vaultAddress[NFTContra...\n      DUP2 \t\t\trequire(vaultAddress[NFTContra...\n      MSTORE \t\t\trequire(vaultAddress[NFTContra...\n      PUSH 4\t\t\trequire(vaultAddress[NFTContra...\n      ADD \t\t\trequire(vaultAddress[NFTContra...\n      PUSH [tag] 97\t\t\trequire(vaultAddress[NFTContra...\n      SWAP1 \t\t\trequire(vaultAddress[NFTContra...\n      PUSH [tag] 98\t\t\trequire(vaultAddress[NFTContra...\n      JUMP \t\t\trequire(vaultAddress[NFTContra...\n    tag 97\t\t\trequire(vaultAddress[NFTContra...\n      JUMPDEST \t\t\trequire(vaultAddress[NFTContra...\n      PUSH 40\t\t\trequire(vaultAddress[NFTContra...\n      MLOAD \t\t\trequire(vaultAddress[NFTContra...\n      DUP1 \t\t\trequire(vaultAddress[NFTContra...\n      SWAP2 \t\t\trequire(vaultAddress[NFTContra...\n      SUB \t\t\trequire(vaultAddress[NFTContra...\n      SWAP1 \t\t\trequire(vaultAddress[NFTContra...\n      REVERT \t\t\trequire(vaultAddress[NFTContra...\n    tag 96\t\t\trequire(vaultAddress[NFTContra...\n      JUMPDEST \t\t\trequire(vaultAddress[NFTContra...\n      DUP1 \t\t\tamounts\n      MLOAD \t\t\tamounts.length\n      DUP3 \t\t\t_tokenIDs\n      MLOAD \t\t\t_tokenIDs.length\n      EQ \t\t\t_tokenIDs.length == amounts.le...\n      PUSH [tag] 99\t\t\trequire(_tokenIDs.length == am...\n      JUMPI \t\t\trequire(_tokenIDs.length == am...\n      PUSH 40\t\t\trequire(_tokenIDs.length == am...\n      MLOAD \t\t\trequire(_tokenIDs.length == am...\n      PUSH 8C379A000000000000000000000000000000000000000000000000000000000\t\t\trequire(_tokenIDs.length == am...\n      DUP2 \t\t\trequire(_tokenIDs.length == am...\n      MSTORE \t\t\trequire(_tokenIDs.length == am...\n      PUSH 4\t\t\trequire(_tokenIDs.length == am...\n      ADD \t\t\trequire(_tokenIDs.length == am...\n      PUSH [tag] 100\t\t\trequire(_tokenIDs.length == am...\n      SWAP1 \t\t\trequire(_tokenIDs.length == am...\n      PUSH [tag] 101\t\t\trequire(_tokenIDs.length == am...\n      JUMP \t\t\trequire(_tokenIDs.length == am...\n    tag 100\t\t\trequire(_tokenIDs.length == am...\n      JUMPDEST \t\t\trequire(_tokenIDs.length == am...\n      PUSH 40\t\t\trequire(_tokenIDs.length == am...\n      MLOAD \t\t\trequire(_tokenIDs.length == am...\n      DUP1 \t\t\trequire(_tokenIDs.length == am...\n      SWAP2 \t\t\trequire(_tokenIDs.length == am...\n      SUB \t\t\trequire(_tokenIDs.length == am...\n      SWAP1 \t\t\trequire(_tokenIDs.length == am...\n      REVERT \t\t\trequire(_tokenIDs.length == am...\n    tag 99\t\t\trequire(_tokenIDs.length == am...\n      JUMPDEST \t\t\trequire(_tokenIDs.length == am...\n      PUSH 0\t\t\tuint256 useramount\n      CALLVALUE \t\t\tmsg.value\n      SWAP1 \t\t\tuint256 useramount = msg.value\n      POP \t\t\tuint256 useramount = msg.value\n      PUSH 0\t\t\taddress payable vaultContract_...\n      PUSH [tag] 102\t\t\tgetContractAddress(NFTContract...\n      DUP6 \t\t\tNFTContractAddress\n      PUSH [tag] 31\t\t\tgetContractAddress\n      JUMP \t\t\tgetContractAddress(NFTContract...\n    tag 102\t\t\tgetContractAddress(NFTContract...\n      JUMPDEST \t\t\tgetContractAddress(NFTContract...\n      SWAP1 \t\t\taddress payable vaultContract_...\n      POP \t\t\taddress payable vaultContract_...\n      PUSH 0\t\t\tVault vault\n      DUP2 \t\t\tvaultContract_address\n      SWAP1 \t\t\tVault vault = Vault(vaultContr...\n      POP \t\t\tVault vault = Vault(vaultContr...\n      CALLER \t\t\tmsg.sender\n      PUSH FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF\t\t\tvault.admin() == msg.sender\n      AND \t\t\tvault.admin() == msg.sender\n      DUP2 \t\t\tvault\n      PUSH FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF\t\t\tvault.admin\n      AND \t\t\tvault.admin\n      PUSH F851A440\t\t\tvault.admin\n      PUSH 40\t\t\tvault.admin()\n      MLOAD \t\t\tvault.admin()\n      DUP2 \t\t\tvault.admin()\n      PUSH FFFFFFFF\t\t\tvault.admin()\n      AND \t\t\tvault.admin()\n      PUSH E0\t\t\tvault.admin()\n      SHL \t\t\tvault.admin()\n      DUP2 \t\t\tvault.admin()\n      MSTORE \t\t\tvault.admin()\n      PUSH 4\t\t\tvault.admin()\n      ADD \t\t\tvault.admin()\n      PUSH 20\t\t\tvault.admin()\n      PUSH 40\t\t\tvault.admin()\n      MLOAD \t\t\tvault.admin()\n      DUP1 \t\t\tvault.admin()\n      DUP4 \t\t\tvault.admin()\n      SUB \t\t\tvault.admin()\n      DUP2 \t\t\tvault.admin()\n      DUP7 \t\t\tvault.admin()\n      GAS \t\t\tvault.admin()\n      STATICCALL \t\t\tvault.admin()\n      ISZERO \t\t\tvault.admin()\n      DUP1 \t\t\tvault.admin()\n      ISZERO \t\t\tvault.admin()\n      PUSH [tag] 104\t\t\tvault.admin()\n      JUMPI \t\t\tvault.admin()\n      RETURNDATASIZE \t\t\tvault.admin()\n      PUSH 0\t\t\tvault.admin()\n      DUP1 \t\t\tvault.admin()\n      RETURNDATACOPY \t\t\tvault.admin()\n      RETURNDATASIZE \t\t\tvault.admin()\n      PUSH 0\t\t\tvault.admin()\n      REVERT \t\t\tvault.admin()\n    tag 104\t\t\tvault.admin()\n      JUMPDEST \t\t\tvault.admin()\n      POP \t\t\tvault.admin()\n      POP \t\t\tvault.admin()\n      POP \t\t\tvault.admin()\n      POP \t\t\tvault.admin()\n      PUSH 40\t\t\tvault.admin()\n      MLOAD \t\t\tvault.admin()\n      RETURNDATASIZE \t\t\tvault.admin()\n      PUSH 1F\t\t\tvault.admin()\n      NOT \t\t\tvault.admin()\n      PUSH 1F\t\t\tvault.admin()\n      DUP3 \t\t\tvault.admin()\n      ADD \t\t\tvault.admin()\n      AND \t\t\tvault.admin()\n      DUP3 \t\t\tvault.admin()\n      ADD \t\t\tvault.admin()\n      DUP1 \t\t\tvault.admin()\n      PUSH 40\t\t\tvault.admin()\n      MSTORE \t\t\tvault.admin()\n      POP \t\t\tvault.admin()\n      DUP2 \t\t\tvault.admin()\n      ADD \t\t\tvault.admin()\n      SWAP1 \t\t\tvault.admin()\n      PUSH [tag] 105\t\t\tvault.admin()\n      SWAP2 \t\t\tvault.admin()\n      SWAP1 \t\t\tvault.admin()\n      PUSH [tag] 106\t\t\tvault.admin()\n      JUMP \t\t\tvault.admin()\n    tag 105\t\t\tvault.admin()\n      JUMPDEST \t\t\tvault.admin()\n      PUSH FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF\t\t\tvault.admin() == msg.sender\n      AND \t\t\tvault.admin() == msg.sender\n      EQ \t\t\tvault.admin() == msg.sender\n      PUSH [tag] 107\t\t\trequire(vault.admin() == msg.s...\n      JUMPI \t\t\trequire(vault.admin() == msg.s...\n      PUSH 40\t\t\trequire(vault.admin() == msg.s...\n      MLOAD \t\t\trequire(vault.admin() == msg.s...\n      PUSH 8C379A000000000000000000000000000000000000000000000000000000000\t\t\trequire(vault.admin() == msg.s...\n      DUP2 \t\t\trequire(vault.admin() == msg.s...\n      MSTORE \t\t\trequire(vault.admin() == msg.s...\n      PUSH 4\t\t\trequire(vault.admin() == msg.s...\n      ADD \t\t\trequire(vault.admin() == msg.s...\n      PUSH [tag] 108\t\t\trequire(vault.admin() == msg.s...\n      SWAP1 \t\t\trequire(vault.admin() == msg.s...\n      PUSH [tag] 109\t\t\trequire(vault.admin() == msg.s...\n      JUMP \t\t\trequire(vault.admin() == msg.s...\n    tag 108\t\t\trequire(vault.admin() == msg.s...\n      JUMPDEST \t\t\trequire(vault.admin() == msg.s...\n      PUSH 40\t\t\trequire(vault.admin() == msg.s...\n      MLOAD \t\t\trequire(vault.admin() == msg.s...\n      DUP1 \t\t\trequire(vault.admin() == msg.s...\n      SWAP2 \t\t\trequire(vault.admin() == msg.s...\n      SUB \t\t\trequire(vault.admin() == msg.s...\n      SWAP1 \t\t\trequire(vault.admin() == msg.s...\n      REVERT \t\t\trequire(vault.admin() == msg.s...\n    tag 107\t\t\trequire(vault.admin() == msg.s...\n      JUMPDEST \t\t\trequire(vault.admin() == msg.s...\n      PUSH 0\t\t\tuint256 totalAmount\n      DUP1 \t\t\tuint256 i\n    tag 110\t\t\tfor (uint256 i = 0; i < _token...\n      JUMPDEST \t\t\tfor (uint256 i = 0; i < _token...\n      DUP7 \t\t\t_tokenIDs\n      MLOAD \t\t\t_tokenIDs.length\n      DUP2 \t\t\ti\n      LT \t\t\ti < _tokenIDs.length\n      ISZERO \t\t\tfor (uint256 i = 0; i < _token...\n      PUSH [tag] 111\t\t\tfor (uint256 i = 0; i < _token...\n      JUMPI \t\t\tfor (uint256 i = 0; i < _token...\n      DUP6 \t\t\tamounts\n      DUP2 \t\t\ti\n      DUP2 \t\t\tamounts[i]\n      MLOAD \t\t\tamounts[i]\n      DUP2 \t\t\tamounts[i]\n      LT \t\t\tamounts[i]\n      PUSH [tag] 113\t\t\tamounts[i]\n      JUMPI \t\t\tamounts[i]\n      PUSH [tag] 114\t\t\tamounts[i]\n      PUSH [tag] 64\t\t\tamounts[i]\n      JUMP \t\t\tamounts[i]\n    tag 114\t\t\tamounts[i]\n      JUMPDEST \t\t\tamounts[i]\n    tag 113\t\t\tamounts[i]\n      JUMPDEST \t\t\tamounts[i]\n      PUSH 20\t\t\tamounts[i]\n      MUL \t\t\tamounts[i]\n      PUSH 20\t\t\tamounts[i]\n      ADD \t\t\tamounts[i]\n      ADD \t\t\tamounts[i]\n      MLOAD \t\t\tamounts[i]\n      DUP3 \t\t\ttotalAmount += amounts[i]\n      PUSH [tag] 115\t\t\ttotalAmount += amounts[i]\n      SWAP2 \t\t\ttotalAmount += amounts[i]\n      SWAP1 \t\t\ttotalAmount += amounts[i]\n      PUSH [tag] 116\t\t\ttotalAmount += amounts[i]\n      JUMP \t\t\ttotalAmount += amounts[i]\n    tag 115\t\t\ttotalAmount += amounts[i]\n      JUMPDEST \t\t\ttotalAmount += amounts[i]\n      SWAP2 \t\t\ttotalAmount += amounts[i]\n      POP \t\t\ttotalAmount += amounts[i]\n      DUP1 \t\t\ti++\n      DUP1 \t\t\ti++\n      PUSH [tag] 117\t\t\ti++\n      SWAP1 \t\t\ti++\n      PUSH [tag] 80\t\t\ti++\n      JUMP \t\t\ti++\n    tag 117\t\t\ti++\n      JUMPDEST \t\t\ti++\n      SWAP2 \t\t\ti++\n      POP \t\t\ti++\n      POP \t\t\ti++\n      PUSH [tag] 110\t\t\tfor (uint256 i = 0; i < _token...\n      JUMP \t\t\tfor (uint256 i = 0; i < _token...\n    tag 111\t\t\tfor (uint256 i = 0; i < _token...\n      JUMPDEST \t\t\tfor (uint256 i = 0; i < _token...\n      POP \t\t\tfor (uint256 i = 0; i < _token...\n      DUP1 \t\t\ttotalAmount\n      DUP5 \t\t\tuseramount\n      EQ \t\t\tuseramount == totalAmount\n      PUSH [tag] 118\t\t\trequire(useramount == totalAmo...\n      JUMPI \t\t\trequire(useramount == totalAmo...\n      PUSH 40\t\t\trequire(useramount == totalAmo...\n      MLOAD \t\t\trequire(useramount == totalAmo...\n      PUSH 8C379A000000000000000000000000000000000000000000000000000000000\t\t\trequire(useramount == totalAmo...\n      DUP2 \t\t\trequire(useramount == totalAmo...\n      MSTORE \t\t\trequire(useramount == totalAmo...\n      PUSH 4\t\t\trequire(useramount == totalAmo...\n      ADD \t\t\trequire(useramount == totalAmo...\n      PUSH [tag] 119\t\t\trequire(useramount == totalAmo...\n      SWAP1 \t\t\trequire(useramount == totalAmo...\n      PUSH [tag] 120\t\t\trequire(useramount == totalAmo...\n      JUMP \t\t\trequire(useramount == totalAmo...\n    tag 119\t\t\trequire(useramount == totalAmo...\n      JUMPDEST \t\t\trequire(useramount == totalAmo...\n      PUSH 40\t\t\trequire(useramount == totalAmo...\n      MLOAD \t\t\trequire(useramount == totalAmo...\n      DUP1 \t\t\trequire(useramount == totalAmo...\n      SWAP2 \t\t\trequire(useramount == totalAmo...\n      SUB \t\t\trequire(useramount == totalAmo...\n      SWAP1 \t\t\trequire(useramount == totalAmo...\n      REVERT \t\t\trequire(useramount == totalAmo...\n    tag 118\t\t\trequire(useramount == totalAmo...\n      JUMPDEST \t\t\trequire(useramount == totalAmo...\n      PUSH 0\t\t\tuint256 i\n    tag 121\t\t\tfor (uint256 i = 0; i < _token...\n      JUMPDEST \t\t\tfor (uint256 i = 0; i < _token...\n      DUP7 \t\t\t_tokenIDs\n      MLOAD \t\t\t_tokenIDs.length\n      DUP2 \t\t\ti\n      LT \t\t\ti < _tokenIDs.length\n      ISZERO \t\t\tfor (uint256 i = 0; i < _token...\n      PUSH [tag] 122\t\t\tfor (uint256 i = 0; i < _token...\n      JUMPI \t\t\tfor (uint256 i = 0; i < _token...\n      DUP3 \t\t\tvault\n      PUSH FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF\t\t\tvault.addBalance\n      AND \t\t\tvault.addBalance\n      PUSH A40398A6\t\t\tvault.addBalance\n      DUP9 \t\t\t_tokenIDs\n      DUP4 \t\t\ti\n      DUP2 \t\t\t_tokenIDs[i]\n      MLOAD \t\t\t_tokenIDs[i]\n      DUP2 \t\t\t_tokenIDs[i]\n      LT \t\t\t_tokenIDs[i]\n      PUSH [tag] 124\t\t\t_tokenIDs[i]\n      JUMPI \t\t\t_tokenIDs[i]\n      PUSH [tag] 125\t\t\t_tokenIDs[i]\n      PUSH [tag] 64\t\t\t_tokenIDs[i]\n      JUMP \t\t\t_tokenIDs[i]\n    tag 125\t\t\t_tokenIDs[i]\n      JUMPDEST \t\t\t_tokenIDs[i]\n    tag 124\t\t\t_tokenIDs[i]\n      JUMPDEST \t\t\t_tokenIDs[i]\n      PUSH 20\t\t\t_tokenIDs[i]\n      MUL \t\t\t_tokenIDs[i]\n      PUSH 20\t\t\t_tokenIDs[i]\n      ADD \t\t\t_tokenIDs[i]\n      ADD \t\t\t_tokenIDs[i]\n      MLOAD \t\t\t_tokenIDs[i]\n      DUP9 \t\t\tamounts\n      DUP5 \t\t\ti\n      DUP2 \t\t\tamounts[i]\n      MLOAD \t\t\tamounts[i]\n      DUP2 \t\t\tamounts[i]\n      LT \t\t\tamounts[i]\n      PUSH [tag] 126\t\t\tamounts[i]\n      JUMPI \t\t\tamounts[i]\n      PUSH [tag] 127\t\t\tamounts[i]\n      PUSH [tag] 64\t\t\tamounts[i]\n      JUMP \t\t\tamounts[i]\n    tag 127\t\t\tamounts[i]\n      JUMPDEST \t\t\tamounts[i]\n    tag 126\t\t\tamounts[i]\n      JUMPDEST \t\t\tamounts[i]\n      PUSH 20\t\t\tamounts[i]\n      MUL \t\t\tamounts[i]\n      PUSH 20\t\t\tamounts[i]\n      ADD \t\t\tamounts[i]\n      ADD \t\t\tamounts[i]\n      MLOAD \t\t\tamounts[i]\n      PUSH 40\t\t\tvault.addBalance(_tokenIDs[i],...\n      MLOAD \t\t\tvault.addBalance(_tokenIDs[i],...\n      DUP4 \t\t\tvault.addBalance(_tokenIDs[i],...\n      PUSH FFFFFFFF\t\t\tvault.addBalance(_tokenIDs[i],...\n      AND \t\t\tvault.addBalance(_tokenIDs[i],...\n      PUSH E0\t\t\tvault.addBalance(_tokenIDs[i],...\n      SHL \t\t\tvault.addBalance(_tokenIDs[i],...\n      DUP2 \t\t\tvault.addBalance(_tokenIDs[i],...\n      MSTORE \t\t\tvault.addBalance(_tokenIDs[i],...\n      PUSH 4\t\t\tvault.addBalance(_tokenIDs[i],...\n      ADD \t\t\tvault.addBalance(_tokenIDs[i],...\n      PUSH [tag] 128\t\t\tvault.addBalance(_tokenIDs[i],...\n      SWAP3 \t\t\tvault.addBalance(_tokenIDs[i],...\n      SWAP2 \t\t\tvault.addBalance(_tokenIDs[i],...\n      SWAP1 \t\t\tvault.addBalance(_tokenIDs[i],...\n      PUSH [tag] 129\t\t\tvault.addBalance(_tokenIDs[i],...\n      JUMP \t\t\tvault.addBalance(_tokenIDs[i],...\n    tag 128\t\t\tvault.addBalance(_tokenIDs[i],...\n      JUMPDEST \t\t\tvault.addBalance(_tokenIDs[i],...\n      PUSH 0\t\t\tvault.addBalance(_tokenIDs[i],...\n      PUSH 40\t\t\tvault.addBalance(_tokenIDs[i],...\n      MLOAD \t\t\tvault.addBalance(_tokenIDs[i],...\n      DUP1 \t\t\tvault.addBalance(_tokenIDs[i],...\n      DUP4 \t\t\tvault.addBalance(_tokenIDs[i],...\n      SUB \t\t\tvault.addBalance(_tokenIDs[i],...\n      DUP2 \t\t\tvault.addBalance(_tokenIDs[i],...\n      PUSH 0\t\t\tvault.addBalance(_tokenIDs[i],...\n      DUP8 \t\t\tvault.addBalance(_tokenIDs[i],...\n      DUP1 \t\t\tvault.addBalance(_tokenIDs[i],...\n      EXTCODESIZE \t\t\tvault.addBalance(_tokenIDs[i],...\n      ISZERO \t\t\tvault.addBalance(_tokenIDs[i],...\n      DUP1 \t\t\tvault.addBalance(_tokenIDs[i],...\n      ISZERO \t\t\tvault.addBalance(_tokenIDs[i],...\n      PUSH [tag] 130\t\t\tvault.addBalance(_tokenIDs[i],...\n      JUMPI \t\t\tvault.addBalance(_tokenIDs[i],...\n      PUSH 0\t\t\tvault.addBalance(_tokenIDs[i],...\n      DUP1 \t\t\tvault.addBalance(_tokenIDs[i],...\n      REVERT \t\t\tvault.addBalance(_tokenIDs[i],...\n    tag 130\t\t\tvault.addBalance(_tokenIDs[i],...\n      JUMPDEST \t\t\tvault.addBalance(_tokenIDs[i],...\n      POP \t\t\tvault.addBalance(_tokenIDs[i],...\n      GAS \t\t\tvault.addBalance(_tokenIDs[i],...\n      CALL \t\t\tvault.addBalance(_tokenIDs[i],...\n      ISZERO \t\t\tvault.addBalance(_tokenIDs[i],...\n      DUP1 \t\t\tvault.addBalance(_tokenIDs[i],...\n      ISZERO \t\t\tvault.addBalance(_tokenIDs[i],...\n      PUSH [tag] 132\t\t\tvault.addBalance(_tokenIDs[i],...\n      JUMPI \t\t\tvault.addBalance(_tokenIDs[i],...\n      RETURNDATASIZE \t\t\tvault.addBalance(_tokenIDs[i],...\n      PUSH 0\t\t\tvault.addBalance(_tokenIDs[i],...\n      DUP1 \t\t\tvault.addBalance(_tokenIDs[i],...\n      RETURNDATACOPY \t\t\tvault.addBalance(_tokenIDs[i],...\n      RETURNDATASIZE \t\t\tvault.addBalance(_tokenIDs[i],...\n      PUSH 0\t\t\tvault.addBalance(_tokenIDs[i],...\n      REVERT \t\t\tvault.addBalance(_tokenIDs[i],...\n    tag 132\t\t\tvault.addBalance(_tokenIDs[i],...\n      JUMPDEST \t\t\tvault.addBalance(_tokenIDs[i],...\n      POP \t\t\tvault.addBalance(_tokenIDs[i],...\n      POP \t\t\tvault.addBalance(_tokenIDs[i],...\n      POP \t\t\tvault.addBalance(_tokenIDs[i],...\n      POP \t\t\tvault.addBalance(_tokenIDs[i],...\n      DUP1 \t\t\ti++\n      DUP1 \t\t\ti++\n      PUSH [tag] 133\t\t\ti++\n      SWAP1 \t\t\ti++\n      PUSH [tag] 80\t\t\ti++\n      JUMP \t\t\ti++\n    tag 133\t\t\ti++\n      JUMPDEST \t\t\ti++\n      SWAP2 \t\t\ti++\n      POP \t\t\ti++\n      POP \t\t\ti++\n      PUSH [tag] 121\t\t\tfor (uint256 i = 0; i < _token...\n      JUMP \t\t\tfor (uint256 i = 0; i < _token...\n    tag 122\t\t\tfor (uint256 i = 0; i < _token...\n      JUMPDEST \t\t\tfor (uint256 i = 0; i < _token...\n      POP \t\t\tfor (uint256 i = 0; i < _token...\n      DUP3 \t\t\tvaultContract_address\n      PUSH FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF\t\t\tvaultContract_address.transfer\n      AND \t\t\tvaultContract_address.transfer\n      PUSH 8FC\t\t\tvaultContract_address.transfer...\n      DUP3 \t\t\ttotalAmount\n      SWAP1 \t\t\tvaultContract_address.transfer...\n      DUP2 \t\t\tvaultContract_address.transfer...\n      ISZERO \t\t\tvaultContract_address.transfer...\n      MUL \t\t\tvaultContract_address.transfer...\n      SWAP1 \t\t\tvaultContract_address.transfer...\n      PUSH 40\t\t\tvaultContract_address.transfer...\n      MLOAD \t\t\tvaultContract_address.transfer...\n      PUSH 0\t\t\tvaultContract_address.transfer...\n      PUSH 40\t\t\tvaultContract_address.transfer...\n      MLOAD \t\t\tvaultContract_address.transfer...\n      DUP1 \t\t\tvaultContract_address.transfer...\n      DUP4 \t\t\tvaultContract_address.transfer...\n      SUB \t\t\tvaultContract_address.transfer...\n      DUP2 \t\t\tvaultContract_address.transfer...\n      DUP6 \t\t\tvaultContract_address.transfer...\n      DUP9 \t\t\tvaultContract_address.transfer...\n      DUP9 \t\t\tvaultContract_address.transfer...\n      CALL \t\t\tvaultContract_address.transfer...\n      SWAP4 \t\t\tvaultContract_address.transfer...\n      POP \t\t\tvaultContract_address.transfer...\n      POP \t\t\tvaultContract_address.transfer...\n      POP \t\t\tvaultContract_address.transfer...\n      POP \t\t\tvaultContract_address.transfer...\n      ISZERO \t\t\tvaultContract_address.transfer...\n      DUP1 \t\t\tvaultContract_address.transfer...\n      ISZERO \t\t\tvaultContract_address.transfer...\n      PUSH [tag] 135\t\t\tvaultContract_address.transfer...\n      JUMPI \t\t\tvaultContract_address.transfer...\n      RETURNDATASIZE \t\t\tvaultContract_address.transfer...\n      PUSH 0\t\t\tvaultContract_address.transfer...\n      DUP1 \t\t\tvaultContract_address.transfer...\n      RETURNDATACOPY \t\t\tvaultContract_address.transfer...\n      RETURNDATASIZE \t\t\tvaultContract_address.transfer...\n      PUSH 0\t\t\tvaultContract_address.transfer...\n      REVERT \t\t\tvaultContract_address.transfer...\n    tag 135\t\t\tvaultContract_address.transfer...\n      JUMPDEST \t\t\tvaultContract_address.transfer...\n      POP \t\t\tvaultContract_address.transfer...\n      POP \t\t\t{\\n        require(vaultAddres...\n      POP \t\t\t{\\n        require(vaultAddres...\n      POP \t\t\t{\\n        require(vaultAddres...\n      POP \t\t\t{\\n        require(vaultAddres...\n      POP \t\t\tfunction depositFunds(address ...\n      POP \t\t\tfunction depositFunds(address ...\n      POP \t\t\tfunction depositFunds(address ...\n      JUMP \t\t\tfunction depositFunds(address ...\n    tag 40\t\t\tfunction withdrawFunds(address...\n      JUMPDEST \t\t\tfunction withdrawFunds(address...\n      PUSH 0\t\t\t0\n      PUSH FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF\t\t\tvaultAddress[NFTContractAddres...\n      AND \t\t\tvaultAddress[NFTContractAddres...\n      PUSH 1\t\t\tvaultAddress\n      PUSH 0\t\t\tvaultAddress[NFTContractAddres...\n      DUP5 \t\t\tNFTContractAddress\n      PUSH FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF\t\t\tvaultAddress[NFTContractAddres...\n      AND \t\t\tvaultAddress[NFTContractAddres...\n      PUSH FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF\t\t\tvaultAddress[NFTContractAddres...\n      AND \t\t\tvaultAddress[NFTContractAddres...\n      DUP2 \t\t\tvaultAddress[NFTContractAddres...\n      MSTORE \t\t\tvaultAddress[NFTContractAddres...\n      PUSH 20\t\t\tvaultAddress[NFTContractAddres...\n      ADD \t\t\tvaultAddress[NFTContractAddres...\n      SWAP1 \t\t\tvaultAddress[NFTContractAddres...\n      DUP2 \t\t\tvaultAddress[NFTContractAddres...\n      MSTORE \t\t\tvaultAddress[NFTContractAddres...\n      PUSH 20\t\t\tvaultAddress[NFTContractAddres...\n      ADD \t\t\tvaultAddress[NFTContractAddres...\n      PUSH 0\t\t\tvaultAddress[NFTContractAddres...\n      KECCAK256 \t\t\tvaultAddress[NFTContractAddres...\n      PUSH 0\t\t\tvaultAddress[NFTContractAddres...\n      SWAP1 \t\t\tvaultAddress[NFTContractAddres...\n      SLOAD \t\t\tvaultAddress[NFTContractAddres...\n      SWAP1 \t\t\tvaultAddress[NFTContractAddres...\n      PUSH 100\t\t\tvaultAddress[NFTContractAddres...\n      EXP \t\t\tvaultAddress[NFTContractAddres...\n      SWAP1 \t\t\tvaultAddress[NFTContractAddres...\n      DIV \t\t\tvaultAddress[NFTContractAddres...\n      PUSH FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF\t\t\tvaultAddress[NFTContractAddres...\n      AND \t\t\tvaultAddress[NFTContractAddres...\n      PUSH FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF\t\t\tvaultAddress[NFTContractAddres...\n      AND \t\t\tvaultAddress[NFTContractAddres...\n      SUB \t\t\tvaultAddress[NFTContractAddres...\n      PUSH [tag] 137\t\t\trequire(vaultAddress[NFTContra...\n      JUMPI \t\t\trequire(vaultAddress[NFTContra...\n      PUSH 40\t\t\trequire(vaultAddress[NFTContra...\n      MLOAD \t\t\trequire(vaultAddress[NFTContra...\n      PUSH 8C379A000000000000000000000000000000000000000000000000000000000\t\t\trequire(vaultAddress[NFTContra...\n      DUP2 \t\t\trequire(vaultAddress[NFTContra...\n      MSTORE \t\t\trequire(vaultAddress[NFTContra...\n      PUSH 4\t\t\trequire(vaultAddress[NFTContra...\n      ADD \t\t\trequire(vaultAddress[NFTContra...\n      PUSH [tag] 138\t\t\trequire(vaultAddress[NFTContra...\n      SWAP1 \t\t\trequire(vaultAddress[NFTContra...\n      PUSH [tag] 98\t\t\trequire(vaultAddress[NFTContra...\n      JUMP \t\t\trequire(vaultAddress[NFTContra...\n    tag 138\t\t\trequire(vaultAddress[NFTContra...\n      JUMPDEST \t\t\trequire(vaultAddress[NFTContra...\n      PUSH 40\t\t\trequire(vaultAddress[NFTContra...\n      MLOAD \t\t\trequire(vaultAddress[NFTContra...\n      DUP1 \t\t\trequire(vaultAddress[NFTContra...\n      SWAP2 \t\t\trequire(vaultAddress[NFTContra...\n      SUB \t\t\trequire(vaultAddress[NFTContra...\n      SWAP1 \t\t\trequire(vaultAddress[NFTContra...\n      REVERT \t\t\trequire(vaultAddress[NFTContra...\n    tag 137\t\t\trequire(vaultAddress[NFTContra...\n      JUMPDEST \t\t\trequire(vaultAddress[NFTContra...\n      PUSH 0\t\t\taddress payable vaultContract_...\n      PUSH [tag] 139\t\t\tgetContractAddress(NFTContract...\n      DUP4 \t\t\tNFTContractAddress\n      PUSH [tag] 31\t\t\tgetContractAddress\n      JUMP \t\t\tgetContractAddress(NFTContract...\n    tag 139\t\t\tgetContractAddress(NFTContract...\n      JUMPDEST \t\t\tgetContractAddress(NFTContract...\n      SWAP1 \t\t\taddress payable vaultContract_...\n      POP \t\t\taddress payable vaultContract_...\n      PUSH 0\t\t\tVault vault\n      DUP2 \t\t\tvaultContract_address\n      SWAP1 \t\t\tVault vault = Vault(vaultContr...\n      POP \t\t\tVault vault = Vault(vaultContr...\n      CALLER \t\t\tmsg.sender\n      PUSH FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF\t\t\tvault.admin() == msg.sender\n      AND \t\t\tvault.admin() == msg.sender\n      DUP2 \t\t\tvault\n      PUSH FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF\t\t\tvault.admin\n      AND \t\t\tvault.admin\n      PUSH F851A440\t\t\tvault.admin\n      PUSH 40\t\t\tvault.admin()\n      MLOAD \t\t\tvault.admin()\n      DUP2 \t\t\tvault.admin()\n      PUSH FFFFFFFF\t\t\tvault.admin()\n      AND \t\t\tvault.admin()\n      PUSH E0\t\t\tvault.admin()\n      SHL \t\t\tvault.admin()\n      DUP2 \t\t\tvault.admin()\n      MSTORE \t\t\tvault.admin()\n      PUSH 4\t\t\tvault.admin()\n      ADD \t\t\tvault.admin()\n      PUSH 20\t\t\tvault.admin()\n      PUSH 40\t\t\tvault.admin()\n      MLOAD \t\t\tvault.admin()\n      DUP1 \t\t\tvault.admin()\n      DUP4 \t\t\tvault.admin()\n      SUB \t\t\tvault.admin()\n      DUP2 \t\t\tvault.admin()\n      DUP7 \t\t\tvault.admin()\n      GAS \t\t\tvault.admin()\n      STATICCALL \t\t\tvault.admin()\n      ISZERO \t\t\tvault.admin()\n      DUP1 \t\t\tvault.admin()\n      ISZERO \t\t\tvault.admin()\n      PUSH [tag] 141\t\t\tvault.admin()\n      JUMPI \t\t\tvault.admin()\n      RETURNDATASIZE \t\t\tvault.admin()\n      PUSH 0\t\t\tvault.admin()\n      DUP1 \t\t\tvault.admin()\n      RETURNDATACOPY \t\t\tvault.admin()\n      RETURNDATASIZE \t\t\tvault.admin()\n      PUSH 0\t\t\tvault.admin()\n      REVERT \t\t\tvault.admin()\n    tag 141\t\t\tvault.admin()\n      JUMPDEST \t\t\tvault.admin()\n      POP \t\t\tvault.admin()\n      POP \t\t\tvault.admin()\n      POP \t\t\tvault.admin()\n      POP \t\t\tvault.admin()\n      PUSH 40\t\t\tvault.admin()\n      MLOAD \t\t\tvault.admin()\n      RETURNDATASIZE \t\t\tvault.admin()\n      PUSH 1F\t\t\tvault.admin()\n      NOT \t\t\tvault.admin()\n      PUSH 1F\t\t\tvault.admin()\n      DUP3 \t\t\tvault.admin()\n      ADD \t\t\tvault.admin()\n      AND \t\t\tvault.admin()\n      DUP3 \t\t\tvault.admin()\n      ADD \t\t\tvault.admin()\n      DUP1 \t\t\tvault.admin()\n      PUSH 40\t\t\tvault.admin()\n      MSTORE \t\t\tvault.admin()\n      POP \t\t\tvault.admin()\n      DUP2 \t\t\tvault.admin()\n      ADD \t\t\tvault.admin()\n      SWAP1 \t\t\tvault.admin()\n      PUSH [tag] 142\t\t\tvault.admin()\n      SWAP2 \t\t\tvault.admin()\n      SWAP1 \t\t\tvault.admin()\n      PUSH [tag] 106\t\t\tvault.admin()\n      JUMP \t\t\tvault.admin()\n    tag 142\t\t\tvault.admin()\n      JUMPDEST \t\t\tvault.admin()\n      PUSH FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF\t\t\tvault.admin() == msg.sender\n      AND \t\t\tvault.admin() == msg.sender\n      EQ \t\t\tvault.admin() == msg.sender\n      PUSH [tag] 143\t\t\trequire(vault.admin() == msg.s...\n      JUMPI \t\t\trequire(vault.admin() == msg.s...\n      PUSH 40\t\t\trequire(vault.admin() == msg.s...\n      MLOAD \t\t\trequire(vault.admin() == msg.s...\n      PUSH 8C379A000000000000000000000000000000000000000000000000000000000\t\t\trequire(vault.admin() == msg.s...\n      DUP2 \t\t\trequire(vault.admin() == msg.s...\n      MSTORE \t\t\trequire(vault.admin() == msg.s...\n      PUSH 4\t\t\trequire(vault.admin() == msg.s...\n      ADD \t\t\trequire(vault.admin() == msg.s...\n      PUSH [tag] 144\t\t\trequire(vault.admin() == msg.s...\n      SWAP1 \t\t\trequire(vault.admin() == msg.s...\n      PUSH [tag] 145\t\t\trequire(vault.admin() == msg.s...\n      JUMP \t\t\trequire(vault.admin() == msg.s...\n    tag 144\t\t\trequire(vault.admin() == msg.s...\n      JUMPDEST \t\t\trequire(vault.admin() == msg.s...\n      PUSH 40\t\t\trequire(vault.admin() == msg.s...\n      MLOAD \t\t\trequire(vault.admin() == msg.s...\n      DUP1 \t\t\trequire(vault.admin() == msg.s...\n      SWAP2 \t\t\trequire(vault.admin() == msg.s...\n      SUB \t\t\trequire(vault.admin() == msg.s...\n      SWAP1 \t\t\trequire(vault.admin() == msg.s...\n      REVERT \t\t\trequire(vault.admin() == msg.s...\n    tag 143\t\t\trequire(vault.admin() == msg.s...\n      JUMPDEST \t\t\trequire(vault.admin() == msg.s...\n      DUP1 \t\t\tvault\n      PUSH FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF\t\t\tvault.withdraw\n      AND \t\t\tvault.withdraw\n      PUSH 8293744B\t\t\tvault.withdraw\n      CALLER \t\t\tmsg.sender\n      DUP6 \t\t\ttokenIDs\n      PUSH 40\t\t\tvault.withdraw(payable(msg.sen...\n      MLOAD \t\t\tvault.withdraw(payable(msg.sen...\n      DUP4 \t\t\tvault.withdraw(payable(msg.sen...\n      PUSH FFFFFFFF\t\t\tvault.withdraw(payable(msg.sen...\n      AND \t\t\tvault.withdraw(payable(msg.sen...\n      PUSH E0\t\t\tvault.withdraw(payable(msg.sen...\n      SHL \t\t\tvault.withdraw(payable(msg.sen...\n      DUP2 \t\t\tvault.withdraw(payable(msg.sen...\n      MSTORE \t\t\tvault.withdraw(payable(msg.sen...\n      PUSH 4\t\t\tvault.withdraw(payable(msg.sen...\n      ADD \t\t\tvault.withdraw(payable(msg.sen...\n      PUSH [tag] 146\t\t\tvault.withdraw(payable(msg.sen...\n      SWAP3 \t\t\tvault.withdraw(payable(msg.sen...\n      SWAP2 \t\t\tvault.withdraw(payable(msg.sen...\n      SWAP1 \t\t\tvault.withdraw(payable(msg.sen...\n      PUSH [tag] 147\t\t\tvault.withdraw(payable(msg.sen...\n      JUMP \t\t\tvault.withdraw(payable(msg.sen...\n    tag 146\t\t\tvault.withdraw(payable(msg.sen...\n      JUMPDEST \t\t\tvault.withdraw(payable(msg.sen...\n      PUSH 0\t\t\tvault.withdraw(payable(msg.sen...\n      PUSH 40\t\t\tvault.withdraw(payable(msg.sen...\n      MLOAD \t\t\tvault.withdraw(payable(msg.sen...\n      DUP1 \t\t\tvault.withdraw(payable(msg.sen...\n      DUP4 \t\t\tvault.withdraw(payable(msg.sen...\n      SUB \t\t\tvault.withdraw(payable(msg.sen...\n      DUP2 \t\t\tvault.withdraw(payable(msg.sen...\n      PUSH 0\t\t\tvault.withdraw(payable(msg.sen...\n      DUP8 \t\t\tvault.withdraw(payable(msg.sen...\n      DUP1 \t\t\tvault.withdraw(payable(msg.sen...\n      EXTCODESIZE \t\t\tvault.withdraw(payable(msg.sen...\n      ISZERO \t\t\tvault.withdraw(payable(msg.sen...\n      DUP1 \t\t\tvault.withdraw(payable(msg.sen...\n      ISZERO \t\t\tvault.withdraw(payable(msg.sen...\n      PUSH [tag] 148\t\t\tvault.withdraw(payable(msg.sen...\n      JUMPI \t\t\tvault.withdraw(payable(msg.sen...\n      PUSH 0\t\t\tvault.withdraw(payable(msg.sen...\n      DUP1 \t\t\tvault.withdraw(payable(msg.sen...\n      REVERT \t\t\tvault.withdraw(payable(msg.sen...\n    tag 148\t\t\tvault.withdraw(payable(msg.sen...\n      JUMPDEST \t\t\tvault.withdraw(payable(msg.sen...\n      POP \t\t\tvault.withdraw(payable(msg.sen...\n      GAS \t\t\tvault.withdraw(payable(msg.sen...\n      CALL \t\t\tvault.withdraw(payable(msg.sen...\n      ISZERO \t\t\tvault.withdraw(payable(msg.sen...\n      DUP1 \t\t\tvault.withdraw(payable(msg.sen...\n      ISZERO \t\t\tvault.withdraw(payable(msg.sen...\n      PUSH [tag] 150\t\t\tvault.withdraw(payable(msg.sen...\n      JUMPI \t\t\tvault.withdraw(payable(msg.sen...\n      RETURNDATASIZE \t\t\tvault.withdraw(payable(msg.sen...\n      PUSH 0\t\t\tvault.withdraw(payable(msg.sen...\n      DUP1 \t\t\tvault.withdraw(payable(msg.sen...\n      RETURNDATACOPY \t\t\tvault.withdraw(payable(msg.sen...\n      RETURNDATASIZE \t\t\tvault.withdraw(payable(msg.sen...\n      PUSH 0\t\t\tvault.withdraw(payable(msg.sen...\n      REVERT \t\t\tvault.withdraw(payable(msg.sen...\n    tag 150\t\t\tvault.withdraw(payable(msg.sen...\n      JUMPDEST \t\t\tvault.withdraw(payable(msg.sen...\n      POP \t\t\tvault.withdraw(payable(msg.sen...\n      POP \t\t\tvault.withdraw(payable(msg.sen...\n      POP \t\t\tvault.withdraw(payable(msg.sen...\n      POP \t\t\tvault.withdraw(payable(msg.sen...\n      POP \t\t\t{\\n        require(vaultAddres...\n      POP \t\t\t{\\n        require(vaultAddres...\n      POP \t\t\tfunction withdrawFunds(address...\n      POP \t\t\tfunction withdrawFunds(address...\n      JUMP \t\t\tfunction withdrawFunds(address...\n    tag 43\t\t\tfunction claim(address NFTCont...\n      JUMPDEST \t\t\tfunction claim(address NFTCont...\n      PUSH 0\t\t\t0\n      PUSH FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF\t\t\tvaultAddress[NFTContractAddres...\n      AND \t\t\tvaultAddress[NFTContractAddres...\n      PUSH 1\t\t\tvaultAddress\n      PUSH 0\t\t\tvaultAddress[NFTContractAddres...\n      DUP5 \t\t\tNFTContractAddress\n      PUSH FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF\t\t\tvaultAddress[NFTContractAddres...\n      AND \t\t\tvaultAddress[NFTContractAddres...\n      PUSH FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF\t\t\tvaultAddress[NFTContractAddres...\n      AND \t\t\tvaultAddress[NFTContractAddres...\n      DUP2 \t\t\tvaultAddress[NFTContractAddres...\n      MSTORE \t\t\tvaultAddress[NFTContractAddres...\n      PUSH 20\t\t\tvaultAddress[NFTContractAddres...\n      ADD \t\t\tvaultAddress[NFTContractAddres...\n      SWAP1 \t\t\tvaultAddress[NFTContractAddres...\n      DUP2 \t\t\tvaultAddress[NFTContractAddres...\n      MSTORE \t\t\tvaultAddress[NFTContractAddres...\n      PUSH 20\t\t\tvaultAddress[NFTContractAddres...\n      ADD \t\t\tvaultAddress[NFTContractAddres...\n      PUSH 0\t\t\tvaultAddress[NFTContractAddres...\n      KECCAK256 \t\t\tvaultAddress[NFTContractAddres...\n      PUSH 0\t\t\tvaultAddress[NFTContractAddres...\n      SWAP1 \t\t\tvaultAddress[NFTContractAddres...\n      SLOAD \t\t\tvaultAddress[NFTContractAddres...\n      SWAP1 \t\t\tvaultAddress[NFTContractAddres...\n      PUSH 100\t\t\tvaultAddress[NFTContractAddres...\n      EXP \t\t\tvaultAddress[NFTContractAddres...\n      SWAP1 \t\t\tvaultAddress[NFTContractAddres...\n      DIV \t\t\tvaultAddress[NFTContractAddres...\n      PUSH FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF\t\t\tvaultAddress[NFTContractAddres...\n      AND \t\t\tvaultAddress[NFTContractAddres...\n      PUSH FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF\t\t\tvaultAddress[NFTContractAddres...\n      AND \t\t\tvaultAddress[NFTContractAddres...\n      SUB \t\t\tvaultAddress[NFTContractAddres...\n      PUSH [tag] 152\t\t\trequire(vaultAddress[NFTContra...\n      JUMPI \t\t\trequire(vaultAddress[NFTContra...\n      PUSH 40\t\t\trequire(vaultAddress[NFTContra...\n      MLOAD \t\t\trequire(vaultAddress[NFTContra...\n      PUSH 8C379A000000000000000000000000000000000000000000000000000000000\t\t\trequire(vaultAddress[NFTContra...\n      DUP2 \t\t\trequire(vaultAddress[NFTContra...\n      MSTORE \t\t\trequire(vaultAddress[NFTContra...\n      PUSH 4\t\t\trequire(vaultAddress[NFTContra...\n      ADD \t\t\trequire(vaultAddress[NFTContra...\n      PUSH [tag] 153\t\t\trequire(vaultAddress[NFTContra...\n      SWAP1 \t\t\trequire(vaultAddress[NFTContra...\n      PUSH [tag] 98\t\t\trequire(vaultAddress[NFTContra...\n      JUMP \t\t\trequire(vaultAddress[NFTContra...\n    tag 153\t\t\trequire(vaultAddress[NFTContra...\n      JUMPDEST \t\t\trequire(vaultAddress[NFTContra...\n      PUSH 40\t\t\trequire(vaultAddress[NFTContra...\n      MLOAD \t\t\trequire(vaultAddress[NFTContra...\n      DUP1 \t\t\trequire(vaultAddress[NFTContra...\n      SWAP2 \t\t\trequire(vaultAddress[NFTContra...\n      SUB \t\t\trequire(vaultAddress[NFTContra...\n      SWAP1 \t\t\trequire(vaultAddress[NFTContra...\n      REVERT \t\t\trequire(vaultAddress[NFTContra...\n    tag 152\t\t\trequire(vaultAddress[NFTContra...\n      JUMPDEST \t\t\trequire(vaultAddress[NFTContra...\n      PUSH 0\t\t\tERC721Burnable asset\n      DUP3 \t\t\tNFTContractAddress\n      SWAP1 \t\t\tERC721Burnable asset = ERC721B...\n      POP \t\t\tERC721Burnable asset = ERC721B...\n      PUSH 0\t\t\taddress payable vaultContract_...\n      PUSH [tag] 154\t\t\tgetContractAddress(NFTContract...\n      DUP5 \t\t\tNFTContractAddress\n      PUSH [tag] 31\t\t\tgetContractAddress\n      JUMP \t\t\tgetContractAddress(NFTContract...\n    tag 154\t\t\tgetContractAddress(NFTContract...\n      JUMPDEST \t\t\tgetContractAddress(NFTContract...\n      SWAP1 \t\t\taddress payable vaultContract_...\n      POP \t\t\taddress payable vaultContract_...\n      PUSH 0\t\t\taddress tokenOwner\n      DUP3 \t\t\tasset\n      PUSH FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF\t\t\tasset.ownerOf\n      AND \t\t\tasset.ownerOf\n      PUSH 6352211E\t\t\tasset.ownerOf\n      DUP6 \t\t\t_tokenID\n      PUSH 40\t\t\tasset.ownerOf(_tokenID)\n      MLOAD \t\t\tasset.ownerOf(_tokenID)\n      DUP3 \t\t\tasset.ownerOf(_tokenID)\n      PUSH FFFFFFFF\t\t\tasset.ownerOf(_tokenID)\n      AND \t\t\tasset.ownerOf(_tokenID)\n      PUSH E0\t\t\tasset.ownerOf(_tokenID)\n      SHL \t\t\tasset.ownerOf(_tokenID)\n      DUP2 \t\t\tasset.ownerOf(_tokenID)\n      MSTORE \t\t\tasset.ownerOf(_tokenID)\n      PUSH 4\t\t\tasset.ownerOf(_tokenID)\n      ADD \t\t\tasset.ownerOf(_tokenID)\n      PUSH [tag] 155\t\t\tasset.ownerOf(_tokenID)\n      SWAP2 \t\t\tasset.ownerOf(_tokenID)\n      SWAP1 \t\t\tasset.ownerOf(_tokenID)\n      PUSH [tag] 156\t\t\tasset.ownerOf(_tokenID)\n      JUMP \t\t\tasset.ownerOf(_tokenID)\n    tag 155\t\t\tasset.ownerOf(_tokenID)\n      JUMPDEST \t\t\tasset.ownerOf(_tokenID)\n      PUSH 20\t\t\tasset.ownerOf(_tokenID)\n      PUSH 40\t\t\tasset.ownerOf(_tokenID)\n      MLOAD \t\t\tasset.ownerOf(_tokenID)\n      DUP1 \t\t\tasset.ownerOf(_tokenID)\n      DUP4 \t\t\tasset.ownerOf(_tokenID)\n      SUB \t\t\tasset.ownerOf(_tokenID)\n      DUP2 \t\t\tasset.ownerOf(_tokenID)\n      DUP7 \t\t\tasset.ownerOf(_tokenID)\n      GAS \t\t\tasset.ownerOf(_tokenID)\n      STATICCALL \t\t\tasset.ownerOf(_tokenID)\n      ISZERO \t\t\tasset.ownerOf(_tokenID)\n      DUP1 \t\t\tasset.ownerOf(_tokenID)\n      ISZERO \t\t\tasset.ownerOf(_tokenID)\n      PUSH [tag] 158\t\t\tasset.ownerOf(_tokenID)\n      JUMPI \t\t\tasset.ownerOf(_tokenID)\n      RETURNDATASIZE \t\t\tasset.ownerOf(_tokenID)\n      PUSH 0\t\t\tasset.ownerOf(_tokenID)\n      DUP1 \t\t\tasset.ownerOf(_tokenID)\n      RETURNDATACOPY \t\t\tasset.ownerOf(_tokenID)\n      RETURNDATASIZE \t\t\tasset.ownerOf(_tokenID)\n      PUSH 0\t\t\tasset.ownerOf(_tokenID)\n      REVERT \t\t\tasset.ownerOf(_tokenID)\n    tag 158\t\t\tasset.ownerOf(_tokenID)\n      JUMPDEST \t\t\tasset.ownerOf(_tokenID)\n      POP \t\t\tasset.ownerOf(_tokenID)\n      POP \t\t\tasset.ownerOf(_tokenID)\n      POP \t\t\tasset.ownerOf(_tokenID)\n      POP \t\t\tasset.ownerOf(_tokenID)\n      PUSH 40\t\t\tasset.ownerOf(_tokenID)\n      MLOAD \t\t\tasset.ownerOf(_tokenID)\n      RETURNDATASIZE \t\t\tasset.ownerOf(_tokenID)\n      PUSH 1F\t\t\tasset.ownerOf(_tokenID)\n      NOT \t\t\tasset.ownerOf(_tokenID)\n      PUSH 1F\t\t\tasset.ownerOf(_tokenID)\n      DUP3 \t\t\tasset.ownerOf(_tokenID)\n      ADD \t\t\tasset.ownerOf(_tokenID)\n      AND \t\t\tasset.ownerOf(_tokenID)\n      DUP3 \t\t\tasset.ownerOf(_tokenID)\n      ADD \t\t\tasset.ownerOf(_tokenID)\n      DUP1 \t\t\tasset.ownerOf(_tokenID)\n      PUSH 40\t\t\tasset.ownerOf(_tokenID)\n      MSTORE \t\t\tasset.ownerOf(_tokenID)\n      POP \t\t\tasset.ownerOf(_tokenID)\n      DUP2 \t\t\tasset.ownerOf(_tokenID)\n      ADD \t\t\tasset.ownerOf(_tokenID)\n      SWAP1 \t\t\tasset.ownerOf(_tokenID)\n      PUSH [tag] 159\t\t\tasset.ownerOf(_tokenID)\n      SWAP2 \t\t\tasset.ownerOf(_tokenID)\n      SWAP1 \t\t\tasset.ownerOf(_tokenID)\n      PUSH [tag] 106\t\t\tasset.ownerOf(_tokenID)\n      JUMP \t\t\tasset.ownerOf(_tokenID)\n    tag 159\t\t\tasset.ownerOf(_tokenID)\n      JUMPDEST \t\t\tasset.ownerOf(_tokenID)\n      SWAP1 \t\t\taddress tokenOwner = asset.own...\n      POP \t\t\taddress tokenOwner = asset.own...\n      CALLER \t\t\tmsg.sender\n      PUSH FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF\t\t\ttokenOwner == msg.sender\n      AND \t\t\ttokenOwner == msg.sender\n      DUP2 \t\t\ttokenOwner\n      PUSH FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF\t\t\ttokenOwner == msg.sender\n      AND \t\t\ttokenOwner == msg.sender\n      EQ \t\t\ttokenOwner == msg.sender\n      PUSH [tag] 160\t\t\trequire(tokenOwner == msg.send...\n      JUMPI \t\t\trequire(tokenOwner == msg.send...\n      PUSH 40\t\t\trequire(tokenOwner == msg.send...\n      MLOAD \t\t\trequire(tokenOwner == msg.send...\n      PUSH 8C379A000000000000000000000000000000000000000000000000000000000\t\t\trequire(tokenOwner == msg.send...\n      DUP2 \t\t\trequire(tokenOwner == msg.send...\n      MSTORE \t\t\trequire(tokenOwner == msg.send...\n      PUSH 4\t\t\trequire(tokenOwner == msg.send...\n      ADD \t\t\trequire(tokenOwner == msg.send...\n      PUSH [tag] 161\t\t\trequire(tokenOwner == msg.send...\n      SWAP1 \t\t\trequire(tokenOwner == msg.send...\n      PUSH [tag] 162\t\t\trequire(tokenOwner == msg.send...\n      JUMP \t\t\trequire(tokenOwner == msg.send...\n    tag 161\t\t\trequire(tokenOwner == msg.send...\n      JUMPDEST \t\t\trequire(tokenOwner == msg.send...\n      PUSH 40\t\t\trequire(tokenOwner == msg.send...\n      MLOAD \t\t\trequire(tokenOwner == msg.send...\n      DUP1 \t\t\trequire(tokenOwner == msg.send...\n      SWAP2 \t\t\trequire(tokenOwner == msg.send...\n      SUB \t\t\trequire(tokenOwner == msg.send...\n      SWAP1 \t\t\trequire(tokenOwner == msg.send...\n      REVERT \t\t\trequire(tokenOwner == msg.send...\n    tag 160\t\t\trequire(tokenOwner == msg.send...\n      JUMPDEST \t\t\trequire(tokenOwner == msg.send...\n      ADDRESS \t\t\tthis\n      PUSH FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF\t\t\tasset.getApproved(_tokenID) ==...\n      AND \t\t\tasset.getApproved(_tokenID) ==...\n      DUP4 \t\t\tasset\n      PUSH FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF\t\t\tasset.getApproved\n      AND \t\t\tasset.getApproved\n      PUSH 81812FC\t\t\tasset.getApproved\n      DUP7 \t\t\t_tokenID\n      PUSH 40\t\t\tasset.getApproved(_tokenID)\n      MLOAD \t\t\tasset.getApproved(_tokenID)\n      DUP3 \t\t\tasset.getApproved(_tokenID)\n      PUSH FFFFFFFF\t\t\tasset.getApproved(_tokenID)\n      AND \t\t\tasset.getApproved(_tokenID)\n      PUSH E0\t\t\tasset.getApproved(_tokenID)\n      SHL \t\t\tasset.getApproved(_tokenID)\n      DUP2 \t\t\tasset.getApproved(_tokenID)\n      MSTORE \t\t\tasset.getApproved(_tokenID)\n      PUSH 4\t\t\tasset.getApproved(_tokenID)\n      ADD \t\t\tasset.getApproved(_tokenID)\n      PUSH [tag] 163\t\t\tasset.getApproved(_tokenID)\n      SWAP2 \t\t\tasset.getApproved(_tokenID)\n      SWAP1 \t\t\tasset.getApproved(_tokenID)\n      PUSH [tag] 156\t\t\tasset.getApproved(_tokenID)\n      JUMP \t\t\tasset.getApproved(_tokenID)\n    tag 163\t\t\tasset.getApproved(_tokenID)\n      JUMPDEST \t\t\tasset.getApproved(_tokenID)\n      PUSH 20\t\t\tasset.getApproved(_tokenID)\n      PUSH 40\t\t\tasset.getApproved(_tokenID)\n      MLOAD \t\t\tasset.getApproved(_tokenID)\n      DUP1 \t\t\tasset.getApproved(_tokenID)\n      DUP4 \t\t\tasset.getApproved(_tokenID)\n      SUB \t\t\tasset.getApproved(_tokenID)\n      DUP2 \t\t\tasset.getApproved(_tokenID)\n      DUP7 \t\t\tasset.getApproved(_tokenID)\n      GAS \t\t\tasset.getApproved(_tokenID)\n      STATICCALL \t\t\tasset.getApproved(_tokenID)\n      ISZERO \t\t\tasset.getApproved(_tokenID)\n      DUP1 \t\t\tasset.getApproved(_tokenID)\n      ISZERO \t\t\tasset.getApproved(_tokenID)\n      PUSH [tag] 165\t\t\tasset.getApproved(_tokenID)\n      JUMPI \t\t\tasset.getApproved(_tokenID)\n      RETURNDATASIZE \t\t\tasset.getApproved(_tokenID)\n      PUSH 0\t\t\tasset.getApproved(_tokenID)\n      DUP1 \t\t\tasset.getApproved(_tokenID)\n      RETURNDATACOPY \t\t\tasset.getApproved(_tokenID)\n      RETURNDATASIZE \t\t\tasset.getApproved(_tokenID)\n      PUSH 0\t\t\tasset.getApproved(_tokenID)\n      REVERT \t\t\tasset.getApproved(_tokenID)\n    tag 165\t\t\tasset.getApproved(_tokenID)\n      JUMPDEST \t\t\tasset.getApproved(_tokenID)\n      POP \t\t\tasset.getApproved(_tokenID)\n      POP \t\t\tasset.getApproved(_tokenID)\n      POP \t\t\tasset.getApproved(_tokenID)\n      POP \t\t\tasset.getApproved(_tokenID)\n      PUSH 40\t\t\tasset.getApproved(_tokenID)\n      MLOAD \t\t\tasset.getApproved(_tokenID)\n      RETURNDATASIZE \t\t\tasset.getApproved(_tokenID)\n      PUSH 1F\t\t\tasset.getApproved(_tokenID)\n      NOT \t\t\tasset.getApproved(_tokenID)\n      PUSH 1F\t\t\tasset.getApproved(_tokenID)\n      DUP3 \t\t\tasset.getApproved(_tokenID)\n      ADD \t\t\tasset.getApproved(_tokenID)\n      AND \t\t\tasset.getApproved(_tokenID)\n      DUP3 \t\t\tasset.getApproved(_tokenID)\n      ADD \t\t\tasset.getApproved(_tokenID)\n      DUP1 \t\t\tasset.getApproved(_tokenID)\n      PUSH 40\t\t\tasset.getApproved(_tokenID)\n      MSTORE \t\t\tasset.getApproved(_tokenID)\n      POP \t\t\tasset.getApproved(_tokenID)\n      DUP2 \t\t\tasset.getApproved(_tokenID)\n      ADD \t\t\tasset.getApproved(_tokenID)\n      SWAP1 \t\t\tasset.getApproved(_tokenID)\n      PUSH [tag] 166\t\t\tasset.getApproved(_tokenID)\n      SWAP2 \t\t\tasset.getApproved(_tokenID)\n      SWAP1 \t\t\tasset.getApproved(_tokenID)\n      PUSH [tag] 106\t\t\tasset.getApproved(_tokenID)\n      JUMP \t\t\tasset.getApproved(_tokenID)\n    tag 166\t\t\tasset.getApproved(_tokenID)\n      JUMPDEST \t\t\tasset.getApproved(_tokenID)\n      PUSH FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF\t\t\tasset.getApproved(_tokenID) ==...\n      AND \t\t\tasset.getApproved(_tokenID) ==...\n      EQ \t\t\tasset.getApproved(_tokenID) ==...\n      PUSH [tag] 167\t\t\trequire(asset.getApproved(_tok...\n      JUMPI \t\t\trequire(asset.getApproved(_tok...\n      PUSH 40\t\t\trequire(asset.getApproved(_tok...\n      MLOAD \t\t\trequire(asset.getApproved(_tok...\n      PUSH 8C379A000000000000000000000000000000000000000000000000000000000\t\t\trequire(asset.getApproved(_tok...\n      DUP2 \t\t\trequire(asset.getApproved(_tok...\n      MSTORE \t\t\trequire(asset.getApproved(_tok...\n      PUSH 4\t\t\trequire(asset.getApproved(_tok...\n      ADD \t\t\trequire(asset.getApproved(_tok...\n      PUSH [tag] 168\t\t\trequire(asset.getApproved(_tok...\n      SWAP1 \t\t\trequire(asset.getApproved(_tok...\n      PUSH [tag] 169\t\t\trequire(asset.getApproved(_tok...\n      JUMP \t\t\trequire(asset.getApproved(_tok...\n    tag 168\t\t\trequire(asset.getApproved(_tok...\n      JUMPDEST \t\t\trequire(asset.getApproved(_tok...\n      PUSH 40\t\t\trequire(asset.getApproved(_tok...\n      MLOAD \t\t\trequire(asset.getApproved(_tok...\n      DUP1 \t\t\trequire(asset.getApproved(_tok...\n      SWAP2 \t\t\trequire(asset.getApproved(_tok...\n      SUB \t\t\trequire(asset.getApproved(_tok...\n      SWAP1 \t\t\trequire(asset.getApproved(_tok...\n      REVERT \t\t\trequire(asset.getApproved(_tok...\n    tag 167\t\t\trequire(asset.getApproved(_tok...\n      JUMPDEST \t\t\trequire(asset.getApproved(_tok...\n      DUP3 \t\t\tasset\n      PUSH FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF\t\t\tasset.burn\n      AND \t\t\tasset.burn\n      PUSH 42966C68\t\t\tasset.burn\n      DUP6 \t\t\t_tokenID\n      PUSH 40\t\t\tasset.burn(_tokenID)\n      MLOAD \t\t\tasset.burn(_tokenID)\n      DUP3 \t\t\tasset.burn(_tokenID)\n      PUSH FFFFFFFF\t\t\tasset.burn(_tokenID)\n      AND \t\t\tasset.burn(_tokenID)\n      PUSH E0\t\t\tasset.burn(_tokenID)\n      SHL \t\t\tasset.burn(_tokenID)\n      DUP2 \t\t\tasset.burn(_tokenID)\n      MSTORE \t\t\tasset.burn(_tokenID)\n      PUSH 4\t\t\tasset.burn(_tokenID)\n      ADD \t\t\tasset.burn(_tokenID)\n      PUSH [tag] 170\t\t\tasset.burn(_tokenID)\n      SWAP2 \t\t\tasset.burn(_tokenID)\n      SWAP1 \t\t\tasset.burn(_tokenID)\n      PUSH [tag] 156\t\t\tasset.burn(_tokenID)\n      JUMP \t\t\tasset.burn(_tokenID)\n    tag 170\t\t\tasset.burn(_tokenID)\n      JUMPDEST \t\t\tasset.burn(_tokenID)\n      PUSH 0\t\t\tasset.burn(_tokenID)\n      PUSH 40\t\t\tasset.burn(_tokenID)\n      MLOAD \t\t\tasset.burn(_tokenID)\n      DUP1 \t\t\tasset.burn(_tokenID)\n      DUP4 \t\t\tasset.burn(_tokenID)\n      SUB \t\t\tasset.burn(_tokenID)\n      DUP2 \t\t\tasset.burn(_tokenID)\n      PUSH 0\t\t\tasset.burn(_tokenID)\n      DUP8 \t\t\tasset.burn(_tokenID)\n      DUP1 \t\t\tasset.burn(_tokenID)\n      EXTCODESIZE \t\t\tasset.burn(_tokenID)\n      ISZERO \t\t\tasset.burn(_tokenID)\n      DUP1 \t\t\tasset.burn(_tokenID)\n      ISZERO \t\t\tasset.burn(_tokenID)\n      PUSH [tag] 171\t\t\tasset.burn(_tokenID)\n      JUMPI \t\t\tasset.burn(_tokenID)\n      PUSH 0\t\t\tasset.burn(_tokenID)\n      DUP1 \t\t\tasset.burn(_tokenID)\n      REVERT \t\t\tasset.burn(_tokenID)\n    tag 171\t\t\tasset.burn(_tokenID)\n      JUMPDEST \t\t\tasset.burn(_tokenID)\n      POP \t\t\tasset.burn(_tokenID)\n      GAS \t\t\tasset.burn(_tokenID)\n      CALL \t\t\tasset.burn(_tokenID)\n      ISZERO \t\t\tasset.burn(_tokenID)\n      DUP1 \t\t\tasset.burn(_tokenID)\n      ISZERO \t\t\tasset.burn(_tokenID)\n      PUSH [tag] 173\t\t\tasset.burn(_tokenID)\n      JUMPI \t\t\tasset.burn(_tokenID)\n      RETURNDATASIZE \t\t\tasset.burn(_tokenID)\n      PUSH 0\t\t\tasset.burn(_tokenID)\n      DUP1 \t\t\tasset.burn(_tokenID)\n      RETURNDATACOPY \t\t\tasset.burn(_tokenID)\n      RETURNDATASIZE \t\t\tasset.burn(_tokenID)\n      PUSH 0\t\t\tasset.burn(_tokenID)\n      REVERT \t\t\tasset.burn(_tokenID)\n    tag 173\t\t\tasset.burn(_tokenID)\n      JUMPDEST \t\t\tasset.burn(_tokenID)\n      POP \t\t\tasset.burn(_tokenID)\n      POP \t\t\tasset.burn(_tokenID)\n      POP \t\t\tasset.burn(_tokenID)\n      POP \t\t\tasset.burn(_tokenID)\n      PUSH 0\t\t\taddress payable recipient\n      CALLER \t\t\tmsg.sender\n      SWAP1 \t\t\taddress payable recipient = pa...\n      POP \t\t\taddress payable recipient = pa...\n      PUSH 0\t\t\tVault vault\n      DUP4 \t\t\tvaultContract_address\n      SWAP1 \t\t\tVault vault = Vault(vaultContr...\n      POP \t\t\tVault vault = Vault(vaultContr...\n      DUP1 \t\t\tvault\n      PUSH FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF\t\t\tvault.claimFunds\n      AND \t\t\tvault.claimFunds\n      PUSH ED2B40EA\t\t\tvault.claimFunds\n      DUP4 \t\t\trecipient\n      DUP9 \t\t\t_tokenID\n      PUSH 40\t\t\tvault.claimFunds(recipient, _t...\n      MLOAD \t\t\tvault.claimFunds(recipient, _t...\n      DUP4 \t\t\tvault.claimFunds(recipient, _t...\n      PUSH FFFFFFFF\t\t\tvault.claimFunds(recipient, _t...\n      AND \t\t\tvault.claimFunds(recipient, _t...\n      PUSH E0\t\t\tvault.claimFunds(recipient, _t...\n      SHL \t\t\tvault.claimFunds(recipient, _t...\n      DUP2 \t\t\tvault.claimFunds(recipient, _t...\n      MSTORE \t\t\tvault.claimFunds(recipient, _t...\n      PUSH 4\t\t\tvault.claimFunds(recipient, _t...\n      ADD \t\t\tvault.claimFunds(recipient, _t...\n      PUSH [tag] 174\t\t\tvault.claimFunds(recipient, _t...\n      SWAP3 \t\t\tvault.claimFunds(recipient, _t...\n      SWAP2 \t\t\tvault.claimFunds(recipient, _t...\n      SWAP1 \t\t\tvault.claimFunds(recipient, _t...\n      PUSH [tag] 175\t\t\tvault.claimFunds(recipient, _t...\n      JUMP \t\t\tvault.claimFunds(recipient, _t...\n    tag 174\t\t\tvault.claimFunds(recipient, _t...\n      JUMPDEST \t\t\tvault.claimFunds(recipient, _t...\n      PUSH 0\t\t\tvault.claimFunds(recipient, _t...\n      PUSH 40\t\t\tvault.claimFunds(recipient, _t...\n      MLOAD \t\t\tvault.claimFunds(recipient, _t...\n      DUP1 \t\t\tvault.claimFunds(recipient, _t...\n      DUP4 \t\t\tvault.claimFunds(recipient, _t...\n      SUB \t\t\tvault.claimFunds(recipient, _t...\n      DUP2 \t\t\tvault.claimFunds(recipient, _t...\n      PUSH 0\t\t\tvault.claimFunds(recipient, _t...\n      DUP8 \t\t\tvault.claimFunds(recipient, _t...\n      DUP1 \t\t\tvault.claimFunds(recipient, _t...\n      EXTCODESIZE \t\t\tvault.claimFunds(recipient, _t...\n      ISZERO \t\t\tvault.claimFunds(recipient, _t...\n      DUP1 \t\t\tvault.claimFunds(recipient, _t...\n      ISZERO \t\t\tvault.claimFunds(recipient, _t...\n      PUSH [tag] 176\t\t\tvault.claimFunds(recipient, _t...\n      JUMPI \t\t\tvault.claimFunds(recipient, _t...\n      PUSH 0\t\t\tvault.claimFunds(recipient, _t...\n      DUP1 \t\t\tvault.claimFunds(recipient, _t...\n      REVERT \t\t\tvault.claimFunds(recipient, _t...\n    tag 176\t\t\tvault.claimFunds(recipient, _t...\n      JUMPDEST \t\t\tvault.claimFunds(recipient, _t...\n      POP \t\t\tvault.claimFunds(recipient, _t...\n      GAS \t\t\tvault.claimFunds(recipient, _t...\n      CALL \t\t\tvault.claimFunds(recipient, _t...\n      ISZERO \t\t\tvault.claimFunds(recipient, _t...\n      DUP1 \t\t\tvault.claimFunds(recipient, _t...\n      ISZERO \t\t\tvault.claimFunds(recipient, _t...\n      PUSH [tag] 178\t\t\tvault.claimFunds(recipient, _t...\n      JUMPI \t\t\tvault.claimFunds(recipient, _t...\n      RETURNDATASIZE \t\t\tvault.claimFunds(recipient, _t...\n      PUSH 0\t\t\tvault.claimFunds(recipient, _t...\n      DUP1 \t\t\tvault.claimFunds(recipient, _t...\n      RETURNDATACOPY \t\t\tvault.claimFunds(recipient, _t...\n      RETURNDATASIZE \t\t\tvault.claimFunds(recipient, _t...\n      PUSH 0\t\t\tvault.claimFunds(recipient, _t...\n      REVERT \t\t\tvault.claimFunds(recipient, _t...\n    tag 178\t\t\tvault.claimFunds(recipient, _t...\n      JUMPDEST \t\t\tvault.claimFunds(recipient, _t...\n      POP \t\t\tvault.claimFunds(recipient, _t...\n      POP \t\t\tvault.claimFunds(recipient, _t...\n      POP \t\t\tvault.claimFunds(recipient, _t...\n      POP \t\t\tvault.claimFunds(recipient, _t...\n      POP \t\t\t{\\n        require(vaultAddres...\n      POP \t\t\t{\\n        require(vaultAddres...\n      POP \t\t\t{\\n        require(vaultAddres...\n      POP \t\t\t{\\n        require(vaultAddres...\n      POP \t\t\t{\\n        require(vaultAddres...\n      POP \t\t\tfunction claim(address NFTCont...\n      POP \t\t\tfunction claim(address NFTCont...\n      JUMP \t\t\tfunction claim(address NFTCont...\n    tag 47\t\t\tmapping(address => address[]) ...\n      JUMPDEST \t\t\tmapping(address => address[]) ...\n      PUSH 2\t\t\tmapping(address => address[]) ...\n      PUSH 20\t\t\tmapping(address => address[]) ...\n      MSTORE \t\t\tmapping(address => address[]) ...\n      DUP2 \t\t\tmapping(address => address[]) ...\n      PUSH 0\t\t\tmapping(address => address[]) ...\n      MSTORE \t\t\tmapping(address => address[]) ...\n      PUSH 40\t\t\tmapping(address => address[]) ...\n      PUSH 0\t\t\tmapping(address => address[]) ...\n      KECCAK256 \t\t\tmapping(address => address[]) ...\n      DUP2 \t\t\tmapping(address => address[]) ...\n      DUP2 \t\t\tmapping(address => address[]) ...\n      SLOAD \t\t\tmapping(address => address[]) ...\n      DUP2 \t\t\tmapping(address => address[]) ...\n      LT \t\t\tmapping(address => address[]) ...\n      PUSH [tag] 179\t\t\tmapping(address => address[]) ...\n      JUMPI \t\t\tmapping(address => address[]) ...\n      PUSH 0\t\t\tmapping(address => address[]) ...\n      DUP1 \t\t\tmapping(address => address[]) ...\n      REVERT \t\t\tmapping(address => address[]) ...\n    tag 179\t\t\tmapping(address => address[]) ...\n      JUMPDEST \t\t\tmapping(address => address[]) ...\n      SWAP1 \t\t\tmapping(address => address[]) ...\n      PUSH 0\t\t\tmapping(address => address[]) ...\n      MSTORE \t\t\tmapping(address => address[]) ...\n      PUSH 20\t\t\tmapping(address => address[]) ...\n      PUSH 0\t\t\tmapping(address => address[]) ...\n      KECCAK256 \t\t\tmapping(address => address[]) ...\n      ADD \t\t\tmapping(address => address[]) ...\n      PUSH 0\t\t\tmapping(address => address[]) ...\n      SWAP2 \t\t\tmapping(address => address[]) ...\n      POP \t\t\tmapping(address => address[]) ...\n      SWAP2 \t\t\tmapping(address => address[]) ...\n      POP \t\t\tmapping(address => address[]) ...\n      SWAP1 \t\t\tmapping(address => address[]) ...\n      SLOAD \t\t\tmapping(address => address[]) ...\n      SWAP1 \t\t\tmapping(address => address[]) ...\n      PUSH 100\t\t\tmapping(address => address[]) ...\n      EXP \t\t\tmapping(address => address[]) ...\n      SWAP1 \t\t\tmapping(address => address[]) ...\n      DIV \t\t\tmapping(address => address[]) ...\n      PUSH FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF\t\t\tmapping(address => address[]) ...\n      AND \t\t\tmapping(address => address[]) ...\n      DUP2 \t\t\tmapping(address => address[]) ...\n      JUMP \t\t\tmapping(address => address[]) ...\n    tag 58\t\t\t\n      JUMPDEST \t\t\t\n      PUSH 40\t\t\t\n      MLOAD \t\t\t\n      DUP1 \t\t\t\n      PUSH 80\t\t\t\n      ADD \t\t\t\n      PUSH 40\t\t\t\n      MSTORE \t\t\t\n      DUP1 \t\t\t\n      PUSH 0\t\t\t\n      DUP2 \t\t\t\n      MSTORE \t\t\t\n      PUSH 20\t\t\t\n      ADD \t\t\t\n      PUSH 0\t\t\t\n      DUP2 \t\t\t\n      MSTORE \t\t\t\n      PUSH 20\t\t\t\n      ADD \t\t\t\n      PUSH 60\t\t\t\n      DUP2 \t\t\t\n      MSTORE \t\t\t\n      PUSH 20\t\t\t\n      ADD \t\t\t\n      PUSH 0\t\t\t\n      PUSH FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF\t\t\t\n      AND \t\t\t\n      DUP2 \t\t\t\n      MSTORE \t\t\t\n      POP \t\t\t\n      SWAP1 \t\t\t\n      JUMP \t\t\t\n    tag 86\t\t\t\n      JUMPDEST \t\t\t\n      PUSH #[$] 0000000000000000000000000000000000000000000000000000000000000000\t\t\t\n      DUP1 \t\t\t\n      PUSH [$] 0000000000000000000000000000000000000000000000000000000000000000\t\t\t\n      DUP4 \t\t\t\n      CODECOPY \t\t\t\n      ADD \t\t\t\n      SWAP1 \t\t\t\n      JUMP \t\t\t\n    tag 181\t\t\t-License-Identifier: MIT\\nprag...\n      JUMPDEST \t\t\t-License-Identifier: MIT\\nprag...\n      PUSH 0\t\t\tolidit\n      PUSH 40\t\t\tpe\n      MLOAD \t\t\tpenzeppel\n      SWAP1 \t\t\timport \"@openzeppel\n      POP \t\t\timport \"@openzeppel\n      SWAP1 \t\t\t-License-Identifier: MIT\\nprag...\n      JUMP \t\t\t-License-Identifier: MIT\\nprag...\n    tag 182\t\t\t/token/ERC721/ERC721.sol\";\\nim...\n      JUMPDEST \t\t\t/token/ERC721/ERC721.sol\";\\nim...\n      PUSH 0\t\t\t \n      DUP1 \t\t\t*\n      REVERT \t\t\tol\";\\n\\n/**\\n *\n    tag 183\t\t\tt\\n * @dev Vault contract that...\n      JUMPDEST \t\t\tt\\n * @dev Vault contract that...\n      PUSH 0\t\t\t \n      DUP1 \t\t\t \n      REVERT \t\t\tault {\\n    a\n    tag 184\t\t\tc NFTContract;\\n    mapping(ui...\n      JUMPDEST \t\t\tc NFTContract;\\n    mapping(ui...\n      PUSH 0\t\t\t uint25\n      PUSH FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF\t\t\t256 public minTime;\\n    uint2...\n      DUP3 \t\t\t   ui\n      AND \t\t\ts;\\n    uint256 public minTime...\n      SWAP1 \t\t\tokenBalances;\\n    uint256 pub...\n      POP \t\t\tokenBalances;\\n    uint256 pub...\n      SWAP2 \t\t\tc NFTContract;\\n    mapping(ui...\n      SWAP1 \t\t\tc NFTContract;\\n    mapping(ui...\n      POP \t\t\tc NFTContract;\\n    mapping(ui...\n      JUMP \t\t\tc NFTContract;\\n    mapping(ui...\n    tag 185\t\t\t  address public bitsurance;\\n...\n      JUMPDEST \t\t\t  address public bitsurance;\\n...\n      PUSH 0\t\t\tess pub\n      PUSH [tag] 248\t\t\tay to store all insured \n      DUP3 \t\t\tsured\n      PUSH [tag] 184\t\t\tay to store all insured \n      JUMP \t\t\tay to store all insured \n    tag 248\t\t\tay to store all insured \n      JUMPDEST \t\t\tay to store all insured \n      SWAP1 \t\t\t\\n    // array to store all in...\n      POP \t\t\t\\n    // array to store all in...\n      SWAP2 \t\t\t  address public bitsurance;\\n...\n      SWAP1 \t\t\t  address public bitsurance;\\n...\n      POP \t\t\t  address public bitsurance;\\n...\n      JUMP \t\t\t  address public bitsurance;\\n...\n    tag 186\t\t\t  uint256[] public tokenIds;\\n...\n      JUMPDEST \t\t\t  uint256[] public tokenIds;\\n...\n      PUSH [tag] 250\t\t\te(msg.sender == bitsuran\n      DUP2 \t\t\ttsura\n      PUSH [tag] 185\t\t\te(msg.sender == bitsuran\n      JUMP \t\t\te(msg.sender == bitsuran\n    tag 250\t\t\te(msg.sender == bitsuran\n      JUMPDEST \t\t\te(msg.sender == bitsuran\n      DUP2 \t\t\t requ\n      EQ \t\t\t    require(msg.sender == bits...\n      PUSH [tag] 251\t\t\tance{\\n        require(msg.sen...\n      JUMPI \t\t\tance{\\n        require(msg.sen...\n      PUSH 0\t\t\tr\n      DUP1 \t\t\tt\n      REVERT \t\t\tOnly Bitsura\n    tag 251\t\t\tance{\\n        require(msg.sen...\n      JUMPDEST \t\t\tance{\\n        require(msg.sen...\n      POP \t\t\t  uint256[] public tokenIds;\\n...\n      JUMP \t\t\t  uint256[] public tokenIds;\\n...\n    tag 187\t\t\tan call this function\");\\n    ...\n      JUMPDEST \t\t\tan call this function\");\\n    ...\n      PUSH 0\t\t\t /**\\n\n      DUP2 \t\t\tthat s\n      CALLDATALOAD \t\t\t constructor that se\n      SWAP1 \t\t\t Contract constructor that se\n      POP \t\t\t Contract constructor that se\n      PUSH [tag] 253\t\t\tl values\\n     * @param NFTCon...\n      DUP2 \t\t\tontra\n      PUSH [tag] 186\t\t\tl values\\n     * @param NFTCon...\n      JUMP \t\t\tl values\\n     * @param NFTCon...\n    tag 253\t\t\tl values\\n     * @param NFTCon...\n      JUMPDEST \t\t\tl values\\n     * @param NFTCon...\n      SWAP3 \t\t\tan call this function\");\\n    ...\n      SWAP2 \t\t\tan call this function\");\\n    ...\n      POP \t\t\tan call this function\");\\n    ...\n      POP \t\t\tan call this function\");\\n    ...\n      JUMP \t\t\tan call this function\");\\n    ...\n    tag 14\t\t\tress of the NFT contract\\n    ...\n      JUMPDEST \t\t\tress of the NFT contract\\n    ...\n      PUSH 0\t\t\te befo\n      PUSH 20\t\t\t  \n      DUP3 \t\t\t withdraw\n      DUP5 \t\t\tme befo\n      SUB \t\t\tinTime before withdraw\\n\n      SLT \t\t\t * minTime before withdraw\\n  ...\n      ISZERO \t\t\td 2 * minTime before withdraw\\...\n      PUSH [tag] 255\t\t\td 2 * minTime before withdraw\\...\n      JUMPI \t\t\td 2 * minTime before withdraw\\...\n      PUSH [tag] 256\t\t\tparam _admin admin address\\n  ...\n      PUSH [tag] 182\t\t\tparam _admin admin address\\n  ...\n      JUMP \t\t\tparam _admin admin address\\n  ...\n    tag 256\t\t\tparam _admin admin address\\n  ...\n      JUMPDEST \t\t\tparam _admin admin address\\n  ...\n    tag 255\t\t\td 2 * minTime before withdraw\\...\n      JUMPDEST \t\t\td 2 * minTime before withdraw\\...\n      PUSH 0\t\t\t \n      PUSH [tag] 257\t\t\tactAddress;\\n        minTime =...\n      DUP5 \t\t\t   admi\n      DUP3 \t\t\tme;\\n  \n      DUP6 \t\t\tme = _min\n      ADD \t\t\tinTime = _minTime;\\n   \n      PUSH [tag] 187\t\t\tactAddress;\\n        minTime =...\n      JUMP \t\t\tactAddress;\\n        minTime =...\n    tag 257\t\t\tactAddress;\\n        minTime =...\n      JUMPDEST \t\t\tactAddress;\\n        minTime =...\n      SWAP2 \t\t\t= NFTContractAddress;\\n       ...\n      POP \t\t\t= NFTContractAddress;\\n       ...\n      POP \t\t\tTime, address _admin) {\\n     ...\n      SWAP3 \t\t\tress of the NFT contract\\n    ...\n      SWAP2 \t\t\tress of the NFT contract\\n    ...\n      POP \t\t\tress of the NFT contract\\n    ...\n      POP \t\t\tress of the NFT contract\\n    ...\n      JUMP \t\t\tress of the NFT contract\\n    ...\n    tag 188\t\t\ttionTime = block.timestamp;\\n ...\n      JUMPDEST \t\t\ttionTime = block.timestamp;\\n ...\n      PUSH [tag] 259\t\t\trnal payable{}\\n    recei\n      DUP2 \t\t\t rece\n      PUSH [tag] 185\t\t\trnal payable{}\\n    recei\n      JUMP \t\t\trnal payable{}\\n    recei\n    tag 259\t\t\trnal payable{}\\n    recei\n      JUMPDEST \t\t\trnal payable{}\\n    recei\n      DUP3 \t\t\t ex\n      MSTORE \t\t\tlback() external payable{}\\n  ...\n      POP \t\t\ttionTime = block.timestamp;\\n ...\n      POP \t\t\ttionTime = block.timestamp;\\n ...\n      JUMP \t\t\ttionTime = block.timestamp;\\n ...\n    tag 17\t\t\t payable{}\\n\\n    /**\\n     * ...\n      JUMPDEST \t\t\t payable{}\\n\\n    /**\\n     * ...\n      PUSH 0\t\t\t _to\n      PUSH 20\t\t\te \n      DUP3 \t\t\t the bala\n      ADD \t\t\thich the balance i\n      SWAP1 \t\t\t ID to which the balance i\n      POP \t\t\t ID to which the balance i\n      PUSH [tag] 261\t\t\t   * @param amount Amount to a...\n      PUSH 0\t\t\t \n      DUP4 \t\t\t   functi\n      ADD \t\t\t*/\\n    function a\n      DUP5 \t\t\tnce\\n  \n      PUSH [tag] 188\t\t\t   * @param amount Amount to a...\n      JUMP \t\t\t   * @param amount Amount to a...\n    tag 261\t\t\t   * @param amount Amount to a...\n      JUMPDEST \t\t\t   * @param amount Amount to a...\n      SWAP3 \t\t\t payable{}\\n\\n    /**\\n     * ...\n      SWAP2 \t\t\t payable{}\\n\\n    /**\\n     * ...\n      POP \t\t\t payable{}\\n\\n    /**\\n     * ...\n      POP \t\t\t payable{}\\n\\n    /**\\n     * ...\n      JUMP \t\t\t payable{}\\n\\n    /**\\n     * ...\n    tag 189\t\t\t256 _tokenID, uint256 amount) ...\n      JUMPDEST \t\t\t256 _tokenID, uint256 amount) ...\n      PUSH 0\t\t\t {\\n   \n      DUP2 \t\t\tnID);\n      MLOAD \t\t\t(_tokenID);\\n\n      SWAP1 \t\t\tenIds.push(_tokenID);\\n\n      POP \t\t\tenIds.push(_tokenID);\\n\n      SWAP2 \t\t\t256 _tokenID, uint256 amount) ...\n      SWAP1 \t\t\t256 _tokenID, uint256 amount) ...\n      POP \t\t\t256 _tokenID, uint256 amount) ...\n      JUMP \t\t\t256 _tokenID, uint256 amount) ...\n    tag 190\t\t\t     tokenBalances[_tokenID] +...\n      JUMPDEST \t\t\t     tokenBalances[_tokenID] +...\n      PUSH 0\t\t\ttokenIds;\\n \n      DUP3 \t\t\tev Fun\n      DUP3 \t\t\t * \n      MSTORE \t\t\t**\\n     * @dev Func\n      PUSH 20\t\t\tt\\n  \n      DUP3 \t\t\t va\n      ADD \t\t\t the vault\\n   \n      SWAP1 \t\t\tlaim funds from the vault\\n   \n      POP \t\t\tlaim funds from the vault\\n   \n      SWAP3 \t\t\t     tokenBalances[_tokenID] +...\n      SWAP2 \t\t\t     tokenBalances[_tokenID] +...\n      POP \t\t\t     tokenBalances[_tokenID] +...\n      POP \t\t\t     tokenBalances[_tokenID] +...\n      JUMP \t\t\t     tokenBalances[_tokenID] +...\n    tag 191\t\t\tecipient Recipient address to ...\n      JUMPDEST \t\t\tecipient Recipient address to ...\n      PUSH 0\t\t\t    \n      DUP2 \t\t\t(ad\n      SWAP1 \t\t\taimFunds(ad\n      POP \t\t\taimFunds(ad\n      PUSH 20\t\t\tnt25\n      DUP3 \t\t\tt, \n      ADD \t\t\tpient, uint256\n      SWAP1 \t\t\tble recipient, uint256\n      POP \t\t\tble recipient, uint256\n      SWAP2 \t\t\tecipient Recipient address to ...\n      SWAP1 \t\t\tecipient Recipient address to ...\n      POP \t\t\tecipient Recipient address to ...\n      JUMP \t\t\tecipient Recipient address to ...\n    tag 192\t\t\tternal payable onlyBitsurance ...\n      JUMPDEST \t\t\tternal payable onlyBitsurance ...\n      PUSH 0\t\t\t   requ\n      DUP2 \t\t\tenID]\n      SWAP1 \t\t\tlances[_tokenID]\n      POP \t\t\tlances[_tokenID]\n      SWAP2 \t\t\tternal payable onlyBitsurance ...\n      SWAP1 \t\t\tternal payable onlyBitsurance ...\n      POP \t\t\tternal payable onlyBitsurance ...\n      JUMP \t\t\tternal payable onlyBitsurance ...\n    tag 193\t\t\tlance for this tokenID\");\\n   ...\n      JUMPDEST \t\t\tlance for this tokenID\");\\n   ...\n      PUSH [tag] 267\t\t\tinTime, \"Cannot access f\n      DUP2 \t\t\tcess \n      PUSH [tag] 192\t\t\tinTime, \"Cannot access f\n      JUMP \t\t\tinTime, \"Cannot access f\n    tag 267\t\t\tinTime, \"Cannot access f\n      JUMPDEST \t\t\tinTime, \"Cannot access f\n      DUP3 \t\t\t >=\n      MSTORE \t\t\tionTime >= minTime, \"Cannot ac...\n      POP \t\t\tlance for this tokenID\");\\n   ...\n      POP \t\t\tlance for this tokenID\");\\n   ...\n      JUMP \t\t\tlance for this tokenID\");\\n   ...\n    tag 194\t\t\te the minimum time has passed\"...\n      JUMPDEST \t\t\te the minimum time has passed\"...\n      PUSH 0\t\t\tnces[_\n      DUP2 \t\t\tces[_\n      MLOAD \t\t\tnBalances[_t\n      SWAP1 \t\t\t      tokenBalances[_t\n      POP \t\t\t      tokenBalances[_t\n      SWAP2 \t\t\te the minimum time has passed\"...\n      SWAP1 \t\t\te the minimum time has passed\"...\n      POP \t\t\te the minimum time has passed\"...\n      JUMP \t\t\te the minimum time has passed\"...\n    tag 195\t\t\t        recipient.transfer(amo...\n      JUMPDEST \t\t\t        recipient.transfer(amo...\n      PUSH 0\t\t\t from the v\n      DUP3 \t\t\tpient \n      DUP3 \t\t\t re\n      MSTORE \t\t\t @param recipient R\n      PUSH 20\t\t\tunds\n      DUP3 \t\t\tthe\n      ADD \t\t\tive the funds\\n\n      SWAP1 \t\t\taddress to receive the funds\\n\n      POP \t\t\taddress to receive the funds\\n\n      SWAP3 \t\t\t        recipient.transfer(amo...\n      SWAP2 \t\t\t        recipient.transfer(amo...\n      POP \t\t\t        recipient.transfer(amo...\n      POP \t\t\t        recipient.transfer(amo...\n      JUMP \t\t\t        recipient.transfer(amo...\n    tag 196\t\t\tm _tokenIDs Array of Token IDs...\n      JUMPDEST \t\t\tm _tokenIDs Array of Token IDs...\n      PUSH 0\t\t\thdra\n      DUP2 \t\t\teci\n      SWAP1 \t\t\tayable reci\n      POP \t\t\tayable reci\n      PUSH 20\t\t\tkenI\n      DUP3 \t\t\ty _\n      ADD \t\t\temory _tokenID\n      SWAP1 \t\t\tt256[] memory _tokenID\n      POP \t\t\tt256[] memory _tokenID\n      SWAP2 \t\t\tm _tokenIDs Array of Token IDs...\n      SWAP1 \t\t\tm _tokenIDs Array of Token IDs...\n      POP \t\t\tm _tokenIDs Array of Token IDs...\n      JUMP \t\t\tm _tokenIDs Array of Token IDs...\n    tag 197\t\t\tayable onlyBitsurance {\\n     ...\n      JUMPDEST \t\t\tayable onlyBitsurance {\\n     ...\n      PUSH 0\t\t\te >= 2 * m\n      PUSH [tag] 272\t\t\tnnot access function before th...\n      DUP4 \t\t\tme \n      DUP4 \t\t\tnimum \n      PUSH [tag] 193\t\t\tnnot access function before th...\n      JUMP \t\t\tnnot access function before th...\n    tag 272\t\t\tnnot access function before th...\n      JUMPDEST \t\t\tnnot access function before th...\n      PUSH 20\t\t\talAm\n      DUP4 \t\t\t6 t\n      ADD \t\t\tnt256 totalAmo\n      SWAP1 \t\t\t\");\\n        uint256 totalAmo\n      POP \t\t\t\");\\n        uint256 totalAmo\n      SWAP3 \t\t\tayable onlyBitsurance {\\n     ...\n      SWAP2 \t\t\tayable onlyBitsurance {\\n     ...\n      POP \t\t\tayable onlyBitsurance {\\n     ...\n      POP \t\t\tayable onlyBitsurance {\\n     ...\n      JUMP \t\t\tayable onlyBitsurance {\\n     ...\n    tag 198\t\t\t     for (uint256 i = 0; i < _...\n      JUMPDEST \t\t\t     for (uint256 i = 0; i < _...\n      PUSH 0\t\t\tire(\n      PUSH 20\t\t\t> 0,\n      DUP3 \t\t\t[i]\n      ADD \t\t\tnIDs[i]] > 0, \n      SWAP1 \t\t\tes[_tokenIDs[i]] > 0, \n      POP \t\t\tes[_tokenIDs[i]] > 0, \n      SWAP2 \t\t\t     for (uint256 i = 0; i < _...\n      SWAP1 \t\t\t     for (uint256 i = 0; i < _...\n      POP \t\t\t     for (uint256 i = 0; i < _...\n      JUMP \t\t\t     for (uint256 i = 0; i < _...\n    tag 199\t\t\t  totalAmount += tokenBalances...\n      JUMPDEST \t\t\t  totalAmount += tokenBalances...\n      PUSH 0\t\t\trec\n      PUSH [tag] 275\t\t\tt);\\n    }\\n}\\n/**\\n * @title ...\n      DUP3 \t\t\tsuran\n      PUSH [tag] 194\t\t\tt);\\n    }\\n}\\n/**\\n * @title ...\n      JUMP \t\t\tt);\\n    }\\n}\\n/**\\n * @title ...\n    tag 275\t\t\tt);\\n    }\\n}\\n/**\\n * @title ...\n      JUMPDEST \t\t\tt);\\n    }\\n}\\n/**\\n * @title ...\n      PUSH [tag] 276\t\t\tinteracts with Vaults and mana...\n      DUP2 \t\t\t\\n */\\nc\n      DUP6 \t\t\t th\n      PUSH [tag] 195\t\t\tinteracts with Vaults and mana...\n      JUMP \t\t\tinteracts with Vaults and mana...\n    tag 276\t\t\tinteracts with Vaults and mana...\n      JUMPDEST \t\t\tinteracts with Vaults and mana...\n      SWAP4 \t\t\tt that interacts with Vaults a...\n      POP \t\t\tt that interacts with Vaults a...\n      PUSH [tag] 277\t\t\t struct VaultDetails {\\n      ...\n      DUP4 \t\t\te;\\n  \n      PUSH [tag] 196\t\t\t struct VaultDetails {\\n      ...\n      JUMP \t\t\t struct VaultDetails {\\n      ...\n    tag 277\t\t\t struct VaultDetails {\\n      ...\n      JUMPDEST \t\t\t struct VaultDetails {\\n      ...\n      DUP1 \t\t\thdrawTi\n      PUSH 0\t\t\ts\n    tag 278\t\t\t   uint256[] insuredTokenIds;\\...\n      JUMPDEST \t\t\t   uint256[] insuredTokenIds;\\...\n      DUP4 \t\t\tIds;\\n \n      DUP2 \t\t\tk\n      LT \t\t\tdTokenIds;\\n  \n      ISZERO \t\t\t   uint256[] insuredTokenIds;\\...\n      PUSH [tag] 280\t\t\t   uint256[] insuredTokenIds;\\...\n      JUMPI \t\t\t   uint256[] insuredTokenIds;\\...\n      DUP2 \t\t\ts\\n    \n      MLOAD \t\t\t vaults\\n    V\n      PUSH [tag] 281\t\t\ts;\\n    \\n    // Event to noti...\n      DUP9 \t\t\teve\n      DUP3 \t\t\tis created\\n  \n      PUSH [tag] 197\t\t\ts;\\n    \\n    // Event to noti...\n      JUMP \t\t\ts;\\n    \\n    // Event to noti...\n    tag 281\t\t\ts;\\n    \\n    // Event to noti...\n      JUMPDEST \t\t\ts;\\n    \\n    // Event to noti...\n      SWAP8 \t\t\te vaults;\\n    \\n    // Event ...\n      POP \t\t\te vaults;\\n    \\n    // Event ...\n      PUSH [tag] 282\t\t\tdate, address vaultAddress, ad...\n      DUP4 \t\t\t  // M\n      PUSH [tag] 198\t\t\tdate, address vaultAddress, ad...\n      JUMP \t\t\tdate, address vaultAddress, ad...\n    tag 282\t\t\tdate, address vaultAddress, ad...\n      JUMPDEST \t\t\tdate, address vaultAddress, ad...\n      SWAP3 \t\t\td(uint256 date, address vaultA...\n      POP \t\t\td(uint256 date, address vaultA...\n      POP \t\t\tress;\\n    }\\n    \\n    // An ...\n      PUSH 1\t\t\tf\n      DUP2 \t\t\ts\n      ADD \t\t\tdress nft\n      SWAP1 \t\t\t   address nft\n      POP \t\t\t   address nft\n      PUSH [tag] 278\t\t\t   uint256[] insuredTokenIds;\\...\n      JUMP \t\t\t   uint256[] insuredTokenIds;\\...\n    tag 280\t\t\t   uint256[] insuredTokenIds;\\...\n      JUMPDEST \t\t\t   uint256[] insuredTokenIds;\\...\n      POP \t\t\tint256[] insur\n      DUP6 \t\t\tess\n      SWAP4 \t\t\tct address\n      POP \t\t\tct address\n      POP \t\t\tient.transfer(totalAmount);\\n ...\n      POP \t\t\tient.transfer(totalAmount);\\n ...\n      POP \t\t\tient.transfer(totalAmount);\\n ...\n      SWAP3 \t\t\t  totalAmount += tokenBalances...\n      SWAP2 \t\t\t  totalAmount += tokenBalances...\n      POP \t\t\t  totalAmount += tokenBalances...\n      POP \t\t\t  totalAmount += tokenBalances...\n      JUMP \t\t\t  totalAmount += tokenBalances...\n    tag 200\t\t\tnding vault address\\n    mappi...\n      JUMPDEST \t\t\tnding vault address\\n    mappi...\n      PUSH [tag] 284\t\t\t\\n    // Mapping of admin\n      DUP2 \t\t\t admi\n      PUSH [tag] 185\t\t\t\\n    // Mapping of admin\n      JUMP \t\t\t\\n    // Mapping of admin\n    tag 284\t\t\t\\n    // Mapping of admin\n      JUMPDEST \t\t\t\\n    // Mapping of admin\n      DUP3 \t\t\t\\n  \n      MSTORE \t\t\tddress;\\n    \\n    // Mapping ...\n      POP \t\t\tnding vault address\\n    mappi...\n      POP \t\t\tnding vault address\\n    mappi...\n      JUMP \t\t\tnding vault address\\n    mappi...\n    tag 201\t\t\t /**\\n     * @dev Function to ...\n      JUMPDEST \t\t\t /**\\n     * @dev Function to ...\n      PUSH 0\t\t\tara\n      PUSH 80\t\t\tthdr\n      DUP4 \t\t\tre \n      ADD \t\t\tbefore withdra\n      PUSH 0\t\t\t{\\n  \n      DUP4 \t\t\t publ\n      ADD \t\t\time) public{\\n   \n      MLOAD \t\t\t _minTime) public{\\n    \n      PUSH [tag] 286\t\t\taultAddress[_NFTContractAddres...\n      PUSH 0\t\t\tread\n      DUP7 \t\t\tlt \n      ADD \t\t\t\"Vault already\n      DUP3 \t\t\t= address(0)\n      PUSH [tag] 193\t\t\taultAddress[_NFTContractAddres...\n      JUMP \t\t\taultAddress[_NFTContractAddres...\n    tag 286\t\t\taultAddress[_NFTContractAddres...\n      JUMPDEST \t\t\taultAddress[_NFTContractAddres...\n      POP \t\t\t/\\n    function createVault(ad...\n      PUSH 20\t\t\t    \n      DUP4 \t\t\tnder)\n      ADD \t\t\tg.sender);\\n     \n      MLOAD \t\t\tme, msg.sender);\\n      \n      PUSH [tag] 287\t\t\t(vault);\\n        vaultAddress...\n      PUSH 20\t\t\tss(v\n      DUP7 \t\t\tadd\n      ADD \t\t\ts]= address(va\n      DUP3 \t\t\tContractAddr\n      PUSH [tag] 193\t\t\t(vault);\\n        vaultAddress...\n      JUMP \t\t\t(vault);\\n        vaultAddress...\n    tag 287\t\t\t(vault);\\n        vaultAddress...\n      JUMPDEST \t\t\t(vault);\\n        vaultAddress...\n      POP \t\t\tcontract\");\\n        Vault vau...\n      PUSH 40\t\t\t.tim\n      DUP4 \t\t\td(blo\n      ADD \t\t\teated(block.time\n      MLOAD \t\t\taultCreated(block.times\n      DUP5 \t\t\t\\n\\n \n      DUP3 \t\t\t\\n   \n      SUB \t\t\tss);\\n    }\\n\\n  \n      PUSH 40\t\t\tctAd\n      DUP7 \t\t\tont\n      ADD \t\t\tNFTContractAdd\n      MSTORE \t\t\tault),_NFTContractAddress);\\n ...\n      PUSH [tag] 288\t\t\ttion to deposit funds into a v...\n      DUP3 \t\t\t   *\n      DUP3 \t\t\tFT contract\\n\n      PUSH [tag] 199\t\t\ttion to deposit funds into a v...\n      JUMP \t\t\ttion to deposit funds into a v...\n    tag 288\t\t\ttion to deposit funds into a v...\n      JUMPDEST \t\t\ttion to deposit funds into a v...\n      SWAP2 \t\t\tdev Function to deposit funds ...\n      POP \t\t\tdev Function to deposit funds ...\n      POP \t\t\tNFTContracts[msg.sender].push(...\n      PUSH 60\t\t\tposi\n      DUP4 \t\t\t for \n      ADD \t\t\tunts for deposit\n      MLOAD \t\t\tng amounts for deposit\\n\n      PUSH [tag] 289\t\t\tunction depositFunds(address N...\n      PUSH 60\t\t\t] me\n      DUP7 \t\t\tt25\n      ADD \t\t\t uint256[] mem\n      DUP3 \t\t\tntractAddres\n      PUSH [tag] 200\t\t\tunction depositFunds(address N...\n      JUMP \t\t\tunction depositFunds(address N...\n    tag 289\t\t\tunction depositFunds(address N...\n      JUMPDEST \t\t\tunction depositFunds(address N...\n      POP \t\t\ty of Token IDs for deposit\\n  ...\n      DUP1 \t\t\tory \n      SWAP2 \t\t\t6[] memory \n      POP \t\t\t6[] memory \n      POP \t\t\t_minTime minimum time before w...\n      SWAP3 \t\t\t /**\\n     * @dev Function to ...\n      SWAP2 \t\t\t /**\\n     * @dev Function to ...\n      POP \t\t\t /**\\n     * @dev Function to ...\n      POP \t\t\t /**\\n     * @dev Function to ...\n      JUMP \t\t\t /**\\n     * @dev Function to ...\n    tag 202\t\t\tlic payable{\\n        require(...\n      JUMPDEST \t\t\tlic payable{\\n        require(...\n      PUSH 0\t\t\t    requir\n      PUSH [tag] 291\t\t\tunts.length, \"Mismatched array...\n      DUP4 \t\t\tyab\n      DUP4 \t\t\tdress \n      PUSH [tag] 201\t\t\tunts.length, \"Mismatched array...\n      JUMP \t\t\tunts.length, \"Mismatched array...\n    tag 291\t\t\tunts.length, \"Mismatched array...\n      JUMPDEST \t\t\tunts.length, \"Mismatched array...\n      SWAP1 \t\t\t.length == amounts.length, \"Mi...\n      POP \t\t\t.length == amounts.length, \"Mi...\n      SWAP3 \t\t\tlic payable{\\n        require(...\n      SWAP2 \t\t\tlic payable{\\n        require(...\n      POP \t\t\tlic payable{\\n        require(...\n      POP \t\t\tlic payable{\\n        require(...\n      JUMP \t\t\tlic payable{\\n        require(...\n    tag 203\t\t\tact_address = payable(getContr...\n      JUMPDEST \t\t\tact_address = payable(getContr...\n      PUSH 0\t\t\ttrac\n      PUSH 20\t\t\tvaul\n      DUP3 \t\t\tuir\n      ADD \t\t\t require(vault\n      SWAP1 \t\t\t\\n        require(vault\n      POP \t\t\t\\n        require(vault\n      SWAP2 \t\t\tact_address = payable(getContr...\n      SWAP1 \t\t\tact_address = payable(getContr...\n      POP \t\t\tact_address = payable(getContr...\n      JUMP \t\t\tact_address = payable(getContr...\n    tag 204\t\t\t\\n        uint256 totalAmount ...\n      JUMPDEST \t\t\t\\n        uint256 totalAmount ...\n      PUSH 0\t\t\tota\n      PUSH [tag] 294\t\t\t deposit amount\");\\n        fo...\n      DUP3 \t\t\t     \n      PUSH [tag] 189\t\t\t deposit amount\");\\n        fo...\n      JUMP \t\t\t deposit amount\");\\n        fo...\n    tag 294\t\t\t deposit amount\");\\n        fo...\n      JUMPDEST \t\t\t deposit amount\");\\n        fo...\n      PUSH [tag] 295\t\t\tance(_tokenIDs[i], amounts[i])...\n      DUP2 \t\t\t\\n     \n      DUP6 \t\t\t  /\n      PUSH [tag] 190\t\t\tance(_tokenIDs[i], amounts[i])...\n      JUMP \t\t\tance(_tokenIDs[i], amounts[i])...\n    tag 295\t\t\tance(_tokenIDs[i], amounts[i])...\n      JUMPDEST \t\t\tance(_tokenIDs[i], amounts[i])...\n      SWAP4 \t\t\t.addBalance(_tokenIDs[i], amou...\n      POP \t\t\t.addBalance(_tokenIDs[i], amou...\n      DUP4 \t\t\t fu\n      PUSH 20\t\t\tAddr\n      DUP3 \t\t\tContra\n      MUL \t\t\t NFTContractAddre\n      DUP6 \t\t\tpar\n      ADD \t\t\t * @param NFTContractAddres\n      PUSH [tag] 296\t\t\ttract\\n     * @param tokenIDs ...\n      DUP6 \t\t\tion w\n      PUSH [tag] 191\t\t\ttract\\n     * @param tokenIDs ...\n      JUMP \t\t\ttract\\n     * @param tokenIDs ...\n    tag 296\t\t\ttract\\n     * @param tokenIDs ...\n      JUMPDEST \t\t\ttract\\n     * @param tokenIDs ...\n      DUP1 \t\t\tContrac\n      PUSH 0\t\t\tr\n    tag 297\t\t\t uint256[] memory tokenIDs) pu...\n      JUMPDEST \t\t\t uint256[] memory tokenIDs) pu...\n      DUP6 \t\t\ts) pub\n      DUP2 \t\t\tn\n      LT \t\t\tokenIDs) publ\n      ISZERO \t\t\t uint256[] memory tokenIDs) pu...\n      PUSH [tag] 299\t\t\t uint256[] memory tokenIDs) pu...\n      JUMPI \t\t\t uint256[] memory tokenIDs) pu...\n      DUP5 \t\t\taddress(0\n      DUP5 \t\t\ts] !\n      SUB \t\t\tdress] != address(0)\n      DUP10 \t\t\tact\n      MSTORE \t\t\tFTContractAddress] != address(...\n      DUP2 \t\t\ttract\"\n      MLOAD \t\t\tFT contract\")\n      PUSH [tag] 300\t\t\tdress payable vaultContract_ad...\n      DUP6 \t\t\ttCon\n      DUP3 \t\t\tlt = Vault(va\n      PUSH [tag] 202\t\t\tdress payable vaultContract_ad...\n      JUMP \t\t\tdress payable vaultContract_ad...\n    tag 300\t\t\tdress payable vaultContract_ad...\n      JUMPDEST \t\t\tdress payable vaultContract_ad...\n      SWAP5 \t\t\t      address payable vaultCon...\n      POP \t\t\t      address payable vaultCon...\n      PUSH [tag] 301\t\t\trequire(vault.admin() == msg.s...\n      DUP4 \t\t\tw fund\n      PUSH [tag] 203\t\t\trequire(vault.admin() == msg.s...\n      JUMP \t\t\trequire(vault.admin() == msg.s...\n    tag 301\t\t\trequire(vault.admin() == msg.s...\n      JUMPDEST \t\t\trequire(vault.admin() == msg.s...\n      SWAP3 \t\t\t;\\n        require(vault.admin...\n      POP \t\t\t;\\n        require(vault.admin...\n      PUSH 20\t\t\tayab\n      DUP11 \t\t\traw\n      ADD \t\t\tithdraw(payabl\n      SWAP10 \t\t\tvault.withdraw(payabl\n      POP \t\t\tvault.withdraw(payabl\n      POP \t\t\tvaultAddress[NFTContractAddres...\n      PUSH 1\t\t\t \n      DUP2 \t\t\t \n      ADD \t\t\tle{\\n     \n      SWAP1 \t\t\tpayable{\\n     \n      POP \t\t\tpayable{\\n     \n      PUSH [tag] 297\t\t\t uint256[] memory tokenIDs) pu...\n      JUMP \t\t\t uint256[] memory tokenIDs) pu...\n    tag 299\t\t\t uint256[] memory tokenIDs) pu...\n      JUMPDEST \t\t\t uint256[] memory tokenIDs) pu...\n      POP \t\t\tt256[] memory \n      DUP3 \t\t\t    \n      SWAP8 \t\t\tnIDs);\\n    \n      POP \t\t\tnIDs);\\n    \n      DUP8 \t\t\t* @\n      SWAP6 \t\t\t*\\n     * @\n      POP \t\t\t*\\n     * @\n      POP \t\t\tmount, \"Mismatched total depos...\n      POP \t\t\tmount, \"Mismatched total depos...\n      POP \t\t\tmount, \"Mismatched total depos...\n      POP \t\t\tmount, \"Mismatched total depos...\n      POP \t\t\tmount, \"Mismatched total depos...\n      SWAP3 \t\t\t\\n        uint256 totalAmount ...\n      SWAP2 \t\t\t\\n        uint256 totalAmount ...\n      POP \t\t\t\\n        uint256 totalAmount ...\n      POP \t\t\t\\n        uint256 totalAmount ...\n      JUMP \t\t\t\\n        uint256 totalAmount ...\n    tag 22\t\t\t to claim a Token ID from a va...\n      JUMPDEST \t\t\t to claim a Token ID from a va...\n      PUSH 0\t\t\tenID\n      PUSH 20\t\t\t(v\n      DUP3 \t\t\t    requi\n      ADD \t\t\t        require(va\n      SWAP1 \t\t\tyable {\\n        require(va\n      POP \t\t\tyable {\\n        require(va\n      DUP2 \t\t\t\"Vault do\n      DUP2 \t\t\ts(0)\n      SUB \t\t\tdress(0), \"Vault doe\n      PUSH 0\t\t\t=\n      DUP4 \t\t\ttAddress]\n      ADD \t\t\ttractAddress] != \n      MSTORE \t\t\t[NFTContractAddress] != addres...\n      PUSH [tag] 303\t\t\this NFT contract\");\\n\\n       ...\n      DUP2 \t\t\t(NFT\n      DUP5 \t\t\tctAddr\n      PUSH [tag] 204\t\t\this NFT contract\");\\n\\n       ...\n      JUMP \t\t\this NFT contract\");\\n\\n       ...\n    tag 303\t\t\this NFT contract\");\\n\\n       ...\n      JUMPDEST \t\t\this NFT contract\");\\n\\n       ...\n      SWAP1 \t\t\tts for this NFT contract\");\\n\\...\n      POP \t\t\tts for this NFT contract\");\\n\\...\n      SWAP3 \t\t\t to claim a Token ID from a va...\n      SWAP2 \t\t\t to claim a Token ID from a va...\n      POP \t\t\t to claim a Token ID from a va...\n      POP \t\t\t to claim a Token ID from a va...\n      JUMP \t\t\t to claim a Token ID from a va...\n    tag 205\t\t\ts));\\n        address tokenOwn...\n      JUMPDEST \t\t\ts));\\n        address tokenOwn...\n      PUSH [tag] 305\t\t\t   require(tokenOwner ==\n      DUP2 \t\t\tner =\n      PUSH [tag] 192\t\t\t   require(tokenOwner ==\n      JUMP \t\t\t   require(tokenOwner ==\n    tag 305\t\t\t   require(tokenOwner ==\n      JUMPDEST \t\t\t   require(tokenOwner ==\n      DUP2 \t\t\t \\n   \n      EQ \t\t\t    \\n        require(tokenOwn...\n      PUSH [tag] 306\t\t\tnID);\\n        \\n        requi...\n      JUMPI \t\t\tnID);\\n        \\n        requi...\n      PUSH 0\t\t\to\n      DUP1 \t\t\t \n      REVERT \t\t\tsender, \"You\n    tag 306\t\t\tnID);\\n        \\n        requi...\n      JUMPDEST \t\t\tnID);\\n        \\n        requi...\n      POP \t\t\ts));\\n        address tokenOwn...\n      JUMP \t\t\ts));\\n        address tokenOwn...\n    tag 206\t\t\twner of this token!\");\\n      ...\n      JUMPDEST \t\t\twner of this token!\");\\n      ...\n      PUSH 0\t\t\tetApp\n      DUP2 \t\t\t \"Cont\n      CALLDATALOAD \t\t\tddress(this), \"Contr\n      SWAP1 \t\t\tnID) == address(this), \"Contr\n      POP \t\t\tnID) == address(this), \"Contr\n      PUSH [tag] 308\t\t\tpproved to burn token\");\\n\\n  ...\n      DUP2 \t\t\t     \n      PUSH [tag] 205\t\t\tpproved to burn token\");\\n\\n  ...\n      JUMP \t\t\tpproved to burn token\");\\n\\n  ...\n    tag 308\t\t\tpproved to burn token\");\\n\\n  ...\n      JUMPDEST \t\t\tpproved to burn token\");\\n\\n  ...\n      SWAP3 \t\t\twner of this token!\");\\n      ...\n      SWAP2 \t\t\twner of this token!\");\\n      ...\n      POP \t\t\twner of this token!\");\\n      ...\n      POP \t\t\twner of this token!\");\\n      ...\n      JUMP \t\t\twner of this token!\");\\n      ...\n    tag 26\t\t\t_tokenID);\\n\\n        address ...\n      JUMPDEST \t\t\t_tokenID);\\n\\n        address ...\n      PUSH 0\t\t\t\\n     \n      DUP1 \t\t\t Vault\n      PUSH 40\t\t\t  \n      DUP4 \t\t\tdress);\\n\\n\n      DUP6 \t\t\tntract_\n      SUB \t\t\tltContract_address);\\n\\n \n      SLT \t\t\t(vaultContract_address);\\n\\n  ...\n      ISZERO \t\t\tult(vaultContract_address);\\n\\...\n      PUSH [tag] 310\t\t\tult(vaultContract_address);\\n\\...\n      JUMPI \t\t\tult(vaultContract_address);\\n\\...\n      PUSH [tag] 311\t\t\tault.claimFunds(recipient, _to...\n      PUSH [tag] 182\t\t\tault.claimFunds(recipient, _to...\n      JUMP \t\t\tault.claimFunds(recipient, _to...\n    tag 311\t\t\tault.claimFunds(recipient, _to...\n      JUMPDEST \t\t\tault.claimFunds(recipient, _to...\n    tag 310\t\t\tult(vaultContract_address);\\n\\...\n      JUMPDEST \t\t\tult(vaultContract_address);\\n\\...\n      PUSH 0\t\t\t*\n      PUSH [tag] 312\t\t\tss address of the NFT contract...\n      DUP6 \t\t\t Addres\n      DUP3 \t\t\t* @ret\n      DUP7 \t\t\ttract\\n   \n      ADD \t\t\t contract\\n     * @retu\n      PUSH [tag] 187\t\t\tss address of the NFT contract...\n      JUMP \t\t\tss address of the NFT contract...\n    tag 312\t\t\tss address of the NFT contract...\n      JUMPDEST \t\t\tss address of the NFT contract...\n      SWAP3 \t\t\ttractAddress address of the NF...\n      POP \t\t\ttractAddress address of the NF...\n      POP \t\t\tct address of the vault\\n     ...\n      PUSH 20\t\t\tnt\n      PUSH [tag] 313\t\t\tontractAddress) public view re...\n      DUP6 \t\t\t\\n      \n      DUP3 \t\t\taddres\n      DUP7 \t\t\tew return\n      ADD \t\t\tc view returns(address\n      PUSH [tag] 206\t\t\tontractAddress) public view re...\n      JUMP \t\t\tontractAddress) public view re...\n    tag 313\t\t\tontractAddress) public view re...\n      JUMPDEST \t\t\tontractAddress) public view re...\n      SWAP2 \t\t\tdress NFTContractAddress) publ...\n      POP \t\t\tdress NFTContractAddress) publ...\n      POP \t\t\tct\\n     */\\n    function getC...\n      SWAP3 \t\t\t_tokenID);\\n\\n        address ...\n      POP \t\t\t_tokenID);\\n\\n        address ...\n      SWAP3 \t\t\t_tokenID);\\n\\n        address ...\n      SWAP1 \t\t\t_tokenID);\\n\\n        address ...\n      POP \t\t\t_tokenID);\\n\\n        address ...\n      JUMP \t\t\t_tokenID);\\n\\n        address ...\n    tag 207\t\t\tTContractAddress];\\n    }\\n\\n ...\n      JUMPDEST \t\t\tTContractAddress];\\n    }\\n\\n ...\n      PUSH 0\t\t\tr\n      DUP1 \t\t\tl\n      REVERT \t\t\t the caller\\n\n    tag 208\t\t\trn An array of structures cont...\n      JUMPDEST \t\t\trn An array of structures cont...\n      PUSH 0\t\t\ttotal \n      PUSH 1F\t\t\tth\n      NOT \t\t\te withd\n      PUSH 1F\t\t\tbe\n      DUP4 \t\t\tm tim\n      ADD \t\t\tnimum time bef\n      AND \t\t\t, minimum time before withdr\n      SWAP1 \t\t\teach vault, minimum time befor...\n      POP \t\t\teach vault, minimum time befor...\n      SWAP2 \t\t\trn An array of structures cont...\n      SWAP1 \t\t\trn An array of structures cont...\n      POP \t\t\trn An array of structures cont...\n      JUMP \t\t\trn An array of structures cont...\n    tag 54\t\t\tarray of token ids insured, an...\n      JUMPDEST \t\t\tarray of token ids insured, an...\n      PUSH 4E487B7100000000000000000000000000000000000000000000000000000000\t\t\tFT contract address\\n     */\\n...\n      PUSH 0\t\t\td\n      MSTORE \t\t\tsociated NFT contract address\\...\n      PUSH 41\t\t\tmory\n      PUSH 4\t\t\t \n      MSTORE \t\t\ttails[] memory)\n      PUSH 24\t\t\t] me\n      PUSH 0\t\t\ts\n      REVERT \t\t\t  address[] mem\n    tag 209\t\t\tacts = adminToNFTContracts[msg...\n      JUMPDEST \t\t\tacts = adminToNFTContracts[msg...\n      PUSH [tag] 318\t\t\tray = new VaultDetails[](nf\n      DUP3 \t\t\t[](n\n      PUSH [tag] 208\t\t\tray = new VaultDetails[](nf\n      JUMP \t\t\tray = new VaultDetails[](nf\n    tag 318\t\t\tray = new VaultDetails[](nf\n      JUMPDEST \t\t\tray = new VaultDetails[](nf\n      DUP2 \t\t\tDetail\n      ADD \t\t\taultDetailArray = new VaultDet...\n      DUP2 \t\t\t Vault\n      DUP2 \t\t\tault vault\n      LT \t\t\t  Vault vault = Vault(\n      PUSH FFFFFFFFFFFFFFFF\t\t\tth; i++) {\\n       \n      DUP3 \t\t\tntracts.le\n      GT \t\t\ttContracts.length; i++) {\\n   ...\n      OR \t\t\t nftContracts.length; i++) {\\n...\n      ISZERO \t\t\ti < nftContracts.length; i++) ...\n      PUSH [tag] 319\t\t\ti < nftContracts.length; i++) ...\n      JUMPI \t\t\ti < nftContracts.length; i++) ...\n      PUSH [tag] 320\t\t\tble(vaultAddress[n\n      PUSH [tag] 54\t\t\tble(vaultAddress[n\n      JUMP \t\t\tble(vaultAddress[n\n    tag 320\t\t\tble(vaultAddress[n\n      JUMPDEST \t\t\tble(vaultAddress[n\n    tag 319\t\t\ti < nftContracts.length; i++) ...\n      JUMPDEST \t\t\ti < nftContracts.length; i++) ...\n      DUP1 \t\t\t         u\n      PUSH 40\t\t\t\\n \n      MSTORE \t\t\t[i]]));\\n            ui\n      POP \t\t\t     VaultDetails[] memory vau...\n      POP \t\t\tacts = adminToNFTContracts[msg...\n      POP \t\t\tacts = adminToNFTContracts[msg...\n      JUMP \t\t\tacts = adminToNFTContracts[msg...\n    tag 210\t\t\try insuredTokenIds = vault.get...\n      JUMPDEST \t\t\try insuredTokenIds = vault.get...\n      PUSH 0\t\t\tnIds()\n      PUSH [tag] 322\t\t\ttails memory vaultDe\n      PUSH [tag] 181\t\t\ttails memory vaultDe\n      JUMP \t\t\ttails memory vaultDe\n    tag 322\t\t\ttails memory vaultDe\n      JUMPDEST \t\t\ttails memory vaultDe\n      SWAP1 \t\t\t   VaultDetails memory vaultDe\n      POP \t\t\t   VaultDetails memory vaultDe\n      PUSH [tag] 323\t\t\taultDetails({\\n               ...\n      DUP3 \t\t\t  to\n      DUP3 \t\t\t      \n      PUSH [tag] 209\t\t\taultDetails({\\n               ...\n      JUMP \t\t\taultDetails({\\n               ...\n    tag 323\t\t\taultDetails({\\n               ...\n      JUMPDEST \t\t\taultDetails({\\n               ...\n      SWAP2 \t\t\try insuredTokenIds = vault.get...\n      SWAP1 \t\t\try insuredTokenIds = vault.get...\n      POP \t\t\try insuredTokenIds = vault.get...\n      JUMP \t\t\try insuredTokenIds = vault.get...\n    tag 211\t\t\tddress(vault).balance,\\n      ...\n      JUMPDEST \t\t\tddress(vault).balance,\\n      ...\n      PUSH 0\t\t\t(),\\n\n      PUSH FFFFFFFFFFFFFFFF\t\t\tnftContracts[i]\\n  \n      DUP3 \t\t\tddress\n      GT \t\t\tctAddress: nftContracts[i]\\n  ...\n      ISZERO \t\t\ttractAddress: nftContracts[i]\\...\n      PUSH [tag] 325\t\t\ttractAddress: nftContracts[i]\\...\n      JUMPI \t\t\ttractAddress: nftContracts[i]\\...\n      PUSH [tag] 326\t\t\t      });\\n        \n      PUSH [tag] 54\t\t\t      });\\n        \n      JUMP \t\t\t      });\\n        \n    tag 326\t\t\t      });\\n        \n      JUMPDEST \t\t\t      });\\n        \n    tag 325\t\t\ttractAddress: nftContracts[i]\\...\n      JUMPDEST \t\t\ttractAddress: nftContracts[i]\\...\n      PUSH 20\t\t\tetai\n      DUP3 \t\t\t= vaul\n      MUL \t\t\t[i] = vaultDetail\n      SWAP1 \t\t\tailArray[i] = vaultDetail\n      POP \t\t\tailArray[i] = vaultDetail\n      PUSH 20\t\t\t\n      DUP2 \t\t\t }\\n}\n      ADD \t\t\t\\n    }\\n}\n      SWAP1 \t\t\tilArray;\\n    }\\n}\n      POP \t\t\tilArray;\\n    }\\n}\n      SWAP2 \t\t\tddress(vault).balance,\\n      ...\n      SWAP1 \t\t\tddress(vault).balance,\\n      ...\n      POP \t\t\tddress(vault).balance,\\n      ...\n      JUMP \t\t\tddress(vault).balance,\\n      ...\n    tag 212\t\t\t\n      JUMPDEST \t\t\t\n      PUSH 0\t\t\t\n      DUP1 \t\t\t\n      REVERT \t\t\t\n    tag 213\t\t\t\n      JUMPDEST \t\t\t\n      PUSH 0\t\t\t\n      PUSH [tag] 329\t\t\t\n      PUSH [tag] 330\t\t\t\n      DUP5 \t\t\t\n      PUSH [tag] 211\t\t\t\n      JUMP \t\t\t\n    tag 330\t\t\t\n      JUMPDEST \t\t\t\n      PUSH [tag] 210\t\t\t\n      JUMP \t\t\t\n    tag 329\t\t\t\n      JUMPDEST \t\t\t\n      SWAP1 \t\t\t\n      POP \t\t\t\n      DUP1 \t\t\t\n      DUP4 \t\t\t\n      DUP3 \t\t\t\n      MSTORE \t\t\t\n      PUSH 20\t\t\t\n      DUP3 \t\t\t\n      ADD \t\t\t\n      SWAP1 \t\t\t\n      POP \t\t\t\n      PUSH 20\t\t\t\n      DUP5 \t\t\t\n      MUL \t\t\t\n      DUP4 \t\t\t\n      ADD \t\t\t\n      DUP6 \t\t\t\n      DUP2 \t\t\t\n      GT \t\t\t\n      ISZERO \t\t\t\n      PUSH [tag] 331\t\t\t\n      JUMPI \t\t\t\n      PUSH [tag] 332\t\t\t\n      PUSH [tag] 212\t\t\t\n      JUMP \t\t\t\n    tag 332\t\t\t\n      JUMPDEST \t\t\t\n    tag 331\t\t\t\n      JUMPDEST \t\t\t\n      DUP4 \t\t\t\n    tag 333\t\t\t\n      JUMPDEST \t\t\t\n      DUP2 \t\t\t\n      DUP2 \t\t\t\n      LT \t\t\t\n      ISZERO \t\t\t\n      PUSH [tag] 335\t\t\t\n      JUMPI \t\t\t\n      DUP1 \t\t\t\n      PUSH [tag] 336\t\t\t\n      DUP9 \t\t\t\n      DUP3 \t\t\t\n      PUSH [tag] 206\t\t\t\n      JUMP \t\t\t\n    tag 336\t\t\t\n      JUMPDEST \t\t\t\n      DUP5 \t\t\t\n      MSTORE \t\t\t\n      PUSH 20\t\t\t\n      DUP5 \t\t\t\n      ADD \t\t\t\n      SWAP4 \t\t\t\n      POP \t\t\t\n      POP \t\t\t\n      PUSH 20\t\t\t\n      DUP2 \t\t\t\n      ADD \t\t\t\n      SWAP1 \t\t\t\n      POP \t\t\t\n      PUSH [tag] 333\t\t\t\n      JUMP \t\t\t\n    tag 335\t\t\t\n      JUMPDEST \t\t\t\n      POP \t\t\t\n      POP \t\t\t\n      POP \t\t\t\n      SWAP4 \t\t\t\n      SWAP3 \t\t\t\n      POP \t\t\t\n      POP \t\t\t\n      POP \t\t\t\n      JUMP \t\t\t\n    tag 214\t\t\t\n      JUMPDEST \t\t\t\n      PUSH 0\t\t\t\n      DUP3 \t\t\t\n      PUSH 1F\t\t\t\n      DUP4 \t\t\t\n      ADD \t\t\t\n      SLT \t\t\t\n      PUSH [tag] 338\t\t\t\n      JUMPI \t\t\t\n      PUSH [tag] 339\t\t\t\n      PUSH [tag] 207\t\t\t\n      JUMP \t\t\t\n    tag 339\t\t\t\n      JUMPDEST \t\t\t\n    tag 338\t\t\t\n      JUMPDEST \t\t\t\n      DUP2 \t\t\t\n      CALLDATALOAD \t\t\t\n      PUSH [tag] 340\t\t\t\n      DUP5 \t\t\t\n      DUP3 \t\t\t\n      PUSH 20\t\t\t\n      DUP7 \t\t\t\n      ADD \t\t\t\n      PUSH [tag] 213\t\t\t\n      JUMP \t\t\t\n    tag 340\t\t\t\n      JUMPDEST \t\t\t\n      SWAP2 \t\t\t\n      POP \t\t\t\n      POP \t\t\t\n      SWAP3 \t\t\t\n      SWAP2 \t\t\t\n      POP \t\t\t\n      POP \t\t\t\n      JUMP \t\t\t\n    tag 35\t\t\t\n      JUMPDEST \t\t\t\n      PUSH 0\t\t\t\n      DUP1 \t\t\t\n      PUSH 0\t\t\t\n      PUSH 60\t\t\t\n      DUP5 \t\t\t\n      DUP7 \t\t\t\n      SUB \t\t\t\n      SLT \t\t\t\n      ISZERO \t\t\t\n      PUSH [tag] 342\t\t\t\n      JUMPI \t\t\t\n      PUSH [tag] 343\t\t\t\n      PUSH [tag] 182\t\t\t\n      JUMP \t\t\t\n    tag 343\t\t\t\n      JUMPDEST \t\t\t\n    tag 342\t\t\t\n      JUMPDEST \t\t\t\n      PUSH 0\t\t\t\n      PUSH [tag] 344\t\t\t\n      DUP7 \t\t\t\n      DUP3 \t\t\t\n      DUP8 \t\t\t\n      ADD \t\t\t\n      PUSH [tag] 187\t\t\t\n      JUMP \t\t\t\n    tag 344\t\t\t\n      JUMPDEST \t\t\t\n      SWAP4 \t\t\t\n      POP \t\t\t\n      POP \t\t\t\n      PUSH 20\t\t\t\n      DUP5 \t\t\t\n      ADD \t\t\t\n      CALLDATALOAD \t\t\t\n      PUSH FFFFFFFFFFFFFFFF\t\t\t\n      DUP2 \t\t\t\n      GT \t\t\t\n      ISZERO \t\t\t\n      PUSH [tag] 345\t\t\t\n      JUMPI \t\t\t\n      PUSH [tag] 346\t\t\t\n      PUSH [tag] 183\t\t\t\n      JUMP \t\t\t\n    tag 346\t\t\t\n      JUMPDEST \t\t\t\n    tag 345\t\t\t\n      JUMPDEST \t\t\t\n      PUSH [tag] 347\t\t\t\n      DUP7 \t\t\t\n      DUP3 \t\t\t\n      DUP8 \t\t\t\n      ADD \t\t\t\n      PUSH [tag] 214\t\t\t\n      JUMP \t\t\t\n    tag 347\t\t\t\n      JUMPDEST \t\t\t\n      SWAP3 \t\t\t\n      POP \t\t\t\n      POP \t\t\t\n      PUSH 40\t\t\t\n      DUP5 \t\t\t\n      ADD \t\t\t\n      CALLDATALOAD \t\t\t\n      PUSH FFFFFFFFFFFFFFFF\t\t\t\n      DUP2 \t\t\t\n      GT \t\t\t\n      ISZERO \t\t\t\n      PUSH [tag] 348\t\t\t\n      JUMPI \t\t\t\n      PUSH [tag] 349\t\t\t\n      PUSH [tag] 183\t\t\t\n      JUMP \t\t\t\n    tag 349\t\t\t\n      JUMPDEST \t\t\t\n    tag 348\t\t\t\n      JUMPDEST \t\t\t\n      PUSH [tag] 350\t\t\t\n      DUP7 \t\t\t\n      DUP3 \t\t\t\n      DUP8 \t\t\t\n      ADD \t\t\t\n      PUSH [tag] 214\t\t\t\n      JUMP \t\t\t\n    tag 350\t\t\t\n      JUMPDEST \t\t\t\n      SWAP2 \t\t\t\n      POP \t\t\t\n      POP \t\t\t\n      SWAP3 \t\t\t\n      POP \t\t\t\n      SWAP3 \t\t\t\n      POP \t\t\t\n      SWAP3 \t\t\t\n      JUMP \t\t\t\n    tag 39\t\t\t\n      JUMPDEST \t\t\t\n      PUSH 0\t\t\t\n      DUP1 \t\t\t\n      PUSH 40\t\t\t\n      DUP4 \t\t\t\n      DUP6 \t\t\t\n      SUB \t\t\t\n      SLT \t\t\t\n      ISZERO \t\t\t\n      PUSH [tag] 352\t\t\t\n      JUMPI \t\t\t\n      PUSH [tag] 353\t\t\t\n      PUSH [tag] 182\t\t\t\n      JUMP \t\t\t\n    tag 353\t\t\t\n      JUMPDEST \t\t\t\n    tag 352\t\t\t\n      JUMPDEST \t\t\t\n      PUSH 0\t\t\t\n      PUSH [tag] 354\t\t\t\n      DUP6 \t\t\t\n      DUP3 \t\t\t\n      DUP7 \t\t\t\n      ADD \t\t\t\n      PUSH [tag] 187\t\t\t\n      JUMP \t\t\t\n    tag 354\t\t\t\n      JUMPDEST \t\t\t\n      SWAP3 \t\t\t\n      POP \t\t\t\n      POP \t\t\t\n      PUSH 20\t\t\t\n      DUP4 \t\t\t\n      ADD \t\t\t\n      CALLDATALOAD \t\t\t\n      PUSH FFFFFFFFFFFFFFFF\t\t\t\n      DUP2 \t\t\t\n      GT \t\t\t\n      ISZERO \t\t\t\n      PUSH [tag] 355\t\t\t\n      JUMPI \t\t\t\n      PUSH [tag] 356\t\t\t\n      PUSH [tag] 183\t\t\t\n      JUMP \t\t\t\n    tag 356\t\t\t\n      JUMPDEST \t\t\t\n    tag 355\t\t\t\n      JUMPDEST \t\t\t\n      PUSH [tag] 357\t\t\t\n      DUP6 \t\t\t\n      DUP3 \t\t\t\n      DUP7 \t\t\t\n      ADD \t\t\t\n      PUSH [tag] 214\t\t\t\n      JUMP \t\t\t\n    tag 357\t\t\t\n      JUMPDEST \t\t\t\n      SWAP2 \t\t\t\n      POP \t\t\t\n      POP \t\t\t\n      SWAP3 \t\t\t\n      POP \t\t\t\n      SWAP3 \t\t\t\n      SWAP1 \t\t\t\n      POP \t\t\t\n      JUMP \t\t\t\n    tag 64\t\t\t\n      JUMPDEST \t\t\t\n      PUSH 4E487B7100000000000000000000000000000000000000000000000000000000\t\t\t\n      PUSH 0\t\t\t\n      MSTORE \t\t\t\n      PUSH 32\t\t\t\n      PUSH 4\t\t\t\n      MSTORE \t\t\t\n      PUSH 24\t\t\t\n      PUSH 0\t\t\t\n      REVERT \t\t\t\n    tag 215\t\t\t\n      JUMPDEST \t\t\t\n      PUSH 0\t\t\t\n      DUP2 \t\t\t\n      MLOAD \t\t\t\n      SWAP1 \t\t\t\n      POP \t\t\t\n      PUSH [tag] 360\t\t\t\n      DUP2 \t\t\t\n      PUSH [tag] 205\t\t\t\n      JUMP \t\t\t\n    tag 360\t\t\t\n      JUMPDEST \t\t\t\n      SWAP3 \t\t\t\n      SWAP2 \t\t\t\n      POP \t\t\t\n      POP \t\t\t\n      JUMP \t\t\t\n    tag 216\t\t\t\n      JUMPDEST \t\t\t\n      PUSH 0\t\t\t\n      PUSH [tag] 362\t\t\t\n      PUSH [tag] 363\t\t\t\n      DUP5 \t\t\t\n      PUSH [tag] 211\t\t\t\n      JUMP \t\t\t\n    tag 363\t\t\t\n      JUMPDEST \t\t\t\n      PUSH [tag] 210\t\t\t\n      JUMP \t\t\t\n    tag 362\t\t\t\n      JUMPDEST \t\t\t\n      SWAP1 \t\t\t\n      POP \t\t\t\n      DUP1 \t\t\t\n      DUP4 \t\t\t\n      DUP3 \t\t\t\n      MSTORE \t\t\t\n      PUSH 20\t\t\t\n      DUP3 \t\t\t\n      ADD \t\t\t\n      SWAP1 \t\t\t\n      POP \t\t\t\n      PUSH 20\t\t\t\n      DUP5 \t\t\t\n      MUL \t\t\t\n      DUP4 \t\t\t\n      ADD \t\t\t\n      DUP6 \t\t\t\n      DUP2 \t\t\t\n      GT \t\t\t\n      ISZERO \t\t\t\n      PUSH [tag] 364\t\t\t\n      JUMPI \t\t\t\n      PUSH [tag] 365\t\t\t\n      PUSH [tag] 212\t\t\t\n      JUMP \t\t\t\n    tag 365\t\t\t\n      JUMPDEST \t\t\t\n    tag 364\t\t\t\n      JUMPDEST \t\t\t\n      DUP4 \t\t\t\n    tag 366\t\t\t\n      JUMPDEST \t\t\t\n      DUP2 \t\t\t\n      DUP2 \t\t\t\n      LT \t\t\t\n      ISZERO \t\t\t\n      PUSH [tag] 368\t\t\t\n      JUMPI \t\t\t\n      DUP1 \t\t\t\n      PUSH [tag] 369\t\t\t\n      DUP9 \t\t\t\n      DUP3 \t\t\t\n      PUSH [tag] 215\t\t\t\n      JUMP \t\t\t\n    tag 369\t\t\t\n      JUMPDEST \t\t\t\n      DUP5 \t\t\t\n      MSTORE \t\t\t\n      PUSH 20\t\t\t\n      DUP5 \t\t\t\n      ADD \t\t\t\n      SWAP4 \t\t\t\n      POP \t\t\t\n      POP \t\t\t\n      PUSH 20\t\t\t\n      DUP2 \t\t\t\n      ADD \t\t\t\n      SWAP1 \t\t\t\n      POP \t\t\t\n      PUSH [tag] 366\t\t\t\n      JUMP \t\t\t\n    tag 368\t\t\t\n      JUMPDEST \t\t\t\n      POP \t\t\t\n      POP \t\t\t\n      POP \t\t\t\n      SWAP4 \t\t\t\n      SWAP3 \t\t\t\n      POP \t\t\t\n      POP \t\t\t\n      POP \t\t\t\n      JUMP \t\t\t\n    tag 217\t\t\t\n      JUMPDEST \t\t\t\n      PUSH 0\t\t\t\n      DUP3 \t\t\t\n      PUSH 1F\t\t\t\n      DUP4 \t\t\t\n      ADD \t\t\t\n      SLT \t\t\t\n      PUSH [tag] 371\t\t\t\n      JUMPI \t\t\t\n      PUSH [tag] 372\t\t\t\n      PUSH [tag] 207\t\t\t\n      JUMP \t\t\t\n    tag 372\t\t\t\n      JUMPDEST \t\t\t\n    tag 371\t\t\t\n      JUMPDEST \t\t\t\n      DUP2 \t\t\t\n      MLOAD \t\t\t\n      PUSH [tag] 373\t\t\t\n      DUP5 \t\t\t\n      DUP3 \t\t\t\n      PUSH 20\t\t\t\n      DUP7 \t\t\t\n      ADD \t\t\t\n      PUSH [tag] 216\t\t\t\n      JUMP \t\t\t\n    tag 373\t\t\t\n      JUMPDEST \t\t\t\n      SWAP2 \t\t\t\n      POP \t\t\t\n      POP \t\t\t\n      SWAP3 \t\t\t\n      SWAP2 \t\t\t\n      POP \t\t\t\n      POP \t\t\t\n      JUMP \t\t\t\n    tag 68\t\t\t\n      JUMPDEST \t\t\t\n      PUSH 0\t\t\t\n      PUSH 20\t\t\t\n      DUP3 \t\t\t\n      DUP5 \t\t\t\n      SUB \t\t\t\n      SLT \t\t\t\n      ISZERO \t\t\t\n      PUSH [tag] 375\t\t\t\n      JUMPI \t\t\t\n      PUSH [tag] 376\t\t\t\n      PUSH [tag] 182\t\t\t\n      JUMP \t\t\t\n    tag 376\t\t\t\n      JUMPDEST \t\t\t\n    tag 375\t\t\t\n      JUMPDEST \t\t\t\n      PUSH 0\t\t\t\n      DUP3 \t\t\t\n      ADD \t\t\t\n      MLOAD \t\t\t\n      PUSH FFFFFFFFFFFFFFFF\t\t\t\n      DUP2 \t\t\t\n      GT \t\t\t\n      ISZERO \t\t\t\n      PUSH [tag] 377\t\t\t\n      JUMPI \t\t\t\n      PUSH [tag] 378\t\t\t\n      PUSH [tag] 183\t\t\t\n      JUMP \t\t\t\n    tag 378\t\t\t\n      JUMPDEST \t\t\t\n    tag 377\t\t\t\n      JUMPDEST \t\t\t\n      PUSH [tag] 379\t\t\t\n      DUP5 \t\t\t\n      DUP3 \t\t\t\n      DUP6 \t\t\t\n      ADD \t\t\t\n      PUSH [tag] 217\t\t\t\n      JUMP \t\t\t\n    tag 379\t\t\t\n      JUMPDEST \t\t\t\n      SWAP2 \t\t\t\n      POP \t\t\t\n      POP \t\t\t\n      SWAP3 \t\t\t\n      SWAP2 \t\t\t\n      POP \t\t\t\n      POP \t\t\t\n      JUMP \t\t\t\n    tag 72\t\t\t\n      JUMPDEST \t\t\t\n      PUSH 0\t\t\t\n      PUSH 20\t\t\t\n      DUP3 \t\t\t\n      DUP5 \t\t\t\n      SUB \t\t\t\n      SLT \t\t\t\n      ISZERO \t\t\t\n      PUSH [tag] 381\t\t\t\n      JUMPI \t\t\t\n      PUSH [tag] 382\t\t\t\n      PUSH [tag] 182\t\t\t\n      JUMP \t\t\t\n    tag 382\t\t\t\n      JUMPDEST \t\t\t\n    tag 381\t\t\t\n      JUMPDEST \t\t\t\n      PUSH 0\t\t\t\n      PUSH [tag] 383\t\t\t\n      DUP5 \t\t\t\n      DUP3 \t\t\t\n      DUP6 \t\t\t\n      ADD \t\t\t\n      PUSH [tag] 215\t\t\t\n      JUMP \t\t\t\n    tag 383\t\t\t\n      JUMPDEST \t\t\t\n      SWAP2 \t\t\t\n      POP \t\t\t\n      POP \t\t\t\n      SWAP3 \t\t\t\n      SWAP2 \t\t\t\n      POP \t\t\t\n      POP \t\t\t\n      JUMP \t\t\t\n    tag 218\t\t\t\n      JUMPDEST \t\t\t\n      PUSH 4E487B7100000000000000000000000000000000000000000000000000000000\t\t\t\n      PUSH 0\t\t\t\n      MSTORE \t\t\t\n      PUSH 11\t\t\t\n      PUSH 4\t\t\t\n      MSTORE \t\t\t\n      PUSH 24\t\t\t\n      PUSH 0\t\t\t\n      REVERT \t\t\t\n    tag 74\t\t\t\n      JUMPDEST \t\t\t\n      PUSH 0\t\t\t\n      PUSH [tag] 386\t\t\t\n      DUP3 \t\t\t\n      PUSH [tag] 192\t\t\t\n      JUMP \t\t\t\n    tag 386\t\t\t\n      JUMPDEST \t\t\t\n      SWAP2 \t\t\t\n      POP \t\t\t\n      PUSH [tag] 387\t\t\t\n      DUP4 \t\t\t\n      PUSH [tag] 192\t\t\t\n      JUMP \t\t\t\n    tag 387\t\t\t\n      JUMPDEST \t\t\t\n      SWAP3 \t\t\t\n      POP \t\t\t\n      DUP3 \t\t\t\n      DUP3 \t\t\t\n      MUL \t\t\t\n      PUSH [tag] 388\t\t\t\n      DUP2 \t\t\t\n      PUSH [tag] 192\t\t\t\n      JUMP \t\t\t\n    tag 388\t\t\t\n      JUMPDEST \t\t\t\n      SWAP2 \t\t\t\n      POP \t\t\t\n      DUP3 \t\t\t\n      DUP3 \t\t\t\n      DIV \t\t\t\n      DUP5 \t\t\t\n      EQ \t\t\t\n      DUP4 \t\t\t\n      ISZERO \t\t\t\n      OR \t\t\t\n      PUSH [tag] 389\t\t\t\n      JUMPI \t\t\t\n      PUSH [tag] 390\t\t\t\n      PUSH [tag] 218\t\t\t\n      JUMP \t\t\t\n    tag 390\t\t\t\n      JUMPDEST \t\t\t\n    tag 389\t\t\t\n      JUMPDEST \t\t\t\n      POP \t\t\t\n      SWAP3 \t\t\t\n      SWAP2 \t\t\t\n      POP \t\t\t\n      POP \t\t\t\n      JUMP \t\t\t\n    tag 80\t\t\t\n      JUMPDEST \t\t\t\n      PUSH 0\t\t\t\n      PUSH [tag] 392\t\t\t\n      DUP3 \t\t\t\n      PUSH [tag] 192\t\t\t\n      JUMP \t\t\t\n    tag 392\t\t\t\n      JUMPDEST \t\t\t\n      SWAP2 \t\t\t\n      POP \t\t\t\n      PUSH FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF\t\t\t\n      DUP3 \t\t\t\n      SUB \t\t\t\n      PUSH [tag] 393\t\t\t\n      JUMPI \t\t\t\n      PUSH [tag] 394\t\t\t\n      PUSH [tag] 218\t\t\t\n      JUMP \t\t\t\n    tag 394\t\t\t\n      JUMPDEST \t\t\t\n    tag 393\t\t\t\n      JUMPDEST \t\t\t\n      PUSH 1\t\t\t\n      DUP3 \t\t\t\n      ADD \t\t\t\n      SWAP1 \t\t\t\n      POP \t\t\t\n      SWAP2 \t\t\t\n      SWAP1 \t\t\t\n      POP \t\t\t\n      JUMP \t\t\t\n    tag 219\t\t\t\n      JUMPDEST \t\t\t\n      PUSH 0\t\t\t\n      DUP3 \t\t\t\n      DUP3 \t\t\t\n      MSTORE \t\t\t\n      PUSH 20\t\t\t\n      DUP3 \t\t\t\n      ADD \t\t\t\n      SWAP1 \t\t\t\n      POP \t\t\t\n      SWAP3 \t\t\t\n      SWAP2 \t\t\t\n      POP \t\t\t\n      POP \t\t\t\n      JUMP \t\t\t\n    tag 220\t\t\t\n      JUMPDEST \t\t\t\n      PUSH 5661756C7420616C72656164792065786973747320666F722074686973204E46\t\t\t\n      PUSH 0\t\t\t\n      DUP3 \t\t\t\n      ADD \t\t\t\n      MSTORE \t\t\t\n      PUSH 5420636F6E747261637400000000000000000000000000000000000000000000\t\t\t\n      PUSH 20\t\t\t\n      DUP3 \t\t\t\n      ADD \t\t\t\n      MSTORE \t\t\t\n      POP \t\t\t\n      JUMP \t\t\t\n    tag 221\t\t\t\n      JUMPDEST \t\t\t\n      PUSH 0\t\t\t\n      PUSH [tag] 398\t\t\t\n      PUSH 2A\t\t\t\n      DUP4 \t\t\t\n      PUSH [tag] 219\t\t\t\n      JUMP \t\t\t\n    tag 398\t\t\t\n      JUMPDEST \t\t\t\n      SWAP2 \t\t\t\n      POP \t\t\t\n      PUSH [tag] 399\t\t\t\n      DUP3 \t\t\t\n      PUSH [tag] 220\t\t\t\n      JUMP \t\t\t\n    tag 399\t\t\t\n      JUMPDEST \t\t\t\n      PUSH 40\t\t\t\n      DUP3 \t\t\t\n      ADD \t\t\t\n      SWAP1 \t\t\t\n      POP \t\t\t\n      SWAP2 \t\t\t\n      SWAP1 \t\t\t\n      POP \t\t\t\n      JUMP \t\t\t\n    tag 84\t\t\t\n      JUMPDEST \t\t\t\n      PUSH 0\t\t\t\n      PUSH 20\t\t\t\n      DUP3 \t\t\t\n      ADD \t\t\t\n      SWAP1 \t\t\t\n      POP \t\t\t\n      DUP2 \t\t\t\n      DUP2 \t\t\t\n      SUB \t\t\t\n      PUSH 0\t\t\t\n      DUP4 \t\t\t\n      ADD \t\t\t\n      MSTORE \t\t\t\n      PUSH [tag] 401\t\t\t\n      DUP2 \t\t\t\n      PUSH [tag] 221\t\t\t\n      JUMP \t\t\t\n    tag 401\t\t\t\n      JUMPDEST \t\t\t\n      SWAP1 \t\t\t\n      POP \t\t\t\n      SWAP2 \t\t\t\n      SWAP1 \t\t\t\n      POP \t\t\t\n      JUMP \t\t\t\n    tag 222\t\t\t\n      JUMPDEST \t\t\t\n      PUSH [tag] 403\t\t\t\n      DUP2 \t\t\t\n      PUSH [tag] 192\t\t\t\n      JUMP \t\t\t\n    tag 403\t\t\t\n      JUMPDEST \t\t\t\n      DUP3 \t\t\t\n      MSTORE \t\t\t\n      POP \t\t\t\n      POP \t\t\t\n      JUMP \t\t\t\n    tag 88\t\t\t\n      JUMPDEST \t\t\t\n      PUSH 0\t\t\t\n      PUSH 60\t\t\t\n      DUP3 \t\t\t\n      ADD \t\t\t\n      SWAP1 \t\t\t\n      POP \t\t\t\n      PUSH [tag] 405\t\t\t\n      PUSH 0\t\t\t\n      DUP4 \t\t\t\n      ADD \t\t\t\n      DUP7 \t\t\t\n      PUSH [tag] 188\t\t\t\n      JUMP \t\t\t\n    tag 405\t\t\t\n      JUMPDEST \t\t\t\n      PUSH [tag] 406\t\t\t\n      PUSH 20\t\t\t\n      DUP4 \t\t\t\n      ADD \t\t\t\n      DUP6 \t\t\t\n      PUSH [tag] 222\t\t\t\n      JUMP \t\t\t\n    tag 406\t\t\t\n      JUMPDEST \t\t\t\n      PUSH [tag] 407\t\t\t\n      PUSH 40\t\t\t\n      DUP4 \t\t\t\n      ADD \t\t\t\n      DUP5 \t\t\t\n      PUSH [tag] 188\t\t\t\n      JUMP \t\t\t\n    tag 407\t\t\t\n      JUMPDEST \t\t\t\n      SWAP5 \t\t\t\n      SWAP4 \t\t\t\n      POP \t\t\t\n      POP \t\t\t\n      POP \t\t\t\n      POP \t\t\t\n      JUMP \t\t\t\n    tag 93\t\t\t\n      JUMPDEST \t\t\t\n      PUSH 0\t\t\t\n      PUSH 60\t\t\t\n      DUP3 \t\t\t\n      ADD \t\t\t\n      SWAP1 \t\t\t\n      POP \t\t\t\n      PUSH [tag] 409\t\t\t\n      PUSH 0\t\t\t\n      DUP4 \t\t\t\n      ADD \t\t\t\n      DUP7 \t\t\t\n      PUSH [tag] 222\t\t\t\n      JUMP \t\t\t\n    tag 409\t\t\t\n      JUMPDEST \t\t\t\n      PUSH [tag] 410\t\t\t\n      PUSH 20\t\t\t\n      DUP4 \t\t\t\n      ADD \t\t\t\n      DUP6 \t\t\t\n      PUSH [tag] 188\t\t\t\n      JUMP \t\t\t\n    tag 410\t\t\t\n      JUMPDEST \t\t\t\n      PUSH [tag] 411\t\t\t\n      PUSH 40\t\t\t\n      DUP4 \t\t\t\n      ADD \t\t\t\n      DUP5 \t\t\t\n      PUSH [tag] 188\t\t\t\n      JUMP \t\t\t\n    tag 411\t\t\t\n      JUMPDEST \t\t\t\n      SWAP5 \t\t\t\n      SWAP4 \t\t\t\n      POP \t\t\t\n      POP \t\t\t\n      POP \t\t\t\n      POP \t\t\t\n      JUMP \t\t\t\n    tag 223\t\t\t\n      JUMPDEST \t\t\t\n      PUSH 5661756C7420646F6573206E6F742065786973747320666F722074686973204E\t\t\t\n      PUSH 0\t\t\t\n      DUP3 \t\t\t\n      ADD \t\t\t\n      MSTORE \t\t\t\n      PUSH 465420636F6E7472616374000000000000000000000000000000000000000000\t\t\t\n      PUSH 20\t\t\t\n      DUP3 \t\t\t\n      ADD \t\t\t\n      MSTORE \t\t\t\n      POP \t\t\t\n      JUMP \t\t\t\n    tag 224\t\t\t\n      JUMPDEST \t\t\t\n      PUSH 0\t\t\t\n      PUSH [tag] 414\t\t\t\n      PUSH 2B\t\t\t\n      DUP4 \t\t\t\n      PUSH [tag] 219\t\t\t\n      JUMP \t\t\t\n    tag 414\t\t\t\n      JUMPDEST \t\t\t\n      SWAP2 \t\t\t\n      POP \t\t\t\n      PUSH [tag] 415\t\t\t\n      DUP3 \t\t\t\n      PUSH [tag] 223\t\t\t\n      JUMP \t\t\t\n    tag 415\t\t\t\n      JUMPDEST \t\t\t\n      PUSH 40\t\t\t\n      DUP3 \t\t\t\n      ADD \t\t\t\n      SWAP1 \t\t\t\n      POP \t\t\t\n      SWAP2 \t\t\t\n      SWAP1 \t\t\t\n      POP \t\t\t\n      JUMP \t\t\t\n    tag 98\t\t\t\n      JUMPDEST \t\t\t\n      PUSH 0\t\t\t\n      PUSH 20\t\t\t\n      DUP3 \t\t\t\n      ADD \t\t\t\n      SWAP1 \t\t\t\n      POP \t\t\t\n      DUP2 \t\t\t\n      DUP2 \t\t\t\n      SUB \t\t\t\n      PUSH 0\t\t\t\n      DUP4 \t\t\t\n      ADD \t\t\t\n      MSTORE \t\t\t\n      PUSH [tag] 417\t\t\t\n      DUP2 \t\t\t\n      PUSH [tag] 224\t\t\t\n      JUMP \t\t\t\n    tag 417\t\t\t\n      JUMPDEST \t\t\t\n      SWAP1 \t\t\t\n      POP \t\t\t\n      SWAP2 \t\t\t\n      SWAP1 \t\t\t\n      POP \t\t\t\n      JUMP \t\t\t\n    tag 225\t\t\t\n      JUMPDEST \t\t\t\n      PUSH 4D69736D61746368656420617272617973000000000000000000000000000000\t\t\t\n      PUSH 0\t\t\t\n      DUP3 \t\t\t\n      ADD \t\t\t\n      MSTORE \t\t\t\n      POP \t\t\t\n      JUMP \t\t\t\n    tag 226\t\t\t\n      JUMPDEST \t\t\t\n      PUSH 0\t\t\t\n      PUSH [tag] 420\t\t\t\n      PUSH 11\t\t\t\n      DUP4 \t\t\t\n      PUSH [tag] 219\t\t\t\n      JUMP \t\t\t\n    tag 420\t\t\t\n      JUMPDEST \t\t\t\n      SWAP2 \t\t\t\n      POP \t\t\t\n      PUSH [tag] 421\t\t\t\n      DUP3 \t\t\t\n      PUSH [tag] 225\t\t\t\n      JUMP \t\t\t\n    tag 421\t\t\t\n      JUMPDEST \t\t\t\n      PUSH 20\t\t\t\n      DUP3 \t\t\t\n      ADD \t\t\t\n      SWAP1 \t\t\t\n      POP \t\t\t\n      SWAP2 \t\t\t\n      SWAP1 \t\t\t\n      POP \t\t\t\n      JUMP \t\t\t\n    tag 101\t\t\t\n      JUMPDEST \t\t\t\n      PUSH 0\t\t\t\n      PUSH 20\t\t\t\n      DUP3 \t\t\t\n      ADD \t\t\t\n      SWAP1 \t\t\t\n      POP \t\t\t\n      DUP2 \t\t\t\n      DUP2 \t\t\t\n      SUB \t\t\t\n      PUSH 0\t\t\t\n      DUP4 \t\t\t\n      ADD \t\t\t\n      MSTORE \t\t\t\n      PUSH [tag] 423\t\t\t\n      DUP2 \t\t\t\n      PUSH [tag] 226\t\t\t\n      JUMP \t\t\t\n    tag 423\t\t\t\n      JUMPDEST \t\t\t\n      SWAP1 \t\t\t\n      POP \t\t\t\n      SWAP2 \t\t\t\n      SWAP1 \t\t\t\n      POP \t\t\t\n      JUMP \t\t\t\n    tag 227\t\t\t\n      JUMPDEST \t\t\t\n      PUSH 0\t\t\t\n      DUP2 \t\t\t\n      MLOAD \t\t\t\n      SWAP1 \t\t\t\n      POP \t\t\t\n      PUSH [tag] 425\t\t\t\n      DUP2 \t\t\t\n      PUSH [tag] 186\t\t\t\n      JUMP \t\t\t\n    tag 425\t\t\t\n      JUMPDEST \t\t\t\n      SWAP3 \t\t\t\n      SWAP2 \t\t\t\n      POP \t\t\t\n      POP \t\t\t\n      JUMP \t\t\t\n    tag 106\t\t\t\n      JUMPDEST \t\t\t\n      PUSH 0\t\t\t\n      PUSH 20\t\t\t\n      DUP3 \t\t\t\n      DUP5 \t\t\t\n      SUB \t\t\t\n      SLT \t\t\t\n      ISZERO \t\t\t\n      PUSH [tag] 427\t\t\t\n      JUMPI \t\t\t\n      PUSH [tag] 428\t\t\t\n      PUSH [tag] 182\t\t\t\n      JUMP \t\t\t\n    tag 428\t\t\t\n      JUMPDEST \t\t\t\n    tag 427\t\t\t\n      JUMPDEST \t\t\t\n      PUSH 0\t\t\t\n      PUSH [tag] 429\t\t\t\n      DUP5 \t\t\t\n      DUP3 \t\t\t\n      DUP6 \t\t\t\n      ADD \t\t\t\n      PUSH [tag] 227\t\t\t\n      JUMP \t\t\t\n    tag 429\t\t\t\n      JUMPDEST \t\t\t\n      SWAP2 \t\t\t\n      POP \t\t\t\n      POP \t\t\t\n      SWAP3 \t\t\t\n      SWAP2 \t\t\t\n      POP \t\t\t\n      POP \t\t\t\n      JUMP \t\t\t\n    tag 228\t\t\t\n      JUMPDEST \t\t\t\n      PUSH 4F6E6C792074686520706572736F6E2077686F2063726561746564207661756C\t\t\t\n      PUSH 0\t\t\t\n      DUP3 \t\t\t\n      ADD \t\t\t\n      MSTORE \t\t\t\n      PUSH 742063616E206465706F7369742066756E647320696E746F2069740000000000\t\t\t\n      PUSH 20\t\t\t\n      DUP3 \t\t\t\n      ADD \t\t\t\n      MSTORE \t\t\t\n      POP \t\t\t\n      JUMP \t\t\t\n    tag 229\t\t\t\n      JUMPDEST \t\t\t\n      PUSH 0\t\t\t\n      PUSH [tag] 432\t\t\t\n      PUSH 3B\t\t\t\n      DUP4 \t\t\t\n      PUSH [tag] 219\t\t\t\n      JUMP \t\t\t\n    tag 432\t\t\t\n      JUMPDEST \t\t\t\n      SWAP2 \t\t\t\n      POP \t\t\t\n      PUSH [tag] 433\t\t\t\n      DUP3 \t\t\t\n      PUSH [tag] 228\t\t\t\n      JUMP \t\t\t\n    tag 433\t\t\t\n      JUMPDEST \t\t\t\n      PUSH 40\t\t\t\n      DUP3 \t\t\t\n      ADD \t\t\t\n      SWAP1 \t\t\t\n      POP \t\t\t\n      SWAP2 \t\t\t\n      SWAP1 \t\t\t\n      POP \t\t\t\n      JUMP \t\t\t\n    tag 109\t\t\t\n      JUMPDEST \t\t\t\n      PUSH 0\t\t\t\n      PUSH 20\t\t\t\n      DUP3 \t\t\t\n      ADD \t\t\t\n      SWAP1 \t\t\t\n      POP \t\t\t\n      DUP2 \t\t\t\n      DUP2 \t\t\t\n      SUB \t\t\t\n      PUSH 0\t\t\t\n      DUP4 \t\t\t\n      ADD \t\t\t\n      MSTORE \t\t\t\n      PUSH [tag] 435\t\t\t\n      DUP2 \t\t\t\n      PUSH [tag] 229\t\t\t\n      JUMP \t\t\t\n    tag 435\t\t\t\n      JUMPDEST \t\t\t\n      SWAP1 \t\t\t\n      POP \t\t\t\n      SWAP2 \t\t\t\n      SWAP1 \t\t\t\n      POP \t\t\t\n      JUMP \t\t\t\n    tag 116\t\t\t\n      JUMPDEST \t\t\t\n      PUSH 0\t\t\t\n      PUSH [tag] 437\t\t\t\n      DUP3 \t\t\t\n      PUSH [tag] 192\t\t\t\n      JUMP \t\t\t\n    tag 437\t\t\t\n      JUMPDEST \t\t\t\n      SWAP2 \t\t\t\n      POP \t\t\t\n      PUSH [tag] 438\t\t\t\n      DUP4 \t\t\t\n      PUSH [tag] 192\t\t\t\n      JUMP \t\t\t\n    tag 438\t\t\t\n      JUMPDEST \t\t\t\n      SWAP3 \t\t\t\n      POP \t\t\t\n      DUP3 \t\t\t\n      DUP3 \t\t\t\n      ADD \t\t\t\n      SWAP1 \t\t\t\n      POP \t\t\t\n      DUP1 \t\t\t\n      DUP3 \t\t\t\n      GT \t\t\t\n      ISZERO \t\t\t\n      PUSH [tag] 439\t\t\t\n      JUMPI \t\t\t\n      PUSH [tag] 440\t\t\t\n      PUSH [tag] 218\t\t\t\n      JUMP \t\t\t\n    tag 440\t\t\t\n      JUMPDEST \t\t\t\n    tag 439\t\t\t\n      JUMPDEST \t\t\t\n      SWAP3 \t\t\t\n      SWAP2 \t\t\t\n      POP \t\t\t\n      POP \t\t\t\n      JUMP \t\t\t\n    tag 230\t\t\t\n      JUMPDEST \t\t\t\n      PUSH 4D69736D61746368656420746F74616C206465706F73697420616D6F756E7400\t\t\t\n      PUSH 0\t\t\t\n      DUP3 \t\t\t\n      ADD \t\t\t\n      MSTORE \t\t\t\n      POP \t\t\t\n      JUMP \t\t\t\n    tag 231\t\t\t\n      JUMPDEST \t\t\t\n      PUSH 0\t\t\t\n      PUSH [tag] 443\t\t\t\n      PUSH 1F\t\t\t\n      DUP4 \t\t\t\n      PUSH [tag] 219\t\t\t\n      JUMP \t\t\t\n    tag 443\t\t\t\n      JUMPDEST \t\t\t\n      SWAP2 \t\t\t\n      POP \t\t\t\n      PUSH [tag] 444\t\t\t\n      DUP3 \t\t\t\n      PUSH [tag] 230\t\t\t\n      JUMP \t\t\t\n    tag 444\t\t\t\n      JUMPDEST \t\t\t\n      PUSH 20\t\t\t\n      DUP3 \t\t\t\n      ADD \t\t\t\n      SWAP1 \t\t\t\n      POP \t\t\t\n      SWAP2 \t\t\t\n      SWAP1 \t\t\t\n      POP \t\t\t\n      JUMP \t\t\t\n    tag 120\t\t\t\n      JUMPDEST \t\t\t\n      PUSH 0\t\t\t\n      PUSH 20\t\t\t\n      DUP3 \t\t\t\n      ADD \t\t\t\n      SWAP1 \t\t\t\n      POP \t\t\t\n      DUP2 \t\t\t\n      DUP2 \t\t\t\n      SUB \t\t\t\n      PUSH 0\t\t\t\n      DUP4 \t\t\t\n      ADD \t\t\t\n      MSTORE \t\t\t\n      PUSH [tag] 446\t\t\t\n      DUP2 \t\t\t\n      PUSH [tag] 231\t\t\t\n      JUMP \t\t\t\n    tag 446\t\t\t\n      JUMPDEST \t\t\t\n      SWAP1 \t\t\t\n      POP \t\t\t\n      SWAP2 \t\t\t\n      SWAP1 \t\t\t\n      POP \t\t\t\n      JUMP \t\t\t\n    tag 129\t\t\t\n      JUMPDEST \t\t\t\n      PUSH 0\t\t\t\n      PUSH 40\t\t\t\n      DUP3 \t\t\t\n      ADD \t\t\t\n      SWAP1 \t\t\t\n      POP \t\t\t\n      PUSH [tag] 448\t\t\t\n      PUSH 0\t\t\t\n      DUP4 \t\t\t\n      ADD \t\t\t\n      DUP6 \t\t\t\n      PUSH [tag] 222\t\t\t\n      JUMP \t\t\t\n    tag 448\t\t\t\n      JUMPDEST \t\t\t\n      PUSH [tag] 449\t\t\t\n      PUSH 20\t\t\t\n      DUP4 \t\t\t\n      ADD \t\t\t\n      DUP5 \t\t\t\n      PUSH [tag] 222\t\t\t\n      JUMP \t\t\t\n    tag 449\t\t\t\n      JUMPDEST \t\t\t\n      SWAP4 \t\t\t\n      SWAP3 \t\t\t\n      POP \t\t\t\n      POP \t\t\t\n      POP \t\t\t\n      JUMP \t\t\t\n    tag 232\t\t\t\n      JUMPDEST \t\t\t\n      PUSH 4F6E6C792074686520706572736F6E2077686F2063726561746564207661756C\t\t\t\n      PUSH 0\t\t\t\n      DUP3 \t\t\t\n      ADD \t\t\t\n      MSTORE \t\t\t\n      PUSH 742063616E2077697468647261772066756E6473000000000000000000000000\t\t\t\n      PUSH 20\t\t\t\n      DUP3 \t\t\t\n      ADD \t\t\t\n      MSTORE \t\t\t\n      POP \t\t\t\n      JUMP \t\t\t\n    tag 233\t\t\t\n      JUMPDEST \t\t\t\n      PUSH 0\t\t\t\n      PUSH [tag] 452\t\t\t\n      PUSH 34\t\t\t\n      DUP4 \t\t\t\n      PUSH [tag] 219\t\t\t\n      JUMP \t\t\t\n    tag 452\t\t\t\n      JUMPDEST \t\t\t\n      SWAP2 \t\t\t\n      POP \t\t\t\n      PUSH [tag] 453\t\t\t\n      DUP3 \t\t\t\n      PUSH [tag] 232\t\t\t\n      JUMP \t\t\t\n    tag 453\t\t\t\n      JUMPDEST \t\t\t\n      PUSH 40\t\t\t\n      DUP3 \t\t\t\n      ADD \t\t\t\n      SWAP1 \t\t\t\n      POP \t\t\t\n      SWAP2 \t\t\t\n      SWAP1 \t\t\t\n      POP \t\t\t\n      JUMP \t\t\t\n    tag 145\t\t\t\n      JUMPDEST \t\t\t\n      PUSH 0\t\t\t\n      PUSH 20\t\t\t\n      DUP3 \t\t\t\n      ADD \t\t\t\n      SWAP1 \t\t\t\n      POP \t\t\t\n      DUP2 \t\t\t\n      DUP2 \t\t\t\n      SUB \t\t\t\n      PUSH 0\t\t\t\n      DUP4 \t\t\t\n      ADD \t\t\t\n      MSTORE \t\t\t\n      PUSH [tag] 455\t\t\t\n      DUP2 \t\t\t\n      PUSH [tag] 233\t\t\t\n      JUMP \t\t\t\n    tag 455\t\t\t\n      JUMPDEST \t\t\t\n      SWAP1 \t\t\t\n      POP \t\t\t\n      SWAP2 \t\t\t\n      SWAP1 \t\t\t\n      POP \t\t\t\n      JUMP \t\t\t\n    tag 234\t\t\t\n      JUMPDEST \t\t\t\n      PUSH 0\t\t\t\n      PUSH [tag] 457\t\t\t\n      DUP3 \t\t\t\n      PUSH [tag] 184\t\t\t\n      JUMP \t\t\t\n    tag 457\t\t\t\n      JUMPDEST \t\t\t\n      SWAP1 \t\t\t\n      POP \t\t\t\n      SWAP2 \t\t\t\n      SWAP1 \t\t\t\n      POP \t\t\t\n      JUMP \t\t\t\n    tag 235\t\t\t\n      JUMPDEST \t\t\t\n      PUSH [tag] 459\t\t\t\n      DUP2 \t\t\t\n      PUSH [tag] 234\t\t\t\n      JUMP \t\t\t\n    tag 459\t\t\t\n      JUMPDEST \t\t\t\n      DUP3 \t\t\t\n      MSTORE \t\t\t\n      POP \t\t\t\n      POP \t\t\t\n      JUMP \t\t\t\n    tag 236\t\t\t\n      JUMPDEST \t\t\t\n      PUSH 0\t\t\t\n      DUP3 \t\t\t\n      DUP3 \t\t\t\n      MSTORE \t\t\t\n      PUSH 20\t\t\t\n      DUP3 \t\t\t\n      ADD \t\t\t\n      SWAP1 \t\t\t\n      POP \t\t\t\n      SWAP3 \t\t\t\n      SWAP2 \t\t\t\n      POP \t\t\t\n      POP \t\t\t\n      JUMP \t\t\t\n    tag 237\t\t\t\n      JUMPDEST \t\t\t\n      PUSH 0\t\t\t\n      PUSH [tag] 462\t\t\t\n      DUP3 \t\t\t\n      PUSH [tag] 194\t\t\t\n      JUMP \t\t\t\n    tag 462\t\t\t\n      JUMPDEST \t\t\t\n      PUSH [tag] 463\t\t\t\n      DUP2 \t\t\t\n      DUP6 \t\t\t\n      PUSH [tag] 236\t\t\t\n      JUMP \t\t\t\n    tag 463\t\t\t\n      JUMPDEST \t\t\t\n      SWAP4 \t\t\t\n      POP \t\t\t\n      PUSH [tag] 464\t\t\t\n      DUP4 \t\t\t\n      PUSH [tag] 196\t\t\t\n      JUMP \t\t\t\n    tag 464\t\t\t\n      JUMPDEST \t\t\t\n      DUP1 \t\t\t\n      PUSH 0\t\t\t\n    tag 465\t\t\t\n      JUMPDEST \t\t\t\n      DUP4 \t\t\t\n      DUP2 \t\t\t\n      LT \t\t\t\n      ISZERO \t\t\t\n      PUSH [tag] 467\t\t\t\n      JUMPI \t\t\t\n      DUP2 \t\t\t\n      MLOAD \t\t\t\n      PUSH [tag] 468\t\t\t\n      DUP9 \t\t\t\n      DUP3 \t\t\t\n      PUSH [tag] 197\t\t\t\n      JUMP \t\t\t\n    tag 468\t\t\t\n      JUMPDEST \t\t\t\n      SWAP8 \t\t\t\n      POP \t\t\t\n      PUSH [tag] 469\t\t\t\n      DUP4 \t\t\t\n      PUSH [tag] 198\t\t\t\n      JUMP \t\t\t\n    tag 469\t\t\t\n      JUMPDEST \t\t\t\n      SWAP3 \t\t\t\n      POP \t\t\t\n      POP \t\t\t\n      PUSH 1\t\t\t\n      DUP2 \t\t\t\n      ADD \t\t\t\n      SWAP1 \t\t\t\n      POP \t\t\t\n      PUSH [tag] 465\t\t\t\n      JUMP \t\t\t\n    tag 467\t\t\t\n      JUMPDEST \t\t\t\n      POP \t\t\t\n      DUP6 \t\t\t\n      SWAP4 \t\t\t\n      POP \t\t\t\n      POP \t\t\t\n      POP \t\t\t\n      POP \t\t\t\n      SWAP3 \t\t\t\n      SWAP2 \t\t\t\n      POP \t\t\t\n      POP \t\t\t\n      JUMP \t\t\t\n    tag 147\t\t\t\n      JUMPDEST \t\t\t\n      PUSH 0\t\t\t\n      PUSH 40\t\t\t\n      DUP3 \t\t\t\n      ADD \t\t\t\n      SWAP1 \t\t\t\n      POP \t\t\t\n      PUSH [tag] 471\t\t\t\n      PUSH 0\t\t\t\n      DUP4 \t\t\t\n      ADD \t\t\t\n      DUP6 \t\t\t\n      PUSH [tag] 235\t\t\t\n      JUMP \t\t\t\n    tag 471\t\t\t\n      JUMPDEST \t\t\t\n      DUP2 \t\t\t\n      DUP2 \t\t\t\n      SUB \t\t\t\n      PUSH 20\t\t\t\n      DUP4 \t\t\t\n      ADD \t\t\t\n      MSTORE \t\t\t\n      PUSH [tag] 472\t\t\t\n      DUP2 \t\t\t\n      DUP5 \t\t\t\n      PUSH [tag] 237\t\t\t\n      JUMP \t\t\t\n    tag 472\t\t\t\n      JUMPDEST \t\t\t\n      SWAP1 \t\t\t\n      POP \t\t\t\n      SWAP4 \t\t\t\n      SWAP3 \t\t\t\n      POP \t\t\t\n      POP \t\t\t\n      POP \t\t\t\n      JUMP \t\t\t\n    tag 156\t\t\t\n      JUMPDEST \t\t\t\n      PUSH 0\t\t\t\n      PUSH 20\t\t\t\n      DUP3 \t\t\t\n      ADD \t\t\t\n      SWAP1 \t\t\t\n      POP \t\t\t\n      PUSH [tag] 474\t\t\t\n      PUSH 0\t\t\t\n      DUP4 \t\t\t\n      ADD \t\t\t\n      DUP5 \t\t\t\n      PUSH [tag] 222\t\t\t\n      JUMP \t\t\t\n    tag 474\t\t\t\n      JUMPDEST \t\t\t\n      SWAP3 \t\t\t\n      SWAP2 \t\t\t\n      POP \t\t\t\n      POP \t\t\t\n      JUMP \t\t\t\n    tag 238\t\t\t\n      JUMPDEST \t\t\t\n      PUSH 596F7520617265206E6F7420746865206F776E6572206F66207468697320746F\t\t\t\n      PUSH 0\t\t\t\n      DUP3 \t\t\t\n      ADD \t\t\t\n      MSTORE \t\t\t\n      PUSH 6B656E2100000000000000000000000000000000000000000000000000000000\t\t\t\n      PUSH 20\t\t\t\n      DUP3 \t\t\t\n      ADD \t\t\t\n      MSTORE \t\t\t\n      POP \t\t\t\n      JUMP \t\t\t\n    tag 239\t\t\t\n      JUMPDEST \t\t\t\n      PUSH 0\t\t\t\n      PUSH [tag] 477\t\t\t\n      PUSH 24\t\t\t\n      DUP4 \t\t\t\n      PUSH [tag] 219\t\t\t\n      JUMP \t\t\t\n    tag 477\t\t\t\n      JUMPDEST \t\t\t\n      SWAP2 \t\t\t\n      POP \t\t\t\n      PUSH [tag] 478\t\t\t\n      DUP3 \t\t\t\n      PUSH [tag] 238\t\t\t\n      JUMP \t\t\t\n    tag 478\t\t\t\n      JUMPDEST \t\t\t\n      PUSH 40\t\t\t\n      DUP3 \t\t\t\n      ADD \t\t\t\n      SWAP1 \t\t\t\n      POP \t\t\t\n      SWAP2 \t\t\t\n      SWAP1 \t\t\t\n      POP \t\t\t\n      JUMP \t\t\t\n    tag 162\t\t\t\n      JUMPDEST \t\t\t\n      PUSH 0\t\t\t\n      PUSH 20\t\t\t\n      DUP3 \t\t\t\n      ADD \t\t\t\n      SWAP1 \t\t\t\n      POP \t\t\t\n      DUP2 \t\t\t\n      DUP2 \t\t\t\n      SUB \t\t\t\n      PUSH 0\t\t\t\n      DUP4 \t\t\t\n      ADD \t\t\t\n      MSTORE \t\t\t\n      PUSH [tag] 480\t\t\t\n      DUP2 \t\t\t\n      PUSH [tag] 239\t\t\t\n      JUMP \t\t\t\n    tag 480\t\t\t\n      JUMPDEST \t\t\t\n      SWAP1 \t\t\t\n      POP \t\t\t\n      SWAP2 \t\t\t\n      SWAP1 \t\t\t\n      POP \t\t\t\n      JUMP \t\t\t\n    tag 240\t\t\t\n      JUMPDEST \t\t\t\n      PUSH 436F6E7472616374206E6F7420617070726F76656420746F206275726E20746F\t\t\t\n      PUSH 0\t\t\t\n      DUP3 \t\t\t\n      ADD \t\t\t\n      MSTORE \t\t\t\n      PUSH 6B656E0000000000000000000000000000000000000000000000000000000000\t\t\t\n      PUSH 20\t\t\t\n      DUP3 \t\t\t\n      ADD \t\t\t\n      MSTORE \t\t\t\n      POP \t\t\t\n      JUMP \t\t\t\n    tag 241\t\t\t\n      JUMPDEST \t\t\t\n      PUSH 0\t\t\t\n      PUSH [tag] 483\t\t\t\n      PUSH 23\t\t\t\n      DUP4 \t\t\t\n      PUSH [tag] 219\t\t\t\n      JUMP \t\t\t\n    tag 483\t\t\t\n      JUMPDEST \t\t\t\n      SWAP2 \t\t\t\n      POP \t\t\t\n      PUSH [tag] 484\t\t\t\n      DUP3 \t\t\t\n      PUSH [tag] 240\t\t\t\n      JUMP \t\t\t\n    tag 484\t\t\t\n      JUMPDEST \t\t\t\n      PUSH 40\t\t\t\n      DUP3 \t\t\t\n      ADD \t\t\t\n      SWAP1 \t\t\t\n      POP \t\t\t\n      SWAP2 \t\t\t\n      SWAP1 \t\t\t\n      POP \t\t\t\n      JUMP \t\t\t\n    tag 169\t\t\t\n      JUMPDEST \t\t\t\n      PUSH 0\t\t\t\n      PUSH 20\t\t\t\n      DUP3 \t\t\t\n      ADD \t\t\t\n      SWAP1 \t\t\t\n      POP \t\t\t\n      DUP2 \t\t\t\n      DUP2 \t\t\t\n      SUB \t\t\t\n      PUSH 0\t\t\t\n      DUP4 \t\t\t\n      ADD \t\t\t\n      MSTORE \t\t\t\n      PUSH [tag] 486\t\t\t\n      DUP2 \t\t\t\n      PUSH [tag] 241\t\t\t\n      JUMP \t\t\t\n    tag 486\t\t\t\n      JUMPDEST \t\t\t\n      SWAP1 \t\t\t\n      POP \t\t\t\n      SWAP2 \t\t\t\n      SWAP1 \t\t\t\n      POP \t\t\t\n      JUMP \t\t\t\n    tag 175\t\t\t\n      JUMPDEST \t\t\t\n      PUSH 0\t\t\t\n      PUSH 40\t\t\t\n      DUP3 \t\t\t\n      ADD \t\t\t\n      SWAP1 \t\t\t\n      POP \t\t\t\n      PUSH [tag] 488\t\t\t\n      PUSH 0\t\t\t\n      DUP4 \t\t\t\n      ADD \t\t\t\n      DUP6 \t\t\t\n      PUSH [tag] 235\t\t\t\n      JUMP \t\t\t\n    tag 488\t\t\t\n      JUMPDEST \t\t\t\n      PUSH [tag] 489\t\t\t\n      PUSH 20\t\t\t\n      DUP4 \t\t\t\n      ADD \t\t\t\n      DUP5 \t\t\t\n      PUSH [tag] 222\t\t\t\n      JUMP \t\t\t\n    tag 489\t\t\t\n      JUMPDEST \t\t\t\n      SWAP4 \t\t\t\n      SWAP3 \t\t\t\n      POP \t\t\t\n      POP \t\t\t\n      POP \t\t\t\n      JUMP \t\t\t\n    .data\n      0:\n        .code\n          PUSH 80\t\t\tcontract Vault {\\n    address ...\n          PUSH 40\t\t\tcontract Vault {\\n    address ...\n          MSTORE \t\t\tcontract Vault {\\n    address ...\n          CALLVALUE \t\t\tconstructor(address NFTContrac...\n          DUP1 \t\t\tconstructor(address NFTContrac...\n          ISZERO \t\t\tconstructor(address NFTContrac...\n          PUSH [tag] 1\t\t\tconstructor(address NFTContrac...\n          JUMPI \t\t\tconstructor(address NFTContrac...\n          PUSH 0\t\t\tconstructor(address NFTContrac...\n          DUP1 \t\t\tconstructor(address NFTContrac...\n          REVERT \t\t\tconstructor(address NFTContrac...\n        tag 1\t\t\tconstructor(address NFTContrac...\n          JUMPDEST \t\t\tconstructor(address NFTContrac...\n          POP \t\t\tconstructor(address NFTContrac...\n          PUSH 40\t\t\tconstructor(address NFTContrac...\n          MLOAD \t\t\tconstructor(address NFTContrac...\n          PUSHSIZE \t\t\tconstructor(address NFTContrac...\n          CODESIZE \t\t\tconstructor(address NFTContrac...\n          SUB \t\t\tconstructor(address NFTContrac...\n          DUP1 \t\t\tconstructor(address NFTContrac...\n          PUSHSIZE \t\t\tconstructor(address NFTContrac...\n          DUP4 \t\t\tconstructor(address NFTContrac...\n          CODECOPY \t\t\tconstructor(address NFTContrac...\n          DUP2 \t\t\tconstructor(address NFTContrac...\n          DUP2 \t\t\tconstructor(address NFTContrac...\n          ADD \t\t\tconstructor(address NFTContrac...\n          PUSH 40\t\t\tconstructor(address NFTContrac...\n          MSTORE \t\t\tconstructor(address NFTContrac...\n          DUP2 \t\t\tconstructor(address NFTContrac...\n          ADD \t\t\tconstructor(address NFTContrac...\n          SWAP1 \t\t\tconstructor(address NFTContrac...\n          PUSH [tag] 2\t\t\tconstructor(address NFTContrac...\n          SWAP2 \t\t\tconstructor(address NFTContrac...\n          SWAP1 \t\t\tconstructor(address NFTContrac...\n          PUSH [tag] 3\t\t\tconstructor(address NFTContrac...\n          JUMP \t\t\tconstructor(address NFTContrac...\n        tag 2\t\t\tconstructor(address NFTContrac...\n          JUMPDEST \t\t\tconstructor(address NFTContrac...\n          DUP3 \t\t\tNFTContractAddress\n          PUSH 0\t\t\tNFTContract\n          DUP1 \t\t\tNFTContract\n          PUSH 100\t\t\tNFTContract = NFTContractAddre...\n          EXP \t\t\tNFTContract = NFTContractAddre...\n          DUP2 \t\t\tNFTContract = NFTContractAddre...\n          SLOAD \t\t\tNFTContract = NFTContractAddre...\n          DUP2 \t\t\tNFTContract = NFTContractAddre...\n          PUSH FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF\t\t\tNFTContract = NFTContractAddre...\n          MUL \t\t\tNFTContract = NFTContractAddre...\n          NOT \t\t\tNFTContract = NFTContractAddre...\n          AND \t\t\tNFTContract = NFTContractAddre...\n          SWAP1 \t\t\tNFTContract = NFTContractAddre...\n          DUP4 \t\t\tNFTContract = NFTContractAddre...\n          PUSH FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF\t\t\tNFTContract = NFTContractAddre...\n          AND \t\t\tNFTContract = NFTContractAddre...\n          MUL \t\t\tNFTContract = NFTContractAddre...\n          OR \t\t\tNFTContract = NFTContractAddre...\n          SWAP1 \t\t\tNFTContract = NFTContractAddre...\n          SSTORE \t\t\tNFTContract = NFTContractAddre...\n          POP \t\t\tNFTContract = NFTContractAddre...\n          DUP2 \t\t\t_minTime\n          PUSH 2\t\t\tminTime\n          DUP2 \t\t\tminTime = _minTime\n          SWAP1 \t\t\tminTime = _minTime\n          SSTORE \t\t\tminTime = _minTime\n          POP \t\t\tminTime = _minTime\n          DUP1 \t\t\t_admin\n          PUSH 5\t\t\tadmin\n          PUSH 0\t\t\tadmin\n          PUSH 100\t\t\tadmin = _admin\n          EXP \t\t\tadmin = _admin\n          DUP2 \t\t\tadmin = _admin\n          SLOAD \t\t\tadmin = _admin\n          DUP2 \t\t\tadmin = _admin\n          PUSH FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF\t\t\tadmin = _admin\n          MUL \t\t\tadmin = _admin\n          NOT \t\t\tadmin = _admin\n          AND \t\t\tadmin = _admin\n          SWAP1 \t\t\tadmin = _admin\n          DUP4 \t\t\tadmin = _admin\n          PUSH FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF\t\t\tadmin = _admin\n          AND \t\t\tadmin = _admin\n          MUL \t\t\tadmin = _admin\n          OR \t\t\tadmin = _admin\n          SWAP1 \t\t\tadmin = _admin\n          SSTORE \t\t\tadmin = _admin\n          POP \t\t\tadmin = _admin\n          TIMESTAMP \t\t\tblock.timestamp\n          PUSH 3\t\t\tcreationTime\n          DUP2 \t\t\tcreationTime = block.timestamp\n          SWAP1 \t\t\tcreationTime = block.timestamp\n          SSTORE \t\t\tcreationTime = block.timestamp\n          POP \t\t\tcreationTime = block.timestamp\n          CALLER \t\t\tmsg.sender\n          PUSH 4\t\t\tbitsurance\n          PUSH 0\t\t\tbitsurance\n          PUSH 100\t\t\tbitsurance = msg.sender\n          EXP \t\t\tbitsurance = msg.sender\n          DUP2 \t\t\tbitsurance = msg.sender\n          SLOAD \t\t\tbitsurance = msg.sender\n          DUP2 \t\t\tbitsurance = msg.sender\n          PUSH FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF\t\t\tbitsurance = msg.sender\n          MUL \t\t\tbitsurance = msg.sender\n          NOT \t\t\tbitsurance = msg.sender\n          AND \t\t\tbitsurance = msg.sender\n          SWAP1 \t\t\tbitsurance = msg.sender\n          DUP4 \t\t\tbitsurance = msg.sender\n          PUSH FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF\t\t\tbitsurance = msg.sender\n          AND \t\t\tbitsurance = msg.sender\n          MUL \t\t\tbitsurance = msg.sender\n          OR \t\t\tbitsurance = msg.sender\n          SWAP1 \t\t\tbitsurance = msg.sender\n          SSTORE \t\t\tbitsurance = msg.sender\n          POP \t\t\tbitsurance = msg.sender\n          POP \t\t\tconstructor(address NFTContrac...\n          POP \t\t\tconstructor(address NFTContrac...\n          POP \t\t\tconstructor(address NFTContrac...\n          PUSH [tag] 6\t\t\tcontract Vault {\\n    address ...\n          JUMP \t\t\tcontract Vault {\\n    address ...\n        tag 8\t\t\t/token/ERC721/ERC721.sol\";\\nim...\n          JUMPDEST \t\t\t/token/ERC721/ERC721.sol\";\\nim...\n          PUSH 0\t\t\t \n          DUP1 \t\t\t*\n          REVERT \t\t\tol\";\\n\\n/**\\n *\n        tag 10\t\t\tc NFTContract;\\n    mapping(ui...\n          JUMPDEST \t\t\tc NFTContract;\\n    mapping(ui...\n          PUSH 0\t\t\t uint25\n          PUSH FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF\t\t\t256 public minTime;\\n    uint2...\n          DUP3 \t\t\t   ui\n          AND \t\t\ts;\\n    uint256 public minTime...\n          SWAP1 \t\t\tokenBalances;\\n    uint256 pub...\n          POP \t\t\tokenBalances;\\n    uint256 pub...\n          SWAP2 \t\t\tc NFTContract;\\n    mapping(ui...\n          SWAP1 \t\t\tc NFTContract;\\n    mapping(ui...\n          POP \t\t\tc NFTContract;\\n    mapping(ui...\n          JUMP \t\t\tc NFTContract;\\n    mapping(ui...\n        tag 11\t\t\t  address public bitsurance;\\n...\n          JUMPDEST \t\t\t  address public bitsurance;\\n...\n          PUSH 0\t\t\tess pub\n          PUSH [tag] 23\t\t\tay to store all insured \n          DUP3 \t\t\tsured\n          PUSH [tag] 10\t\t\tay to store all insured \n          JUMP \t\t\tay to store all insured \n        tag 23\t\t\tay to store all insured \n          JUMPDEST \t\t\tay to store all insured \n          SWAP1 \t\t\t\\n    // array to store all in...\n          POP \t\t\t\\n    // array to store all in...\n          SWAP2 \t\t\t  address public bitsurance;\\n...\n          SWAP1 \t\t\t  address public bitsurance;\\n...\n          POP \t\t\t  address public bitsurance;\\n...\n          JUMP \t\t\t  address public bitsurance;\\n...\n        tag 12\t\t\t  uint256[] public tokenIds;\\n...\n          JUMPDEST \t\t\t  uint256[] public tokenIds;\\n...\n          PUSH [tag] 25\t\t\te(msg.sender == bitsuran\n          DUP2 \t\t\ttsura\n          PUSH [tag] 11\t\t\te(msg.sender == bitsuran\n          JUMP \t\t\te(msg.sender == bitsuran\n        tag 25\t\t\te(msg.sender == bitsuran\n          JUMPDEST \t\t\te(msg.sender == bitsuran\n          DUP2 \t\t\t requ\n          EQ \t\t\t    require(msg.sender == bits...\n          PUSH [tag] 26\t\t\tance{\\n        require(msg.sen...\n          JUMPI \t\t\tance{\\n        require(msg.sen...\n          PUSH 0\t\t\tr\n          DUP1 \t\t\tt\n          REVERT \t\t\tOnly Bitsura\n        tag 26\t\t\tance{\\n        require(msg.sen...\n          JUMPDEST \t\t\tance{\\n        require(msg.sen...\n          POP \t\t\t  uint256[] public tokenIds;\\n...\n          JUMP \t\t\t  uint256[] public tokenIds;\\n...\n        tag 13\t\t\tan call this function\");\\n    ...\n          JUMPDEST \t\t\tan call this function\");\\n    ...\n          PUSH 0\t\t\t @dev\n          DUP2 \t\t\t sets \n          MLOAD \t\t\tr that sets i\n          SWAP1 \t\t\tonstructor that sets i\n          POP \t\t\tonstructor that sets i\n          PUSH [tag] 28\t\t\tlues\\n     * @param NFTContrac...\n          DUP2 \t\t\tactAd\n          PUSH [tag] 12\t\t\tlues\\n     * @param NFTContrac...\n          JUMP \t\t\tlues\\n     * @param NFTContrac...\n        tag 28\t\t\tlues\\n     * @param NFTContrac...\n          JUMPDEST \t\t\tlues\\n     * @param NFTContrac...\n          SWAP3 \t\t\tan call this function\");\\n    ...\n          SWAP2 \t\t\tan call this function\");\\n    ...\n          POP \t\t\tan call this function\");\\n    ...\n          POP \t\t\tan call this function\");\\n    ...\n          JUMP \t\t\tan call this function\");\\n    ...\n        tag 14\t\t\t of the NFT contract\\n     * @...\n          JUMPDEST \t\t\t of the NFT contract\\n     * @...\n          PUSH 0\t\t\tinTime \n          DUP2 \t\t\taim a\n          SWAP1 \t\t\te before claim a\n          POP \t\t\te before claim a\n          SWAP2 \t\t\t of the NFT contract\\n     * @...\n          SWAP1 \t\t\t of the NFT contract\\n     * @...\n          POP \t\t\t of the NFT contract\\n     * @...\n          JUMP \t\t\t of the NFT contract\\n     * @...\n        tag 15\t\t\tme before withdraw\\n     * @pa...\n          JUMPDEST \t\t\tme before withdraw\\n     * @pa...\n          PUSH [tag] 31\t\t\tctor(address NFTContract\n          DUP2 \t\t\tntrac\n          PUSH [tag] 14\t\t\tctor(address NFTContract\n          JUMP \t\t\tctor(address NFTContract\n        tag 31\t\t\tctor(address NFTContract\n          JUMPDEST \t\t\tctor(address NFTContract\n          DUP2 \t\t\tconst\n          EQ \t\t\t   constructor(address NFTCont...\n          PUSH [tag] 32\t\t\t\\n     */\\n    constructor(add...\n          JUMPI \t\t\t\\n     */\\n    constructor(add...\n          PUSH 0\t\t\t6\n          DUP1 \t\t\tt\n          REVERT \t\t\tss, uint256 \n        tag 32\t\t\t\\n     */\\n    constructor(add...\n          JUMPDEST \t\t\t\\n     */\\n    constructor(add...\n          POP \t\t\tme before withdraw\\n     * @pa...\n          JUMP \t\t\tme before withdraw\\n     * @pa...\n        tag 16\t\t\tess _admin) {\\n        NFTCont...\n          JUMPDEST \t\t\tess _admin) {\\n        NFTCont...\n          PUSH 0\t\t\t     \n          DUP2 \t\t\t    ad\n          MLOAD \t\t\t;\\n        adm\n          SWAP1 \t\t\t _minTime;\\n        adm\n          POP \t\t\t _minTime;\\n        adm\n          PUSH [tag] 34\t\t\tin;\\n        creationTime = bl...\n          DUP2 \t\t\tblock\n          PUSH [tag] 15\t\t\tin;\\n        creationTime = bl...\n          JUMP \t\t\tin;\\n        creationTime = bl...\n        tag 34\t\t\tin;\\n        creationTime = bl...\n          JUMPDEST \t\t\tin;\\n        creationTime = bl...\n          SWAP3 \t\t\tess _admin) {\\n        NFTCont...\n          SWAP2 \t\t\tess _admin) {\\n        NFTCont...\n          POP \t\t\tess _admin) {\\n        NFTCont...\n          POP \t\t\tess _admin) {\\n        NFTCont...\n          JUMP \t\t\tess _admin) {\\n        NFTCont...\n        tag 3\t\t\t       bitsurance = msg.sender...\n          JUMPDEST \t\t\t       bitsurance = msg.sender...\n          PUSH 0\t\t\txterna\n          DUP1 \t\t\tpayabl\n          PUSH 0\t\t\t}\\n\\n   \n          PUSH 60\t\t\tr \n          DUP5 \t\t\td balance\n          DUP7 \t\t\tion to \n          SUB \t\t\tunction to add balance \n          SLT \t\t\tev Function to add balance for...\n          ISZERO \t\t\t @dev Function to add balance ...\n          PUSH [tag] 36\t\t\t @dev Function to add balance ...\n          JUMPI \t\t\t @dev Function to add balance ...\n          PUSH [tag] 37\t\t\tecific token ID\\n     * @param...\n          PUSH [tag] 8\t\t\tecific token ID\\n     * @param...\n          JUMP \t\t\tecific token ID\\n     * @param...\n        tag 37\t\t\tecific token ID\\n     * @param...\n          JUMPDEST \t\t\tecific token ID\\n     * @param...\n        tag 36\t\t\t @dev Function to add balance ...\n          JUMPDEST \t\t\t @dev Function to add balance ...\n          PUSH 0\t\t\tb\n          PUSH [tag] 38\t\t\tion addBalance(uint256 _tokenI...\n          DUP7 \t\t\tl onlyB\n          DUP3 \t\t\t) exte\n          DUP8 \t\t\tt256 amou\n          ADD \t\t\t uint256 amount) exter\n          PUSH [tag] 13\t\t\tion addBalance(uint256 _tokenI...\n          JUMP \t\t\tion addBalance(uint256 _tokenI...\n        tag 38\t\t\tion addBalance(uint256 _tokenI...\n          JUMPDEST \t\t\tion addBalance(uint256 _tokenI...\n          SWAP4 \t\t\t\\n    function addBalance(uint...\n          POP \t\t\t\\n    function addBalance(uint...\n          POP \t\t\t amount Amount to add to the b...\n          PUSH 20\t\t\t 0\n          PUSH [tag] 39\t\t\t.push(_tokenID);\\n        }\\n ...\n          DUP7 \t\t\tD] += a\n          DUP3 \t\t\ts[_tok\n          DUP8 \t\t\tokenBalan\n          ADD \t\t\t   tokenBalances[_toke\n          PUSH [tag] 16\t\t\t.push(_tokenID);\\n        }\\n ...\n          JUMP \t\t\t.push(_tokenID);\\n        }\\n ...\n        tag 39\t\t\t.push(_tokenID);\\n        }\\n ...\n          JUMPDEST \t\t\t.push(_tokenID);\\n        }\\n ...\n          SWAP3 \t\t\t  tokenIds.push(_tokenID);\\n  ...\n          POP \t\t\t  tokenIds.push(_tokenID);\\n  ...\n          POP \t\t\tf (tokenBalances[_tokenID] == ...\n          PUSH 40\t\t\tew\n          PUSH [tag] 40\t\t\ty) {\\n        return tokenIds;...\n          DUP7 \t\t\t Functi\n          DUP3 \t\t\t   * @\n          DUP8 \t\t\t\\n    /**\\n\n          ADD \t\t\t  }\\n\\n    /**\\n     * @d\n          PUSH [tag] 13\t\t\ty) {\\n        return tokenIds;...\n          JUMP \t\t\ty) {\\n        return tokenIds;...\n        tag 40\t\t\ty) {\\n        return tokenIds;...\n          JUMPDEST \t\t\ty) {\\n        return tokenIds;...\n          SWAP2 \t\t\t56[] memory) {\\n        return...\n          POP \t\t\t56[] memory) {\\n        return...\n          POP \t\t\tction getTokenIds() public vie...\n          SWAP3 \t\t\t       bitsurance = msg.sender...\n          POP \t\t\t       bitsurance = msg.sender...\n          SWAP3 \t\t\t       bitsurance = msg.sender...\n          POP \t\t\t       bitsurance = msg.sender...\n          SWAP3 \t\t\t       bitsurance = msg.sender...\n          JUMP \t\t\t       bitsurance = msg.sender...\n        tag 6\t\t\tcontract Vault {\\n    address ...\n          JUMPDEST \t\t\tcontract Vault {\\n    address ...\n          PUSH #[$] 0000000000000000000000000000000000000000000000000000000000000000\t\t\tcontract Vault {\\n    address ...\n          DUP1 \t\t\tcontract Vault {\\n    address ...\n          PUSH [$] 0000000000000000000000000000000000000000000000000000000000000000\t\t\tcontract Vault {\\n    address ...\n          PUSH 0\t\t\tcontract Vault {\\n    address ...\n          CODECOPY \t\t\tcontract Vault {\\n    address ...\n          PUSH 0\t\t\tcontract Vault {\\n    address ...\n          RETURN \t\t\tcontract Vault {\\n    address ...\n        .data\n          0:\n            .code\n              PUSH 80\t\t\tcontract Vault {\\n    address ...\n              PUSH 40\t\t\tcontract Vault {\\n    address ...\n              MSTORE \t\t\tcontract Vault {\\n    address ...\n              PUSH 4\t\t\tcontract Vault {\\n    address ...\n              CALLDATASIZE \t\t\tcontract Vault {\\n    address ...\n              LT \t\t\tcontract Vault {\\n    address ...\n              PUSH [tag] 1\t\t\tcontract Vault {\\n    address ...\n              JUMPI \t\t\tcontract Vault {\\n    address ...\n              PUSH 0\t\t\tcontract Vault {\\n    address ...\n              CALLDATALOAD \t\t\tcontract Vault {\\n    address ...\n              PUSH E0\t\t\tcontract Vault {\\n    address ...\n              SHR \t\t\tcontract Vault {\\n    address ...\n              DUP1 \t\t\tcontract Vault {\\n    address ...\n              PUSH 8293744B\t\t\tcontract Vault {\\n    address ...\n              GT \t\t\tcontract Vault {\\n    address ...\n              PUSH [tag] 14\t\t\tcontract Vault {\\n    address ...\n              JUMPI \t\t\tcontract Vault {\\n    address ...\n              DUP1 \t\t\tcontract Vault {\\n    address ...\n              PUSH 8293744B\t\t\tcontract Vault {\\n    address ...\n              EQ \t\t\tcontract Vault {\\n    address ...\n              PUSH [tag] 8\t\t\tcontract Vault {\\n    address ...\n              JUMPI \t\t\tcontract Vault {\\n    address ...\n              DUP1 \t\t\tcontract Vault {\\n    address ...\n              PUSH A40398A6\t\t\tcontract Vault {\\n    address ...\n              EQ \t\t\tcontract Vault {\\n    address ...\n              PUSH [tag] 9\t\t\tcontract Vault {\\n    address ...\n              JUMPI \t\t\tcontract Vault {\\n    address ...\n              DUP1 \t\t\tcontract Vault {\\n    address ...\n              PUSH D58778D6\t\t\tcontract Vault {\\n    address ...\n              EQ \t\t\tcontract Vault {\\n    address ...\n              PUSH [tag] 10\t\t\tcontract Vault {\\n    address ...\n              JUMPI \t\t\tcontract Vault {\\n    address ...\n              DUP1 \t\t\tcontract Vault {\\n    address ...\n              PUSH D8270DCE\t\t\tcontract Vault {\\n    address ...\n              EQ \t\t\tcontract Vault {\\n    address ...\n              PUSH [tag] 11\t\t\tcontract Vault {\\n    address ...\n              JUMPI \t\t\tcontract Vault {\\n    address ...\n              DUP1 \t\t\tcontract Vault {\\n    address ...\n              PUSH ED2B40EA\t\t\tcontract Vault {\\n    address ...\n              EQ \t\t\tcontract Vault {\\n    address ...\n              PUSH [tag] 12\t\t\tcontract Vault {\\n    address ...\n              JUMPI \t\t\tcontract Vault {\\n    address ...\n              DUP1 \t\t\tcontract Vault {\\n    address ...\n              PUSH F851A440\t\t\tcontract Vault {\\n    address ...\n              EQ \t\t\tcontract Vault {\\n    address ...\n              PUSH [tag] 13\t\t\tcontract Vault {\\n    address ...\n              JUMPI \t\t\tcontract Vault {\\n    address ...\n              PUSH [tag] 2\t\t\tcontract Vault {\\n    address ...\n              JUMP \t\t\tcontract Vault {\\n    address ...\n            tag 14\t\t\tcontract Vault {\\n    address ...\n              JUMPDEST \t\t\tcontract Vault {\\n    address ...\n              DUP1 \t\t\tcontract Vault {\\n    address ...\n              PUSH 1AA43078\t\t\tcontract Vault {\\n    address ...\n              EQ \t\t\tcontract Vault {\\n    address ...\n              PUSH [tag] 3\t\t\tcontract Vault {\\n    address ...\n              JUMPI \t\t\tcontract Vault {\\n    address ...\n              DUP1 \t\t\tcontract Vault {\\n    address ...\n              PUSH 31C2273B\t\t\tcontract Vault {\\n    address ...\n              EQ \t\t\tcontract Vault {\\n    address ...\n              PUSH [tag] 4\t\t\tcontract Vault {\\n    address ...\n              JUMPI \t\t\tcontract Vault {\\n    address ...\n              DUP1 \t\t\tcontract Vault {\\n    address ...\n              PUSH 505658D9\t\t\tcontract Vault {\\n    address ...\n              EQ \t\t\tcontract Vault {\\n    address ...\n              PUSH [tag] 5\t\t\tcontract Vault {\\n    address ...\n              JUMPI \t\t\tcontract Vault {\\n    address ...\n              DUP1 \t\t\tcontract Vault {\\n    address ...\n              PUSH 5E4F6CAB\t\t\tcontract Vault {\\n    address ...\n              EQ \t\t\tcontract Vault {\\n    address ...\n              PUSH [tag] 6\t\t\tcontract Vault {\\n    address ...\n              JUMPI \t\t\tcontract Vault {\\n    address ...\n              DUP1 \t\t\tcontract Vault {\\n    address ...\n              PUSH 67F718A9\t\t\tcontract Vault {\\n    address ...\n              EQ \t\t\tcontract Vault {\\n    address ...\n              PUSH [tag] 7\t\t\tcontract Vault {\\n    address ...\n              JUMPI \t\t\tcontract Vault {\\n    address ...\n              PUSH [tag] 2\t\t\tcontract Vault {\\n    address ...\n              JUMP \t\t\tcontract Vault {\\n    address ...\n            tag 1\t\t\tcontract Vault {\\n    address ...\n              JUMPDEST \t\t\tcontract Vault {\\n    address ...\n              CALLDATASIZE \t\t\tcontract Vault {\\n    address ...\n              PUSH [tag] 2\t\t\tcontract Vault {\\n    address ...\n              JUMPI \t\t\tcontract Vault {\\n    address ...\n              STOP \t\t\tcontract Vault {\\n    address ...\n            tag 2\t\t\tcontract Vault {\\n    address ...\n              JUMPDEST \t\t\tcontract Vault {\\n    address ...\n              STOP \t\t\tcontract Vault {\\n    address ...\n            tag 3\t\t\tuint256 public minTime\n              JUMPDEST \t\t\tuint256 public minTime\n              CALLVALUE \t\t\tuint256 public minTime\n              DUP1 \t\t\tuint256 public minTime\n              ISZERO \t\t\tuint256 public minTime\n              PUSH [tag] 19\t\t\tuint256 public minTime\n              JUMPI \t\t\tuint256 public minTime\n              PUSH 0\t\t\tuint256 public minTime\n              DUP1 \t\t\tuint256 public minTime\n              REVERT \t\t\tuint256 public minTime\n            tag 19\t\t\tuint256 public minTime\n              JUMPDEST \t\t\tuint256 public minTime\n              POP \t\t\tuint256 public minTime\n              PUSH [tag] 20\t\t\tuint256 public minTime\n              PUSH [tag] 21\t\t\tuint256 public minTime\n              JUMP \t\t\tuint256 public minTime\n            tag 20\t\t\tuint256 public minTime\n              JUMPDEST \t\t\tuint256 public minTime\n              PUSH 40\t\t\tuint256 public minTime\n              MLOAD \t\t\tuint256 public minTime\n              PUSH [tag] 22\t\t\tuint256 public minTime\n              SWAP2 \t\t\tuint256 public minTime\n              SWAP1 \t\t\tuint256 public minTime\n              PUSH [tag] 23\t\t\tuint256 public minTime\n              JUMP \t\t\tuint256 public minTime\n            tag 22\t\t\tuint256 public minTime\n              JUMPDEST \t\t\tuint256 public minTime\n              PUSH 40\t\t\tuint256 public minTime\n              MLOAD \t\t\tuint256 public minTime\n              DUP1 \t\t\tuint256 public minTime\n              SWAP2 \t\t\tuint256 public minTime\n              SUB \t\t\tuint256 public minTime\n              SWAP1 \t\t\tuint256 public minTime\n              RETURN \t\t\tuint256 public minTime\n            tag 4\t\t\taddress public NFTContract\n              JUMPDEST \t\t\taddress public NFTContract\n              CALLVALUE \t\t\taddress public NFTContract\n              DUP1 \t\t\taddress public NFTContract\n              ISZERO \t\t\taddress public NFTContract\n              PUSH [tag] 24\t\t\taddress public NFTContract\n              JUMPI \t\t\taddress public NFTContract\n              PUSH 0\t\t\taddress public NFTContract\n              DUP1 \t\t\taddress public NFTContract\n              REVERT \t\t\taddress public NFTContract\n            tag 24\t\t\taddress public NFTContract\n              JUMPDEST \t\t\taddress public NFTContract\n              POP \t\t\taddress public NFTContract\n              PUSH [tag] 25\t\t\taddress public NFTContract\n              PUSH [tag] 26\t\t\taddress public NFTContract\n              JUMP \t\t\taddress public NFTContract\n            tag 25\t\t\taddress public NFTContract\n              JUMPDEST \t\t\taddress public NFTContract\n              PUSH 40\t\t\taddress public NFTContract\n              MLOAD \t\t\taddress public NFTContract\n              PUSH [tag] 27\t\t\taddress public NFTContract\n              SWAP2 \t\t\taddress public NFTContract\n              SWAP1 \t\t\taddress public NFTContract\n              PUSH [tag] 28\t\t\taddress public NFTContract\n              JUMP \t\t\taddress public NFTContract\n            tag 27\t\t\taddress public NFTContract\n              JUMPDEST \t\t\taddress public NFTContract\n              PUSH 40\t\t\taddress public NFTContract\n              MLOAD \t\t\taddress public NFTContract\n              DUP1 \t\t\taddress public NFTContract\n              SWAP2 \t\t\taddress public NFTContract\n              SUB \t\t\taddress public NFTContract\n              SWAP1 \t\t\taddress public NFTContract\n              RETURN \t\t\taddress public NFTContract\n            tag 5\t\t\taddress public bitsurance\n              JUMPDEST \t\t\taddress public bitsurance\n              CALLVALUE \t\t\taddress public bitsurance\n              DUP1 \t\t\taddress public bitsurance\n              ISZERO \t\t\taddress public bitsurance\n              PUSH [tag] 29\t\t\taddress public bitsurance\n              JUMPI \t\t\taddress public bitsurance\n              PUSH 0\t\t\taddress public bitsurance\n              DUP1 \t\t\taddress public bitsurance\n              REVERT \t\t\taddress public bitsurance\n            tag 29\t\t\taddress public bitsurance\n              JUMPDEST \t\t\taddress public bitsurance\n              POP \t\t\taddress public bitsurance\n              PUSH [tag] 30\t\t\taddress public bitsurance\n              PUSH [tag] 31\t\t\taddress public bitsurance\n              JUMP \t\t\taddress public bitsurance\n            tag 30\t\t\taddress public bitsurance\n              JUMPDEST \t\t\taddress public bitsurance\n              PUSH 40\t\t\taddress public bitsurance\n              MLOAD \t\t\taddress public bitsurance\n              PUSH [tag] 32\t\t\taddress public bitsurance\n              SWAP2 \t\t\taddress public bitsurance\n              SWAP1 \t\t\taddress public bitsurance\n              PUSH [tag] 28\t\t\taddress public bitsurance\n              JUMP \t\t\taddress public bitsurance\n            tag 32\t\t\taddress public bitsurance\n              JUMPDEST \t\t\taddress public bitsurance\n              PUSH 40\t\t\taddress public bitsurance\n              MLOAD \t\t\taddress public bitsurance\n              DUP1 \t\t\taddress public bitsurance\n              SWAP2 \t\t\taddress public bitsurance\n              SUB \t\t\taddress public bitsurance\n              SWAP1 \t\t\taddress public bitsurance\n              RETURN \t\t\taddress public bitsurance\n            tag 6\t\t\tmapping(uint256 => uint256) pu...\n              JUMPDEST \t\t\tmapping(uint256 => uint256) pu...\n              CALLVALUE \t\t\tmapping(uint256 => uint256) pu...\n              DUP1 \t\t\tmapping(uint256 => uint256) pu...\n              ISZERO \t\t\tmapping(uint256 => uint256) pu...\n              PUSH [tag] 33\t\t\tmapping(uint256 => uint256) pu...\n              JUMPI \t\t\tmapping(uint256 => uint256) pu...\n              PUSH 0\t\t\tmapping(uint256 => uint256) pu...\n              DUP1 \t\t\tmapping(uint256 => uint256) pu...\n              REVERT \t\t\tmapping(uint256 => uint256) pu...\n            tag 33\t\t\tmapping(uint256 => uint256) pu...\n              JUMPDEST \t\t\tmapping(uint256 => uint256) pu...\n              POP \t\t\tmapping(uint256 => uint256) pu...\n              PUSH [tag] 34\t\t\tmapping(uint256 => uint256) pu...\n              PUSH 4\t\t\tmapping(uint256 => uint256) pu...\n              DUP1 \t\t\tmapping(uint256 => uint256) pu...\n              CALLDATASIZE \t\t\tmapping(uint256 => uint256) pu...\n              SUB \t\t\tmapping(uint256 => uint256) pu...\n              DUP2 \t\t\tmapping(uint256 => uint256) pu...\n              ADD \t\t\tmapping(uint256 => uint256) pu...\n              SWAP1 \t\t\tmapping(uint256 => uint256) pu...\n              PUSH [tag] 35\t\t\tmapping(uint256 => uint256) pu...\n              SWAP2 \t\t\tmapping(uint256 => uint256) pu...\n              SWAP1 \t\t\tmapping(uint256 => uint256) pu...\n              PUSH [tag] 36\t\t\tmapping(uint256 => uint256) pu...\n              JUMP \t\t\tmapping(uint256 => uint256) pu...\n            tag 35\t\t\tmapping(uint256 => uint256) pu...\n              JUMPDEST \t\t\tmapping(uint256 => uint256) pu...\n              PUSH [tag] 37\t\t\tmapping(uint256 => uint256) pu...\n              JUMP \t\t\tmapping(uint256 => uint256) pu...\n            tag 34\t\t\tmapping(uint256 => uint256) pu...\n              JUMPDEST \t\t\tmapping(uint256 => uint256) pu...\n              PUSH 40\t\t\tmapping(uint256 => uint256) pu...\n              MLOAD \t\t\tmapping(uint256 => uint256) pu...\n              PUSH [tag] 38\t\t\tmapping(uint256 => uint256) pu...\n              SWAP2 \t\t\tmapping(uint256 => uint256) pu...\n              SWAP1 \t\t\tmapping(uint256 => uint256) pu...\n              PUSH [tag] 23\t\t\tmapping(uint256 => uint256) pu...\n              JUMP \t\t\tmapping(uint256 => uint256) pu...\n            tag 38\t\t\tmapping(uint256 => uint256) pu...\n              JUMPDEST \t\t\tmapping(uint256 => uint256) pu...\n              PUSH 40\t\t\tmapping(uint256 => uint256) pu...\n              MLOAD \t\t\tmapping(uint256 => uint256) pu...\n              DUP1 \t\t\tmapping(uint256 => uint256) pu...\n              SWAP2 \t\t\tmapping(uint256 => uint256) pu...\n              SUB \t\t\tmapping(uint256 => uint256) pu...\n              SWAP1 \t\t\tmapping(uint256 => uint256) pu...\n              RETURN \t\t\tmapping(uint256 => uint256) pu...\n            tag 7\t\t\tfunction getTokenIds() public ...\n              JUMPDEST \t\t\tfunction getTokenIds() public ...\n              CALLVALUE \t\t\tfunction getTokenIds() public ...\n              DUP1 \t\t\tfunction getTokenIds() public ...\n              ISZERO \t\t\tfunction getTokenIds() public ...\n              PUSH [tag] 39\t\t\tfunction getTokenIds() public ...\n              JUMPI \t\t\tfunction getTokenIds() public ...\n              PUSH 0\t\t\tfunction getTokenIds() public ...\n              DUP1 \t\t\tfunction getTokenIds() public ...\n              REVERT \t\t\tfunction getTokenIds() public ...\n            tag 39\t\t\tfunction getTokenIds() public ...\n              JUMPDEST \t\t\tfunction getTokenIds() public ...\n              POP \t\t\tfunction getTokenIds() public ...\n              PUSH [tag] 40\t\t\tfunction getTokenIds() public ...\n              PUSH [tag] 41\t\t\tfunction getTokenIds() public ...\n              JUMP \t\t\tfunction getTokenIds() public ...\n            tag 40\t\t\tfunction getTokenIds() public ...\n              JUMPDEST \t\t\tfunction getTokenIds() public ...\n              PUSH 40\t\t\tfunction getTokenIds() public ...\n              MLOAD \t\t\tfunction getTokenIds() public ...\n              PUSH [tag] 42\t\t\tfunction getTokenIds() public ...\n              SWAP2 \t\t\tfunction getTokenIds() public ...\n              SWAP1 \t\t\tfunction getTokenIds() public ...\n              PUSH [tag] 43\t\t\tfunction getTokenIds() public ...\n              JUMP \t\t\tfunction getTokenIds() public ...\n            tag 42\t\t\tfunction getTokenIds() public ...\n              JUMPDEST \t\t\tfunction getTokenIds() public ...\n              PUSH 40\t\t\tfunction getTokenIds() public ...\n              MLOAD \t\t\tfunction getTokenIds() public ...\n              DUP1 \t\t\tfunction getTokenIds() public ...\n              SWAP2 \t\t\tfunction getTokenIds() public ...\n              SUB \t\t\tfunction getTokenIds() public ...\n              SWAP1 \t\t\tfunction getTokenIds() public ...\n              RETURN \t\t\tfunction getTokenIds() public ...\n            tag 8\t\t\tfunction withdraw(address paya...\n              JUMPDEST \t\t\tfunction withdraw(address paya...\n              PUSH [tag] 44\t\t\tfunction withdraw(address paya...\n              PUSH 4\t\t\tfunction withdraw(address paya...\n              DUP1 \t\t\tfunction withdraw(address paya...\n              CALLDATASIZE \t\t\tfunction withdraw(address paya...\n              SUB \t\t\tfunction withdraw(address paya...\n              DUP2 \t\t\tfunction withdraw(address paya...\n              ADD \t\t\tfunction withdraw(address paya...\n              SWAP1 \t\t\tfunction withdraw(address paya...\n              PUSH [tag] 45\t\t\tfunction withdraw(address paya...\n              SWAP2 \t\t\tfunction withdraw(address paya...\n              SWAP1 \t\t\tfunction withdraw(address paya...\n              PUSH [tag] 46\t\t\tfunction withdraw(address paya...\n              JUMP \t\t\tfunction withdraw(address paya...\n            tag 45\t\t\tfunction withdraw(address paya...\n              JUMPDEST \t\t\tfunction withdraw(address paya...\n              PUSH [tag] 47\t\t\tfunction withdraw(address paya...\n              JUMP \t\t\tfunction withdraw(address paya...\n            tag 44\t\t\tfunction withdraw(address paya...\n              JUMPDEST \t\t\tfunction withdraw(address paya...\n              STOP \t\t\tfunction withdraw(address paya...\n            tag 9\t\t\tfunction addBalance(uint256 _t...\n              JUMPDEST \t\t\tfunction addBalance(uint256 _t...\n              CALLVALUE \t\t\tfunction addBalance(uint256 _t...\n              DUP1 \t\t\tfunction addBalance(uint256 _t...\n              ISZERO \t\t\tfunction addBalance(uint256 _t...\n              PUSH [tag] 48\t\t\tfunction addBalance(uint256 _t...\n              JUMPI \t\t\tfunction addBalance(uint256 _t...\n              PUSH 0\t\t\tfunction addBalance(uint256 _t...\n              DUP1 \t\t\tfunction addBalance(uint256 _t...\n              REVERT \t\t\tfunction addBalance(uint256 _t...\n            tag 48\t\t\tfunction addBalance(uint256 _t...\n              JUMPDEST \t\t\tfunction addBalance(uint256 _t...\n              POP \t\t\tfunction addBalance(uint256 _t...\n              PUSH [tag] 49\t\t\tfunction addBalance(uint256 _t...\n              PUSH 4\t\t\tfunction addBalance(uint256 _t...\n              DUP1 \t\t\tfunction addBalance(uint256 _t...\n              CALLDATASIZE \t\t\tfunction addBalance(uint256 _t...\n              SUB \t\t\tfunction addBalance(uint256 _t...\n              DUP2 \t\t\tfunction addBalance(uint256 _t...\n              ADD \t\t\tfunction addBalance(uint256 _t...\n              SWAP1 \t\t\tfunction addBalance(uint256 _t...\n              PUSH [tag] 50\t\t\tfunction addBalance(uint256 _t...\n              SWAP2 \t\t\tfunction addBalance(uint256 _t...\n              SWAP1 \t\t\tfunction addBalance(uint256 _t...\n              PUSH [tag] 51\t\t\tfunction addBalance(uint256 _t...\n              JUMP \t\t\tfunction addBalance(uint256 _t...\n            tag 50\t\t\tfunction addBalance(uint256 _t...\n              JUMPDEST \t\t\tfunction addBalance(uint256 _t...\n              PUSH [tag] 52\t\t\tfunction addBalance(uint256 _t...\n              JUMP \t\t\tfunction addBalance(uint256 _t...\n            tag 49\t\t\tfunction addBalance(uint256 _t...\n              JUMPDEST \t\t\tfunction addBalance(uint256 _t...\n              STOP \t\t\tfunction addBalance(uint256 _t...\n            tag 10\t\t\tuint256[] public tokenIds\n              JUMPDEST \t\t\tuint256[] public tokenIds\n              CALLVALUE \t\t\tuint256[] public tokenIds\n              DUP1 \t\t\tuint256[] public tokenIds\n              ISZERO \t\t\tuint256[] public tokenIds\n              PUSH [tag] 53\t\t\tuint256[] public tokenIds\n              JUMPI \t\t\tuint256[] public tokenIds\n              PUSH 0\t\t\tuint256[] public tokenIds\n              DUP1 \t\t\tuint256[] public tokenIds\n              REVERT \t\t\tuint256[] public tokenIds\n            tag 53\t\t\tuint256[] public tokenIds\n              JUMPDEST \t\t\tuint256[] public tokenIds\n              POP \t\t\tuint256[] public tokenIds\n              PUSH [tag] 54\t\t\tuint256[] public tokenIds\n              PUSH 4\t\t\tuint256[] public tokenIds\n              DUP1 \t\t\tuint256[] public tokenIds\n              CALLDATASIZE \t\t\tuint256[] public tokenIds\n              SUB \t\t\tuint256[] public tokenIds\n              DUP2 \t\t\tuint256[] public tokenIds\n              ADD \t\t\tuint256[] public tokenIds\n              SWAP1 \t\t\tuint256[] public tokenIds\n              PUSH [tag] 55\t\t\tuint256[] public tokenIds\n              SWAP2 \t\t\tuint256[] public tokenIds\n              SWAP1 \t\t\tuint256[] public tokenIds\n              PUSH [tag] 36\t\t\tuint256[] public tokenIds\n              JUMP \t\t\tuint256[] public tokenIds\n            tag 55\t\t\tuint256[] public tokenIds\n              JUMPDEST \t\t\tuint256[] public tokenIds\n              PUSH [tag] 56\t\t\tuint256[] public tokenIds\n              JUMP \t\t\tuint256[] public tokenIds\n            tag 54\t\t\tuint256[] public tokenIds\n              JUMPDEST \t\t\tuint256[] public tokenIds\n              PUSH 40\t\t\tuint256[] public tokenIds\n              MLOAD \t\t\tuint256[] public tokenIds\n              PUSH [tag] 57\t\t\tuint256[] public tokenIds\n              SWAP2 \t\t\tuint256[] public tokenIds\n              SWAP1 \t\t\tuint256[] public tokenIds\n              PUSH [tag] 23\t\t\tuint256[] public tokenIds\n              JUMP \t\t\tuint256[] public tokenIds\n            tag 57\t\t\tuint256[] public tokenIds\n              JUMPDEST \t\t\tuint256[] public tokenIds\n              PUSH 40\t\t\tuint256[] public tokenIds\n              MLOAD \t\t\tuint256[] public tokenIds\n              DUP1 \t\t\tuint256[] public tokenIds\n              SWAP2 \t\t\tuint256[] public tokenIds\n              SUB \t\t\tuint256[] public tokenIds\n              SWAP1 \t\t\tuint256[] public tokenIds\n              RETURN \t\t\tuint256[] public tokenIds\n            tag 11\t\t\tuint256 public creationTime\n              JUMPDEST \t\t\tuint256 public creationTime\n              CALLVALUE \t\t\tuint256 public creationTime\n              DUP1 \t\t\tuint256 public creationTime\n              ISZERO \t\t\tuint256 public creationTime\n              PUSH [tag] 58\t\t\tuint256 public creationTime\n              JUMPI \t\t\tuint256 public creationTime\n              PUSH 0\t\t\tuint256 public creationTime\n              DUP1 \t\t\tuint256 public creationTime\n              REVERT \t\t\tuint256 public creationTime\n            tag 58\t\t\tuint256 public creationTime\n              JUMPDEST \t\t\tuint256 public creationTime\n              POP \t\t\tuint256 public creationTime\n              PUSH [tag] 59\t\t\tuint256 public creationTime\n              PUSH [tag] 60\t\t\tuint256 public creationTime\n              JUMP \t\t\tuint256 public creationTime\n            tag 59\t\t\tuint256 public creationTime\n              JUMPDEST \t\t\tuint256 public creationTime\n              PUSH 40\t\t\tuint256 public creationTime\n              MLOAD \t\t\tuint256 public creationTime\n              PUSH [tag] 61\t\t\tuint256 public creationTime\n              SWAP2 \t\t\tuint256 public creationTime\n              SWAP1 \t\t\tuint256 public creationTime\n              PUSH [tag] 23\t\t\tuint256 public creationTime\n              JUMP \t\t\tuint256 public creationTime\n            tag 61\t\t\tuint256 public creationTime\n              JUMPDEST \t\t\tuint256 public creationTime\n              PUSH 40\t\t\tuint256 public creationTime\n              MLOAD \t\t\tuint256 public creationTime\n              DUP1 \t\t\tuint256 public creationTime\n              SWAP2 \t\t\tuint256 public creationTime\n              SUB \t\t\tuint256 public creationTime\n              SWAP1 \t\t\tuint256 public creationTime\n              RETURN \t\t\tuint256 public creationTime\n            tag 12\t\t\tfunction claimFunds(address pa...\n              JUMPDEST \t\t\tfunction claimFunds(address pa...\n              PUSH [tag] 62\t\t\tfunction claimFunds(address pa...\n              PUSH 4\t\t\tfunction claimFunds(address pa...\n              DUP1 \t\t\tfunction claimFunds(address pa...\n              CALLDATASIZE \t\t\tfunction claimFunds(address pa...\n              SUB \t\t\tfunction claimFunds(address pa...\n              DUP2 \t\t\tfunction claimFunds(address pa...\n              ADD \t\t\tfunction claimFunds(address pa...\n              SWAP1 \t\t\tfunction claimFunds(address pa...\n              PUSH [tag] 63\t\t\tfunction claimFunds(address pa...\n              SWAP2 \t\t\tfunction claimFunds(address pa...\n              SWAP1 \t\t\tfunction claimFunds(address pa...\n              PUSH [tag] 64\t\t\tfunction claimFunds(address pa...\n              JUMP \t\t\tfunction claimFunds(address pa...\n            tag 63\t\t\tfunction claimFunds(address pa...\n              JUMPDEST \t\t\tfunction claimFunds(address pa...\n              PUSH [tag] 65\t\t\tfunction claimFunds(address pa...\n              JUMP \t\t\tfunction claimFunds(address pa...\n            tag 62\t\t\tfunction claimFunds(address pa...\n              JUMPDEST \t\t\tfunction claimFunds(address pa...\n              STOP \t\t\tfunction claimFunds(address pa...\n            tag 13\t\t\taddress public admin\n              JUMPDEST \t\t\taddress public admin\n              CALLVALUE \t\t\taddress public admin\n              DUP1 \t\t\taddress public admin\n              ISZERO \t\t\taddress public admin\n              PUSH [tag] 66\t\t\taddress public admin\n              JUMPI \t\t\taddress public admin\n              PUSH 0\t\t\taddress public admin\n              DUP1 \t\t\taddress public admin\n              REVERT \t\t\taddress public admin\n            tag 66\t\t\taddress public admin\n              JUMPDEST \t\t\taddress public admin\n              POP \t\t\taddress public admin\n              PUSH [tag] 67\t\t\taddress public admin\n              PUSH [tag] 68\t\t\taddress public admin\n              JUMP \t\t\taddress public admin\n            tag 67\t\t\taddress public admin\n              JUMPDEST \t\t\taddress public admin\n              PUSH 40\t\t\taddress public admin\n              MLOAD \t\t\taddress public admin\n              PUSH [tag] 69\t\t\taddress public admin\n              SWAP2 \t\t\taddress public admin\n              SWAP1 \t\t\taddress public admin\n              PUSH [tag] 28\t\t\taddress public admin\n              JUMP \t\t\taddress public admin\n            tag 69\t\t\taddress public admin\n              JUMPDEST \t\t\taddress public admin\n              PUSH 40\t\t\taddress public admin\n              MLOAD \t\t\taddress public admin\n              DUP1 \t\t\taddress public admin\n              SWAP2 \t\t\taddress public admin\n              SUB \t\t\taddress public admin\n              SWAP1 \t\t\taddress public admin\n              RETURN \t\t\taddress public admin\n            tag 21\t\t\tuint256 public minTime\n              JUMPDEST \t\t\tuint256 public minTime\n              PUSH 2\t\t\tuint256 public minTime\n              SLOAD \t\t\tuint256 public minTime\n              DUP2 \t\t\tuint256 public minTime\n              JUMP \t\t\tuint256 public minTime\n            tag 26\t\t\taddress public NFTContract\n              JUMPDEST \t\t\taddress public NFTContract\n              PUSH 0\t\t\taddress public NFTContract\n              DUP1 \t\t\taddress public NFTContract\n              SLOAD \t\t\taddress public NFTContract\n              SWAP1 \t\t\taddress public NFTContract\n              PUSH 100\t\t\taddress public NFTContract\n              EXP \t\t\taddress public NFTContract\n              SWAP1 \t\t\taddress public NFTContract\n              DIV \t\t\taddress public NFTContract\n              PUSH FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF\t\t\taddress public NFTContract\n              AND \t\t\taddress public NFTContract\n              DUP2 \t\t\taddress public NFTContract\n              JUMP \t\t\taddress public NFTContract\n            tag 31\t\t\taddress public bitsurance\n              JUMPDEST \t\t\taddress public bitsurance\n              PUSH 4\t\t\taddress public bitsurance\n              PUSH 0\t\t\taddress public bitsurance\n              SWAP1 \t\t\taddress public bitsurance\n              SLOAD \t\t\taddress public bitsurance\n              SWAP1 \t\t\taddress public bitsurance\n              PUSH 100\t\t\taddress public bitsurance\n              EXP \t\t\taddress public bitsurance\n              SWAP1 \t\t\taddress public bitsurance\n              DIV \t\t\taddress public bitsurance\n              PUSH FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF\t\t\taddress public bitsurance\n              AND \t\t\taddress public bitsurance\n              DUP2 \t\t\taddress public bitsurance\n              JUMP \t\t\taddress public bitsurance\n            tag 37\t\t\tmapping(uint256 => uint256) pu...\n              JUMPDEST \t\t\tmapping(uint256 => uint256) pu...\n              PUSH 1\t\t\tmapping(uint256 => uint256) pu...\n              PUSH 20\t\t\tmapping(uint256 => uint256) pu...\n              MSTORE \t\t\tmapping(uint256 => uint256) pu...\n              DUP1 \t\t\tmapping(uint256 => uint256) pu...\n              PUSH 0\t\t\tmapping(uint256 => uint256) pu...\n              MSTORE \t\t\tmapping(uint256 => uint256) pu...\n              PUSH 40\t\t\tmapping(uint256 => uint256) pu...\n              PUSH 0\t\t\tmapping(uint256 => uint256) pu...\n              KECCAK256 \t\t\tmapping(uint256 => uint256) pu...\n              PUSH 0\t\t\tmapping(uint256 => uint256) pu...\n              SWAP2 \t\t\tmapping(uint256 => uint256) pu...\n              POP \t\t\tmapping(uint256 => uint256) pu...\n              SWAP1 \t\t\tmapping(uint256 => uint256) pu...\n              POP \t\t\tmapping(uint256 => uint256) pu...\n              SLOAD \t\t\tmapping(uint256 => uint256) pu...\n              DUP2 \t\t\tmapping(uint256 => uint256) pu...\n              JUMP \t\t\tmapping(uint256 => uint256) pu...\n            tag 41\t\t\tfunction getTokenIds() public ...\n              JUMPDEST \t\t\tfunction getTokenIds() public ...\n              PUSH 60\t\t\tuint256[] memory\n              PUSH 6\t\t\ttokenIds\n              DUP1 \t\t\treturn tokenIds\n              SLOAD \t\t\treturn tokenIds\n              DUP1 \t\t\treturn tokenIds\n              PUSH 20\t\t\treturn tokenIds\n              MUL \t\t\treturn tokenIds\n              PUSH 20\t\t\treturn tokenIds\n              ADD \t\t\treturn tokenIds\n              PUSH 40\t\t\treturn tokenIds\n              MLOAD \t\t\treturn tokenIds\n              SWAP1 \t\t\treturn tokenIds\n              DUP2 \t\t\treturn tokenIds\n              ADD \t\t\treturn tokenIds\n              PUSH 40\t\t\treturn tokenIds\n              MSTORE \t\t\treturn tokenIds\n              DUP1 \t\t\treturn tokenIds\n              SWAP3 \t\t\treturn tokenIds\n              SWAP2 \t\t\treturn tokenIds\n              SWAP1 \t\t\treturn tokenIds\n              DUP2 \t\t\treturn tokenIds\n              DUP2 \t\t\treturn tokenIds\n              MSTORE \t\t\treturn tokenIds\n              PUSH 20\t\t\treturn tokenIds\n              ADD \t\t\treturn tokenIds\n              DUP3 \t\t\treturn tokenIds\n              DUP1 \t\t\treturn tokenIds\n              SLOAD \t\t\treturn tokenIds\n              DUP1 \t\t\treturn tokenIds\n              ISZERO \t\t\treturn tokenIds\n              PUSH [tag] 71\t\t\treturn tokenIds\n              JUMPI \t\t\treturn tokenIds\n              PUSH 20\t\t\treturn tokenIds\n              MUL \t\t\treturn tokenIds\n              DUP3 \t\t\treturn tokenIds\n              ADD \t\t\treturn tokenIds\n              SWAP2 \t\t\treturn tokenIds\n              SWAP1 \t\t\treturn tokenIds\n              PUSH 0\t\t\treturn tokenIds\n              MSTORE \t\t\treturn tokenIds\n              PUSH 20\t\t\treturn tokenIds\n              PUSH 0\t\t\treturn tokenIds\n              KECCAK256 \t\t\treturn tokenIds\n              SWAP1 \t\t\treturn tokenIds\n            tag 72\t\t\treturn tokenIds\n              JUMPDEST \t\t\treturn tokenIds\n              DUP2 \t\t\treturn tokenIds\n              SLOAD \t\t\treturn tokenIds\n              DUP2 \t\t\treturn tokenIds\n              MSTORE \t\t\treturn tokenIds\n              PUSH 20\t\t\treturn tokenIds\n              ADD \t\t\treturn tokenIds\n              SWAP1 \t\t\treturn tokenIds\n              PUSH 1\t\t\treturn tokenIds\n              ADD \t\t\treturn tokenIds\n              SWAP1 \t\t\treturn tokenIds\n              DUP1 \t\t\treturn tokenIds\n              DUP4 \t\t\treturn tokenIds\n              GT \t\t\treturn tokenIds\n              PUSH [tag] 72\t\t\treturn tokenIds\n              JUMPI \t\t\treturn tokenIds\n            tag 71\t\t\treturn tokenIds\n              JUMPDEST \t\t\treturn tokenIds\n              POP \t\t\treturn tokenIds\n              POP \t\t\treturn tokenIds\n              POP \t\t\treturn tokenIds\n              POP \t\t\treturn tokenIds\n              POP \t\t\treturn tokenIds\n              SWAP1 \t\t\treturn tokenIds\n              POP \t\t\treturn tokenIds\n              SWAP1 \t\t\tfunction getTokenIds() public ...\n              JUMP \t\t\tfunction getTokenIds() public ...\n            tag 47\t\t\tfunction withdraw(address paya...\n              JUMPDEST \t\t\tfunction withdraw(address paya...\n              PUSH 4\t\t\tbitsurance\n              PUSH 0\t\t\tbitsurance\n              SWAP1 \t\t\tbitsurance\n              SLOAD \t\t\tbitsurance\n              SWAP1 \t\t\tbitsurance\n              PUSH 100\t\t\tbitsurance\n              EXP \t\t\tbitsurance\n              SWAP1 \t\t\tbitsurance\n              DIV \t\t\tbitsurance\n              PUSH FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF\t\t\tbitsurance\n              AND \t\t\tbitsurance\n              PUSH FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF\t\t\tmsg.sender == bitsurance\n              AND \t\t\tmsg.sender == bitsurance\n              CALLER \t\t\tmsg.sender\n              PUSH FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF\t\t\tmsg.sender == bitsurance\n              AND \t\t\tmsg.sender == bitsurance\n              EQ \t\t\tmsg.sender == bitsurance\n              PUSH [tag] 74\t\t\trequire(msg.sender == bitsuran...\n              JUMPI \t\t\trequire(msg.sender == bitsuran...\n              PUSH 40\t\t\trequire(msg.sender == bitsuran...\n              MLOAD \t\t\trequire(msg.sender == bitsuran...\n              PUSH 8C379A000000000000000000000000000000000000000000000000000000000\t\t\trequire(msg.sender == bitsuran...\n              DUP2 \t\t\trequire(msg.sender == bitsuran...\n              MSTORE \t\t\trequire(msg.sender == bitsuran...\n              PUSH 4\t\t\trequire(msg.sender == bitsuran...\n              ADD \t\t\trequire(msg.sender == bitsuran...\n              PUSH [tag] 75\t\t\trequire(msg.sender == bitsuran...\n              SWAP1 \t\t\trequire(msg.sender == bitsuran...\n              PUSH [tag] 76\t\t\trequire(msg.sender == bitsuran...\n              JUMP \t\t\trequire(msg.sender == bitsuran...\n            tag 75\t\t\trequire(msg.sender == bitsuran...\n              JUMPDEST \t\t\trequire(msg.sender == bitsuran...\n              PUSH 40\t\t\trequire(msg.sender == bitsuran...\n              MLOAD \t\t\trequire(msg.sender == bitsuran...\n              DUP1 \t\t\trequire(msg.sender == bitsuran...\n              SWAP2 \t\t\trequire(msg.sender == bitsuran...\n              SUB \t\t\trequire(msg.sender == bitsuran...\n              SWAP1 \t\t\trequire(msg.sender == bitsuran...\n              REVERT \t\t\trequire(msg.sender == bitsuran...\n            tag 74\t\t\trequire(msg.sender == bitsuran...\n              JUMPDEST \t\t\trequire(msg.sender == bitsuran...\n              PUSH 2\t\t\tminTime\n              SLOAD \t\t\tminTime\n              PUSH 2\t\t\t2\n              PUSH [tag] 78\t\t\t2 * minTime\n              SWAP2 \t\t\t2 * minTime\n              SWAP1 \t\t\t2 * minTime\n              PUSH [tag] 79\t\t\t2 * minTime\n              JUMP \t\t\t2 * minTime\n            tag 78\t\t\t2 * minTime\n              JUMPDEST \t\t\t2 * minTime\n              PUSH 3\t\t\tcreationTime\n              SLOAD \t\t\tcreationTime\n              TIMESTAMP \t\t\tblock.timestamp\n              PUSH [tag] 80\t\t\tblock.timestamp - creationTime\n              SWAP2 \t\t\tblock.timestamp - creationTime\n              SWAP1 \t\t\tblock.timestamp - creationTime\n              PUSH [tag] 81\t\t\tblock.timestamp - creationTime\n              JUMP \t\t\tblock.timestamp - creationTime\n            tag 80\t\t\tblock.timestamp - creationTime\n              JUMPDEST \t\t\tblock.timestamp - creationTime\n              LT \t\t\tblock.timestamp - creationTime...\n              ISZERO \t\t\tblock.timestamp - creationTime...\n              PUSH [tag] 82\t\t\trequire(block.timestamp - crea...\n              JUMPI \t\t\trequire(block.timestamp - crea...\n              PUSH 40\t\t\trequire(block.timestamp - crea...\n              MLOAD \t\t\trequire(block.timestamp - crea...\n              PUSH 8C379A000000000000000000000000000000000000000000000000000000000\t\t\trequire(block.timestamp - crea...\n              DUP2 \t\t\trequire(block.timestamp - crea...\n              MSTORE \t\t\trequire(block.timestamp - crea...\n              PUSH 4\t\t\trequire(block.timestamp - crea...\n              ADD \t\t\trequire(block.timestamp - crea...\n              PUSH [tag] 83\t\t\trequire(block.timestamp - crea...\n              SWAP1 \t\t\trequire(block.timestamp - crea...\n              PUSH [tag] 84\t\t\trequire(block.timestamp - crea...\n              JUMP \t\t\trequire(block.timestamp - crea...\n            tag 83\t\t\trequire(block.timestamp - crea...\n              JUMPDEST \t\t\trequire(block.timestamp - crea...\n              PUSH 40\t\t\trequire(block.timestamp - crea...\n              MLOAD \t\t\trequire(block.timestamp - crea...\n              DUP1 \t\t\trequire(block.timestamp - crea...\n              SWAP2 \t\t\trequire(block.timestamp - crea...\n              SUB \t\t\trequire(block.timestamp - crea...\n              SWAP1 \t\t\trequire(block.timestamp - crea...\n              REVERT \t\t\trequire(block.timestamp - crea...\n            tag 82\t\t\trequire(block.timestamp - crea...\n              JUMPDEST \t\t\trequire(block.timestamp - crea...\n              PUSH 0\t\t\tuint256 totalAmount\n              DUP1 \t\t\tuint256 i\n            tag 85\t\t\tfor (uint256 i = 0; i < _token...\n              JUMPDEST \t\t\tfor (uint256 i = 0; i < _token...\n              DUP3 \t\t\t_tokenIDs\n              MLOAD \t\t\t_tokenIDs.length\n              DUP2 \t\t\ti\n              LT \t\t\ti < _tokenIDs.length\n              ISZERO \t\t\tfor (uint256 i = 0; i < _token...\n              PUSH [tag] 86\t\t\tfor (uint256 i = 0; i < _token...\n              JUMPI \t\t\tfor (uint256 i = 0; i < _token...\n              PUSH 0\t\t\t0\n              PUSH 1\t\t\ttokenBalances\n              PUSH 0\t\t\ttokenBalances[_tokenIDs[i]]\n              DUP6 \t\t\t_tokenIDs\n              DUP5 \t\t\ti\n              DUP2 \t\t\t_tokenIDs[i]\n              MLOAD \t\t\t_tokenIDs[i]\n              DUP2 \t\t\t_tokenIDs[i]\n              LT \t\t\t_tokenIDs[i]\n              PUSH [tag] 88\t\t\t_tokenIDs[i]\n              JUMPI \t\t\t_tokenIDs[i]\n              PUSH [tag] 89\t\t\t_tokenIDs[i]\n              PUSH [tag] 90\t\t\t_tokenIDs[i]\n              JUMP \t\t\t_tokenIDs[i]\n            tag 89\t\t\t_tokenIDs[i]\n              JUMPDEST \t\t\t_tokenIDs[i]\n            tag 88\t\t\t_tokenIDs[i]\n              JUMPDEST \t\t\t_tokenIDs[i]\n              PUSH 20\t\t\t_tokenIDs[i]\n              MUL \t\t\t_tokenIDs[i]\n              PUSH 20\t\t\t_tokenIDs[i]\n              ADD \t\t\t_tokenIDs[i]\n              ADD \t\t\t_tokenIDs[i]\n              MLOAD \t\t\t_tokenIDs[i]\n              DUP2 \t\t\ttokenBalances[_tokenIDs[i]]\n              MSTORE \t\t\ttokenBalances[_tokenIDs[i]]\n              PUSH 20\t\t\ttokenBalances[_tokenIDs[i]]\n              ADD \t\t\ttokenBalances[_tokenIDs[i]]\n              SWAP1 \t\t\ttokenBalances[_tokenIDs[i]]\n              DUP2 \t\t\ttokenBalances[_tokenIDs[i]]\n              MSTORE \t\t\ttokenBalances[_tokenIDs[i]]\n              PUSH 20\t\t\ttokenBalances[_tokenIDs[i]]\n              ADD \t\t\ttokenBalances[_tokenIDs[i]]\n              PUSH 0\t\t\ttokenBalances[_tokenIDs[i]]\n              KECCAK256 \t\t\ttokenBalances[_tokenIDs[i]]\n              SLOAD \t\t\ttokenBalances[_tokenIDs[i]]\n              GT \t\t\ttokenBalances[_tokenIDs[i]] > ...\n              PUSH [tag] 91\t\t\trequire(tokenBalances[_tokenID...\n              JUMPI \t\t\trequire(tokenBalances[_tokenID...\n              PUSH 40\t\t\trequire(tokenBalances[_tokenID...\n              MLOAD \t\t\trequire(tokenBalances[_tokenID...\n              PUSH 8C379A000000000000000000000000000000000000000000000000000000000\t\t\trequire(tokenBalances[_tokenID...\n              DUP2 \t\t\trequire(tokenBalances[_tokenID...\n              MSTORE \t\t\trequire(tokenBalances[_tokenID...\n              PUSH 4\t\t\trequire(tokenBalances[_tokenID...\n              ADD \t\t\trequire(tokenBalances[_tokenID...\n              PUSH [tag] 92\t\t\trequire(tokenBalances[_tokenID...\n              SWAP1 \t\t\trequire(tokenBalances[_tokenID...\n              PUSH [tag] 93\t\t\trequire(tokenBalances[_tokenID...\n              JUMP \t\t\trequire(tokenBalances[_tokenID...\n            tag 92\t\t\trequire(tokenBalances[_tokenID...\n              JUMPDEST \t\t\trequire(tokenBalances[_tokenID...\n              PUSH 40\t\t\trequire(tokenBalances[_tokenID...\n              MLOAD \t\t\trequire(tokenBalances[_tokenID...\n              DUP1 \t\t\trequire(tokenBalances[_tokenID...\n              SWAP2 \t\t\trequire(tokenBalances[_tokenID...\n              SUB \t\t\trequire(tokenBalances[_tokenID...\n              SWAP1 \t\t\trequire(tokenBalances[_tokenID...\n              REVERT \t\t\trequire(tokenBalances[_tokenID...\n            tag 91\t\t\trequire(tokenBalances[_tokenID...\n              JUMPDEST \t\t\trequire(tokenBalances[_tokenID...\n              PUSH 1\t\t\ttokenBalances\n              PUSH 0\t\t\ttokenBalances[_tokenIDs[i]]\n              DUP5 \t\t\t_tokenIDs\n              DUP4 \t\t\ti\n              DUP2 \t\t\t_tokenIDs[i]\n              MLOAD \t\t\t_tokenIDs[i]\n              DUP2 \t\t\t_tokenIDs[i]\n              LT \t\t\t_tokenIDs[i]\n              PUSH [tag] 94\t\t\t_tokenIDs[i]\n              JUMPI \t\t\t_tokenIDs[i]\n              PUSH [tag] 95\t\t\t_tokenIDs[i]\n              PUSH [tag] 90\t\t\t_tokenIDs[i]\n              JUMP \t\t\t_tokenIDs[i]\n            tag 95\t\t\t_tokenIDs[i]\n              JUMPDEST \t\t\t_tokenIDs[i]\n            tag 94\t\t\t_tokenIDs[i]\n              JUMPDEST \t\t\t_tokenIDs[i]\n              PUSH 20\t\t\t_tokenIDs[i]\n              MUL \t\t\t_tokenIDs[i]\n              PUSH 20\t\t\t_tokenIDs[i]\n              ADD \t\t\t_tokenIDs[i]\n              ADD \t\t\t_tokenIDs[i]\n              MLOAD \t\t\t_tokenIDs[i]\n              DUP2 \t\t\ttokenBalances[_tokenIDs[i]]\n              MSTORE \t\t\ttokenBalances[_tokenIDs[i]]\n              PUSH 20\t\t\ttokenBalances[_tokenIDs[i]]\n              ADD \t\t\ttokenBalances[_tokenIDs[i]]\n              SWAP1 \t\t\ttokenBalances[_tokenIDs[i]]\n              DUP2 \t\t\ttokenBalances[_tokenIDs[i]]\n              MSTORE \t\t\ttokenBalances[_tokenIDs[i]]\n              PUSH 20\t\t\ttokenBalances[_tokenIDs[i]]\n              ADD \t\t\ttokenBalances[_tokenIDs[i]]\n              PUSH 0\t\t\ttokenBalances[_tokenIDs[i]]\n              KECCAK256 \t\t\ttokenBalances[_tokenIDs[i]]\n              SLOAD \t\t\ttokenBalances[_tokenIDs[i]]\n              DUP3 \t\t\ttotalAmount += tokenBalances[_...\n              PUSH [tag] 96\t\t\ttotalAmount += tokenBalances[_...\n              SWAP2 \t\t\ttotalAmount += tokenBalances[_...\n              SWAP1 \t\t\ttotalAmount += tokenBalances[_...\n              PUSH [tag] 97\t\t\ttotalAmount += tokenBalances[_...\n              JUMP \t\t\ttotalAmount += tokenBalances[_...\n            tag 96\t\t\ttotalAmount += tokenBalances[_...\n              JUMPDEST \t\t\ttotalAmount += tokenBalances[_...\n              SWAP2 \t\t\ttotalAmount += tokenBalances[_...\n              POP \t\t\ttotalAmount += tokenBalances[_...\n              PUSH 0\t\t\t0\n              PUSH 1\t\t\ttokenBalances\n              PUSH 0\t\t\ttokenBalances[_tokenIDs[i]]\n              DUP6 \t\t\t_tokenIDs\n              DUP5 \t\t\ti\n              DUP2 \t\t\t_tokenIDs[i]\n              MLOAD \t\t\t_tokenIDs[i]\n              DUP2 \t\t\t_tokenIDs[i]\n              LT \t\t\t_tokenIDs[i]\n              PUSH [tag] 98\t\t\t_tokenIDs[i]\n              JUMPI \t\t\t_tokenIDs[i]\n              PUSH [tag] 99\t\t\t_tokenIDs[i]\n              PUSH [tag] 90\t\t\t_tokenIDs[i]\n              JUMP \t\t\t_tokenIDs[i]\n            tag 99\t\t\t_tokenIDs[i]\n              JUMPDEST \t\t\t_tokenIDs[i]\n            tag 98\t\t\t_tokenIDs[i]\n              JUMPDEST \t\t\t_tokenIDs[i]\n              PUSH 20\t\t\t_tokenIDs[i]\n              MUL \t\t\t_tokenIDs[i]\n              PUSH 20\t\t\t_tokenIDs[i]\n              ADD \t\t\t_tokenIDs[i]\n              ADD \t\t\t_tokenIDs[i]\n              MLOAD \t\t\t_tokenIDs[i]\n              DUP2 \t\t\ttokenBalances[_tokenIDs[i]]\n              MSTORE \t\t\ttokenBalances[_tokenIDs[i]]\n              PUSH 20\t\t\ttokenBalances[_tokenIDs[i]]\n              ADD \t\t\ttokenBalances[_tokenIDs[i]]\n              SWAP1 \t\t\ttokenBalances[_tokenIDs[i]]\n              DUP2 \t\t\ttokenBalances[_tokenIDs[i]]\n              MSTORE \t\t\ttokenBalances[_tokenIDs[i]]\n              PUSH 20\t\t\ttokenBalances[_tokenIDs[i]]\n              ADD \t\t\ttokenBalances[_tokenIDs[i]]\n              PUSH 0\t\t\ttokenBalances[_tokenIDs[i]]\n              KECCAK256 \t\t\ttokenBalances[_tokenIDs[i]]\n              DUP2 \t\t\ttokenBalances[_tokenIDs[i]] = ...\n              SWAP1 \t\t\ttokenBalances[_tokenIDs[i]] = ...\n              SSTORE \t\t\ttokenBalances[_tokenIDs[i]] = ...\n              POP \t\t\ttokenBalances[_tokenIDs[i]] = ...\n              DUP1 \t\t\ti++\n              DUP1 \t\t\ti++\n              PUSH [tag] 100\t\t\ti++\n              SWAP1 \t\t\ti++\n              PUSH [tag] 101\t\t\ti++\n              JUMP \t\t\ti++\n            tag 100\t\t\ti++\n              JUMPDEST \t\t\ti++\n              SWAP2 \t\t\ti++\n              POP \t\t\ti++\n              POP \t\t\ti++\n              PUSH [tag] 85\t\t\tfor (uint256 i = 0; i < _token...\n              JUMP \t\t\tfor (uint256 i = 0; i < _token...\n            tag 86\t\t\tfor (uint256 i = 0; i < _token...\n              JUMPDEST \t\t\tfor (uint256 i = 0; i < _token...\n              POP \t\t\tfor (uint256 i = 0; i < _token...\n              DUP3 \t\t\trecipient\n              PUSH FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF\t\t\trecipient.transfer\n              AND \t\t\trecipient.transfer\n              PUSH 8FC\t\t\trecipient.transfer(totalAmount...\n              DUP3 \t\t\ttotalAmount\n              SWAP1 \t\t\trecipient.transfer(totalAmount...\n              DUP2 \t\t\trecipient.transfer(totalAmount...\n              ISZERO \t\t\trecipient.transfer(totalAmount...\n              MUL \t\t\trecipient.transfer(totalAmount...\n              SWAP1 \t\t\trecipient.transfer(totalAmount...\n              PUSH 40\t\t\trecipient.transfer(totalAmount...\n              MLOAD \t\t\trecipient.transfer(totalAmount...\n              PUSH 0\t\t\trecipient.transfer(totalAmount...\n              PUSH 40\t\t\trecipient.transfer(totalAmount...\n              MLOAD \t\t\trecipient.transfer(totalAmount...\n              DUP1 \t\t\trecipient.transfer(totalAmount...\n              DUP4 \t\t\trecipient.transfer(totalAmount...\n              SUB \t\t\trecipient.transfer(totalAmount...\n              DUP2 \t\t\trecipient.transfer(totalAmount...\n              DUP6 \t\t\trecipient.transfer(totalAmount...\n              DUP9 \t\t\trecipient.transfer(totalAmount...\n              DUP9 \t\t\trecipient.transfer(totalAmount...\n              CALL \t\t\trecipient.transfer(totalAmount...\n              SWAP4 \t\t\trecipient.transfer(totalAmount...\n              POP \t\t\trecipient.transfer(totalAmount...\n              POP \t\t\trecipient.transfer(totalAmount...\n              POP \t\t\trecipient.transfer(totalAmount...\n              POP \t\t\trecipient.transfer(totalAmount...\n              ISZERO \t\t\trecipient.transfer(totalAmount...\n              DUP1 \t\t\trecipient.transfer(totalAmount...\n              ISZERO \t\t\trecipient.transfer(totalAmount...\n              PUSH [tag] 103\t\t\trecipient.transfer(totalAmount...\n              JUMPI \t\t\trecipient.transfer(totalAmount...\n              RETURNDATASIZE \t\t\trecipient.transfer(totalAmount...\n              PUSH 0\t\t\trecipient.transfer(totalAmount...\n              DUP1 \t\t\trecipient.transfer(totalAmount...\n              RETURNDATACOPY \t\t\trecipient.transfer(totalAmount...\n              RETURNDATASIZE \t\t\trecipient.transfer(totalAmount...\n              PUSH 0\t\t\trecipient.transfer(totalAmount...\n              REVERT \t\t\trecipient.transfer(totalAmount...\n            tag 103\t\t\trecipient.transfer(totalAmount...\n              JUMPDEST \t\t\trecipient.transfer(totalAmount...\n              POP \t\t\trecipient.transfer(totalAmount...\n              POP \t\t\t{\\n        require(block.times...\n              POP \t\t\tfunction withdraw(address paya...\n              POP \t\t\tfunction withdraw(address paya...\n              JUMP \t\t\tfunction withdraw(address paya...\n            tag 52\t\t\tfunction addBalance(uint256 _t...\n              JUMPDEST \t\t\tfunction addBalance(uint256 _t...\n              PUSH 4\t\t\tbitsurance\n              PUSH 0\t\t\tbitsurance\n              SWAP1 \t\t\tbitsurance\n              SLOAD \t\t\tbitsurance\n              SWAP1 \t\t\tbitsurance\n              PUSH 100\t\t\tbitsurance\n              EXP \t\t\tbitsurance\n              SWAP1 \t\t\tbitsurance\n              DIV \t\t\tbitsurance\n              PUSH FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF\t\t\tbitsurance\n              AND \t\t\tbitsurance\n              PUSH FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF\t\t\tmsg.sender == bitsurance\n              AND \t\t\tmsg.sender == bitsurance\n              CALLER \t\t\tmsg.sender\n              PUSH FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF\t\t\tmsg.sender == bitsurance\n              AND \t\t\tmsg.sender == bitsurance\n              EQ \t\t\tmsg.sender == bitsurance\n              PUSH [tag] 105\t\t\trequire(msg.sender == bitsuran...\n              JUMPI \t\t\trequire(msg.sender == bitsuran...\n              PUSH 40\t\t\trequire(msg.sender == bitsuran...\n              MLOAD \t\t\trequire(msg.sender == bitsuran...\n              PUSH 8C379A000000000000000000000000000000000000000000000000000000000\t\t\trequire(msg.sender == bitsuran...\n              DUP2 \t\t\trequire(msg.sender == bitsuran...\n              MSTORE \t\t\trequire(msg.sender == bitsuran...\n              PUSH 4\t\t\trequire(msg.sender == bitsuran...\n              ADD \t\t\trequire(msg.sender == bitsuran...\n              PUSH [tag] 106\t\t\trequire(msg.sender == bitsuran...\n              SWAP1 \t\t\trequire(msg.sender == bitsuran...\n              PUSH [tag] 76\t\t\trequire(msg.sender == bitsuran...\n              JUMP \t\t\trequire(msg.sender == bitsuran...\n            tag 106\t\t\trequire(msg.sender == bitsuran...\n              JUMPDEST \t\t\trequire(msg.sender == bitsuran...\n              PUSH 40\t\t\trequire(msg.sender == bitsuran...\n              MLOAD \t\t\trequire(msg.sender == bitsuran...\n              DUP1 \t\t\trequire(msg.sender == bitsuran...\n              SWAP2 \t\t\trequire(msg.sender == bitsuran...\n              SUB \t\t\trequire(msg.sender == bitsuran...\n              SWAP1 \t\t\trequire(msg.sender == bitsuran...\n              REVERT \t\t\trequire(msg.sender == bitsuran...\n            tag 105\t\t\trequire(msg.sender == bitsuran...\n              JUMPDEST \t\t\trequire(msg.sender == bitsuran...\n              PUSH 0\t\t\t0\n              PUSH 1\t\t\ttokenBalances\n              PUSH 0\t\t\ttokenBalances[_tokenID]\n              DUP5 \t\t\t_tokenID\n              DUP2 \t\t\ttokenBalances[_tokenID]\n              MSTORE \t\t\ttokenBalances[_tokenID]\n              PUSH 20\t\t\ttokenBalances[_tokenID]\n              ADD \t\t\ttokenBalances[_tokenID]\n              SWAP1 \t\t\ttokenBalances[_tokenID]\n              DUP2 \t\t\ttokenBalances[_tokenID]\n              MSTORE \t\t\ttokenBalances[_tokenID]\n              PUSH 20\t\t\ttokenBalances[_tokenID]\n              ADD \t\t\ttokenBalances[_tokenID]\n              PUSH 0\t\t\ttokenBalances[_tokenID]\n              KECCAK256 \t\t\ttokenBalances[_tokenID]\n              SLOAD \t\t\ttokenBalances[_tokenID]\n              SUB \t\t\ttokenBalances[_tokenID] == 0\n              PUSH [tag] 108\t\t\tif (tokenBalances[_tokenID] ==...\n              JUMPI \t\t\tif (tokenBalances[_tokenID] ==...\n              PUSH 6\t\t\ttokenIds\n              DUP3 \t\t\t_tokenID\n              SWAP1 \t\t\ttokenIds.push(_tokenID)\n              DUP1 \t\t\ttokenIds.push(_tokenID)\n              PUSH 1\t\t\ttokenIds.push(_tokenID)\n              DUP2 \t\t\ttokenIds.push(_tokenID)\n              SLOAD \t\t\ttokenIds.push(_tokenID)\n              ADD \t\t\ttokenIds.push(_tokenID)\n              DUP1 \t\t\ttokenIds.push(_tokenID)\n              DUP3 \t\t\ttokenIds.push(_tokenID)\n              SSTORE \t\t\ttokenIds.push(_tokenID)\n              DUP1 \t\t\ttokenIds.push(_tokenID)\n              SWAP2 \t\t\ttokenIds.push(_tokenID)\n              POP \t\t\ttokenIds.push(_tokenID)\n              POP \t\t\ttokenIds.push(_tokenID)\n              PUSH 1\t\t\ttokenIds.push(_tokenID)\n              SWAP1 \t\t\ttokenIds.push(_tokenID)\n              SUB \t\t\ttokenIds.push(_tokenID)\n              SWAP1 \t\t\ttokenIds.push(_tokenID)\n              PUSH 0\t\t\ttokenIds.push(_tokenID)\n              MSTORE \t\t\ttokenIds.push(_tokenID)\n              PUSH 20\t\t\ttokenIds.push(_tokenID)\n              PUSH 0\t\t\ttokenIds.push(_tokenID)\n              KECCAK256 \t\t\ttokenIds.push(_tokenID)\n              ADD \t\t\ttokenIds.push(_tokenID)\n              PUSH 0\t\t\ttokenIds.push(_tokenID)\n              SWAP1 \t\t\ttokenIds.push(_tokenID)\n              SWAP2 \t\t\ttokenIds.push(_tokenID)\n              SWAP1 \t\t\ttokenIds.push(_tokenID)\n              SWAP2 \t\t\ttokenIds.push(_tokenID)\n              SWAP1 \t\t\ttokenIds.push(_tokenID)\n              SWAP2 \t\t\ttokenIds.push(_tokenID)\n              POP \t\t\ttokenIds.push(_tokenID)\n              SSTORE \t\t\ttokenIds.push(_tokenID)\n            tag 108\t\t\tif (tokenBalances[_tokenID] ==...\n              JUMPDEST \t\t\tif (tokenBalances[_tokenID] ==...\n              DUP1 \t\t\tamount\n              PUSH 1\t\t\ttokenBalances\n              PUSH 0\t\t\ttokenBalances[_tokenID]\n              DUP5 \t\t\t_tokenID\n              DUP2 \t\t\ttokenBalances[_tokenID]\n              MSTORE \t\t\ttokenBalances[_tokenID]\n              PUSH 20\t\t\ttokenBalances[_tokenID]\n              ADD \t\t\ttokenBalances[_tokenID]\n              SWAP1 \t\t\ttokenBalances[_tokenID]\n              DUP2 \t\t\ttokenBalances[_tokenID]\n              MSTORE \t\t\ttokenBalances[_tokenID]\n              PUSH 20\t\t\ttokenBalances[_tokenID]\n              ADD \t\t\ttokenBalances[_tokenID]\n              PUSH 0\t\t\ttokenBalances[_tokenID]\n              KECCAK256 \t\t\ttokenBalances[_tokenID]\n              PUSH 0\t\t\ttokenBalances[_tokenID]\n              DUP3 \t\t\ttokenBalances[_tokenID] += amo...\n              DUP3 \t\t\ttokenBalances[_tokenID] += amo...\n              SLOAD \t\t\ttokenBalances[_tokenID] += amo...\n              PUSH [tag] 110\t\t\ttokenBalances[_tokenID] += amo...\n              SWAP2 \t\t\ttokenBalances[_tokenID] += amo...\n              SWAP1 \t\t\ttokenBalances[_tokenID] += amo...\n              PUSH [tag] 97\t\t\ttokenBalances[_tokenID] += amo...\n              JUMP \t\t\ttokenBalances[_tokenID] += amo...\n            tag 110\t\t\ttokenBalances[_tokenID] += amo...\n              JUMPDEST \t\t\ttokenBalances[_tokenID] += amo...\n              SWAP3 \t\t\ttokenBalances[_tokenID] += amo...\n              POP \t\t\ttokenBalances[_tokenID] += amo...\n              POP \t\t\ttokenBalances[_tokenID] += amo...\n              DUP2 \t\t\ttokenBalances[_tokenID] += amo...\n              SWAP1 \t\t\ttokenBalances[_tokenID] += amo...\n              SSTORE \t\t\ttokenBalances[_tokenID] += amo...\n              POP \t\t\ttokenBalances[_tokenID] += amo...\n              POP \t\t\tfunction addBalance(uint256 _t...\n              POP \t\t\tfunction addBalance(uint256 _t...\n              JUMP \t\t\tfunction addBalance(uint256 _t...\n            tag 56\t\t\tuint256[] public tokenIds\n              JUMPDEST \t\t\tuint256[] public tokenIds\n              PUSH 6\t\t\tuint256[] public tokenIds\n              DUP2 \t\t\tuint256[] public tokenIds\n              DUP2 \t\t\tuint256[] public tokenIds\n              SLOAD \t\t\tuint256[] public tokenIds\n              DUP2 \t\t\tuint256[] public tokenIds\n              LT \t\t\tuint256[] public tokenIds\n              PUSH [tag] 111\t\t\tuint256[] public tokenIds\n              JUMPI \t\t\tuint256[] public tokenIds\n              PUSH 0\t\t\tuint256[] public tokenIds\n              DUP1 \t\t\tuint256[] public tokenIds\n              REVERT \t\t\tuint256[] public tokenIds\n            tag 111\t\t\tuint256[] public tokenIds\n              JUMPDEST \t\t\tuint256[] public tokenIds\n              SWAP1 \t\t\tuint256[] public tokenIds\n              PUSH 0\t\t\tuint256[] public tokenIds\n              MSTORE \t\t\tuint256[] public tokenIds\n              PUSH 20\t\t\tuint256[] public tokenIds\n              PUSH 0\t\t\tuint256[] public tokenIds\n              KECCAK256 \t\t\tuint256[] public tokenIds\n              ADD \t\t\tuint256[] public tokenIds\n              PUSH 0\t\t\tuint256[] public tokenIds\n              SWAP2 \t\t\tuint256[] public tokenIds\n              POP \t\t\tuint256[] public tokenIds\n              SWAP1 \t\t\tuint256[] public tokenIds\n              POP \t\t\tuint256[] public tokenIds\n              SLOAD \t\t\tuint256[] public tokenIds\n              DUP2 \t\t\tuint256[] public tokenIds\n              JUMP \t\t\tuint256[] public tokenIds\n            tag 60\t\t\tuint256 public creationTime\n              JUMPDEST \t\t\tuint256 public creationTime\n              PUSH 3\t\t\tuint256 public creationTime\n              SLOAD \t\t\tuint256 public creationTime\n              DUP2 \t\t\tuint256 public creationTime\n              JUMP \t\t\tuint256 public creationTime\n            tag 65\t\t\tfunction claimFunds(address pa...\n              JUMPDEST \t\t\tfunction claimFunds(address pa...\n              PUSH 4\t\t\tbitsurance\n              PUSH 0\t\t\tbitsurance\n              SWAP1 \t\t\tbitsurance\n              SLOAD \t\t\tbitsurance\n              SWAP1 \t\t\tbitsurance\n              PUSH 100\t\t\tbitsurance\n              EXP \t\t\tbitsurance\n              SWAP1 \t\t\tbitsurance\n              DIV \t\t\tbitsurance\n              PUSH FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF\t\t\tbitsurance\n              AND \t\t\tbitsurance\n              PUSH FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF\t\t\tmsg.sender == bitsurance\n              AND \t\t\tmsg.sender == bitsurance\n              CALLER \t\t\tmsg.sender\n              PUSH FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF\t\t\tmsg.sender == bitsurance\n              AND \t\t\tmsg.sender == bitsurance\n              EQ \t\t\tmsg.sender == bitsurance\n              PUSH [tag] 114\t\t\trequire(msg.sender == bitsuran...\n              JUMPI \t\t\trequire(msg.sender == bitsuran...\n              PUSH 40\t\t\trequire(msg.sender == bitsuran...\n              MLOAD \t\t\trequire(msg.sender == bitsuran...\n              PUSH 8C379A000000000000000000000000000000000000000000000000000000000\t\t\trequire(msg.sender == bitsuran...\n              DUP2 \t\t\trequire(msg.sender == bitsuran...\n              MSTORE \t\t\trequire(msg.sender == bitsuran...\n              PUSH 4\t\t\trequire(msg.sender == bitsuran...\n              ADD \t\t\trequire(msg.sender == bitsuran...\n              PUSH [tag] 115\t\t\trequire(msg.sender == bitsuran...\n              SWAP1 \t\t\trequire(msg.sender == bitsuran...\n              PUSH [tag] 76\t\t\trequire(msg.sender == bitsuran...\n              JUMP \t\t\trequire(msg.sender == bitsuran...\n            tag 115\t\t\trequire(msg.sender == bitsuran...\n              JUMPDEST \t\t\trequire(msg.sender == bitsuran...\n              PUSH 40\t\t\trequire(msg.sender == bitsuran...\n              MLOAD \t\t\trequire(msg.sender == bitsuran...\n              DUP1 \t\t\trequire(msg.sender == bitsuran...\n              SWAP2 \t\t\trequire(msg.sender == bitsuran...\n              SUB \t\t\trequire(msg.sender == bitsuran...\n              SWAP1 \t\t\trequire(msg.sender == bitsuran...\n              REVERT \t\t\trequire(msg.sender == bitsuran...\n            tag 114\t\t\trequire(msg.sender == bitsuran...\n              JUMPDEST \t\t\trequire(msg.sender == bitsuran...\n              PUSH 0\t\t\t0\n              PUSH 1\t\t\ttokenBalances\n              PUSH 0\t\t\ttokenBalances[_tokenID]\n              DUP4 \t\t\t_tokenID\n              DUP2 \t\t\ttokenBalances[_tokenID]\n              MSTORE \t\t\ttokenBalances[_tokenID]\n              PUSH 20\t\t\ttokenBalances[_tokenID]\n              ADD \t\t\ttokenBalances[_tokenID]\n              SWAP1 \t\t\ttokenBalances[_tokenID]\n              DUP2 \t\t\ttokenBalances[_tokenID]\n              MSTORE \t\t\ttokenBalances[_tokenID]\n              PUSH 20\t\t\ttokenBalances[_tokenID]\n              ADD \t\t\ttokenBalances[_tokenID]\n              PUSH 0\t\t\ttokenBalances[_tokenID]\n              KECCAK256 \t\t\ttokenBalances[_tokenID]\n              SLOAD \t\t\ttokenBalances[_tokenID]\n              GT \t\t\ttokenBalances[_tokenID] > 0\n              PUSH [tag] 117\t\t\trequire(tokenBalances[_tokenID...\n              JUMPI \t\t\trequire(tokenBalances[_tokenID...\n              PUSH 40\t\t\trequire(tokenBalances[_tokenID...\n              MLOAD \t\t\trequire(tokenBalances[_tokenID...\n              PUSH 8C379A000000000000000000000000000000000000000000000000000000000\t\t\trequire(tokenBalances[_tokenID...\n              DUP2 \t\t\trequire(tokenBalances[_tokenID...\n              MSTORE \t\t\trequire(tokenBalances[_tokenID...\n              PUSH 4\t\t\trequire(tokenBalances[_tokenID...\n              ADD \t\t\trequire(tokenBalances[_tokenID...\n              PUSH [tag] 118\t\t\trequire(tokenBalances[_tokenID...\n              SWAP1 \t\t\trequire(tokenBalances[_tokenID...\n              PUSH [tag] 93\t\t\trequire(tokenBalances[_tokenID...\n              JUMP \t\t\trequire(tokenBalances[_tokenID...\n            tag 118\t\t\trequire(tokenBalances[_tokenID...\n              JUMPDEST \t\t\trequire(tokenBalances[_tokenID...\n              PUSH 40\t\t\trequire(tokenBalances[_tokenID...\n              MLOAD \t\t\trequire(tokenBalances[_tokenID...\n              DUP1 \t\t\trequire(tokenBalances[_tokenID...\n              SWAP2 \t\t\trequire(tokenBalances[_tokenID...\n              SUB \t\t\trequire(tokenBalances[_tokenID...\n              SWAP1 \t\t\trequire(tokenBalances[_tokenID...\n              REVERT \t\t\trequire(tokenBalances[_tokenID...\n            tag 117\t\t\trequire(tokenBalances[_tokenID...\n              JUMPDEST \t\t\trequire(tokenBalances[_tokenID...\n              PUSH 2\t\t\tminTime\n              SLOAD \t\t\tminTime\n              PUSH 3\t\t\tcreationTime\n              SLOAD \t\t\tcreationTime\n              TIMESTAMP \t\t\tblock.timestamp\n              PUSH [tag] 119\t\t\tblock.timestamp - creationTime\n              SWAP2 \t\t\tblock.timestamp - creationTime\n              SWAP1 \t\t\tblock.timestamp - creationTime\n              PUSH [tag] 81\t\t\tblock.timestamp - creationTime\n              JUMP \t\t\tblock.timestamp - creationTime\n            tag 119\t\t\tblock.timestamp - creationTime\n              JUMPDEST \t\t\tblock.timestamp - creationTime\n              LT \t\t\tblock.timestamp - creationTime...\n              ISZERO \t\t\tblock.timestamp - creationTime...\n              PUSH [tag] 120\t\t\trequire(block.timestamp - crea...\n              JUMPI \t\t\trequire(block.timestamp - crea...\n              PUSH 40\t\t\trequire(block.timestamp - crea...\n              MLOAD \t\t\trequire(block.timestamp - crea...\n              PUSH 8C379A000000000000000000000000000000000000000000000000000000000\t\t\trequire(block.timestamp - crea...\n              DUP2 \t\t\trequire(block.timestamp - crea...\n              MSTORE \t\t\trequire(block.timestamp - crea...\n              PUSH 4\t\t\trequire(block.timestamp - crea...\n              ADD \t\t\trequire(block.timestamp - crea...\n              PUSH [tag] 121\t\t\trequire(block.timestamp - crea...\n              SWAP1 \t\t\trequire(block.timestamp - crea...\n              PUSH [tag] 84\t\t\trequire(block.timestamp - crea...\n              JUMP \t\t\trequire(block.timestamp - crea...\n            tag 121\t\t\trequire(block.timestamp - crea...\n              JUMPDEST \t\t\trequire(block.timestamp - crea...\n              PUSH 40\t\t\trequire(block.timestamp - crea...\n              MLOAD \t\t\trequire(block.timestamp - crea...\n              DUP1 \t\t\trequire(block.timestamp - crea...\n              SWAP2 \t\t\trequire(block.timestamp - crea...\n              SUB \t\t\trequire(block.timestamp - crea...\n              SWAP1 \t\t\trequire(block.timestamp - crea...\n              REVERT \t\t\trequire(block.timestamp - crea...\n            tag 120\t\t\trequire(block.timestamp - crea...\n              JUMPDEST \t\t\trequire(block.timestamp - crea...\n              PUSH 0\t\t\tuint256 amount\n              PUSH 1\t\t\ttokenBalances\n              PUSH 0\t\t\ttokenBalances[_tokenID]\n              DUP4 \t\t\t_tokenID\n              DUP2 \t\t\ttokenBalances[_tokenID]\n              MSTORE \t\t\ttokenBalances[_tokenID]\n              PUSH 20\t\t\ttokenBalances[_tokenID]\n              ADD \t\t\ttokenBalances[_tokenID]\n              SWAP1 \t\t\ttokenBalances[_tokenID]\n              DUP2 \t\t\ttokenBalances[_tokenID]\n              MSTORE \t\t\ttokenBalances[_tokenID]\n              PUSH 20\t\t\ttokenBalances[_tokenID]\n              ADD \t\t\ttokenBalances[_tokenID]\n              PUSH 0\t\t\ttokenBalances[_tokenID]\n              KECCAK256 \t\t\ttokenBalances[_tokenID]\n              SLOAD \t\t\ttokenBalances[_tokenID]\n              SWAP1 \t\t\tuint256 amount = tokenBalances...\n              POP \t\t\tuint256 amount = tokenBalances...\n              PUSH 0\t\t\t0\n              PUSH 1\t\t\ttokenBalances\n              PUSH 0\t\t\ttokenBalances[_tokenID]\n              DUP5 \t\t\t_tokenID\n              DUP2 \t\t\ttokenBalances[_tokenID]\n              MSTORE \t\t\ttokenBalances[_tokenID]\n              PUSH 20\t\t\ttokenBalances[_tokenID]\n              ADD \t\t\ttokenBalances[_tokenID]\n              SWAP1 \t\t\ttokenBalances[_tokenID]\n              DUP2 \t\t\ttokenBalances[_tokenID]\n              MSTORE \t\t\ttokenBalances[_tokenID]\n              PUSH 20\t\t\ttokenBalances[_tokenID]\n              ADD \t\t\ttokenBalances[_tokenID]\n              PUSH 0\t\t\ttokenBalances[_tokenID]\n              KECCAK256 \t\t\ttokenBalances[_tokenID]\n              DUP2 \t\t\ttokenBalances[_tokenID] = 0\n              SWAP1 \t\t\ttokenBalances[_tokenID] = 0\n              SSTORE \t\t\ttokenBalances[_tokenID] = 0\n              POP \t\t\ttokenBalances[_tokenID] = 0\n              DUP3 \t\t\trecipient\n              PUSH FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF\t\t\trecipient.transfer\n              AND \t\t\trecipient.transfer\n              PUSH 8FC\t\t\trecipient.transfer(amount)\n              DUP3 \t\t\tamount\n              SWAP1 \t\t\trecipient.transfer(amount)\n              DUP2 \t\t\trecipient.transfer(amount)\n              ISZERO \t\t\trecipient.transfer(amount)\n              MUL \t\t\trecipient.transfer(amount)\n              SWAP1 \t\t\trecipient.transfer(amount)\n              PUSH 40\t\t\trecipient.transfer(amount)\n              MLOAD \t\t\trecipient.transfer(amount)\n              PUSH 0\t\t\trecipient.transfer(amount)\n              PUSH 40\t\t\trecipient.transfer(amount)\n              MLOAD \t\t\trecipient.transfer(amount)\n              DUP1 \t\t\trecipient.transfer(amount)\n              DUP4 \t\t\trecipient.transfer(amount)\n              SUB \t\t\trecipient.transfer(amount)\n              DUP2 \t\t\trecipient.transfer(amount)\n              DUP6 \t\t\trecipient.transfer(amount)\n              DUP9 \t\t\trecipient.transfer(amount)\n              DUP9 \t\t\trecipient.transfer(amount)\n              CALL \t\t\trecipient.transfer(amount)\n              SWAP4 \t\t\trecipient.transfer(amount)\n              POP \t\t\trecipient.transfer(amount)\n              POP \t\t\trecipient.transfer(amount)\n              POP \t\t\trecipient.transfer(amount)\n              POP \t\t\trecipient.transfer(amount)\n              ISZERO \t\t\trecipient.transfer(amount)\n              DUP1 \t\t\trecipient.transfer(amount)\n              ISZERO \t\t\trecipient.transfer(amount)\n              PUSH [tag] 123\t\t\trecipient.transfer(amount)\n              JUMPI \t\t\trecipient.transfer(amount)\n              RETURNDATASIZE \t\t\trecipient.transfer(amount)\n              PUSH 0\t\t\trecipient.transfer(amount)\n              DUP1 \t\t\trecipient.transfer(amount)\n              RETURNDATACOPY \t\t\trecipient.transfer(amount)\n              RETURNDATASIZE \t\t\trecipient.transfer(amount)\n              PUSH 0\t\t\trecipient.transfer(amount)\n              REVERT \t\t\trecipient.transfer(amount)\n            tag 123\t\t\trecipient.transfer(amount)\n              JUMPDEST \t\t\trecipient.transfer(amount)\n              POP \t\t\trecipient.transfer(amount)\n              POP \t\t\t{\\n        require(tokenBalanc...\n              POP \t\t\tfunction claimFunds(address pa...\n              POP \t\t\tfunction claimFunds(address pa...\n              JUMP \t\t\tfunction claimFunds(address pa...\n            tag 68\t\t\taddress public admin\n              JUMPDEST \t\t\taddress public admin\n              PUSH 5\t\t\taddress public admin\n              PUSH 0\t\t\taddress public admin\n              SWAP1 \t\t\taddress public admin\n              SLOAD \t\t\taddress public admin\n              SWAP1 \t\t\taddress public admin\n              PUSH 100\t\t\taddress public admin\n              EXP \t\t\taddress public admin\n              SWAP1 \t\t\taddress public admin\n              DIV \t\t\taddress public admin\n              PUSH FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF\t\t\taddress public admin\n              AND \t\t\taddress public admin\n              DUP2 \t\t\taddress public admin\n              JUMP \t\t\taddress public admin\n            tag 124\t\t\t-License-Identifier: MIT\\nprag...\n              JUMPDEST \t\t\t-License-Identifier: MIT\\nprag...\n              PUSH 0\t\t\tity ^0.\n              DUP2 \t\t\tpelin\n              SWAP1 \t\t\tt \"@openzeppelin\n              POP \t\t\tt \"@openzeppelin\n              SWAP2 \t\t\t-License-Identifier: MIT\\nprag...\n              SWAP1 \t\t\t-License-Identifier: MIT\\nprag...\n              POP \t\t\t-License-Identifier: MIT\\nprag...\n              JUMP \t\t\t-License-Identifier: MIT\\nprag...\n            tag 125\t\t\token/ERC721/ERC721.sol\";\\nimpo...\n              JUMPDEST \t\t\token/ERC721/ERC721.sol\";\\nimpo...\n              PUSH [tag] 164\t\t\tBurnable.sol\";\\n\\n/**\\n * @\n              DUP2 \t\t\t*\\n * \n              PUSH [tag] 124\t\t\tBurnable.sol\";\\n\\n/**\\n * @\n              JUMP \t\t\tBurnable.sol\";\\n\\n/**\\n * @\n            tag 164\t\t\tBurnable.sol\";\\n\\n/**\\n * @\n              JUMPDEST \t\t\tBurnable.sol\";\\n\\n/**\\n * @\n              DUP3 \t\t\tRC7\n              MSTORE \t\t\tsions/ERC721Burnable.sol\";\\n\\n...\n              POP \t\t\token/ERC721/ERC721.sol\";\\nimpo...\n              POP \t\t\token/ERC721/ERC721.sol\";\\nimpo...\n              JUMP \t\t\token/ERC721/ERC721.sol\";\\nimpo...\n            tag 23\t\t\t* @dev Vault contract that all...\n              JUMPDEST \t\t\t* @dev Vault contract that all...\n              PUSH 0\t\t\tt Va\n              PUSH 20\t\t\tct\n              DUP3 \t\t\tc NFTCont\n              ADD \t\t\tublic NFTContract;\n              SWAP1 \t\t\tddress public NFTContract;\n              POP \t\t\tddress public NFTContract;\n              PUSH [tag] 166\t\t\tng(uint256 => uint256) public ...\n              PUSH 0\t\t\ti\n              DUP4 \t\t\tpublic mi\n              ADD \t\t\t256 public minTim\n              DUP5 \t\t\t\\n    u\n              PUSH [tag] 125\t\t\tng(uint256 => uint256) public ...\n              JUMP \t\t\tng(uint256 => uint256) public ...\n            tag 166\t\t\tng(uint256 => uint256) public ...\n              JUMPDEST \t\t\tng(uint256 => uint256) public ...\n              SWAP3 \t\t\t* @dev Vault contract that all...\n              SWAP2 \t\t\t* @dev Vault contract that all...\n              POP \t\t\t* @dev Vault contract that all...\n              POP \t\t\t* @dev Vault contract that all...\n              JUMP \t\t\t* @dev Vault contract that all...\n            tag 126\t\t\t public creationTime;\\n    add...\n              JUMPDEST \t\t\t public creationTime;\\n    add...\n              PUSH 0\t\t\tlic bit\n              PUSH FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF\t\t\t;\\n\\n    // array to store all...\n              DUP3 \t\t\tc adm\n              AND \t\t\tublic admin;\\n\\n    // array t...\n              SWAP1 \t\t\t  address public admin;\\n\\n   ...\n              POP \t\t\t  address public admin;\\n\\n   ...\n              SWAP2 \t\t\t public creationTime;\\n    add...\n              SWAP1 \t\t\t public creationTime;\\n    add...\n              POP \t\t\t public creationTime;\\n    add...\n              JUMP \t\t\t public creationTime;\\n    add...\n            tag 127\t\t\t256[] public tokenIds;\\n\\n    ...\n              JUMPDEST \t\t\t256[] public tokenIds;\\n\\n    ...\n              PUSH 0\t\t\tonlyBit\n              PUSH [tag] 169\t\t\tre(msg.sender == bitsura\n              DUP3 \t\t\titsur\n              PUSH [tag] 126\t\t\tre(msg.sender == bitsura\n              JUMP \t\t\tre(msg.sender == bitsura\n            tag 169\t\t\tre(msg.sender == bitsura\n              JUMPDEST \t\t\tre(msg.sender == bitsura\n              SWAP1 \t\t\t      require(msg.sender == bi...\n              POP \t\t\t      require(msg.sender == bi...\n              SWAP2 \t\t\t256[] public tokenIds;\\n\\n    ...\n              SWAP1 \t\t\t256[] public tokenIds;\\n\\n    ...\n              POP \t\t\t256[] public tokenIds;\\n\\n    ...\n              JUMP \t\t\t256[] public tokenIds;\\n\\n    ...\n            tag 128\t\t\titsurance contract can call th...\n              JUMPDEST \t\t\titsurance contract can call th...\n              PUSH [tag] 171\t\t\tract constructor that se\n              DUP2 \t\t\that s\n              PUSH [tag] 127\t\t\tract constructor that se\n              JUMP \t\t\tract constructor that se\n            tag 171\t\t\tract constructor that se\n              JUMPDEST \t\t\tract constructor that se\n              DUP3 \t\t\t Co\n              MSTORE \t\t\t * @dev Contract constructor t...\n              POP \t\t\titsurance contract can call th...\n              POP \t\t\titsurance contract can call th...\n              JUMP \t\t\titsurance contract can call th...\n            tag 28\t\t\tlues\\n     * @param NFTContrac...\n              JUMPDEST \t\t\tlues\\n     * @param NFTContrac...\n              PUSH 0\t\t\tmum \n              PUSH 20\t\t\tbe\n              DUP3 \t\t\t * minTim\n              ADD \t\t\tnd 2 * minTime bef\n              SWAP1 \t\t\t claim and 2 * minTime bef\n              POP \t\t\t claim and 2 * minTime bef\n              PUSH [tag] 173\t\t\taw\\n     * @param _admin admin...\n              PUSH 0\t\t\ts\n              DUP4 \t\t\tctor(addr\n              ADD \t\t\tstructor(address \n              DUP5 \t\t\t/\\n    \n              PUSH [tag] 128\t\t\taw\\n     * @param _admin admin...\n              JUMP \t\t\taw\\n     * @param _admin admin...\n            tag 173\t\t\taw\\n     * @param _admin admin...\n              JUMPDEST \t\t\taw\\n     * @param _admin admin...\n              SWAP3 \t\t\tlues\\n     * @param NFTContrac...\n              SWAP2 \t\t\tlues\\n     * @param NFTContrac...\n              POP \t\t\tlues\\n     * @param NFTContrac...\n              POP \t\t\tlues\\n     * @param NFTContrac...\n              JUMP \t\t\tlues\\n     * @param NFTContrac...\n            tag 129\t\t\tress, uint256 _minTime, addres...\n              JUMPDEST \t\t\tress, uint256 _minTime, addres...\n              PUSH 0\t\t\tadmin)\n              PUSH 40\t\t\tTC\n              MLOAD \t\t\tt = NFTCo\n              SWAP1 \t\t\tNFTContract = NFTCo\n              POP \t\t\tNFTContract = NFTCo\n              SWAP1 \t\t\tress, uint256 _minTime, addres...\n              JUMP \t\t\tress, uint256 _minTime, addres...\n            tag 130\t\t\ts;\\n        minTime = _minTime...\n              JUMPDEST \t\t\ts;\\n        minTime = _minTime...\n              PUSH 0\t\t\ta\n              DUP1 \t\t\ts\n              REVERT \t\t\t    bitsuran\n            tag 131\t\t\tder;\\n    }\\n\\n    fallback() ...\n              JUMPDEST \t\t\tder;\\n    }\\n\\n    fallback() ...\n              PUSH 0\t\t\tt\n              DUP1 \t\t\to\n              REVERT \t\t\t Function to\n            tag 132\t\t\t for a specific token ID\\n    ...\n              JUMPDEST \t\t\t for a specific token ID\\n    ...\n              PUSH [tag] 178\t\t\tance is added\\n     * @pa\n              DUP2 \t\t\t * @p\n              PUSH [tag] 124\t\t\tance is added\\n     * @pa\n              JUMP \t\t\tance is added\\n     * @pa\n            tag 178\t\t\tance is added\\n     * @pa\n              JUMPDEST \t\t\tance is added\\n     * @pa\n              DUP2 \t\t\tthe b\n              EQ \t\t\tch the balance is added\\n     ...\n              PUSH [tag] 179\t\t\t ID to which the balance is ad...\n              JUMPI \t\t\t ID to which the balance is ad...\n              PUSH 0\t\t\tn\n              DUP1 \t\t\tm\n              REVERT \t\t\tmount Amount\n            tag 179\t\t\t ID to which the balance is ad...\n              JUMPDEST \t\t\t ID to which the balance is ad...\n              POP \t\t\t for a specific token ID\\n    ...\n              JUMP \t\t\t for a specific token ID\\n    ...\n            tag 133\t\t\t balance\\n     */\\n    functio...\n              JUMPDEST \t\t\t balance\\n     */\\n    functio...\n              PUSH 0\t\t\t56 _t\n              DUP2 \t\t\tonlyBi\n              CALLDATALOAD \t\t\tnt) external onlyBit\n              SWAP1 \t\t\tt256 amount) external onlyBit\n              POP \t\t\tt256 amount) external onlyBit\n              PUSH [tag] 181\t\t\t\\n        if (tokenBalances[_t...\n              DUP2 \t\t\t_toke\n              PUSH [tag] 132\t\t\t\\n        if (tokenBalances[_t...\n              JUMP \t\t\t\\n        if (tokenBalances[_t...\n            tag 181\t\t\t\\n        if (tokenBalances[_t...\n              JUMPDEST \t\t\t\\n        if (tokenBalances[_t...\n              SWAP3 \t\t\t balance\\n     */\\n    functio...\n              SWAP2 \t\t\t balance\\n     */\\n    functio...\n              POP \t\t\t balance\\n     */\\n    functio...\n              POP \t\t\t balance\\n     */\\n    functio...\n              JUMP \t\t\t balance\\n     */\\n    functio...\n            tag 36\t\t\t            tokenIds.push(_tok...\n              JUMPDEST \t\t\t            tokenIds.push(_tok...\n              PUSH 0\t\t\tnBalan\n              PUSH 20\t\t\tn \n              DUP3 \t\t\t\\n    func\n              DUP5 \t\t\tt;\\n    \n              SUB \t\t\tmount;\\n    }\\n\\n    funct\n              SLT \t\t\t+= amount;\\n    }\\n\\n    funct...\n              ISZERO \t\t\tD] += amount;\\n    }\\n\\n    fu...\n              PUSH [tag] 183\t\t\tD] += amount;\\n    }\\n\\n    fu...\n              JUMPI \t\t\tD] += amount;\\n    }\\n\\n    fu...\n              PUSH [tag] 184\t\t\tokenIds() public view returns(...\n              PUSH [tag] 130\t\t\tokenIds() public view returns(...\n              JUMP \t\t\tokenIds() public view returns(...\n            tag 184\t\t\tokenIds() public view returns(...\n              JUMPDEST \t\t\tokenIds() public view returns(...\n            tag 183\t\t\tD] += amount;\\n    }\\n\\n    fu...\n              JUMPDEST \t\t\tD] += amount;\\n    }\\n\\n    fu...\n              PUSH 0\t\t\tf\n              PUSH [tag] 185\t\t\t * @param recipient Recipient ...\n              DUP5 \t\t\tive the\n              DUP3 \t\t\ts to r\n              DUP6 \t\t\tient addr\n              ADD \t\t\tecipient address to re\n              PUSH [tag] 133\t\t\t * @param recipient Recipient ...\n              JUMP \t\t\t * @param recipient Recipient ...\n            tag 185\t\t\t * @param recipient Recipient ...\n              JUMPDEST \t\t\t * @param recipient Recipient ...\n              SWAP2 \t\t\tvault\\n     * @param recipient...\n              POP \t\t\tvault\\n     * @param recipient...\n              POP \t\t\t    * @dev Function to claim f...\n              SWAP3 \t\t\t            tokenIds.push(_tok...\n              SWAP2 \t\t\t            tokenIds.push(_tok...\n              POP \t\t\t            tokenIds.push(_tok...\n              POP \t\t\t            tokenIds.push(_tok...\n              JUMP \t\t\t            tokenIds.push(_tok...\n            tag 134\t\t\tkenID Token ID to claim\\n     ...\n              JUMPDEST \t\t\tkenID Token ID to claim\\n     ...\n              PUSH 0\t\t\table r\n              DUP2 \t\t\texter\n              MLOAD \t\t\tenID) extern\n              SWAP1 \t\t\tnt256 _tokenID) extern\n              POP \t\t\tnt256 _tokenID) extern\n              SWAP2 \t\t\tkenID Token ID to claim\\n     ...\n              SWAP1 \t\t\tkenID Token ID to claim\\n     ...\n              POP \t\t\tkenID Token ID to claim\\n     ...\n              JUMP \t\t\tkenID Token ID to claim\\n     ...\n            tag 135\t\t\tlyBitsurance {\\n        requir...\n              JUMPDEST \t\t\tlyBitsurance {\\n        requir...\n              PUSH 0\t\t\t require(bl\n              DUP3 \t\t\tnTime \n              DUP3 \t\t\teat\n              MSTORE \t\t\tmp - creationTime >\n              PUSH 20\t\t\tn be\n              DUP3 \t\t\tnct\n              ADD \t\t\ts function bef\n              SWAP1 \t\t\t, \"Cannot access function bef\n              POP \t\t\t, \"Cannot access function bef\n              SWAP3 \t\t\tlyBitsurance {\\n        requir...\n              SWAP2 \t\t\tlyBitsurance {\\n        requir...\n              POP \t\t\tlyBitsurance {\\n        requir...\n              POP \t\t\tlyBitsurance {\\n        requir...\n              JUMP \t\t\tlyBitsurance {\\n        requir...\n            tag 136\t\t\tmum time has passed\");\\n      ...\n              JUMPDEST \t\t\tmum time has passed\");\\n      ...\n              PUSH 0\t\t\tnID]\n              DUP2 \t\t\tnce\n              SWAP1 \t\t\tokenBalance\n              POP \t\t\tokenBalance\n              PUSH 20\t\t\tcipi\n              DUP3 \t\t\t   \n              ADD \t\t\t       recipie\n              SWAP1 \t\t\t] = 0;\\n        recipie\n              POP \t\t\t] = 0;\\n        recipie\n              SWAP2 \t\t\tmum time has passed\");\\n      ...\n              SWAP1 \t\t\tmum time has passed\");\\n      ...\n              POP \t\t\tmum time has passed\");\\n      ...\n              JUMP \t\t\tmum time has passed\");\\n      ...\n            tag 137\t\t\tmount);\\n    }\\n\\n    /**\\n   ...\n              JUMPDEST \t\t\tmount);\\n    }\\n\\n    /**\\n   ...\n              PUSH [tag] 190\t\t\t     * @param recipient \n              DUP2 \t\t\tpient\n              PUSH [tag] 124\t\t\t     * @param recipient \n              JUMP \t\t\t     * @param recipient \n            tag 190\t\t\t     * @param recipient \n              JUMPDEST \t\t\t     * @param recipient \n              DUP3 \t\t\taul\n              MSTORE \t\t\tm the vault\\n     * @param rec...\n              POP \t\t\tmount);\\n    }\\n\\n    /**\\n   ...\n              POP \t\t\tmount);\\n    }\\n\\n    /**\\n   ...\n              JUMP \t\t\tmount);\\n    }\\n\\n    /**\\n   ...\n            tag 138\t\t\tress to receive the funds\\n   ...\n              JUMPDEST \t\t\tress to receive the funds\\n   ...\n              PUSH 0\t\t\tto withdra\n              PUSH [tag] 192\t\t\t   function withdraw(address p...\n              DUP4 \t\t\tien\n              DUP4 \t\t\tle rec\n              PUSH [tag] 137\t\t\t   function withdraw(address p...\n              JUMP \t\t\t   function withdraw(address p...\n            tag 192\t\t\t   function withdraw(address p...\n              JUMPDEST \t\t\t   function withdraw(address p...\n              PUSH 20\t\t\ttern\n              DUP4 \t\t\ts) \n              ADD \t\t\tenIDs) externa\n              SWAP1 \t\t\t[] memory _tokenIDs) externa\n              POP \t\t\t[] memory _tokenIDs) externa\n              SWAP3 \t\t\tress to receive the funds\\n   ...\n              SWAP2 \t\t\tress to receive the funds\\n   ...\n              POP \t\t\tress to receive the funds\\n   ...\n              POP \t\t\tress to receive the funds\\n   ...\n              JUMP \t\t\tress to receive the funds\\n   ...\n            tag 139\t\t\tlyBitsurance {\\n        requir...\n              JUMPDEST \t\t\tlyBitsurance {\\n        requir...\n              PUSH 0\t\t\tinTi\n              PUSH 20\t\t\tbefo\n              DUP3 \t\t\ttio\n              ADD \t\t\tfunction befor\n              SWAP1 \t\t\t access function befor\n              POP \t\t\t access function befor\n              SWAP2 \t\t\tlyBitsurance {\\n        requir...\n              SWAP1 \t\t\tlyBitsurance {\\n        requir...\n              POP \t\t\tlyBitsurance {\\n        requir...\n              JUMP \t\t\tlyBitsurance {\\n        requir...\n            tag 140\t\t\tint256 totalAmount = 0;\\n     ...\n              JUMPDEST \t\t\tint256 totalAmount = 0;\\n     ...\n              PUSH 0\t\t\tenI\n              PUSH [tag] 195\t\t\tr this tokenID\");\\n           ...\n              DUP3 \t\t\tenBal\n              PUSH [tag] 134\t\t\tr this tokenID\");\\n           ...\n              JUMP \t\t\tr this tokenID\");\\n           ...\n            tag 195\t\t\tr this tokenID\");\\n           ...\n              JUMPDEST \t\t\tr this tokenID\");\\n           ...\n              PUSH [tag] 196\t\t\t]];\\n            tokenBalances...\n              DUP2 \t\t\tansfer\n              DUP6 \t\t\tnt.\n              PUSH [tag] 135\t\t\t]];\\n            tokenBalances...\n              JUMP \t\t\t]];\\n            tokenBalances...\n            tag 196\t\t\t]];\\n            tokenBalances...\n              JUMPDEST \t\t\t]];\\n            tokenBalances...\n              SWAP4 \t\t\tenIDs[i]];\\n            tokenB...\n              POP \t\t\tenIDs[i]];\\n            tokenB...\n              PUSH [tag] 197\t\t\t*\\n * @title Bitsurance\\n * @d...\n              DUP4 \t\t\t that\n              PUSH [tag] 136\t\t\t*\\n * @title Bitsurance\\n * @d...\n              JUMP \t\t\t*\\n * @title Bitsurance\\n * @d...\n            tag 197\t\t\t*\\n * @title Bitsurance\\n * @d...\n              JUMPDEST \t\t\t*\\n * @title Bitsurance\\n * @d...\n              DUP1 \t\t\tnd mana\n              PUSH 0\t\t\tr\n            tag 198\t\t\treation and operations on them...\n              JUMPDEST \t\t\treation and operations on them...\n              DUP4 \t\t\t them\\n\n              DUP2 \t\t\t \n              LT \t\t\tons on them\\n \n              ISZERO \t\t\treation and operations on them...\n              PUSH [tag] 200\t\t\treation and operations on them...\n              JUMPI \t\t\treation and operations on them...\n              DUP2 \t\t\totalBa\n              MLOAD \t\t\tt256 totalBal\n              PUSH [tag] 201\t\t\t6 minimumWithdrawTime;\\n      ...\n              DUP9 \t\t\t   \n              DUP3 \t\t\turedTokenIds;\n              PUSH [tag] 138\t\t\t6 minimumWithdrawTime;\\n      ...\n              JUMP \t\t\t6 minimumWithdrawTime;\\n      ...\n            tag 201\t\t\t6 minimumWithdrawTime;\\n      ...\n              JUMPDEST \t\t\t6 minimumWithdrawTime;\\n      ...\n              SWAP8 \t\t\t uint256 minimumWithdrawTime;\\...\n              POP \t\t\t uint256 minimumWithdrawTime;\\...\n              PUSH [tag] 202\t\t\tddress;\\n    }\\n    \\n    // A...\n              DUP4 \t\t\tt[] pr\n              PUSH [tag] 139\t\t\tddress;\\n    }\\n    \\n    // A...\n              JUMP \t\t\tddress;\\n    }\\n    \\n    // A...\n            tag 202\t\t\tddress;\\n    }\\n    \\n    // A...\n              JUMPDEST \t\t\tddress;\\n    }\\n    \\n    // A...\n              SWAP3 \t\t\ttContractAddress;\\n    }\\n    ...\n              POP \t\t\ttContractAddress;\\n    }\\n    ...\n              POP \t\t\t  struct VaultDetails {\\n     ...\n              PUSH 1\t\t\ts\n              DUP2 \t\t\tB\n              ADD \t\t\tact Bitsu\n              SWAP1 \t\t\tcontract Bitsu\n              POP \t\t\tcontract Bitsu\n              PUSH [tag] 198\t\t\treation and operations on them...\n              JUMP \t\t\treation and operations on them...\n            tag 200\t\t\treation and operations on them...\n              JUMPDEST \t\t\treation and operations on them...\n              POP \t\t\tion and operat\n              DUP6 \t\t\tven\n              SWAP4 \t\t\t   // Even\n              POP \t\t\t   // Even\n              POP \t\t\t[i]] > 0, \"No balance for this...\n              POP \t\t\t[i]] > 0, \"No balance for this...\n              POP \t\t\t[i]] > 0, \"No balance for this...\n              SWAP3 \t\t\tint256 totalAmount = 0;\\n     ...\n              SWAP2 \t\t\tint256 totalAmount = 0;\\n     ...\n              POP \t\t\tint256 totalAmount = 0;\\n     ...\n              POP \t\t\tint256 totalAmount = 0;\\n     ...\n              JUMP \t\t\tint256 totalAmount = 0;\\n     ...\n            tag 43\t\t\twhen a vault is created\\n    e...\n              JUMPDEST \t\t\twhen a vault is created\\n    e...\n              PUSH 0\t\t\ts to\n              PUSH 20\t\t\tap\n              DUP3 \t\t\tdress\\n   \n              ADD \t\t\tt address\\n    mapp\n              SWAP1 \t\t\ting vault address\\n    mapp\n              POP \t\t\ting vault address\\n    mapp\n              DUP2 \t\t\t   \\n    /\n              DUP2 \t\t\tess;\n              SUB \t\t\tAddress;\\n    \\n    //\n              PUSH 0\t\t\ta\n              DUP4 \t\t\ts) public\n              ADD \t\t\tdress) public vau\n              MSTORE \t\t\ts => address) public vaultAddr...\n              PUSH [tag] 204\t\t\t to NFT contracts\\n    mapping...\n              DUP2 \t\t\tncti\n              DUP5 \t\t\t* @dev\n              PUSH [tag] 140\t\t\t to NFT contracts\\n    mapping...\n              JUMP \t\t\t to NFT contracts\\n    mapping...\n            tag 204\t\t\t to NFT contracts\\n    mapping...\n              JUMPDEST \t\t\t to NFT contracts\\n    mapping...\n              SWAP1 \t\t\tf admins to NFT contracts\\n   ...\n              POP \t\t\tf admins to NFT contracts\\n   ...\n              SWAP3 \t\t\twhen a vault is created\\n    e...\n              SWAP2 \t\t\twhen a vault is created\\n    e...\n              POP \t\t\twhen a vault is created\\n    e...\n              POP \t\t\twhen a vault is created\\n    e...\n              JUMP \t\t\twhen a vault is created\\n    e...\n            tag 141\t\t\t new vault\\n     * @param _NFT...\n              JUMPDEST \t\t\t new vault\\n     * @param _NFT...\n              PUSH 0\t\t\taddress\n              PUSH [tag] 206\t\t\t    * @param _minTime mi\n              DUP3 \t\t\time m\n              PUSH [tag] 126\t\t\t    * @param _minTime mi\n              JUMP \t\t\t    * @param _minTime mi\n            tag 206\t\t\t    * @param _minTime mi\n              JUMPDEST \t\t\t    * @param _minTime mi\n              SWAP1 \t\t\t contract\\n     * @param _minT...\n              POP \t\t\t contract\\n     * @param _minT...\n              SWAP2 \t\t\t new vault\\n     * @param _NFT...\n              SWAP1 \t\t\t new vault\\n     * @param _NFT...\n              POP \t\t\t new vault\\n     * @param _NFT...\n              JUMP \t\t\t new vault\\n     * @param _NFT...\n            tag 142\t\t\tefore withdrawal\\n     */\\n   ...\n              JUMPDEST \t\t\tefore withdrawal\\n     */\\n   ...\n              PUSH [tag] 208\t\t\tnt256 _minTime) public{\\n     ...\n              DUP2 \t\t\t     \n              PUSH [tag] 141\t\t\tnt256 _minTime) public{\\n     ...\n              JUMP \t\t\tnt256 _minTime) public{\\n     ...\n            tag 208\t\t\tnt256 _minTime) public{\\n     ...\n              JUMPDEST \t\t\tnt256 _minTime) public{\\n     ...\n              DUP2 \t\t\tess, \n              EQ \t\t\tddress, uint256 _minTime) publ...\n              PUSH [tag] 209\t\t\tTContractAddress, uint256 _min...\n              JUMPI \t\t\tTContractAddress, uint256 _min...\n              PUSH 0\t\t\td\n              DUP1 \t\t\tt\n              REVERT \t\t\tre(vaultAddr\n            tag 209\t\t\tTContractAddress, uint256 _min...\n              JUMPDEST \t\t\tTContractAddress, uint256 _min...\n              POP \t\t\tefore withdrawal\\n     */\\n   ...\n              JUMP \t\t\tefore withdrawal\\n     */\\n   ...\n            tag 143\t\t\tctAddress] == address(0), \"Vau...\n              JUMPDEST \t\t\tctAddress] == address(0), \"Vau...\n              PUSH 0\t\t\tis NF\n              DUP2 \t\t\t = new\n              CALLDATALOAD \t\t\t  Vault vault = new \n              SWAP1 \t\t\t);\\n        Vault vault = new \n              POP \t\t\t);\\n        Vault vault = new \n              PUSH [tag] 211\t\t\tTContractAddress,_minTime, msg...\n              DUP2 \t\t\ter);\\n\n              PUSH [tag] 142\t\t\tTContractAddress,_minTime, msg...\n              JUMP \t\t\tTContractAddress,_minTime, msg...\n            tag 211\t\t\tTContractAddress,_minTime, msg...\n              JUMPDEST \t\t\tTContractAddress,_minTime, msg...\n              SWAP3 \t\t\tctAddress] == address(0), \"Vau...\n              SWAP2 \t\t\tctAddress] == address(0), \"Vau...\n              POP \t\t\tctAddress] == address(0), \"Vau...\n              POP \t\t\tctAddress] == address(0), \"Vau...\n              JUMP \t\t\tctAddress] == address(0), \"Vau...\n            tag 144\t\t\ts.push(vault);\\n        vaultA...\n              JUMPDEST \t\t\ts.push(vault);\\n        vaultA...\n              PUSH 0\t\t\td\n              DUP1 \t\t\ts\n              REVERT \t\t\tts[msg.sende\n            tag 145\t\t\tContractAddress);\\n        emi...\n              JUMPDEST \t\t\tContractAddress);\\n        emi...\n              PUSH 0\t\t\ted(blo\n              PUSH 1F\t\t\tss\n              NOT \t\t\tddress)\n              PUSH 1F\t\t\tra\n              DUP4 \t\t\tNFTCo\n              ADD \t\t\tt),_NFTContrac\n              AND \t\t\tvault),_NFTContractAddress);\n              SWAP1 \t\t\tp,address(vault),_NFTContractA...\n              POP \t\t\tp,address(vault),_NFTContractA...\n              SWAP2 \t\t\tContractAddress);\\n        emi...\n              SWAP1 \t\t\tContractAddress);\\n        emi...\n              POP \t\t\tContractAddress);\\n        emi...\n              JUMP \t\t\tContractAddress);\\n        emi...\n            tag 146\t\t\t/**\\n     * @dev Function to d...\n              JUMPDEST \t\t\t/**\\n     * @dev Function to d...\n              PUSH 4E487B7100000000000000000000000000000000000000000000000000000000\t\t\t vault\\n     * @param NFTContr...\n              PUSH 0\t\t\to\n              MSTORE \t\t\tnds into a vault\\n     * @para...\n              PUSH 41\t\t\t of \n              PUSH 4\t\t\tr\n              MSTORE \t\t\tnIDs Array of T\n              PUSH 24\t\t\tt\\n  \n              PUSH 0\t\t\to\n              REVERT \t\t\tfor deposit\\n   \n            tag 147\t\t\tmounts Array of corresponding ...\n              JUMPDEST \t\t\tmounts Array of corresponding ...\n              PUSH [tag] 216\t\t\t(address NFTContractAddress\n              DUP3 \t\t\tdres\n              PUSH [tag] 145\t\t\t(address NFTContractAddress\n              JUMP \t\t\t(address NFTContractAddress\n            tag 216\t\t\t(address NFTContractAddress\n              JUMPDEST \t\t\t(address NFTContractAddress\n              DUP2 \t\t\tsitFun\n              ADD \t\t\tdepositFunds(address NFTContra...\n              DUP2 \t\t\tTContr\n              DUP2 \t\t\tltAddress[\n              LT \t\t\tvaultAddress[NFTContra\n              PUSH FFFFFFFFFFFFFFFF\t\t\tble{\\n        requi\n              DUP3 \t\t\t public pa\n              GT \t\t\tts) public payable{\\n        r...\n              OR \t\t\tounts) public payable{\\n      ...\n              ISZERO \t\t\t amounts) public payable{\\n   ...\n              PUSH [tag] 217\t\t\t amounts) public payable{\\n   ...\n              JUMPI \t\t\t amounts) public payable{\\n   ...\n              PUSH [tag] 218\t\t\tdress] != address(\n              PUSH [tag] 146\t\t\tdress] != address(\n              JUMP \t\t\tdress] != address(\n            tag 218\t\t\tdress] != address(\n              JUMPDEST \t\t\tdress] != address(\n            tag 217\t\t\t amounts) public payable{\\n   ...\n              JUMPDEST \t\t\t amounts) public payable{\\n   ...\n              DUP1 \t\t\tists for t\n              PUSH 40\t\t\tt \n              MSTORE \t\t\tdoes not exists for th\n              POP \t\t\teposit\\n     */\\n    function ...\n              POP \t\t\tmounts Array of corresponding ...\n              POP \t\t\tmounts Array of corresponding ...\n              JUMP \t\t\tmounts Array of corresponding ...\n            tag 148\t\t\tact\");\\n        require(_token...\n              JUMPDEST \t\t\tact\");\\n        require(_token...\n              PUSH 0\t\t\tength \n              PUSH [tag] 220\t\t\tismatched arrays\");\\n\n              PUSH [tag] 129\t\t\tismatched arrays\");\\n\n              JUMP \t\t\tismatched arrays\");\\n\n            tag 220\t\t\tismatched arrays\");\\n\n              JUMPDEST \t\t\tismatched arrays\");\\n\n              SWAP1 \t\t\tlength, \"Mismatched arrays\");\\...\n              POP \t\t\tlength, \"Mismatched arrays\");\\...\n              PUSH [tag] 221\t\t\t        uint256 useramount = m...\n              DUP3 \t\t\t msg\n              DUP3 \t\t\tamount\n              PUSH [tag] 147\t\t\t        uint256 useramount = m...\n              JUMP \t\t\t        uint256 useramount = m...\n            tag 221\t\t\t        uint256 useramount = m...\n              JUMPDEST \t\t\t        uint256 useramount = m...\n              SWAP2 \t\t\tact\");\\n        require(_token...\n              SWAP1 \t\t\tact\");\\n        require(_token...\n              POP \t\t\tact\");\\n        require(_token...\n              JUMP \t\t\tact\");\\n        require(_token...\n            tag 149\t\t\t   address payable vaultContra...\n              JUMPDEST \t\t\t   address payable vaultContra...\n              PUSH 0\t\t\tract\n              PUSH FFFFFFFFFFFFFFFF\t\t\tadmin() == msg.sen\n              DUP3 \t\t\te(vaul\n              GT \t\t\tuire(vault.admin() == msg.send\n              ISZERO \t\t\trequire(vault.admin() == msg.s...\n              PUSH [tag] 223\t\t\trequire(vault.admin() == msg.s...\n              JUMPI \t\t\trequire(vault.admin() == msg.s...\n              PUSH [tag] 224\t\t\t \"Only the person \n              PUSH [tag] 146\t\t\t \"Only the person \n              JUMP \t\t\t \"Only the person \n            tag 224\t\t\t \"Only the person \n              JUMPDEST \t\t\t \"Only the person \n            tag 223\t\t\trequire(vault.admin() == msg.s...\n              JUMPDEST \t\t\trequire(vault.admin() == msg.s...\n              PUSH 20\t\t\tnds \n              DUP3 \t\t\tposit \n              MUL \t\t\tn deposit funds i\n              SWAP1 \t\t\tvault can deposit funds i\n              POP \t\t\tvault can deposit funds i\n              PUSH 20\t\t\t    \n              DUP2 \t\t\t  \\n \n              ADD \t\t\t      \\n        \n              SWAP1 \t\t\tt = 0;        \\n        \n              POP \t\t\tt = 0;        \\n        \n              SWAP2 \t\t\t   address payable vaultContra...\n              SWAP1 \t\t\t   address payable vaultContra...\n              POP \t\t\t   address payable vaultContra...\n              JUMP \t\t\t   address payable vaultContra...\n            tag 150\t\t\ti = 0; i < _tokenIDs.length; i...\n              JUMPDEST \t\t\ti = 0; i < _tokenIDs.length; i...\n              PUSH 0\t\t\tn\n              DUP1 \t\t\tm\n              REVERT \t\t\te(useramount\n            tag 151\t\t\ttotal deposit amount\");\\n     ...\n              JUMPDEST \t\t\ttotal deposit amount\");\\n     ...\n              PUSH 0\t\t\tlt.ad\n              PUSH [tag] 227\t\t\t], amounts[i]);\\n        }\\n  ...\n              PUSH [tag] 228\t\t\t        }\\n        vaultContra...\n              DUP5 \t\t\tunt);\\n\n              PUSH [tag] 149\t\t\t        }\\n        vaultContra...\n              JUMP \t\t\t        }\\n        vaultContra...\n            tag 228\t\t\t        }\\n        vaultContra...\n              JUMPDEST \t\t\t        }\\n        vaultContra...\n              PUSH [tag] 148\t\t\t], amounts[i]);\\n        }\\n  ...\n              JUMP \t\t\t], amounts[i]);\\n        }\\n  ...\n            tag 227\t\t\t], amounts[i]);\\n        }\\n  ...\n              JUMPDEST \t\t\t], amounts[i]);\\n        }\\n  ...\n              SWAP1 \t\t\tokenIDs[i], amounts[i]);\\n    ...\n              POP \t\t\tokenIDs[i], amounts[i]);\\n    ...\n              DUP1 \t\t\t@dev \n              DUP4 \t\t\tds fro\n              DUP3 \t\t\traw f\n              MSTORE \t\t\to withdraw funds from\n              PUSH 20\t\t\tontr\n              DUP3 \t\t\tam NF\n              ADD \t\t\t@param NFTContra\n              SWAP1 \t\t\t     * @param NFTContra\n              POP \t\t\t     * @param NFTContra\n              PUSH 20\t\t\tram \n              DUP5 \t\t\t   * @\n              MUL \t\t\tt\\n     * @param t\n              DUP4 \t\t\t contr\n              ADD \t\t\t NFT contract\\n     * @param t...\n              DUP6 \t\t\tDs \n              DUP2 \t\t\t Token\n              GT \t\t\t of Token IDs f\n              ISZERO \t\t\tray of Token IDs for withdrawa...\n              PUSH [tag] 229\t\t\tray of Token IDs for withdrawa...\n              JUMPI \t\t\tray of Token IDs for withdrawa...\n              PUSH [tag] 230\t\t\t    */\\n    function withdrawF...\n              PUSH [tag] 150\t\t\t    */\\n    function withdrawF...\n              JUMP \t\t\t    */\\n    function withdrawF...\n            tag 230\t\t\t    */\\n    function withdrawF...\n              JUMPDEST \t\t\t    */\\n    function withdrawF...\n            tag 229\t\t\tray of Token IDs for withdrawa...\n              JUMPDEST \t\t\tray of Token IDs for withdrawa...\n              DUP4 \t\t\tquire(\n            tag 231\t\t\tyable{\\n        require(vaultA...\n              JUMPDEST \t\t\tyable{\\n        require(vaultA...\n              DUP2 \t\t\ts[NFTC\n              DUP2 \t\t\tddr\n              LT \t\t\tltAddress[NFTCo\n              ISZERO \t\t\tyable{\\n        require(vaultA...\n              PUSH [tag] 233\t\t\tyable{\\n        require(vaultA...\n              JUMPI \t\t\tyable{\\n        require(vaultA...\n              DUP1 \t\t\tntr\n              PUSH [tag] 234\t\t\tdress payable vaultContract_ad...\n              DUP9 \t\t\tss \n              DUP3 \t\t\tntract_add\n              PUSH [tag] 133\t\t\tdress payable vaultContract_ad...\n              JUMP \t\t\tdress payable vaultContract_ad...\n            tag 234\t\t\tdress payable vaultContract_ad...\n              JUMPDEST \t\t\tdress payable vaultContract_ad...\n              DUP5 \t\t\t   \n              MSTORE \t\t\t \\n        address payable vau...\n              PUSH 20\t\t\tTCon\n              DUP5 \t\t\tss(\n              ADD \t\t\tddress(NFTCont\n              SWAP4 \t\t\tntractAddress(NFTCont\n              POP \t\t\tntractAddress(NFTCont\n              POP \t\t\tt does not exists for this NFT...\n              PUSH 20\t\t\tddre\n              DUP2 \t\t\t !=\n              ADD \t\t\tess] != addres\n              SWAP1 \t\t\tactAddress] != addres\n              POP \t\t\tactAddress] != addres\n              PUSH [tag] 231\t\t\tyable{\\n        require(vaultA...\n              JUMP \t\t\tyable{\\n        require(vaultA...\n            tag 233\t\t\tyable{\\n        require(vaultA...\n              JUMPDEST \t\t\tyable{\\n        require(vaultA...\n              POP \t\t\te{\\n        require(va\n              POP \t\t\tBalance(_tokenIDs[i], amounts[...\n              POP \t\t\tBalance(_tokenIDs[i], amounts[...\n              SWAP4 \t\t\ttotal deposit amount\");\\n     ...\n              SWAP3 \t\t\ttotal deposit amount\");\\n     ...\n              POP \t\t\ttotal deposit amount\");\\n     ...\n              POP \t\t\ttotal deposit amount\");\\n     ...\n              POP \t\t\ttotal deposit amount\");\\n     ...\n              JUMP \t\t\ttotal deposit amount\");\\n     ...\n            tag 152\t\t\tult(vaultContract_address);\\n ...\n              JUMPDEST \t\t\tult(vaultContract_address);\\n ...\n              PUSH 0\t\t\t, \"On\n              DUP3 \t\t\t fu\n              PUSH 1F\t\t\tithd\n              DUP4 \t\t\tlt can\n              ADD \t\t\t vault can withdr\n              SLT \t\t\tated vault can withdraw fun\n              PUSH [tag] 236\t\t\ton who created vault can withd...\n              JUMPI \t\t\ton who created vault can withd...\n              PUSH [tag] 237\t\t\t;\\n\\n        vault.withdraw(pa...\n              PUSH [tag] 144\t\t\t;\\n\\n        vault.withdraw(pa...\n              JUMP \t\t\t;\\n\\n        vault.withdraw(pa...\n            tag 237\t\t\t;\\n\\n        vault.withdraw(pa...\n              JUMPDEST \t\t\t;\\n\\n        vault.withdraw(pa...\n            tag 236\t\t\ton who created vault can withd...\n              JUMPDEST \t\t\ton who created vault can withd...\n              DUP2 \t\t\tm a va\n              CALLDATALOAD \t\t\t Token ID from a vau\n              PUSH [tag] 238\t\t\tFTContractAddress address of t...\n              DUP5 \t\t\t  *\n              DUP3 \t\t\tlaim\\n \n              PUSH 20\t\t\tID t\n              DUP7 \t\t\tD Toke\n              ADD \t\t\tkenID Token ID to\n              PUSH [tag] 151\t\t\tFTContractAddress address of t...\n              JUMP \t\t\tFTContractAddress address of t...\n            tag 238\t\t\tFTContractAddress address of t...\n              JUMPDEST \t\t\tFTContractAddress address of t...\n              SWAP2 \t\t\t @param NFTContractAddress add...\n              POP \t\t\t @param NFTContractAddress add...\n              POP \t\t\ty the person who created vault...\n              SWAP3 \t\t\tult(vaultContract_address);\\n ...\n              SWAP2 \t\t\tult(vaultContract_address);\\n ...\n              POP \t\t\tult(vaultContract_address);\\n ...\n              POP \t\t\tult(vaultContract_address);\\n ...\n              JUMP \t\t\tult(vaultContract_address);\\n ...\n            tag 46\t\t\tn claim(address NFTContractAdd...\n              JUMPDEST \t\t\tn claim(address NFTContractAdd...\n              PUSH 0\t\t\tFTCont\n              DUP1 \t\t\tctAddr\n              PUSH 40\t\t\tfo\n              DUP4 \t\t\t not exis\n              DUP6 \t\t\tault do\n              SUB \t\t\t, \"Vault does not exist\n              SLT \t\t\ts(0), \"Vault does not exists f...\n              ISZERO \t\t\tress(0), \"Vault does not exist...\n              PUSH [tag] 240\t\t\tress(0), \"Vault does not exist...\n              JUMPI \t\t\tress(0), \"Vault does not exist...\n              PUSH [tag] 241\t\t\tis NFT contract\");\\n\\n        ...\n              PUSH [tag] 130\t\t\tis NFT contract\");\\n\\n        ...\n              JUMP \t\t\tis NFT contract\");\\n\\n        ...\n            tag 241\t\t\tis NFT contract\");\\n\\n        ...\n              JUMPDEST \t\t\tis NFT contract\");\\n\\n        ...\n            tag 240\t\t\tress(0), \"Vault does not exist...\n              JUMPDEST \t\t\tress(0), \"Vault does not exist...\n              PUSH 0\t\t\tt\n              PUSH [tag] 242\t\t\tetContractAddress(NFTContractA...\n              DUP6 \t\t\tss toke\n              DUP3 \t\t\t    ad\n              DUP7 \t\t\tess));\\n  \n              ADD \t\t\tAddress));\\n        add\n              PUSH [tag] 143\t\t\tetContractAddress(NFTContractA...\n              JUMP \t\t\tetContractAddress(NFTContractA...\n            tag 242\t\t\tetContractAddress(NFTContractA...\n              JUMPDEST \t\t\tetContractAddress(NFTContractA...\n              SWAP3 \t\t\t payable(getContractAddress(NF...\n              POP \t\t\t payable(getContractAddress(NF...\n              POP \t\t\t     address payable vaultCont...\n              PUSH 20\t\t\ten\n              DUP4 \t\t\ter == msg\n              ADD \t\t\tnOwner == msg.send\n              CALLDATALOAD \t\t\t require(tokenOwner == msg.sen...\n              PUSH FFFFFFFFFFFFFFFF\t\t\tf this token!\");\\n \n              DUP2 \t\t\t owner\n              GT \t\t\tthe owner of this token!\");\\n ...\n              ISZERO \t\t\tot the owner of this token!\");...\n              PUSH [tag] 243\t\t\tot the owner of this token!\");...\n              JUMPI \t\t\tot the owner of this token!\");...\n              PUSH [tag] 244\t\t\t   require(asset.getApproved(_...\n              PUSH [tag] 131\t\t\t   require(asset.getApproved(_...\n              JUMP \t\t\t   require(asset.getApproved(_...\n            tag 244\t\t\t   require(asset.getApproved(_...\n              JUMPDEST \t\t\t   require(asset.getApproved(_...\n            tag 243\t\t\tot the owner of this token!\");...\n              JUMPDEST \t\t\tot the owner of this token!\");...\n              PUSH [tag] 245\t\t\t asset.burn(_tokenID);\\n\\n    ...\n              DUP6 \t\t\tg.sende\n              DUP3 \t\t\tayable\n              DUP7 \t\t\tcipient =\n              ADD \t\t\te recipient = payable(\n              PUSH [tag] 152\t\t\t asset.burn(_tokenID);\\n\\n    ...\n              JUMP \t\t\t asset.burn(_tokenID);\\n\\n    ...\n            tag 245\t\t\t asset.burn(_tokenID);\\n\\n    ...\n              JUMPDEST \t\t\t asset.burn(_tokenID);\\n\\n    ...\n              SWAP2 \t\t\t;\\n\\n        asset.burn(_token...\n              POP \t\t\t;\\n\\n        asset.burn(_token...\n              POP \t\t\tf(_tokenID);\\n        \\n      ...\n              SWAP3 \t\t\tn claim(address NFTContractAdd...\n              POP \t\t\tn claim(address NFTContractAdd...\n              SWAP3 \t\t\tn claim(address NFTContractAdd...\n              SWAP1 \t\t\tn claim(address NFTContractAdd...\n              POP \t\t\tn claim(address NFTContractAdd...\n              JUMP \t\t\tn claim(address NFTContractAdd...\n            tag 51\t\t\t= Vault(vaultContract_address)...\n              JUMPDEST \t\t\t= Vault(vaultContract_address)...\n              PUSH 0\t\t\t _toke\n              DUP1 \t\t\tD);\\n  \n              PUSH 40\t\t\te \n              DUP4 \t\t\ton to get\n              DUP6 \t\t\tev Func\n              SUB \t\t\t* @dev Function to get \n              SLT \t\t\t    * @dev Function to get the...\n              ISZERO \t\t\t*\\n     * @dev Function to get...\n              PUSH [tag] 247\t\t\t*\\n     * @dev Function to get...\n              JUMPI \t\t\t*\\n     * @dev Function to get...\n              PUSH [tag] 248\t\t\tract address of the vault\\n   ...\n              PUSH [tag] 130\t\t\tract address of the vault\\n   ...\n              JUMP \t\t\tract address of the vault\\n   ...\n            tag 248\t\t\tract address of the vault\\n   ...\n              JUMPDEST \t\t\tract address of the vault\\n   ...\n            tag 247\t\t\t*\\n     * @dev Function to get...\n              JUMPDEST \t\t\t*\\n     * @dev Function to get...\n              PUSH 0\t\t\tl\n              PUSH [tag] 249\t\t\tunction getContractAddress(add...\n              DUP6 \t\t\ttAddres\n              DUP3 \t\t\tFTCont\n              DUP7 \t\t\ts(address\n              ADD \t\t\tdress(address NFTContr\n              PUSH [tag] 133\t\t\tunction getContractAddress(add...\n              JUMP \t\t\tunction getContractAddress(add...\n            tag 249\t\t\tunction getContractAddress(add...\n              JUMPDEST \t\t\tunction getContractAddress(add...\n              SWAP3 \t\t\t  */\\n    function getContract...\n              POP \t\t\t  */\\n    function getContract...\n              POP \t\t\t * @return Address of the vaul...\n              PUSH 20\t\t\tul\n              PUSH [tag] 250\t\t\tess];\\n    }\\n\\n    /**\\n     ...\n              DUP6 \t\t\tget det\n              DUP3 \t\t\tction \n              DUP7 \t\t\t * @dev F\n              ADD \t\t\t     * @dev Function t\n              PUSH [tag] 133\t\t\tess];\\n    }\\n\\n    /**\\n     ...\n              JUMP \t\t\tess];\\n    }\\n\\n    /**\\n     ...\n            tag 250\t\t\tess];\\n    }\\n\\n    /**\\n     ...\n              JUMPDEST \t\t\tess];\\n    }\\n\\n    /**\\n     ...\n              SWAP2 \t\t\tntractAddress];\\n    }\\n\\n    ...\n              POP \t\t\tntractAddress];\\n    }\\n\\n    ...\n              POP \t\t\ts(address){\\n        return va...\n              SWAP3 \t\t\t= Vault(vaultContract_address)...\n              POP \t\t\t= Vault(vaultContract_address)...\n              SWAP3 \t\t\t= Vault(vaultContract_address)...\n              SWAP1 \t\t\t= Vault(vaultContract_address)...\n              POP \t\t\t= Vault(vaultContract_address)...\n              JUMP \t\t\t= Vault(vaultContract_address)...\n            tag 64\t\t\tiated with the caller\\n     * ...\n              JUMPDEST \t\t\tiated with the caller\\n     * ...\n              PUSH 0\t\t\total b\n              DUP1 \t\t\tance o\n              PUSH 40\t\t\t \\n\n              DUP4 \t\t\tre withdr\n              DUP6 \t\t\ttime be\n              SUB \t\t\tmum time before withdra\n              SLT \t\t\tminimum time before withdraw, ...\n              ISZERO \t\t\tt, minimum time before withdra...\n              PUSH [tag] 252\t\t\tt, minimum time before withdra...\n              JUMPI \t\t\tt, minimum time before withdra...\n              PUSH [tag] 253\t\t\t * array of token ids insured,...\n              PUSH [tag] 130\t\t\t * array of token ids insured,...\n              JUMP \t\t\t * array of token ids insured,...\n            tag 253\t\t\t * array of token ids insured,...\n              JUMPDEST \t\t\t * array of token ids insured,...\n            tag 252\t\t\tt, minimum time before withdra...\n              JUMPDEST \t\t\tt, minimum time before withdra...\n              PUSH 0\t\t\tw\n              PUSH [tag] 254\t\t\t memory) {\\n        address[] ...\n              DUP6 \t\t\tminToNF\n              DUP3 \t\t\tacts =\n              DUP7 \t\t\try nftCon\n              ADD \t\t\tmemory nftContracts = \n              PUSH [tag] 143\t\t\t memory) {\\n        address[] ...\n              JUMP \t\t\t memory) {\\n        address[] ...\n            tag 254\t\t\t memory) {\\n        address[] ...\n              JUMPDEST \t\t\t memory) {\\n        address[] ...\n              SWAP3 \t\t\ttDetails[] memory) {\\n        ...\n              POP \t\t\ttDetails[] memory) {\\n        ...\n              POP \t\t\t getVaultDetails() public view...\n              PUSH 20\t\t\tor\n              PUSH [tag] 255\t\t\t VaultDetails[](nftContracts.l...\n              DUP6 \t\t\t  for (\n              DUP3 \t\t\t;\\n\\n   \n              DUP7 \t\t\tcts.lengt\n              ADD \t\t\tntracts.length);\\n\\n    \n              PUSH [tag] 133\t\t\t VaultDetails[](nftContracts.l...\n              JUMP \t\t\t VaultDetails[](nftContracts.l...\n            tag 255\t\t\t VaultDetails[](nftContracts.l...\n              JUMPDEST \t\t\t VaultDetails[](nftContracts.l...\n              SWAP2 \t\t\trray = new VaultDetails[](nftC...\n              POP \t\t\trray = new VaultDetails[](nftC...\n              POP \t\t\t];\\n        VaultDetails[] mem...\n              SWAP3 \t\t\tiated with the caller\\n     * ...\n              POP \t\t\tiated with the caller\\n     * ...\n              SWAP3 \t\t\tiated with the caller\\n     * ...\n              SWAP1 \t\t\tiated with the caller\\n     * ...\n              POP \t\t\tiated with the caller\\n     * ...\n              JUMP \t\t\tiated with the caller\\n     * ...\n            tag 153\t\t\tacts.length; i++) {\\n         ...\n              JUMPDEST \t\t\tacts.length; i++) {\\n         ...\n              PUSH 0\t\t\ts[i]]));\\n  \n              DUP3 \t\t\tory in\n              DUP3 \t\t\t] m\n              MSTORE \t\t\tint256[] memory ins\n              PUSH 20\t\t\t);\\n \n              DUP3 \t\t\tnId\n              ADD \t\t\tTokenIds();\\n  \n              SWAP1 \t\t\tIds = vault.getTokenIds();\\n  \n              POP \t\t\tIds = vault.getTokenIds();\\n  \n              SWAP3 \t\t\tacts.length; i++) {\\n         ...\n              SWAP2 \t\t\tacts.length; i++) {\\n         ...\n              POP \t\t\tacts.length; i++) {\\n         ...\n              POP \t\t\tacts.length; i++) {\\n         ...\n              JUMP \t\t\tacts.length; i++) {\\n         ...\n            tag 154\t\t\tultDetails memory vaultDetails...\n              JUMPDEST \t\t\tultDetails memory vaultDetails...\n              PUSH 4F6E6C7920426974737572616E636520636F6E74726163742063616E2063616C\t\t\t * vault.minTime(),\\n         ...\n              PUSH 0\t\t\te\n              DUP3 \t\t\thdrawT\n              ADD \t\t\tmWithdrawTime:\n              MSTORE \t\t\t minimumWithdrawTime: 2 * vaul...\n              PUSH 6C20746869732066756E6374696F6E0000000000000000000000000000000000\t\t\t\\n                \n              PUSH 20\t\t\tnI\n              DUP3 \t\t\turedTo\n              ADD \t\t\t insuredTokenId\n              MSTORE \t\t\tkenIds: insuredTokenIds,\\n    ...\n              POP \t\t\tultDetails memory vaultDetails...\n              JUMP \t\t\tultDetails memory vaultDetails...\n            tag 155\t\t\tress: nftContracts[i]\\n       ...\n              JUMPDEST \t\t\tress: nftContracts[i]\\n       ...\n              PUSH 0\t\t\t\n              PUSH [tag] 259\t\t\t\n              PUSH 2F\t\t\t\n              DUP4 \t\t\t\n              PUSH [tag] 153\t\t\t\n              JUMP \t\t\t\n            tag 259\t\t\t\n              JUMPDEST \t\t\t\n              SWAP2 \t\t\t\n              POP \t\t\t\n              PUSH [tag] 260\t\t\t\n              DUP3 \t\t\t\n              PUSH [tag] 154\t\t\t\n              JUMP \t\t\t\n            tag 260\t\t\t\n              JUMPDEST \t\t\t\n              PUSH 40\t\t\t\n              DUP3 \t\t\t\n              ADD \t\t\t\n              SWAP1 \t\t\t\n              POP \t\t\t\n              SWAP2 \t\t\tress: nftContracts[i]\\n       ...\n              SWAP1 \t\t\tress: nftContracts[i]\\n       ...\n              POP \t\t\tress: nftContracts[i]\\n       ...\n              JUMP \t\t\tress: nftContracts[i]\\n       ...\n            tag 76\t\t\t\n              JUMPDEST \t\t\t\n              PUSH 0\t\t\t\n              PUSH 20\t\t\t\n              DUP3 \t\t\t\n              ADD \t\t\t\n              SWAP1 \t\t\t\n              POP \t\t\t\n              DUP2 \t\t\t\n              DUP2 \t\t\t\n              SUB \t\t\t\n              PUSH 0\t\t\t\n              DUP4 \t\t\t\n              ADD \t\t\t\n              MSTORE \t\t\t\n              PUSH [tag] 262\t\t\t\n              DUP2 \t\t\t\n              PUSH [tag] 155\t\t\t\n              JUMP \t\t\t\n            tag 262\t\t\t\n              JUMPDEST \t\t\t\n              SWAP1 \t\t\t\n              POP \t\t\t\n              SWAP2 \t\t\t\n              SWAP1 \t\t\t\n              POP \t\t\t\n              JUMP \t\t\t\n            tag 156\t\t\t\n              JUMPDEST \t\t\t\n              PUSH 4E487B7100000000000000000000000000000000000000000000000000000000\t\t\t\n              PUSH 0\t\t\t\n              MSTORE \t\t\t\n              PUSH 11\t\t\t\n              PUSH 4\t\t\t\n              MSTORE \t\t\t\n              PUSH 24\t\t\t\n              PUSH 0\t\t\t\n              REVERT \t\t\t\n            tag 79\t\t\t\n              JUMPDEST \t\t\t\n              PUSH 0\t\t\t\n              PUSH [tag] 265\t\t\t\n              DUP3 \t\t\t\n              PUSH [tag] 124\t\t\t\n              JUMP \t\t\t\n            tag 265\t\t\t\n              JUMPDEST \t\t\t\n              SWAP2 \t\t\t\n              POP \t\t\t\n              PUSH [tag] 266\t\t\t\n              DUP4 \t\t\t\n              PUSH [tag] 124\t\t\t\n              JUMP \t\t\t\n            tag 266\t\t\t\n              JUMPDEST \t\t\t\n              SWAP3 \t\t\t\n              POP \t\t\t\n              DUP3 \t\t\t\n              DUP3 \t\t\t\n              MUL \t\t\t\n              PUSH [tag] 267\t\t\t\n              DUP2 \t\t\t\n              PUSH [tag] 124\t\t\t\n              JUMP \t\t\t\n            tag 267\t\t\t\n              JUMPDEST \t\t\t\n              SWAP2 \t\t\t\n              POP \t\t\t\n              DUP3 \t\t\t\n              DUP3 \t\t\t\n              DIV \t\t\t\n              DUP5 \t\t\t\n              EQ \t\t\t\n              DUP4 \t\t\t\n              ISZERO \t\t\t\n              OR \t\t\t\n              PUSH [tag] 268\t\t\t\n              JUMPI \t\t\t\n              PUSH [tag] 269\t\t\t\n              PUSH [tag] 156\t\t\t\n              JUMP \t\t\t\n            tag 269\t\t\t\n              JUMPDEST \t\t\t\n            tag 268\t\t\t\n              JUMPDEST \t\t\t\n              POP \t\t\t\n              SWAP3 \t\t\t\n              SWAP2 \t\t\t\n              POP \t\t\t\n              POP \t\t\t\n              JUMP \t\t\t\n            tag 81\t\t\t\n              JUMPDEST \t\t\t\n              PUSH 0\t\t\t\n              PUSH [tag] 271\t\t\t\n              DUP3 \t\t\t\n              PUSH [tag] 124\t\t\t\n              JUMP \t\t\t\n            tag 271\t\t\t\n              JUMPDEST \t\t\t\n              SWAP2 \t\t\t\n              POP \t\t\t\n              PUSH [tag] 272\t\t\t\n              DUP4 \t\t\t\n              PUSH [tag] 124\t\t\t\n              JUMP \t\t\t\n            tag 272\t\t\t\n              JUMPDEST \t\t\t\n              SWAP3 \t\t\t\n              POP \t\t\t\n              DUP3 \t\t\t\n              DUP3 \t\t\t\n              SUB \t\t\t\n              SWAP1 \t\t\t\n              POP \t\t\t\n              DUP2 \t\t\t\n              DUP2 \t\t\t\n              GT \t\t\t\n              ISZERO \t\t\t\n              PUSH [tag] 273\t\t\t\n              JUMPI \t\t\t\n              PUSH [tag] 274\t\t\t\n              PUSH [tag] 156\t\t\t\n              JUMP \t\t\t\n            tag 274\t\t\t\n              JUMPDEST \t\t\t\n            tag 273\t\t\t\n              JUMPDEST \t\t\t\n              SWAP3 \t\t\t\n              SWAP2 \t\t\t\n              POP \t\t\t\n              POP \t\t\t\n              JUMP \t\t\t\n            tag 157\t\t\t\n              JUMPDEST \t\t\t\n              PUSH 43616E6E6F74206163636573732066756E6374696F6E206265666F7265207468\t\t\t\n              PUSH 0\t\t\t\n              DUP3 \t\t\t\n              ADD \t\t\t\n              MSTORE \t\t\t\n              PUSH 65206D696E696D756D2074696D65206861732070617373656400000000000000\t\t\t\n              PUSH 20\t\t\t\n              DUP3 \t\t\t\n              ADD \t\t\t\n              MSTORE \t\t\t\n              POP \t\t\t\n              JUMP \t\t\t\n            tag 158\t\t\t\n              JUMPDEST \t\t\t\n              PUSH 0\t\t\t\n              PUSH [tag] 277\t\t\t\n              PUSH 39\t\t\t\n              DUP4 \t\t\t\n              PUSH [tag] 153\t\t\t\n              JUMP \t\t\t\n            tag 277\t\t\t\n              JUMPDEST \t\t\t\n              SWAP2 \t\t\t\n              POP \t\t\t\n              PUSH [tag] 278\t\t\t\n              DUP3 \t\t\t\n              PUSH [tag] 157\t\t\t\n              JUMP \t\t\t\n            tag 278\t\t\t\n              JUMPDEST \t\t\t\n              PUSH 40\t\t\t\n              DUP3 \t\t\t\n              ADD \t\t\t\n              SWAP1 \t\t\t\n              POP \t\t\t\n              SWAP2 \t\t\t\n              SWAP1 \t\t\t\n              POP \t\t\t\n              JUMP \t\t\t\n            tag 84\t\t\t\n              JUMPDEST \t\t\t\n              PUSH 0\t\t\t\n              PUSH 20\t\t\t\n              DUP3 \t\t\t\n              ADD \t\t\t\n              SWAP1 \t\t\t\n              POP \t\t\t\n              DUP2 \t\t\t\n              DUP2 \t\t\t\n              SUB \t\t\t\n              PUSH 0\t\t\t\n              DUP4 \t\t\t\n              ADD \t\t\t\n              MSTORE \t\t\t\n              PUSH [tag] 280\t\t\t\n              DUP2 \t\t\t\n              PUSH [tag] 158\t\t\t\n              JUMP \t\t\t\n            tag 280\t\t\t\n              JUMPDEST \t\t\t\n              SWAP1 \t\t\t\n              POP \t\t\t\n              SWAP2 \t\t\t\n              SWAP1 \t\t\t\n              POP \t\t\t\n              JUMP \t\t\t\n            tag 90\t\t\t\n              JUMPDEST \t\t\t\n              PUSH 4E487B7100000000000000000000000000000000000000000000000000000000\t\t\t\n              PUSH 0\t\t\t\n              MSTORE \t\t\t\n              PUSH 32\t\t\t\n              PUSH 4\t\t\t\n              MSTORE \t\t\t\n              PUSH 24\t\t\t\n              PUSH 0\t\t\t\n              REVERT \t\t\t\n            tag 159\t\t\t\n              JUMPDEST \t\t\t\n              PUSH 4E6F2062616C616E636520666F72207468697320746F6B656E49440000000000\t\t\t\n              PUSH 0\t\t\t\n              DUP3 \t\t\t\n              ADD \t\t\t\n              MSTORE \t\t\t\n              POP \t\t\t\n              JUMP \t\t\t\n            tag 160\t\t\t\n              JUMPDEST \t\t\t\n              PUSH 0\t\t\t\n              PUSH [tag] 284\t\t\t\n              PUSH 1B\t\t\t\n              DUP4 \t\t\t\n              PUSH [tag] 153\t\t\t\n              JUMP \t\t\t\n            tag 284\t\t\t\n              JUMPDEST \t\t\t\n              SWAP2 \t\t\t\n              POP \t\t\t\n              PUSH [tag] 285\t\t\t\n              DUP3 \t\t\t\n              PUSH [tag] 159\t\t\t\n              JUMP \t\t\t\n            tag 285\t\t\t\n              JUMPDEST \t\t\t\n              PUSH 20\t\t\t\n              DUP3 \t\t\t\n              ADD \t\t\t\n              SWAP1 \t\t\t\n              POP \t\t\t\n              SWAP2 \t\t\t\n              SWAP1 \t\t\t\n              POP \t\t\t\n              JUMP \t\t\t\n            tag 93\t\t\t\n              JUMPDEST \t\t\t\n              PUSH 0\t\t\t\n              PUSH 20\t\t\t\n              DUP3 \t\t\t\n              ADD \t\t\t\n              SWAP1 \t\t\t\n              POP \t\t\t\n              DUP2 \t\t\t\n              DUP2 \t\t\t\n              SUB \t\t\t\n              PUSH 0\t\t\t\n              DUP4 \t\t\t\n              ADD \t\t\t\n              MSTORE \t\t\t\n              PUSH [tag] 287\t\t\t\n              DUP2 \t\t\t\n              PUSH [tag] 160\t\t\t\n              JUMP \t\t\t\n            tag 287\t\t\t\n              JUMPDEST \t\t\t\n              SWAP1 \t\t\t\n              POP \t\t\t\n              SWAP2 \t\t\t\n              SWAP1 \t\t\t\n              POP \t\t\t\n              JUMP \t\t\t\n            tag 97\t\t\t\n              JUMPDEST \t\t\t\n              PUSH 0\t\t\t\n              PUSH [tag] 289\t\t\t\n              DUP3 \t\t\t\n              PUSH [tag] 124\t\t\t\n              JUMP \t\t\t\n            tag 289\t\t\t\n              JUMPDEST \t\t\t\n              SWAP2 \t\t\t\n              POP \t\t\t\n              PUSH [tag] 290\t\t\t\n              DUP4 \t\t\t\n              PUSH [tag] 124\t\t\t\n              JUMP \t\t\t\n            tag 290\t\t\t\n              JUMPDEST \t\t\t\n              SWAP3 \t\t\t\n              POP \t\t\t\n              DUP3 \t\t\t\n              DUP3 \t\t\t\n              ADD \t\t\t\n              SWAP1 \t\t\t\n              POP \t\t\t\n              DUP1 \t\t\t\n              DUP3 \t\t\t\n              GT \t\t\t\n              ISZERO \t\t\t\n              PUSH [tag] 291\t\t\t\n              JUMPI \t\t\t\n              PUSH [tag] 292\t\t\t\n              PUSH [tag] 156\t\t\t\n              JUMP \t\t\t\n            tag 292\t\t\t\n              JUMPDEST \t\t\t\n            tag 291\t\t\t\n              JUMPDEST \t\t\t\n              SWAP3 \t\t\t\n              SWAP2 \t\t\t\n              POP \t\t\t\n              POP \t\t\t\n              JUMP \t\t\t\n            tag 101\t\t\t\n              JUMPDEST \t\t\t\n              PUSH 0\t\t\t\n              PUSH [tag] 294\t\t\t\n              DUP3 \t\t\t\n              PUSH [tag] 124\t\t\t\n              JUMP \t\t\t\n            tag 294\t\t\t\n              JUMPDEST \t\t\t\n              SWAP2 \t\t\t\n              POP \t\t\t\n              PUSH FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF\t\t\t\n              DUP3 \t\t\t\n              SUB \t\t\t\n              PUSH [tag] 295\t\t\t\n              JUMPI \t\t\t\n              PUSH [tag] 296\t\t\t\n              PUSH [tag] 156\t\t\t\n              JUMP \t\t\t\n            tag 296\t\t\t\n              JUMPDEST \t\t\t\n            tag 295\t\t\t\n              JUMPDEST \t\t\t\n              PUSH 1\t\t\t\n              DUP3 \t\t\t\n              ADD \t\t\t\n              SWAP1 \t\t\t\n              POP \t\t\t\n              SWAP2 \t\t\t\n              SWAP1 \t\t\t\n              POP \t\t\t\n              JUMP \t\t\t\n            .data\n"
}